(() => {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
var $04ce9c8dcd7d39f0$exports = {};

$parcel$export($04ce9c8dcd7d39f0$exports, "REVISION", () => $04ce9c8dcd7d39f0$export$3545e07a80636437);
$parcel$export($04ce9c8dcd7d39f0$exports, "MOUSE", () => $04ce9c8dcd7d39f0$export$7177b3e430c2d7ca);
$parcel$export($04ce9c8dcd7d39f0$exports, "TOUCH", () => $04ce9c8dcd7d39f0$export$d46bd3ead7cc759b);
$parcel$export($04ce9c8dcd7d39f0$exports, "CullFaceNone", () => $04ce9c8dcd7d39f0$export$3237e1f2c1ea1f44);
$parcel$export($04ce9c8dcd7d39f0$exports, "CullFaceBack", () => $04ce9c8dcd7d39f0$export$b9a7b4fc5cb15f9b);
$parcel$export($04ce9c8dcd7d39f0$exports, "CullFaceFront", () => $04ce9c8dcd7d39f0$export$b8058bcc7037d3f3);
$parcel$export($04ce9c8dcd7d39f0$exports, "CullFaceFrontBack", () => $04ce9c8dcd7d39f0$export$f24be24dcddeac0d);
$parcel$export($04ce9c8dcd7d39f0$exports, "BasicShadowMap", () => $04ce9c8dcd7d39f0$export$346307dbae2b7447);
$parcel$export($04ce9c8dcd7d39f0$exports, "PCFShadowMap", () => $04ce9c8dcd7d39f0$export$5813f879eee7cd88);
$parcel$export($04ce9c8dcd7d39f0$exports, "PCFSoftShadowMap", () => $04ce9c8dcd7d39f0$export$a47c4b43a1be34f0);
$parcel$export($04ce9c8dcd7d39f0$exports, "VSMShadowMap", () => $04ce9c8dcd7d39f0$export$896ae1ade6c829c4);
$parcel$export($04ce9c8dcd7d39f0$exports, "FrontSide", () => $04ce9c8dcd7d39f0$export$2ede184fc2998901);
$parcel$export($04ce9c8dcd7d39f0$exports, "BackSide", () => $04ce9c8dcd7d39f0$export$d9f0486e75b5ace);
$parcel$export($04ce9c8dcd7d39f0$exports, "DoubleSide", () => $04ce9c8dcd7d39f0$export$3b296b6f144d5b03);
$parcel$export($04ce9c8dcd7d39f0$exports, "TwoPassDoubleSide", () => $04ce9c8dcd7d39f0$export$211211c00f97204d);
$parcel$export($04ce9c8dcd7d39f0$exports, "NoBlending", () => $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba);
$parcel$export($04ce9c8dcd7d39f0$exports, "NormalBlending", () => $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0);
$parcel$export($04ce9c8dcd7d39f0$exports, "AdditiveBlending", () => $04ce9c8dcd7d39f0$export$777d8f9551c2216b);
$parcel$export($04ce9c8dcd7d39f0$exports, "SubtractiveBlending", () => $04ce9c8dcd7d39f0$export$cdfa06f868e2e467);
$parcel$export($04ce9c8dcd7d39f0$exports, "MultiplyBlending", () => $04ce9c8dcd7d39f0$export$4138e1c684b46a20);
$parcel$export($04ce9c8dcd7d39f0$exports, "CustomBlending", () => $04ce9c8dcd7d39f0$export$eda4864c68df1fa2);
$parcel$export($04ce9c8dcd7d39f0$exports, "AddEquation", () => $04ce9c8dcd7d39f0$export$20183a0484ce21a0);
$parcel$export($04ce9c8dcd7d39f0$exports, "SubtractEquation", () => $04ce9c8dcd7d39f0$export$73e0df5177988548);
$parcel$export($04ce9c8dcd7d39f0$exports, "ReverseSubtractEquation", () => $04ce9c8dcd7d39f0$export$28e582859cbec660);
$parcel$export($04ce9c8dcd7d39f0$exports, "MinEquation", () => $04ce9c8dcd7d39f0$export$c8c1508da8d0600c);
$parcel$export($04ce9c8dcd7d39f0$exports, "MaxEquation", () => $04ce9c8dcd7d39f0$export$99948c02fb51055f);
$parcel$export($04ce9c8dcd7d39f0$exports, "ZeroFactor", () => $04ce9c8dcd7d39f0$export$2110f05edf778d3d);
$parcel$export($04ce9c8dcd7d39f0$exports, "OneFactor", () => $04ce9c8dcd7d39f0$export$8805bad65e24940e);
$parcel$export($04ce9c8dcd7d39f0$exports, "SrcColorFactor", () => $04ce9c8dcd7d39f0$export$7fbe15b28d28cf52);
$parcel$export($04ce9c8dcd7d39f0$exports, "OneMinusSrcColorFactor", () => $04ce9c8dcd7d39f0$export$947829af9f2c17f6);
$parcel$export($04ce9c8dcd7d39f0$exports, "SrcAlphaFactor", () => $04ce9c8dcd7d39f0$export$d5773124e86cf28c);
$parcel$export($04ce9c8dcd7d39f0$exports, "OneMinusSrcAlphaFactor", () => $04ce9c8dcd7d39f0$export$11d468cc7f19e971);
$parcel$export($04ce9c8dcd7d39f0$exports, "DstAlphaFactor", () => $04ce9c8dcd7d39f0$export$a78aed1ca2a87192);
$parcel$export($04ce9c8dcd7d39f0$exports, "OneMinusDstAlphaFactor", () => $04ce9c8dcd7d39f0$export$5d0fe17fd8773bac);
$parcel$export($04ce9c8dcd7d39f0$exports, "DstColorFactor", () => $04ce9c8dcd7d39f0$export$ef5f2dd8ffac5574);
$parcel$export($04ce9c8dcd7d39f0$exports, "OneMinusDstColorFactor", () => $04ce9c8dcd7d39f0$export$56b85b2686ab16);
$parcel$export($04ce9c8dcd7d39f0$exports, "SrcAlphaSaturateFactor", () => $04ce9c8dcd7d39f0$export$c05e2a1fc8609506);
$parcel$export($04ce9c8dcd7d39f0$exports, "NeverDepth", () => $04ce9c8dcd7d39f0$export$69025ce147cee220);
$parcel$export($04ce9c8dcd7d39f0$exports, "AlwaysDepth", () => $04ce9c8dcd7d39f0$export$7182eb52ea3b3f04);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessDepth", () => $04ce9c8dcd7d39f0$export$eedccec66ab7ebe);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessEqualDepth", () => $04ce9c8dcd7d39f0$export$296f78a0b892f81a);
$parcel$export($04ce9c8dcd7d39f0$exports, "EqualDepth", () => $04ce9c8dcd7d39f0$export$a60d398fc7b7590e);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterEqualDepth", () => $04ce9c8dcd7d39f0$export$7d7234c1240a1fc4);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterDepth", () => $04ce9c8dcd7d39f0$export$c5e2c52991f30937);
$parcel$export($04ce9c8dcd7d39f0$exports, "NotEqualDepth", () => $04ce9c8dcd7d39f0$export$2f843afa843d8916);
$parcel$export($04ce9c8dcd7d39f0$exports, "MultiplyOperation", () => $04ce9c8dcd7d39f0$export$e50ac29801f1774d);
$parcel$export($04ce9c8dcd7d39f0$exports, "MixOperation", () => $04ce9c8dcd7d39f0$export$9f9d94f963c85479);
$parcel$export($04ce9c8dcd7d39f0$exports, "AddOperation", () => $04ce9c8dcd7d39f0$export$e641dc52bc3494aa);
$parcel$export($04ce9c8dcd7d39f0$exports, "NoToneMapping", () => $04ce9c8dcd7d39f0$export$9fcb6b4294603b2);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearToneMapping", () => $04ce9c8dcd7d39f0$export$98f52c2a46c598ca);
$parcel$export($04ce9c8dcd7d39f0$exports, "ReinhardToneMapping", () => $04ce9c8dcd7d39f0$export$74b25e54b3bcd548);
$parcel$export($04ce9c8dcd7d39f0$exports, "CineonToneMapping", () => $04ce9c8dcd7d39f0$export$932b3dd283d4a366);
$parcel$export($04ce9c8dcd7d39f0$exports, "ACESFilmicToneMapping", () => $04ce9c8dcd7d39f0$export$a0d98fe6d7e4af64);
$parcel$export($04ce9c8dcd7d39f0$exports, "CustomToneMapping", () => $04ce9c8dcd7d39f0$export$2c7b09c1e9abfb5e);
$parcel$export($04ce9c8dcd7d39f0$exports, "UVMapping", () => $04ce9c8dcd7d39f0$export$1beec6768cbb3d2d);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeReflectionMapping", () => $04ce9c8dcd7d39f0$export$8759762a6477f2c4);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeRefractionMapping", () => $04ce9c8dcd7d39f0$export$dc59f8aed047f61d);
$parcel$export($04ce9c8dcd7d39f0$exports, "EquirectangularReflectionMapping", () => $04ce9c8dcd7d39f0$export$d64030b316d3b087);
$parcel$export($04ce9c8dcd7d39f0$exports, "EquirectangularRefractionMapping", () => $04ce9c8dcd7d39f0$export$ee99d97d46898098);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeUVReflectionMapping", () => $04ce9c8dcd7d39f0$export$dbf3e70ff37af79);
$parcel$export($04ce9c8dcd7d39f0$exports, "RepeatWrapping", () => $04ce9c8dcd7d39f0$export$533346c8e8dac0f5);
$parcel$export($04ce9c8dcd7d39f0$exports, "ClampToEdgeWrapping", () => $04ce9c8dcd7d39f0$export$9d9334239a5a5e06);
$parcel$export($04ce9c8dcd7d39f0$exports, "MirroredRepeatWrapping", () => $04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f);
$parcel$export($04ce9c8dcd7d39f0$exports, "NearestFilter", () => $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0);
$parcel$export($04ce9c8dcd7d39f0$exports, "NearestMipmapNearestFilter", () => $04ce9c8dcd7d39f0$export$d129e38cf6feaa8c);
$parcel$export($04ce9c8dcd7d39f0$exports, "NearestMipMapNearestFilter", () => $04ce9c8dcd7d39f0$export$14a4936464a36496);
$parcel$export($04ce9c8dcd7d39f0$exports, "NearestMipmapLinearFilter", () => $04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2);
$parcel$export($04ce9c8dcd7d39f0$exports, "NearestMipMapLinearFilter", () => $04ce9c8dcd7d39f0$export$cbc5b7f5647595d8);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearFilter", () => $04ce9c8dcd7d39f0$export$8a72f490b25c56c8);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearMipmapNearestFilter", () => $04ce9c8dcd7d39f0$export$19a719f377145a13);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearMipMapNearestFilter", () => $04ce9c8dcd7d39f0$export$dbe96bee3fe9dbf0);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearMipmapLinearFilter", () => $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearMipMapLinearFilter", () => $04ce9c8dcd7d39f0$export$90d80f1e3506775f);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedByteType", () => $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10);
$parcel$export($04ce9c8dcd7d39f0$exports, "ByteType", () => $04ce9c8dcd7d39f0$export$545fce0311a9796a);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShortType", () => $04ce9c8dcd7d39f0$export$88572337f312435f);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedShortType", () => $04ce9c8dcd7d39f0$export$c63dc51868b06a9d);
$parcel$export($04ce9c8dcd7d39f0$exports, "IntType", () => $04ce9c8dcd7d39f0$export$5c612977753abe2);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedIntType", () => $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96);
$parcel$export($04ce9c8dcd7d39f0$exports, "FloatType", () => $04ce9c8dcd7d39f0$export$f6d331659b644596);
$parcel$export($04ce9c8dcd7d39f0$exports, "HalfFloatType", () => $04ce9c8dcd7d39f0$export$2697304443f382bc);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedShort4444Type", () => $04ce9c8dcd7d39f0$export$b3969b01faf587f2);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedShort5551Type", () => $04ce9c8dcd7d39f0$export$18886f8ae33e90de);
$parcel$export($04ce9c8dcd7d39f0$exports, "UnsignedInt248Type", () => $04ce9c8dcd7d39f0$export$6c8ea339bfab1301);
$parcel$export($04ce9c8dcd7d39f0$exports, "AlphaFormat", () => $04ce9c8dcd7d39f0$export$988473390501ed4b);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBAFormat", () => $04ce9c8dcd7d39f0$export$3f8bb04b555a363c);
$parcel$export($04ce9c8dcd7d39f0$exports, "LuminanceFormat", () => $04ce9c8dcd7d39f0$export$cc09ccbf6d1ed449);
$parcel$export($04ce9c8dcd7d39f0$exports, "LuminanceAlphaFormat", () => $04ce9c8dcd7d39f0$export$9053a81c4a69c289);
$parcel$export($04ce9c8dcd7d39f0$exports, "DepthFormat", () => $04ce9c8dcd7d39f0$export$c1b6b5136be58045);
$parcel$export($04ce9c8dcd7d39f0$exports, "DepthStencilFormat", () => $04ce9c8dcd7d39f0$export$1e113ac2d0905829);
$parcel$export($04ce9c8dcd7d39f0$exports, "RedFormat", () => $04ce9c8dcd7d39f0$export$4e041a7967d15c4b);
$parcel$export($04ce9c8dcd7d39f0$exports, "RedIntegerFormat", () => $04ce9c8dcd7d39f0$export$aa92e870a709d190);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGFormat", () => $04ce9c8dcd7d39f0$export$6cdf0b461c7ce8a0);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGIntegerFormat", () => $04ce9c8dcd7d39f0$export$1ba1c45f9f77d4d7);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBAIntegerFormat", () => $04ce9c8dcd7d39f0$export$c200e7d26f592f21);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGB_S3TC_DXT1_Format", () => $04ce9c8dcd7d39f0$export$21d1799c6d552fc0);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_S3TC_DXT1_Format", () => $04ce9c8dcd7d39f0$export$afa304c3e981b668);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_S3TC_DXT3_Format", () => $04ce9c8dcd7d39f0$export$d2a1a68024a3e56c);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_S3TC_DXT5_Format", () => $04ce9c8dcd7d39f0$export$9a79c424327dacf9);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGB_PVRTC_4BPPV1_Format", () => $04ce9c8dcd7d39f0$export$19ada9bbb1af3573);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGB_PVRTC_2BPPV1_Format", () => $04ce9c8dcd7d39f0$export$d0f0355bb3d948e4);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_PVRTC_4BPPV1_Format", () => $04ce9c8dcd7d39f0$export$b82296714358084c);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_PVRTC_2BPPV1_Format", () => $04ce9c8dcd7d39f0$export$b71692456c47b6c3);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGB_ETC1_Format", () => $04ce9c8dcd7d39f0$export$6ab91af2d757aee7);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGB_ETC2_Format", () => $04ce9c8dcd7d39f0$export$7800993ef8106a6a);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ETC2_EAC_Format", () => $04ce9c8dcd7d39f0$export$23ed8300a860e7d8);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_4x4_Format", () => $04ce9c8dcd7d39f0$export$dc5570b4a2b92d48);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_5x4_Format", () => $04ce9c8dcd7d39f0$export$68880cd325f8b2fb);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_5x5_Format", () => $04ce9c8dcd7d39f0$export$7d2c0be323373d95);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_6x5_Format", () => $04ce9c8dcd7d39f0$export$22b52da301fc3a3e);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_6x6_Format", () => $04ce9c8dcd7d39f0$export$c009e2cb4a66485e);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_8x5_Format", () => $04ce9c8dcd7d39f0$export$118fff5afa255b63);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_8x6_Format", () => $04ce9c8dcd7d39f0$export$120713c829ae0667);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_8x8_Format", () => $04ce9c8dcd7d39f0$export$c79eeabbf53313e9);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_10x5_Format", () => $04ce9c8dcd7d39f0$export$443cf6567cdd6424);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_10x6_Format", () => $04ce9c8dcd7d39f0$export$6573984fc9840780);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_10x8_Format", () => $04ce9c8dcd7d39f0$export$e7aee563f30091de);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_10x10_Format", () => $04ce9c8dcd7d39f0$export$2eb8634622ddeab7);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_12x10_Format", () => $04ce9c8dcd7d39f0$export$202b1ce7b5d25742);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_ASTC_12x12_Format", () => $04ce9c8dcd7d39f0$export$18ab77abd087e467);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBA_BPTC_Format", () => $04ce9c8dcd7d39f0$export$ce40b115e188bc81);
$parcel$export($04ce9c8dcd7d39f0$exports, "RED_RGTC1_Format", () => $04ce9c8dcd7d39f0$export$b1688df4c4c21670);
$parcel$export($04ce9c8dcd7d39f0$exports, "SIGNED_RED_RGTC1_Format", () => $04ce9c8dcd7d39f0$export$fc15e5d8261eed58);
$parcel$export($04ce9c8dcd7d39f0$exports, "RED_GREEN_RGTC2_Format", () => $04ce9c8dcd7d39f0$export$d220f6ade8463a0f);
$parcel$export($04ce9c8dcd7d39f0$exports, "SIGNED_RED_GREEN_RGTC2_Format", () => $04ce9c8dcd7d39f0$export$768646d09dc1b6ef);
$parcel$export($04ce9c8dcd7d39f0$exports, "LoopOnce", () => $04ce9c8dcd7d39f0$export$d62fdc9d1b1cccad);
$parcel$export($04ce9c8dcd7d39f0$exports, "LoopRepeat", () => $04ce9c8dcd7d39f0$export$dfaf4422ce096e29);
$parcel$export($04ce9c8dcd7d39f0$exports, "LoopPingPong", () => $04ce9c8dcd7d39f0$export$f8f6f2041b78e210);
$parcel$export($04ce9c8dcd7d39f0$exports, "InterpolateDiscrete", () => $04ce9c8dcd7d39f0$export$995b32462a65e855);
$parcel$export($04ce9c8dcd7d39f0$exports, "InterpolateLinear", () => $04ce9c8dcd7d39f0$export$30fac1aace31cf4d);
$parcel$export($04ce9c8dcd7d39f0$exports, "InterpolateSmooth", () => $04ce9c8dcd7d39f0$export$198b11ff4c72bb30);
$parcel$export($04ce9c8dcd7d39f0$exports, "ZeroCurvatureEnding", () => $04ce9c8dcd7d39f0$export$7f795934b84ab523);
$parcel$export($04ce9c8dcd7d39f0$exports, "ZeroSlopeEnding", () => $04ce9c8dcd7d39f0$export$24a4ccb5099273b5);
$parcel$export($04ce9c8dcd7d39f0$exports, "WrapAroundEnding", () => $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee);
$parcel$export($04ce9c8dcd7d39f0$exports, "NormalAnimationBlendMode", () => $04ce9c8dcd7d39f0$export$bcfbbdcf8de7f8cd);
$parcel$export($04ce9c8dcd7d39f0$exports, "AdditiveAnimationBlendMode", () => $04ce9c8dcd7d39f0$export$d875e029ef558d3);
$parcel$export($04ce9c8dcd7d39f0$exports, "TrianglesDrawMode", () => $04ce9c8dcd7d39f0$export$4c28c87c2dc84758);
$parcel$export($04ce9c8dcd7d39f0$exports, "TriangleStripDrawMode", () => $04ce9c8dcd7d39f0$export$b23a071aa286eb29);
$parcel$export($04ce9c8dcd7d39f0$exports, "TriangleFanDrawMode", () => $04ce9c8dcd7d39f0$export$f0d8293634f88842);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearEncoding", () => $04ce9c8dcd7d39f0$export$7207336e4151a112);
$parcel$export($04ce9c8dcd7d39f0$exports, "sRGBEncoding", () => $04ce9c8dcd7d39f0$export$f32388edbb32674);
$parcel$export($04ce9c8dcd7d39f0$exports, "BasicDepthPacking", () => $04ce9c8dcd7d39f0$export$deeb383078690b50);
$parcel$export($04ce9c8dcd7d39f0$exports, "RGBADepthPacking", () => $04ce9c8dcd7d39f0$export$8f910f4c4f73df11);
$parcel$export($04ce9c8dcd7d39f0$exports, "TangentSpaceNormalMap", () => $04ce9c8dcd7d39f0$export$2852a58ebdac27b8);
$parcel$export($04ce9c8dcd7d39f0$exports, "ObjectSpaceNormalMap", () => $04ce9c8dcd7d39f0$export$9990ad26f9db5b2c);
$parcel$export($04ce9c8dcd7d39f0$exports, "NoColorSpace", () => $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51);
$parcel$export($04ce9c8dcd7d39f0$exports, "SRGBColorSpace", () => $04ce9c8dcd7d39f0$export$561f394b24edfcaa);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearSRGBColorSpace", () => $04ce9c8dcd7d39f0$export$42429b3acfb233a4);
$parcel$export($04ce9c8dcd7d39f0$exports, "DisplayP3ColorSpace", () => $04ce9c8dcd7d39f0$export$626af19ae879bdf6);
$parcel$export($04ce9c8dcd7d39f0$exports, "ZeroStencilOp", () => $04ce9c8dcd7d39f0$export$69433f11f42d5527);
$parcel$export($04ce9c8dcd7d39f0$exports, "KeepStencilOp", () => $04ce9c8dcd7d39f0$export$9f542ae4b5baca34);
$parcel$export($04ce9c8dcd7d39f0$exports, "ReplaceStencilOp", () => $04ce9c8dcd7d39f0$export$8a4f28336ef203d3);
$parcel$export($04ce9c8dcd7d39f0$exports, "IncrementStencilOp", () => $04ce9c8dcd7d39f0$export$2928c0231297c036);
$parcel$export($04ce9c8dcd7d39f0$exports, "DecrementStencilOp", () => $04ce9c8dcd7d39f0$export$c0e9611c8a15f9a8);
$parcel$export($04ce9c8dcd7d39f0$exports, "IncrementWrapStencilOp", () => $04ce9c8dcd7d39f0$export$9c2c08927385dcc4);
$parcel$export($04ce9c8dcd7d39f0$exports, "DecrementWrapStencilOp", () => $04ce9c8dcd7d39f0$export$7c74ea00fa1315e6);
$parcel$export($04ce9c8dcd7d39f0$exports, "InvertStencilOp", () => $04ce9c8dcd7d39f0$export$22e2e5726612443);
$parcel$export($04ce9c8dcd7d39f0$exports, "NeverStencilFunc", () => $04ce9c8dcd7d39f0$export$1343870698229224);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessStencilFunc", () => $04ce9c8dcd7d39f0$export$8e1d8ed281997fa6);
$parcel$export($04ce9c8dcd7d39f0$exports, "EqualStencilFunc", () => $04ce9c8dcd7d39f0$export$55648a1cde8329a7);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessEqualStencilFunc", () => $04ce9c8dcd7d39f0$export$2dff107857e6aca2);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterStencilFunc", () => $04ce9c8dcd7d39f0$export$6f93765ab2f451a2);
$parcel$export($04ce9c8dcd7d39f0$exports, "NotEqualStencilFunc", () => $04ce9c8dcd7d39f0$export$6f3fb2d2440f2b76);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterEqualStencilFunc", () => $04ce9c8dcd7d39f0$export$4119cf7b4c98fd5a);
$parcel$export($04ce9c8dcd7d39f0$exports, "AlwaysStencilFunc", () => $04ce9c8dcd7d39f0$export$14cf96713ddd97a8);
$parcel$export($04ce9c8dcd7d39f0$exports, "NeverCompare", () => $04ce9c8dcd7d39f0$export$d9e2d19a747baaab);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessCompare", () => $04ce9c8dcd7d39f0$export$36bcf49c713b3eb7);
$parcel$export($04ce9c8dcd7d39f0$exports, "EqualCompare", () => $04ce9c8dcd7d39f0$export$66f28d946fc6a0d5);
$parcel$export($04ce9c8dcd7d39f0$exports, "LessEqualCompare", () => $04ce9c8dcd7d39f0$export$64eea11eb407ddf1);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterCompare", () => $04ce9c8dcd7d39f0$export$155af022118f3a38);
$parcel$export($04ce9c8dcd7d39f0$exports, "NotEqualCompare", () => $04ce9c8dcd7d39f0$export$67ab95dde6bed156);
$parcel$export($04ce9c8dcd7d39f0$exports, "GreaterEqualCompare", () => $04ce9c8dcd7d39f0$export$1cdcb70d53d65f61);
$parcel$export($04ce9c8dcd7d39f0$exports, "AlwaysCompare", () => $04ce9c8dcd7d39f0$export$187b73a3e352c145);
$parcel$export($04ce9c8dcd7d39f0$exports, "StaticDrawUsage", () => $04ce9c8dcd7d39f0$export$763e8360f4d7f77d);
$parcel$export($04ce9c8dcd7d39f0$exports, "DynamicDrawUsage", () => $04ce9c8dcd7d39f0$export$8505d14ac8546ca);
$parcel$export($04ce9c8dcd7d39f0$exports, "StreamDrawUsage", () => $04ce9c8dcd7d39f0$export$721e63549e51d81e);
$parcel$export($04ce9c8dcd7d39f0$exports, "StaticReadUsage", () => $04ce9c8dcd7d39f0$export$415731dc4f48e299);
$parcel$export($04ce9c8dcd7d39f0$exports, "DynamicReadUsage", () => $04ce9c8dcd7d39f0$export$9e809946455f13bc);
$parcel$export($04ce9c8dcd7d39f0$exports, "StreamReadUsage", () => $04ce9c8dcd7d39f0$export$2ed9499a35b5f832);
$parcel$export($04ce9c8dcd7d39f0$exports, "StaticCopyUsage", () => $04ce9c8dcd7d39f0$export$32ab2503ea19469a);
$parcel$export($04ce9c8dcd7d39f0$exports, "DynamicCopyUsage", () => $04ce9c8dcd7d39f0$export$ab4022c2c3f86315);
$parcel$export($04ce9c8dcd7d39f0$exports, "StreamCopyUsage", () => $04ce9c8dcd7d39f0$export$ba7f1db36a76a970);
$parcel$export($04ce9c8dcd7d39f0$exports, "GLSL1", () => $04ce9c8dcd7d39f0$export$43600cc67fabd9f);
$parcel$export($04ce9c8dcd7d39f0$exports, "GLSL3", () => $04ce9c8dcd7d39f0$export$f63012db5506e7dd);
$parcel$export($04ce9c8dcd7d39f0$exports, "_SRGBAFormat", () => $04ce9c8dcd7d39f0$export$ca1dce8b5e1de74d);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLCoordinateSystem", () => $04ce9c8dcd7d39f0$export$5a0e9190d10875d3);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGPUCoordinateSystem", () => $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac);
$parcel$export($04ce9c8dcd7d39f0$exports, "EventDispatcher", () => $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a);
$parcel$export($04ce9c8dcd7d39f0$exports, "MathUtils", () => $04ce9c8dcd7d39f0$export$6a7ef315a0d1ef07);
$parcel$export($04ce9c8dcd7d39f0$exports, "Vector2", () => $04ce9c8dcd7d39f0$export$c977b3e384af9ae1);
$parcel$export($04ce9c8dcd7d39f0$exports, "Matrix3", () => $04ce9c8dcd7d39f0$export$8ff26dafa08918);
$parcel$export($04ce9c8dcd7d39f0$exports, "ColorManagement", () => $04ce9c8dcd7d39f0$export$5e6fd513f44698c);
$parcel$export($04ce9c8dcd7d39f0$exports, "ImageUtils", () => $04ce9c8dcd7d39f0$export$698882cf06df44aa);
$parcel$export($04ce9c8dcd7d39f0$exports, "Source", () => $04ce9c8dcd7d39f0$export$1d2df86270c81ecb);
$parcel$export($04ce9c8dcd7d39f0$exports, "Texture", () => $04ce9c8dcd7d39f0$export$5431306cf43de24a);
$parcel$export($04ce9c8dcd7d39f0$exports, "Vector4", () => $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3);
$parcel$export($04ce9c8dcd7d39f0$exports, "RenderTarget", () => $04ce9c8dcd7d39f0$export$efcb1f8bf367cbfb);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLRenderTarget", () => $04ce9c8dcd7d39f0$export$3c052beb2e51e23f);
$parcel$export($04ce9c8dcd7d39f0$exports, "DataArrayTexture", () => $04ce9c8dcd7d39f0$export$dfac6c8e811406a3);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLArrayRenderTarget", () => $04ce9c8dcd7d39f0$export$c77a02c11ed180c7);
$parcel$export($04ce9c8dcd7d39f0$exports, "Data3DTexture", () => $04ce9c8dcd7d39f0$export$d7a3086320f856db);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGL3DRenderTarget", () => $04ce9c8dcd7d39f0$export$7ee06591009639df);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLMultipleRenderTargets", () => $04ce9c8dcd7d39f0$export$bd934554fb721730);
$parcel$export($04ce9c8dcd7d39f0$exports, "Quaternion", () => $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3);
$parcel$export($04ce9c8dcd7d39f0$exports, "Vector3", () => $04ce9c8dcd7d39f0$export$64b5c384219d3699);
$parcel$export($04ce9c8dcd7d39f0$exports, "Box3", () => $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3);
$parcel$export($04ce9c8dcd7d39f0$exports, "Sphere", () => $04ce9c8dcd7d39f0$export$805e8b72413ccaba);
$parcel$export($04ce9c8dcd7d39f0$exports, "Ray", () => $04ce9c8dcd7d39f0$export$a186db52eed6d40e);
$parcel$export($04ce9c8dcd7d39f0$exports, "Matrix4", () => $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5);
$parcel$export($04ce9c8dcd7d39f0$exports, "Euler", () => $04ce9c8dcd7d39f0$export$d93cc409a0768c5f);
$parcel$export($04ce9c8dcd7d39f0$exports, "Layers", () => $04ce9c8dcd7d39f0$export$89312ce47c0ca777);
$parcel$export($04ce9c8dcd7d39f0$exports, "Object3D", () => $04ce9c8dcd7d39f0$export$e4dd07dff30cc924);
$parcel$export($04ce9c8dcd7d39f0$exports, "Triangle", () => $04ce9c8dcd7d39f0$export$5a465592bfe74b48);
$parcel$export($04ce9c8dcd7d39f0$exports, "Material", () => $04ce9c8dcd7d39f0$export$a2d8b23205c25948);
$parcel$export($04ce9c8dcd7d39f0$exports, "Color", () => $04ce9c8dcd7d39f0$export$892596cec99bc70e);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshBasicMaterial", () => $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5);
$parcel$export($04ce9c8dcd7d39f0$exports, "DataUtils", () => $04ce9c8dcd7d39f0$export$11ce8b759162cc80);
$parcel$export($04ce9c8dcd7d39f0$exports, "BufferAttribute", () => $04ce9c8dcd7d39f0$export$8dea267bd6bde117);
$parcel$export($04ce9c8dcd7d39f0$exports, "Int8BufferAttribute", () => $04ce9c8dcd7d39f0$export$f9ff2d6a20248cbf);
$parcel$export($04ce9c8dcd7d39f0$exports, "Uint8BufferAttribute", () => $04ce9c8dcd7d39f0$export$cacc90cf35d11cdd);
$parcel$export($04ce9c8dcd7d39f0$exports, "Uint8ClampedBufferAttribute", () => $04ce9c8dcd7d39f0$export$baaa85a1a812c157);
$parcel$export($04ce9c8dcd7d39f0$exports, "Int16BufferAttribute", () => $04ce9c8dcd7d39f0$export$2b755a102ccdcefe);
$parcel$export($04ce9c8dcd7d39f0$exports, "Uint16BufferAttribute", () => $04ce9c8dcd7d39f0$export$640a853f68025f2e);
$parcel$export($04ce9c8dcd7d39f0$exports, "Int32BufferAttribute", () => $04ce9c8dcd7d39f0$export$46b369aed2968a0a);
$parcel$export($04ce9c8dcd7d39f0$exports, "Uint32BufferAttribute", () => $04ce9c8dcd7d39f0$export$7eb8c9fa25cd5bd6);
$parcel$export($04ce9c8dcd7d39f0$exports, "Float16BufferAttribute", () => $04ce9c8dcd7d39f0$export$dbd3698c64958d69);
$parcel$export($04ce9c8dcd7d39f0$exports, "Float32BufferAttribute", () => $04ce9c8dcd7d39f0$export$cbe7a62641830ebd);
$parcel$export($04ce9c8dcd7d39f0$exports, "Float64BufferAttribute", () => $04ce9c8dcd7d39f0$export$9e0ade74842adbb8);
$parcel$export($04ce9c8dcd7d39f0$exports, "BufferGeometry", () => $04ce9c8dcd7d39f0$export$b7be63a67df8959);
$parcel$export($04ce9c8dcd7d39f0$exports, "Mesh", () => $04ce9c8dcd7d39f0$export$e176487c05830cc5);
$parcel$export($04ce9c8dcd7d39f0$exports, "BoxGeometry", () => $04ce9c8dcd7d39f0$export$33e43285f7406bd5);
$parcel$export($04ce9c8dcd7d39f0$exports, "UniformsUtils", () => $04ce9c8dcd7d39f0$export$d8ecdf8615bfea69);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShaderMaterial", () => $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d);
$parcel$export($04ce9c8dcd7d39f0$exports, "Camera", () => $04ce9c8dcd7d39f0$export$79f141de891a5fed);
$parcel$export($04ce9c8dcd7d39f0$exports, "PerspectiveCamera", () => $04ce9c8dcd7d39f0$export$74e4ae24825f68d7);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeCamera", () => $04ce9c8dcd7d39f0$export$d0cdd0bd804995de);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeTexture", () => $04ce9c8dcd7d39f0$export$ee2e5a18258a4049);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLCubeRenderTarget", () => $04ce9c8dcd7d39f0$export$ac386671d651941e);
$parcel$export($04ce9c8dcd7d39f0$exports, "Plane", () => $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0);
$parcel$export($04ce9c8dcd7d39f0$exports, "Frustum", () => $04ce9c8dcd7d39f0$export$35efe6f4c85463d2);
$parcel$export($04ce9c8dcd7d39f0$exports, "PlaneGeometry", () => $04ce9c8dcd7d39f0$export$967d831af31f69ce);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShaderChunk", () => $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b);
$parcel$export($04ce9c8dcd7d39f0$exports, "UniformsLib", () => $04ce9c8dcd7d39f0$export$6643083551874bf5);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShaderLib", () => $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014);
$parcel$export($04ce9c8dcd7d39f0$exports, "OrthographicCamera", () => $04ce9c8dcd7d39f0$export$9ebf355ee4ed261b);
$parcel$export($04ce9c8dcd7d39f0$exports, "PMREMGenerator", () => $04ce9c8dcd7d39f0$export$6add42717753e221);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshDepthMaterial", () => $04ce9c8dcd7d39f0$export$2698c22ec13825db);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshDistanceMaterial", () => $04ce9c8dcd7d39f0$export$33e187ed002f2a19);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLUtils", () => $04ce9c8dcd7d39f0$export$ddaebcad857649a8);
$parcel$export($04ce9c8dcd7d39f0$exports, "ArrayCamera", () => $04ce9c8dcd7d39f0$export$56b937d9e5581166);
$parcel$export($04ce9c8dcd7d39f0$exports, "Group", () => $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4);
$parcel$export($04ce9c8dcd7d39f0$exports, "DepthTexture", () => $04ce9c8dcd7d39f0$export$fc830aa069cc8c2f);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGLRenderer", () => $04ce9c8dcd7d39f0$export$f6cc00ef28d7cf97);
$parcel$export($04ce9c8dcd7d39f0$exports, "WebGL1Renderer", () => $04ce9c8dcd7d39f0$export$a2f65229194348f9);
$parcel$export($04ce9c8dcd7d39f0$exports, "FogExp2", () => $04ce9c8dcd7d39f0$export$6f1519f023b8d0f6);
$parcel$export($04ce9c8dcd7d39f0$exports, "Fog", () => $04ce9c8dcd7d39f0$export$3c890837b09508d4);
$parcel$export($04ce9c8dcd7d39f0$exports, "Scene", () => $04ce9c8dcd7d39f0$export$38af1803e3442a7f);
$parcel$export($04ce9c8dcd7d39f0$exports, "InterleavedBuffer", () => $04ce9c8dcd7d39f0$export$3d5cd879f108f53f);
$parcel$export($04ce9c8dcd7d39f0$exports, "InterleavedBufferAttribute", () => $04ce9c8dcd7d39f0$export$920b6d07334599c7);
$parcel$export($04ce9c8dcd7d39f0$exports, "SpriteMaterial", () => $04ce9c8dcd7d39f0$export$5ec7dd1c6994bf8e);
$parcel$export($04ce9c8dcd7d39f0$exports, "Sprite", () => $04ce9c8dcd7d39f0$export$3075603db8e6204c);
$parcel$export($04ce9c8dcd7d39f0$exports, "LOD", () => $04ce9c8dcd7d39f0$export$112e7237be0c5f30);
$parcel$export($04ce9c8dcd7d39f0$exports, "SkinnedMesh", () => $04ce9c8dcd7d39f0$export$b303577035157ecf);
$parcel$export($04ce9c8dcd7d39f0$exports, "Bone", () => $04ce9c8dcd7d39f0$export$b127726e56765aa4);
$parcel$export($04ce9c8dcd7d39f0$exports, "DataTexture", () => $04ce9c8dcd7d39f0$export$b691f601014eabe1);
$parcel$export($04ce9c8dcd7d39f0$exports, "Skeleton", () => $04ce9c8dcd7d39f0$export$8f31e4c4a37b8e9c);
$parcel$export($04ce9c8dcd7d39f0$exports, "InstancedBufferAttribute", () => $04ce9c8dcd7d39f0$export$32ea87a8b54d744a);
$parcel$export($04ce9c8dcd7d39f0$exports, "InstancedMesh", () => $04ce9c8dcd7d39f0$export$f3c979c331175ad7);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineBasicMaterial", () => $04ce9c8dcd7d39f0$export$fbaaa33907730a0c);
$parcel$export($04ce9c8dcd7d39f0$exports, "Line", () => $04ce9c8dcd7d39f0$export$17d680238e50603e);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineSegments", () => $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineLoop", () => $04ce9c8dcd7d39f0$export$f85a24d745e4f17d);
$parcel$export($04ce9c8dcd7d39f0$exports, "PointsMaterial", () => $04ce9c8dcd7d39f0$export$a178c45366ce5d6b);
$parcel$export($04ce9c8dcd7d39f0$exports, "Points", () => $04ce9c8dcd7d39f0$export$1c787534cb11aa3e);
$parcel$export($04ce9c8dcd7d39f0$exports, "VideoTexture", () => $04ce9c8dcd7d39f0$export$6e09d1edf8d5a25c);
$parcel$export($04ce9c8dcd7d39f0$exports, "FramebufferTexture", () => $04ce9c8dcd7d39f0$export$9270d786f73ce6fe);
$parcel$export($04ce9c8dcd7d39f0$exports, "CompressedTexture", () => $04ce9c8dcd7d39f0$export$3466bac9141a5cc4);
$parcel$export($04ce9c8dcd7d39f0$exports, "CompressedArrayTexture", () => $04ce9c8dcd7d39f0$export$5fe6b8e34b274fcb);
$parcel$export($04ce9c8dcd7d39f0$exports, "CompressedCubeTexture", () => $04ce9c8dcd7d39f0$export$d80173634de65bff);
$parcel$export($04ce9c8dcd7d39f0$exports, "CanvasTexture", () => $04ce9c8dcd7d39f0$export$f7189e49152d1c13);
$parcel$export($04ce9c8dcd7d39f0$exports, "Curve", () => $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1);
$parcel$export($04ce9c8dcd7d39f0$exports, "EllipseCurve", () => $04ce9c8dcd7d39f0$export$3f87a931616cde04);
$parcel$export($04ce9c8dcd7d39f0$exports, "ArcCurve", () => $04ce9c8dcd7d39f0$export$b1eedc9aab6300e8);
$parcel$export($04ce9c8dcd7d39f0$exports, "CatmullRomCurve3", () => $04ce9c8dcd7d39f0$export$b9146b27c24b744c);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubicBezierCurve", () => $04ce9c8dcd7d39f0$export$e36650d36468bb39);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubicBezierCurve3", () => $04ce9c8dcd7d39f0$export$13d5f1c9525f246c);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineCurve", () => $04ce9c8dcd7d39f0$export$ab2e07e76531a47e);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineCurve3", () => $04ce9c8dcd7d39f0$export$1fdfd9d9cf487600);
$parcel$export($04ce9c8dcd7d39f0$exports, "QuadraticBezierCurve", () => $04ce9c8dcd7d39f0$export$5938c4ee491a43ad);
$parcel$export($04ce9c8dcd7d39f0$exports, "QuadraticBezierCurve3", () => $04ce9c8dcd7d39f0$export$bf3f4c7e459f90fc);
$parcel$export($04ce9c8dcd7d39f0$exports, "SplineCurve", () => $04ce9c8dcd7d39f0$export$d3bdd77da77afc1b);
$parcel$export($04ce9c8dcd7d39f0$exports, "CurvePath", () => $04ce9c8dcd7d39f0$export$4aaf9b66af1bbf2c);
$parcel$export($04ce9c8dcd7d39f0$exports, "Path", () => $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9);
$parcel$export($04ce9c8dcd7d39f0$exports, "LatheGeometry", () => $04ce9c8dcd7d39f0$export$6d839803fcd1882c);
$parcel$export($04ce9c8dcd7d39f0$exports, "CapsuleGeometry", () => $04ce9c8dcd7d39f0$export$41680e8551036033);
$parcel$export($04ce9c8dcd7d39f0$exports, "CircleGeometry", () => $04ce9c8dcd7d39f0$export$d5c0e8d607467193);
$parcel$export($04ce9c8dcd7d39f0$exports, "CylinderGeometry", () => $04ce9c8dcd7d39f0$export$68f745719dbe5198);
$parcel$export($04ce9c8dcd7d39f0$exports, "ConeGeometry", () => $04ce9c8dcd7d39f0$export$a7a48974f285c9b3);
$parcel$export($04ce9c8dcd7d39f0$exports, "PolyhedronGeometry", () => $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65);
$parcel$export($04ce9c8dcd7d39f0$exports, "DodecahedronGeometry", () => $04ce9c8dcd7d39f0$export$c0babfeb8708fc9c);
$parcel$export($04ce9c8dcd7d39f0$exports, "EdgesGeometry", () => $04ce9c8dcd7d39f0$export$4730b1542707547f);
$parcel$export($04ce9c8dcd7d39f0$exports, "Shape", () => $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShapeUtils", () => $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8);
$parcel$export($04ce9c8dcd7d39f0$exports, "ExtrudeGeometry", () => $04ce9c8dcd7d39f0$export$598697a1efa63ca7);
$parcel$export($04ce9c8dcd7d39f0$exports, "IcosahedronGeometry", () => $04ce9c8dcd7d39f0$export$9567cc828c9535da);
$parcel$export($04ce9c8dcd7d39f0$exports, "OctahedronGeometry", () => $04ce9c8dcd7d39f0$export$1954e2b809fe361e);
$parcel$export($04ce9c8dcd7d39f0$exports, "RingGeometry", () => $04ce9c8dcd7d39f0$export$68cb731f50f614af);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShapeGeometry", () => $04ce9c8dcd7d39f0$export$57a29a1c803e9065);
$parcel$export($04ce9c8dcd7d39f0$exports, "SphereGeometry", () => $04ce9c8dcd7d39f0$export$1b417fc3b307a251);
$parcel$export($04ce9c8dcd7d39f0$exports, "TetrahedronGeometry", () => $04ce9c8dcd7d39f0$export$fb3f7adc68bd6e02);
$parcel$export($04ce9c8dcd7d39f0$exports, "TorusGeometry", () => $04ce9c8dcd7d39f0$export$a2312a2a1fa56495);
$parcel$export($04ce9c8dcd7d39f0$exports, "TorusKnotGeometry", () => $04ce9c8dcd7d39f0$export$77e9bfadfb9ab8c8);
$parcel$export($04ce9c8dcd7d39f0$exports, "TubeGeometry", () => $04ce9c8dcd7d39f0$export$7897d9d48904490c);
$parcel$export($04ce9c8dcd7d39f0$exports, "WireframeGeometry", () => $04ce9c8dcd7d39f0$export$4b739da06d24892b);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShadowMaterial", () => $04ce9c8dcd7d39f0$export$e8564da406055a3);
$parcel$export($04ce9c8dcd7d39f0$exports, "RawShaderMaterial", () => $04ce9c8dcd7d39f0$export$21c421a2e1df9d22);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshStandardMaterial", () => $04ce9c8dcd7d39f0$export$f2980790215acccd);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshPhysicalMaterial", () => $04ce9c8dcd7d39f0$export$28d04986c4269c9f);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshPhongMaterial", () => $04ce9c8dcd7d39f0$export$24c72f71cbaf0678);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshToonMaterial", () => $04ce9c8dcd7d39f0$export$df893cf97e765622);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshNormalMaterial", () => $04ce9c8dcd7d39f0$export$bfe8c0a091f41ae7);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshLambertMaterial", () => $04ce9c8dcd7d39f0$export$5023a9a8114806b8);
$parcel$export($04ce9c8dcd7d39f0$exports, "MeshMatcapMaterial", () => $04ce9c8dcd7d39f0$export$6f5fef6235ec12ee);
$parcel$export($04ce9c8dcd7d39f0$exports, "LineDashedMaterial", () => $04ce9c8dcd7d39f0$export$327886a3efaeaebe);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationUtils", () => $04ce9c8dcd7d39f0$export$7ee8caa573e71ad1);
$parcel$export($04ce9c8dcd7d39f0$exports, "Interpolant", () => $04ce9c8dcd7d39f0$export$b558baee9c0f72d3);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubicInterpolant", () => $04ce9c8dcd7d39f0$export$3646682e7a3959);
$parcel$export($04ce9c8dcd7d39f0$exports, "LinearInterpolant", () => $04ce9c8dcd7d39f0$export$a8e6009059f51e1a);
$parcel$export($04ce9c8dcd7d39f0$exports, "DiscreteInterpolant", () => $04ce9c8dcd7d39f0$export$fb9758ef7ef8d5cc);
$parcel$export($04ce9c8dcd7d39f0$exports, "KeyframeTrack", () => $04ce9c8dcd7d39f0$export$b0e479f45b7006d6);
$parcel$export($04ce9c8dcd7d39f0$exports, "BooleanKeyframeTrack", () => $04ce9c8dcd7d39f0$export$d3a344b98cf0b775);
$parcel$export($04ce9c8dcd7d39f0$exports, "ColorKeyframeTrack", () => $04ce9c8dcd7d39f0$export$83444c5d885347d8);
$parcel$export($04ce9c8dcd7d39f0$exports, "NumberKeyframeTrack", () => $04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314);
$parcel$export($04ce9c8dcd7d39f0$exports, "QuaternionLinearInterpolant", () => $04ce9c8dcd7d39f0$export$2db1cfb7923d931e);
$parcel$export($04ce9c8dcd7d39f0$exports, "QuaternionKeyframeTrack", () => $04ce9c8dcd7d39f0$export$b8043f12b5aafbd7);
$parcel$export($04ce9c8dcd7d39f0$exports, "StringKeyframeTrack", () => $04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd);
$parcel$export($04ce9c8dcd7d39f0$exports, "VectorKeyframeTrack", () => $04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationClip", () => $04ce9c8dcd7d39f0$export$d942c706bf23829c);
$parcel$export($04ce9c8dcd7d39f0$exports, "Cache", () => $04ce9c8dcd7d39f0$export$94affb487e701bf2);
$parcel$export($04ce9c8dcd7d39f0$exports, "LoadingManager", () => $04ce9c8dcd7d39f0$export$99cc795e99919eed);
$parcel$export($04ce9c8dcd7d39f0$exports, "DefaultLoadingManager", () => $04ce9c8dcd7d39f0$export$b033c3f9a95c6a16);
$parcel$export($04ce9c8dcd7d39f0$exports, "Loader", () => $04ce9c8dcd7d39f0$export$3b0d6d7590275603);
$parcel$export($04ce9c8dcd7d39f0$exports, "FileLoader", () => $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationLoader", () => $04ce9c8dcd7d39f0$export$29711c7e14f61db);
$parcel$export($04ce9c8dcd7d39f0$exports, "CompressedTextureLoader", () => $04ce9c8dcd7d39f0$export$bd73ce947a280350);
$parcel$export($04ce9c8dcd7d39f0$exports, "ImageLoader", () => $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1);
$parcel$export($04ce9c8dcd7d39f0$exports, "CubeTextureLoader", () => $04ce9c8dcd7d39f0$export$2ec114afc2cf6308);
$parcel$export($04ce9c8dcd7d39f0$exports, "DataTextureLoader", () => $04ce9c8dcd7d39f0$export$792d8a18f2c55855);
$parcel$export($04ce9c8dcd7d39f0$exports, "TextureLoader", () => $04ce9c8dcd7d39f0$export$fd1bfc71f64c538c);
$parcel$export($04ce9c8dcd7d39f0$exports, "Light", () => $04ce9c8dcd7d39f0$export$6ecadb6ed240d696);
$parcel$export($04ce9c8dcd7d39f0$exports, "HemisphereLight", () => $04ce9c8dcd7d39f0$export$8d474f55edbb9624);
$parcel$export($04ce9c8dcd7d39f0$exports, "SpotLight", () => $04ce9c8dcd7d39f0$export$81495cbb73897362);
$parcel$export($04ce9c8dcd7d39f0$exports, "PointLight", () => $04ce9c8dcd7d39f0$export$4c9c1cb3f0b6f455);
$parcel$export($04ce9c8dcd7d39f0$exports, "DirectionalLight", () => $04ce9c8dcd7d39f0$export$3fea33cc9972c868);
$parcel$export($04ce9c8dcd7d39f0$exports, "AmbientLight", () => $04ce9c8dcd7d39f0$export$af279bfef9ec2c96);
$parcel$export($04ce9c8dcd7d39f0$exports, "RectAreaLight", () => $04ce9c8dcd7d39f0$export$61db2d908bbd2429);
$parcel$export($04ce9c8dcd7d39f0$exports, "SphericalHarmonics3", () => $04ce9c8dcd7d39f0$export$ba61ce607e1f405a);
$parcel$export($04ce9c8dcd7d39f0$exports, "LightProbe", () => $04ce9c8dcd7d39f0$export$e7ef036e309b38d2);
$parcel$export($04ce9c8dcd7d39f0$exports, "MaterialLoader", () => $04ce9c8dcd7d39f0$export$3bd6d323353dcf96);
$parcel$export($04ce9c8dcd7d39f0$exports, "LoaderUtils", () => $04ce9c8dcd7d39f0$export$b5d2dc08d867e41a);
$parcel$export($04ce9c8dcd7d39f0$exports, "InstancedBufferGeometry", () => $04ce9c8dcd7d39f0$export$231f009cbe414146);
$parcel$export($04ce9c8dcd7d39f0$exports, "BufferGeometryLoader", () => $04ce9c8dcd7d39f0$export$dc275bb96327833a);
$parcel$export($04ce9c8dcd7d39f0$exports, "ObjectLoader", () => $04ce9c8dcd7d39f0$export$40110c8505c5ad19);
$parcel$export($04ce9c8dcd7d39f0$exports, "ImageBitmapLoader", () => $04ce9c8dcd7d39f0$export$52286b55c4a9b51f);
$parcel$export($04ce9c8dcd7d39f0$exports, "AudioContext", () => $04ce9c8dcd7d39f0$export$fcbc63750ec2a81f);
$parcel$export($04ce9c8dcd7d39f0$exports, "AudioLoader", () => $04ce9c8dcd7d39f0$export$d8d5fccfbf47714e);
$parcel$export($04ce9c8dcd7d39f0$exports, "HemisphereLightProbe", () => $04ce9c8dcd7d39f0$export$2f22dadc8bc42820);
$parcel$export($04ce9c8dcd7d39f0$exports, "AmbientLightProbe", () => $04ce9c8dcd7d39f0$export$afe310a21c86023d);
$parcel$export($04ce9c8dcd7d39f0$exports, "StereoCamera", () => $04ce9c8dcd7d39f0$export$bc7f73a1065bee0c);
$parcel$export($04ce9c8dcd7d39f0$exports, "Clock", () => $04ce9c8dcd7d39f0$export$9735c82c4bae3302);
$parcel$export($04ce9c8dcd7d39f0$exports, "AudioListener", () => $04ce9c8dcd7d39f0$export$8a1b810c6fde8951);
$parcel$export($04ce9c8dcd7d39f0$exports, "Audio", () => $04ce9c8dcd7d39f0$export$153755f98d9861de);
$parcel$export($04ce9c8dcd7d39f0$exports, "PositionalAudio", () => $04ce9c8dcd7d39f0$export$4b3e397ef1832507);
$parcel$export($04ce9c8dcd7d39f0$exports, "AudioAnalyser", () => $04ce9c8dcd7d39f0$export$d47da1ef3d382827);
$parcel$export($04ce9c8dcd7d39f0$exports, "PropertyMixer", () => $04ce9c8dcd7d39f0$export$dfe0af1ca1acb78a);
$parcel$export($04ce9c8dcd7d39f0$exports, "PropertyBinding", () => $04ce9c8dcd7d39f0$export$7bf70fcf9f891893);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationObjectGroup", () => $04ce9c8dcd7d39f0$export$30619c2afd3f34db);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationAction", () => $04ce9c8dcd7d39f0$export$6946940a69e799e);
$parcel$export($04ce9c8dcd7d39f0$exports, "AnimationMixer", () => $04ce9c8dcd7d39f0$export$fbd77e5aefaa0102);
$parcel$export($04ce9c8dcd7d39f0$exports, "Uniform", () => $04ce9c8dcd7d39f0$export$2947cebfe91c02f8);
$parcel$export($04ce9c8dcd7d39f0$exports, "UniformsGroup", () => $04ce9c8dcd7d39f0$export$c412d5ffe1f79209);
$parcel$export($04ce9c8dcd7d39f0$exports, "InstancedInterleavedBuffer", () => $04ce9c8dcd7d39f0$export$25ec0e1af1389358);
$parcel$export($04ce9c8dcd7d39f0$exports, "GLBufferAttribute", () => $04ce9c8dcd7d39f0$export$6b7339ae8dbddf73);
$parcel$export($04ce9c8dcd7d39f0$exports, "Raycaster", () => $04ce9c8dcd7d39f0$export$8b7aaceff00bd2f);
$parcel$export($04ce9c8dcd7d39f0$exports, "Spherical", () => $04ce9c8dcd7d39f0$export$d712cd887b4a00f7);
$parcel$export($04ce9c8dcd7d39f0$exports, "Cylindrical", () => $04ce9c8dcd7d39f0$export$287165bb2177f4fd);
$parcel$export($04ce9c8dcd7d39f0$exports, "Box2", () => $04ce9c8dcd7d39f0$export$60f553fa130f08b0);
$parcel$export($04ce9c8dcd7d39f0$exports, "Line3", () => $04ce9c8dcd7d39f0$export$e0ba6359f1954fd3);
$parcel$export($04ce9c8dcd7d39f0$exports, "SpotLightHelper", () => $04ce9c8dcd7d39f0$export$4b14638ffdd81e68);
$parcel$export($04ce9c8dcd7d39f0$exports, "SkeletonHelper", () => $04ce9c8dcd7d39f0$export$5277df3c9e732259);
$parcel$export($04ce9c8dcd7d39f0$exports, "PointLightHelper", () => $04ce9c8dcd7d39f0$export$9a9291685b9e4023);
$parcel$export($04ce9c8dcd7d39f0$exports, "HemisphereLightHelper", () => $04ce9c8dcd7d39f0$export$8dca15f13f4f8172);
$parcel$export($04ce9c8dcd7d39f0$exports, "GridHelper", () => $04ce9c8dcd7d39f0$export$3875d39926561055);
$parcel$export($04ce9c8dcd7d39f0$exports, "PolarGridHelper", () => $04ce9c8dcd7d39f0$export$361430a10f533cd3);
$parcel$export($04ce9c8dcd7d39f0$exports, "DirectionalLightHelper", () => $04ce9c8dcd7d39f0$export$f8e434dc14203e7d);
$parcel$export($04ce9c8dcd7d39f0$exports, "CameraHelper", () => $04ce9c8dcd7d39f0$export$ed8e93f853cd795);
$parcel$export($04ce9c8dcd7d39f0$exports, "BoxHelper", () => $04ce9c8dcd7d39f0$export$38a664cc862a6a9d);
$parcel$export($04ce9c8dcd7d39f0$exports, "Box3Helper", () => $04ce9c8dcd7d39f0$export$ce39f4bb96c9a290);
$parcel$export($04ce9c8dcd7d39f0$exports, "PlaneHelper", () => $04ce9c8dcd7d39f0$export$a34fe8156c66e5d7);
$parcel$export($04ce9c8dcd7d39f0$exports, "ArrowHelper", () => $04ce9c8dcd7d39f0$export$a3008e7bd8d2cbe7);
$parcel$export($04ce9c8dcd7d39f0$exports, "AxesHelper", () => $04ce9c8dcd7d39f0$export$6c8303f35b8578fd);
$parcel$export($04ce9c8dcd7d39f0$exports, "ShapePath", () => $04ce9c8dcd7d39f0$export$148534a3c727230b);
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ const $04ce9c8dcd7d39f0$export$3545e07a80636437 = "155";
const $04ce9c8dcd7d39f0$export$7177b3e430c2d7ca = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
};
const $04ce9c8dcd7d39f0$export$d46bd3ead7cc759b = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
};
const $04ce9c8dcd7d39f0$export$3237e1f2c1ea1f44 = 0;
const $04ce9c8dcd7d39f0$export$b9a7b4fc5cb15f9b = 1;
const $04ce9c8dcd7d39f0$export$b8058bcc7037d3f3 = 2;
const $04ce9c8dcd7d39f0$export$f24be24dcddeac0d = 3;
const $04ce9c8dcd7d39f0$export$346307dbae2b7447 = 0;
const $04ce9c8dcd7d39f0$export$5813f879eee7cd88 = 1;
const $04ce9c8dcd7d39f0$export$a47c4b43a1be34f0 = 2;
const $04ce9c8dcd7d39f0$export$896ae1ade6c829c4 = 3;
const $04ce9c8dcd7d39f0$export$2ede184fc2998901 = 0;
const $04ce9c8dcd7d39f0$export$d9f0486e75b5ace = 1;
const $04ce9c8dcd7d39f0$export$3b296b6f144d5b03 = 2;
const $04ce9c8dcd7d39f0$export$211211c00f97204d = 2; // r149
const $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba = 0;
const $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0 = 1;
const $04ce9c8dcd7d39f0$export$777d8f9551c2216b = 2;
const $04ce9c8dcd7d39f0$export$cdfa06f868e2e467 = 3;
const $04ce9c8dcd7d39f0$export$4138e1c684b46a20 = 4;
const $04ce9c8dcd7d39f0$export$eda4864c68df1fa2 = 5;
const $04ce9c8dcd7d39f0$export$20183a0484ce21a0 = 100;
const $04ce9c8dcd7d39f0$export$73e0df5177988548 = 101;
const $04ce9c8dcd7d39f0$export$28e582859cbec660 = 102;
const $04ce9c8dcd7d39f0$export$c8c1508da8d0600c = 103;
const $04ce9c8dcd7d39f0$export$99948c02fb51055f = 104;
const $04ce9c8dcd7d39f0$export$2110f05edf778d3d = 200;
const $04ce9c8dcd7d39f0$export$8805bad65e24940e = 201;
const $04ce9c8dcd7d39f0$export$7fbe15b28d28cf52 = 202;
const $04ce9c8dcd7d39f0$export$947829af9f2c17f6 = 203;
const $04ce9c8dcd7d39f0$export$d5773124e86cf28c = 204;
const $04ce9c8dcd7d39f0$export$11d468cc7f19e971 = 205;
const $04ce9c8dcd7d39f0$export$a78aed1ca2a87192 = 206;
const $04ce9c8dcd7d39f0$export$5d0fe17fd8773bac = 207;
const $04ce9c8dcd7d39f0$export$ef5f2dd8ffac5574 = 208;
const $04ce9c8dcd7d39f0$export$56b85b2686ab16 = 209;
const $04ce9c8dcd7d39f0$export$c05e2a1fc8609506 = 210;
const $04ce9c8dcd7d39f0$export$69025ce147cee220 = 0;
const $04ce9c8dcd7d39f0$export$7182eb52ea3b3f04 = 1;
const $04ce9c8dcd7d39f0$export$eedccec66ab7ebe = 2;
const $04ce9c8dcd7d39f0$export$296f78a0b892f81a = 3;
const $04ce9c8dcd7d39f0$export$a60d398fc7b7590e = 4;
const $04ce9c8dcd7d39f0$export$7d7234c1240a1fc4 = 5;
const $04ce9c8dcd7d39f0$export$c5e2c52991f30937 = 6;
const $04ce9c8dcd7d39f0$export$2f843afa843d8916 = 7;
const $04ce9c8dcd7d39f0$export$e50ac29801f1774d = 0;
const $04ce9c8dcd7d39f0$export$9f9d94f963c85479 = 1;
const $04ce9c8dcd7d39f0$export$e641dc52bc3494aa = 2;
const $04ce9c8dcd7d39f0$export$9fcb6b4294603b2 = 0;
const $04ce9c8dcd7d39f0$export$98f52c2a46c598ca = 1;
const $04ce9c8dcd7d39f0$export$74b25e54b3bcd548 = 2;
const $04ce9c8dcd7d39f0$export$932b3dd283d4a366 = 3;
const $04ce9c8dcd7d39f0$export$a0d98fe6d7e4af64 = 4;
const $04ce9c8dcd7d39f0$export$2c7b09c1e9abfb5e = 5;
const $04ce9c8dcd7d39f0$export$1beec6768cbb3d2d = 300;
const $04ce9c8dcd7d39f0$export$8759762a6477f2c4 = 301;
const $04ce9c8dcd7d39f0$export$dc59f8aed047f61d = 302;
const $04ce9c8dcd7d39f0$export$d64030b316d3b087 = 303;
const $04ce9c8dcd7d39f0$export$ee99d97d46898098 = 304;
const $04ce9c8dcd7d39f0$export$dbf3e70ff37af79 = 306;
const $04ce9c8dcd7d39f0$export$533346c8e8dac0f5 = 1000;
const $04ce9c8dcd7d39f0$export$9d9334239a5a5e06 = 1001;
const $04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f = 1002;
const $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 = 1003;
const $04ce9c8dcd7d39f0$export$d129e38cf6feaa8c = 1004;
const $04ce9c8dcd7d39f0$export$14a4936464a36496 = 1004;
const $04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2 = 1005;
const $04ce9c8dcd7d39f0$export$cbc5b7f5647595d8 = 1005;
const $04ce9c8dcd7d39f0$export$8a72f490b25c56c8 = 1006;
const $04ce9c8dcd7d39f0$export$19a719f377145a13 = 1007;
const $04ce9c8dcd7d39f0$export$dbe96bee3fe9dbf0 = 1007;
const $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b = 1008;
const $04ce9c8dcd7d39f0$export$90d80f1e3506775f = 1008;
const $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10 = 1009;
const $04ce9c8dcd7d39f0$export$545fce0311a9796a = 1010;
const $04ce9c8dcd7d39f0$export$88572337f312435f = 1011;
const $04ce9c8dcd7d39f0$export$c63dc51868b06a9d = 1012;
const $04ce9c8dcd7d39f0$export$5c612977753abe2 = 1013;
const $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96 = 1014;
const $04ce9c8dcd7d39f0$export$f6d331659b644596 = 1015;
const $04ce9c8dcd7d39f0$export$2697304443f382bc = 1016;
const $04ce9c8dcd7d39f0$export$b3969b01faf587f2 = 1017;
const $04ce9c8dcd7d39f0$export$18886f8ae33e90de = 1018;
const $04ce9c8dcd7d39f0$export$6c8ea339bfab1301 = 1020;
const $04ce9c8dcd7d39f0$export$988473390501ed4b = 1021;
const $04ce9c8dcd7d39f0$export$3f8bb04b555a363c = 1023;
const $04ce9c8dcd7d39f0$export$cc09ccbf6d1ed449 = 1024;
const $04ce9c8dcd7d39f0$export$9053a81c4a69c289 = 1025;
const $04ce9c8dcd7d39f0$export$c1b6b5136be58045 = 1026;
const $04ce9c8dcd7d39f0$export$1e113ac2d0905829 = 1027;
const $04ce9c8dcd7d39f0$export$4e041a7967d15c4b = 1028;
const $04ce9c8dcd7d39f0$export$aa92e870a709d190 = 1029;
const $04ce9c8dcd7d39f0$export$6cdf0b461c7ce8a0 = 1030;
const $04ce9c8dcd7d39f0$export$1ba1c45f9f77d4d7 = 1031;
const $04ce9c8dcd7d39f0$export$c200e7d26f592f21 = 1033;
const $04ce9c8dcd7d39f0$export$21d1799c6d552fc0 = 33776;
const $04ce9c8dcd7d39f0$export$afa304c3e981b668 = 33777;
const $04ce9c8dcd7d39f0$export$d2a1a68024a3e56c = 33778;
const $04ce9c8dcd7d39f0$export$9a79c424327dacf9 = 33779;
const $04ce9c8dcd7d39f0$export$19ada9bbb1af3573 = 35840;
const $04ce9c8dcd7d39f0$export$d0f0355bb3d948e4 = 35841;
const $04ce9c8dcd7d39f0$export$b82296714358084c = 35842;
const $04ce9c8dcd7d39f0$export$b71692456c47b6c3 = 35843;
const $04ce9c8dcd7d39f0$export$6ab91af2d757aee7 = 36196;
const $04ce9c8dcd7d39f0$export$7800993ef8106a6a = 37492;
const $04ce9c8dcd7d39f0$export$23ed8300a860e7d8 = 37496;
const $04ce9c8dcd7d39f0$export$dc5570b4a2b92d48 = 37808;
const $04ce9c8dcd7d39f0$export$68880cd325f8b2fb = 37809;
const $04ce9c8dcd7d39f0$export$7d2c0be323373d95 = 37810;
const $04ce9c8dcd7d39f0$export$22b52da301fc3a3e = 37811;
const $04ce9c8dcd7d39f0$export$c009e2cb4a66485e = 37812;
const $04ce9c8dcd7d39f0$export$118fff5afa255b63 = 37813;
const $04ce9c8dcd7d39f0$export$120713c829ae0667 = 37814;
const $04ce9c8dcd7d39f0$export$c79eeabbf53313e9 = 37815;
const $04ce9c8dcd7d39f0$export$443cf6567cdd6424 = 37816;
const $04ce9c8dcd7d39f0$export$6573984fc9840780 = 37817;
const $04ce9c8dcd7d39f0$export$e7aee563f30091de = 37818;
const $04ce9c8dcd7d39f0$export$2eb8634622ddeab7 = 37819;
const $04ce9c8dcd7d39f0$export$202b1ce7b5d25742 = 37820;
const $04ce9c8dcd7d39f0$export$18ab77abd087e467 = 37821;
const $04ce9c8dcd7d39f0$export$ce40b115e188bc81 = 36492;
const $04ce9c8dcd7d39f0$export$b1688df4c4c21670 = 36283;
const $04ce9c8dcd7d39f0$export$fc15e5d8261eed58 = 36284;
const $04ce9c8dcd7d39f0$export$d220f6ade8463a0f = 36285;
const $04ce9c8dcd7d39f0$export$768646d09dc1b6ef = 36286;
const $04ce9c8dcd7d39f0$export$d62fdc9d1b1cccad = 2200;
const $04ce9c8dcd7d39f0$export$dfaf4422ce096e29 = 2201;
const $04ce9c8dcd7d39f0$export$f8f6f2041b78e210 = 2202;
const $04ce9c8dcd7d39f0$export$995b32462a65e855 = 2300;
const $04ce9c8dcd7d39f0$export$30fac1aace31cf4d = 2301;
const $04ce9c8dcd7d39f0$export$198b11ff4c72bb30 = 2302;
const $04ce9c8dcd7d39f0$export$7f795934b84ab523 = 2400;
const $04ce9c8dcd7d39f0$export$24a4ccb5099273b5 = 2401;
const $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee = 2402;
const $04ce9c8dcd7d39f0$export$bcfbbdcf8de7f8cd = 2500;
const $04ce9c8dcd7d39f0$export$d875e029ef558d3 = 2501;
const $04ce9c8dcd7d39f0$export$4c28c87c2dc84758 = 0;
const $04ce9c8dcd7d39f0$export$b23a071aa286eb29 = 1;
const $04ce9c8dcd7d39f0$export$f0d8293634f88842 = 2;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */ const $04ce9c8dcd7d39f0$export$7207336e4151a112 = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */ const $04ce9c8dcd7d39f0$export$f32388edbb32674 = 3001;
const $04ce9c8dcd7d39f0$export$deeb383078690b50 = 3200;
const $04ce9c8dcd7d39f0$export$8f910f4c4f73df11 = 3201;
const $04ce9c8dcd7d39f0$export$2852a58ebdac27b8 = 0;
const $04ce9c8dcd7d39f0$export$9990ad26f9db5b2c = 1;
// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51 = "";
const $04ce9c8dcd7d39f0$export$561f394b24edfcaa = "srgb";
const $04ce9c8dcd7d39f0$export$42429b3acfb233a4 = "srgb-linear";
const $04ce9c8dcd7d39f0$export$626af19ae879bdf6 = "display-p3";
const $04ce9c8dcd7d39f0$export$69433f11f42d5527 = 0;
const $04ce9c8dcd7d39f0$export$9f542ae4b5baca34 = 7680;
const $04ce9c8dcd7d39f0$export$8a4f28336ef203d3 = 7681;
const $04ce9c8dcd7d39f0$export$2928c0231297c036 = 7682;
const $04ce9c8dcd7d39f0$export$c0e9611c8a15f9a8 = 7683;
const $04ce9c8dcd7d39f0$export$9c2c08927385dcc4 = 34055;
const $04ce9c8dcd7d39f0$export$7c74ea00fa1315e6 = 34056;
const $04ce9c8dcd7d39f0$export$22e2e5726612443 = 5386;
const $04ce9c8dcd7d39f0$export$1343870698229224 = 512;
const $04ce9c8dcd7d39f0$export$8e1d8ed281997fa6 = 513;
const $04ce9c8dcd7d39f0$export$55648a1cde8329a7 = 514;
const $04ce9c8dcd7d39f0$export$2dff107857e6aca2 = 515;
const $04ce9c8dcd7d39f0$export$6f93765ab2f451a2 = 516;
const $04ce9c8dcd7d39f0$export$6f3fb2d2440f2b76 = 517;
const $04ce9c8dcd7d39f0$export$4119cf7b4c98fd5a = 518;
const $04ce9c8dcd7d39f0$export$14cf96713ddd97a8 = 519;
const $04ce9c8dcd7d39f0$export$d9e2d19a747baaab = 512;
const $04ce9c8dcd7d39f0$export$36bcf49c713b3eb7 = 513;
const $04ce9c8dcd7d39f0$export$66f28d946fc6a0d5 = 514;
const $04ce9c8dcd7d39f0$export$64eea11eb407ddf1 = 515;
const $04ce9c8dcd7d39f0$export$155af022118f3a38 = 516;
const $04ce9c8dcd7d39f0$export$67ab95dde6bed156 = 517;
const $04ce9c8dcd7d39f0$export$1cdcb70d53d65f61 = 518;
const $04ce9c8dcd7d39f0$export$187b73a3e352c145 = 519;
const $04ce9c8dcd7d39f0$export$763e8360f4d7f77d = 35044;
const $04ce9c8dcd7d39f0$export$8505d14ac8546ca = 35048;
const $04ce9c8dcd7d39f0$export$721e63549e51d81e = 35040;
const $04ce9c8dcd7d39f0$export$415731dc4f48e299 = 35045;
const $04ce9c8dcd7d39f0$export$9e809946455f13bc = 35049;
const $04ce9c8dcd7d39f0$export$2ed9499a35b5f832 = 35041;
const $04ce9c8dcd7d39f0$export$32ab2503ea19469a = 35046;
const $04ce9c8dcd7d39f0$export$ab4022c2c3f86315 = 35050;
const $04ce9c8dcd7d39f0$export$ba7f1db36a76a970 = 35042;
const $04ce9c8dcd7d39f0$export$43600cc67fabd9f = "100";
const $04ce9c8dcd7d39f0$export$f63012db5506e7dd = "300 es";
const $04ce9c8dcd7d39f0$export$ca1dce8b5e1de74d = 1035; // fallback for WebGL 1
const $04ce9c8dcd7d39f0$export$5a0e9190d10875d3 = 2000;
const $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac = 2001;
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */ class $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    addEventListener(type, listener) {
        if (this._listeners === undefined) this._listeners = {};
        const listeners = this._listeners;
        if (listeners[type] === undefined) listeners[type] = [];
        if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);
    }
    hasEventListener(type, listener) {
        if (this._listeners === undefined) return false;
        const listeners = this._listeners;
        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[type];
        if (listenerArray !== undefined) {
            const index = listenerArray.indexOf(listener);
            if (index !== -1) listenerArray.splice(index, 1);
        }
    }
    dispatchEvent(event) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[event.type];
        if (listenerArray !== undefined) {
            event.target = this;
            // Make a copy, in case listeners are removed while iterating.
            const array = listenerArray.slice(0);
            for(let i = 0, l = array.length; i < l; i++)array[i].call(this, event);
            event.target = null;
        }
    }
}
const $04ce9c8dcd7d39f0$var$_lut = [
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "0a",
    "0b",
    "0c",
    "0d",
    "0e",
    "0f",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "1a",
    "1b",
    "1c",
    "1d",
    "1e",
    "1f",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "2a",
    "2b",
    "2c",
    "2d",
    "2e",
    "2f",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "3a",
    "3b",
    "3c",
    "3d",
    "3e",
    "3f",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "4a",
    "4b",
    "4c",
    "4d",
    "4e",
    "4f",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "5a",
    "5b",
    "5c",
    "5d",
    "5e",
    "5f",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "6a",
    "6b",
    "6c",
    "6d",
    "6e",
    "6f",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "7a",
    "7b",
    "7c",
    "7d",
    "7e",
    "7f",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "8a",
    "8b",
    "8c",
    "8d",
    "8e",
    "8f",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "9a",
    "9b",
    "9c",
    "9d",
    "9e",
    "9f",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "a8",
    "a9",
    "aa",
    "ab",
    "ac",
    "ad",
    "ae",
    "af",
    "b0",
    "b1",
    "b2",
    "b3",
    "b4",
    "b5",
    "b6",
    "b7",
    "b8",
    "b9",
    "ba",
    "bb",
    "bc",
    "bd",
    "be",
    "bf",
    "c0",
    "c1",
    "c2",
    "c3",
    "c4",
    "c5",
    "c6",
    "c7",
    "c8",
    "c9",
    "ca",
    "cb",
    "cc",
    "cd",
    "ce",
    "cf",
    "d0",
    "d1",
    "d2",
    "d3",
    "d4",
    "d5",
    "d6",
    "d7",
    "d8",
    "d9",
    "da",
    "db",
    "dc",
    "dd",
    "de",
    "df",
    "e0",
    "e1",
    "e2",
    "e3",
    "e4",
    "e5",
    "e6",
    "e7",
    "e8",
    "e9",
    "ea",
    "eb",
    "ec",
    "ed",
    "ee",
    "ef",
    "f0",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "fa",
    "fb",
    "fc",
    "fd",
    "fe",
    "ff"
];
let $04ce9c8dcd7d39f0$var$_seed = 1234567;
const $04ce9c8dcd7d39f0$var$DEG2RAD = Math.PI / 180;
const $04ce9c8dcd7d39f0$var$RAD2DEG = 180 / Math.PI;
// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function $04ce9c8dcd7d39f0$var$generateUUID() {
    const d0 = Math.random() * 0xffffffff | 0;
    const d1 = Math.random() * 0xffffffff | 0;
    const d2 = Math.random() * 0xffffffff | 0;
    const d3 = Math.random() * 0xffffffff | 0;
    const uuid = $04ce9c8dcd7d39f0$var$_lut[d0 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d0 >> 8 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d0 >> 16 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d0 >> 24 & 0xff] + "-" + $04ce9c8dcd7d39f0$var$_lut[d1 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d1 >> 8 & 0xff] + "-" + $04ce9c8dcd7d39f0$var$_lut[d1 >> 16 & 0x0f | 0x40] + $04ce9c8dcd7d39f0$var$_lut[d1 >> 24 & 0xff] + "-" + $04ce9c8dcd7d39f0$var$_lut[d2 & 0x3f | 0x80] + $04ce9c8dcd7d39f0$var$_lut[d2 >> 8 & 0xff] + "-" + $04ce9c8dcd7d39f0$var$_lut[d2 >> 16 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d2 >> 24 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d3 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d3 >> 8 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d3 >> 16 & 0xff] + $04ce9c8dcd7d39f0$var$_lut[d3 >> 24 & 0xff];
    // .toLowerCase() here flattens concatenated strings to save heap memory space.
    return uuid.toLowerCase();
}
function $04ce9c8dcd7d39f0$var$clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function $04ce9c8dcd7d39f0$var$euclideanModulo(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function $04ce9c8dcd7d39f0$var$mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function $04ce9c8dcd7d39f0$var$inverseLerp(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function $04ce9c8dcd7d39f0$var$lerp(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function $04ce9c8dcd7d39f0$var$damp(x, y, lambda, dt) {
    return $04ce9c8dcd7d39f0$var$lerp(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function $04ce9c8dcd7d39f0$var$pingpong(x, length = 1) {
    return length - Math.abs($04ce9c8dcd7d39f0$var$euclideanModulo(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function $04ce9c8dcd7d39f0$var$smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function $04ce9c8dcd7d39f0$var$smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function $04ce9c8dcd7d39f0$var$randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function $04ce9c8dcd7d39f0$var$randFloat(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function $04ce9c8dcd7d39f0$var$randFloatSpread(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function $04ce9c8dcd7d39f0$var$seededRandom(s) {
    if (s !== undefined) $04ce9c8dcd7d39f0$var$_seed = s;
    // Mulberry32 generator
    let t = $04ce9c8dcd7d39f0$var$_seed += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function $04ce9c8dcd7d39f0$var$degToRad(degrees) {
    return degrees * $04ce9c8dcd7d39f0$var$DEG2RAD;
}
function $04ce9c8dcd7d39f0$var$radToDeg(radians) {
    return radians * $04ce9c8dcd7d39f0$var$RAD2DEG;
}
function $04ce9c8dcd7d39f0$var$isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function $04ce9c8dcd7d39f0$var$ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function $04ce9c8dcd7d39f0$var$floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function $04ce9c8dcd7d39f0$var$setQuaternionFromProperEuler(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch(order){
        case "XYX":
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case "YZY":
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case "ZXZ":
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case "XZX":
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case "YXY":
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case "ZYZ":
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
}
function $04ce9c8dcd7d39f0$var$denormalize(value, array) {
    switch(array.constructor){
        case Float32Array:
            return value;
        case Uint32Array:
            return value / 4294967295.0;
        case Uint16Array:
            return value / 65535.0;
        case Uint8Array:
            return value / 255.0;
        case Int32Array:
            return Math.max(value / 2147483647.0, -1);
        case Int16Array:
            return Math.max(value / 32767.0, -1);
        case Int8Array:
            return Math.max(value / 127.0, -1);
        default:
            throw new Error("Invalid component type.");
    }
}
function $04ce9c8dcd7d39f0$var$normalize(value, array) {
    switch(array.constructor){
        case Float32Array:
            return value;
        case Uint32Array:
            return Math.round(value * 4294967295.0);
        case Uint16Array:
            return Math.round(value * 65535.0);
        case Uint8Array:
            return Math.round(value * 255.0);
        case Int32Array:
            return Math.round(value * 2147483647.0);
        case Int16Array:
            return Math.round(value * 32767.0);
        case Int8Array:
            return Math.round(value * 127.0);
        default:
            throw new Error("Invalid component type.");
    }
}
const $04ce9c8dcd7d39f0$export$6a7ef315a0d1ef07 = {
    DEG2RAD: $04ce9c8dcd7d39f0$var$DEG2RAD,
    RAD2DEG: $04ce9c8dcd7d39f0$var$RAD2DEG,
    generateUUID: $04ce9c8dcd7d39f0$var$generateUUID,
    clamp: $04ce9c8dcd7d39f0$var$clamp,
    euclideanModulo: $04ce9c8dcd7d39f0$var$euclideanModulo,
    mapLinear: $04ce9c8dcd7d39f0$var$mapLinear,
    inverseLerp: $04ce9c8dcd7d39f0$var$inverseLerp,
    lerp: $04ce9c8dcd7d39f0$var$lerp,
    damp: $04ce9c8dcd7d39f0$var$damp,
    pingpong: $04ce9c8dcd7d39f0$var$pingpong,
    smoothstep: $04ce9c8dcd7d39f0$var$smoothstep,
    smootherstep: $04ce9c8dcd7d39f0$var$smootherstep,
    randInt: $04ce9c8dcd7d39f0$var$randInt,
    randFloat: $04ce9c8dcd7d39f0$var$randFloat,
    randFloatSpread: $04ce9c8dcd7d39f0$var$randFloatSpread,
    seededRandom: $04ce9c8dcd7d39f0$var$seededRandom,
    degToRad: $04ce9c8dcd7d39f0$var$degToRad,
    radToDeg: $04ce9c8dcd7d39f0$var$radToDeg,
    isPowerOfTwo: $04ce9c8dcd7d39f0$var$isPowerOfTwo,
    ceilPowerOfTwo: $04ce9c8dcd7d39f0$var$ceilPowerOfTwo,
    floorPowerOfTwo: $04ce9c8dcd7d39f0$var$floorPowerOfTwo,
    setQuaternionFromProperEuler: $04ce9c8dcd7d39f0$var$setQuaternionFromProperEuler,
    normalize: $04ce9c8dcd7d39f0$var$normalize,
    denormalize: $04ce9c8dcd7d39f0$var$denormalize
};
class $04ce9c8dcd7d39f0$export$c977b3e384af9ae1 {
    constructor(x = 0, y = 0){
        $04ce9c8dcd7d39f0$export$c977b3e384af9ae1.prototype.isVector2 = true;
        this.x = x;
        this.y = y;
    }
    get width() {
        return this.x;
    }
    set width(value) {
        this.x = value;
    }
    get height() {
        return this.y;
    }
    set height(value) {
        this.y = value;
    }
    set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    cross(v) {
        return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        // computes the angle in radians with respect to the positive x-axis
        const angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
    }
    angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        // clamp, to handle numerical problems
        return Math.acos($04ce9c8dcd7d39f0$var$clamp(theta, -1, 1));
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y;
        return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
    }
    rotateAround(center, angle) {
        const c = Math.cos(angle), s = Math.sin(angle);
        const x = this.x - center.x;
        const y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
    }
}
class $04ce9c8dcd7d39f0$export$8ff26dafa08918 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33){
        $04ce9c8dcd7d39f0$export$8ff26dafa08918.prototype.isMatrix3 = true;
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (n11 !== undefined) this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te = this.elements;
        te[0] = n11;
        te[1] = n21;
        te[2] = n31;
        te[3] = n12;
        te[4] = n22;
        te[5] = n32;
        te[6] = n13;
        te[7] = n23;
        te[8] = n33;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
        return this;
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
    }
    setFromMatrix4(m) {
        const me = m.elements;
        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
        return this;
    }
    multiply(m) {
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[3] *= s;
        te[6] *= s;
        te[1] *= s;
        te[4] *= s;
        te[7] *= s;
        te[2] *= s;
        te[5] *= s;
        te[8] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n31 * n23 - n33 * n21) * detInv;
        te[2] = (n32 * n21 - n31 * n22) * detInv;
        te[3] = t12 * detInv;
        te[4] = (n33 * n11 - n31 * n13) * detInv;
        te[5] = (n31 * n12 - n32 * n11) * detInv;
        te[6] = t13 * detInv;
        te[7] = (n21 * n13 - n23 * n11) * detInv;
        te[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
    }
    transpose() {
        let tmp;
        const m = this.elements;
        tmp = m[1];
        m[1] = m[3];
        m[3] = tmp;
        tmp = m[2];
        m[2] = m[6];
        m[6] = tmp;
        tmp = m[5];
        m[5] = m[7];
        m[7] = tmp;
        return this;
    }
    getNormalMatrix(matrix4) {
        return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
        const m = this.elements;
        r[0] = m[0];
        r[1] = m[3];
        r[2] = m[6];
        r[3] = m[1];
        r[4] = m[4];
        r[5] = m[7];
        r[6] = m[2];
        r[7] = m[5];
        r[8] = m[8];
        return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
        return this;
    }
    //
    scale(sx, sy) {
        this.premultiply($04ce9c8dcd7d39f0$var$_m3.makeScale(sx, sy));
        return this;
    }
    rotate(theta) {
        this.premultiply($04ce9c8dcd7d39f0$var$_m3.makeRotation(-theta));
        return this;
    }
    translate(tx, ty) {
        this.premultiply($04ce9c8dcd7d39f0$var$_m3.makeTranslation(tx, ty));
        return this;
    }
    // for 2D Transforms
    makeTranslation(x, y) {
        if (x.isVector2) this.set(1, 0, x.x, 0, 1, x.y, 0, 0, 1);
        else this.set(1, 0, x, 0, 1, y, 0, 0, 1);
        return this;
    }
    makeRotation(theta) {
        // counterclockwise
        const c = Math.cos(theta);
        const s = Math.sin(theta);
        this.set(c, -s, 0, s, c, 0, 0, 0, 1);
        return this;
    }
    makeScale(x, y) {
        this.set(x, 0, 0, 0, y, 0, 0, 0, 1);
        return this;
    }
    //
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i = 0; i < 9; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i = 0; i < 9; i++)this.elements[i] = array[i + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        return array;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}
const $04ce9c8dcd7d39f0$var$_m3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918();
function $04ce9c8dcd7d39f0$var$arrayNeedsUint32(array) {
    // assumes larger values usually on last
    for(let i = array.length - 1; i >= 0; --i){
        if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
    }
    return false;
}
const $04ce9c8dcd7d39f0$var$TYPED_ARRAYS = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
};
function $04ce9c8dcd7d39f0$var$getTypedArray(type, buffer) {
    return new $04ce9c8dcd7d39f0$var$TYPED_ARRAYS[type](buffer);
}
function $04ce9c8dcd7d39f0$var$createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
const $04ce9c8dcd7d39f0$var$_cache = {};
function $04ce9c8dcd7d39f0$var$warnOnce(message) {
    if (message in $04ce9c8dcd7d39f0$var$_cache) return;
    $04ce9c8dcd7d39f0$var$_cache[message] = true;
    console.warn(message);
}
function $04ce9c8dcd7d39f0$var$SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function $04ce9c8dcd7d39f0$var$LinearToSRGB(c) {
    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
/**
 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
 * or clipping. Based on W3C specifications for sRGB and Display P3,
 * and ICC specifications for the D50 connection space. Values in/out
 * are _linear_ sRGB and _linear_ Display P3.
 *
 * Note that both sRGB and Display P3 use the sRGB transfer functions.
 *
 * Reference:
 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
 */ const $04ce9c8dcd7d39f0$var$LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918().fromArray([
    0.8224621,
    0.0331941,
    0.0170827,
    0.1775380,
    0.9668058,
    0.0723974,
    -0.0000001,
    0.0000001,
    0.9105199
]);
const $04ce9c8dcd7d39f0$var$LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918().fromArray([
    1.2249401,
    -0.0420569,
    -0.0196376,
    -0.2249404,
    1.0420571,
    -0.0786361,
    0.0000001,
    0.0000000,
    1.0982735
]);
function $04ce9c8dcd7d39f0$var$DisplayP3ToLinearSRGB(color) {
    // Display P3 uses the sRGB transfer functions
    return color.convertSRGBToLinear().applyMatrix3($04ce9c8dcd7d39f0$var$LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);
}
function $04ce9c8dcd7d39f0$var$LinearSRGBToDisplayP3(color) {
    // Display P3 uses the sRGB transfer functions
    return color.applyMatrix3($04ce9c8dcd7d39f0$var$LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();
}
// Conversions from <source> to Linear-sRGB reference space.
const $04ce9c8dcd7d39f0$var$TO_LINEAR = {
    [$04ce9c8dcd7d39f0$export$42429b3acfb233a4]: (color)=>color,
    [$04ce9c8dcd7d39f0$export$561f394b24edfcaa]: (color)=>color.convertSRGBToLinear(),
    [$04ce9c8dcd7d39f0$export$626af19ae879bdf6]: $04ce9c8dcd7d39f0$var$DisplayP3ToLinearSRGB
};
// Conversions to <target> from Linear-sRGB reference space.
const $04ce9c8dcd7d39f0$var$FROM_LINEAR = {
    [$04ce9c8dcd7d39f0$export$42429b3acfb233a4]: (color)=>color,
    [$04ce9c8dcd7d39f0$export$561f394b24edfcaa]: (color)=>color.convertLinearToSRGB(),
    [$04ce9c8dcd7d39f0$export$626af19ae879bdf6]: $04ce9c8dcd7d39f0$var$LinearSRGBToDisplayP3
};
const $04ce9c8dcd7d39f0$export$5e6fd513f44698c = {
    enabled: true,
    get legacyMode () {
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        return !this.enabled;
    },
    set legacyMode (legacyMode){
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        this.enabled = !legacyMode;
    },
    get workingColorSpace () {
        return $04ce9c8dcd7d39f0$export$42429b3acfb233a4;
    },
    set workingColorSpace (colorSpace){
        console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
    },
    convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) return color;
        const sourceToLinear = $04ce9c8dcd7d39f0$var$TO_LINEAR[sourceColorSpace];
        const targetFromLinear = $04ce9c8dcd7d39f0$var$FROM_LINEAR[targetColorSpace];
        if (sourceToLinear === undefined || targetFromLinear === undefined) throw new Error(`Unsupported color space conversion, "${sourceColorSpace}" to "${targetColorSpace}".`);
        return targetFromLinear(sourceToLinear(color));
    },
    fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
    },
    toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
    }
};
let $04ce9c8dcd7d39f0$var$_canvas;
class $04ce9c8dcd7d39f0$export$698882cf06df44aa {
    static getDataURL(image) {
        if (/^data:/i.test(image.src)) return image.src;
        if (typeof HTMLCanvasElement === "undefined") return image.src;
        let canvas;
        if (image instanceof HTMLCanvasElement) canvas = image;
        else {
            if ($04ce9c8dcd7d39f0$var$_canvas === undefined) $04ce9c8dcd7d39f0$var$_canvas = $04ce9c8dcd7d39f0$var$createElementNS("canvas");
            $04ce9c8dcd7d39f0$var$_canvas.width = image.width;
            $04ce9c8dcd7d39f0$var$_canvas.height = image.height;
            const context = $04ce9c8dcd7d39f0$var$_canvas.getContext("2d");
            if (image instanceof ImageData) context.putImageData(image, 0, 0);
            else context.drawImage(image, 0, 0, image.width, image.height);
            canvas = $04ce9c8dcd7d39f0$var$_canvas;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
            console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
            return canvas.toDataURL("image/jpeg", 0.6);
        } else return canvas.toDataURL("image/png");
    }
    static sRGBToLinear(image) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
            const canvas = $04ce9c8dcd7d39f0$var$createElementNS("canvas");
            canvas.width = image.width;
            canvas.height = image.height;
            const context = canvas.getContext("2d");
            context.drawImage(image, 0, 0, image.width, image.height);
            const imageData = context.getImageData(0, 0, image.width, image.height);
            const data = imageData.data;
            for(let i = 0; i < data.length; i++)data[i] = $04ce9c8dcd7d39f0$var$SRGBToLinear(data[i] / 255) * 255;
            context.putImageData(imageData, 0, 0);
            return canvas;
        } else if (image.data) {
            const data = image.data.slice(0);
            for(let i = 0; i < data.length; i++)if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) data[i] = Math.floor($04ce9c8dcd7d39f0$var$SRGBToLinear(data[i] / 255) * 255);
            else // assuming float
            data[i] = $04ce9c8dcd7d39f0$var$SRGBToLinear(data[i]);
            return {
                data: data,
                width: image.width,
                height: image.height
            };
        } else {
            console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
            return image;
        }
    }
}
let $04ce9c8dcd7d39f0$var$sourceId = 0;
class $04ce9c8dcd7d39f0$export$1d2df86270c81ecb {
    constructor(data = null){
        this.isSource = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$sourceId++
        });
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.data = data;
        this.version = 0;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (!isRootObject && meta.images[this.uuid] !== undefined) return meta.images[this.uuid];
        const output = {
            uuid: this.uuid,
            url: ""
        };
        const data = this.data;
        if (data !== null) {
            let url;
            if (Array.isArray(data)) {
                // cube texture
                url = [];
                for(let i = 0, l = data.length; i < l; i++)if (data[i].isDataTexture) url.push($04ce9c8dcd7d39f0$var$serializeImage(data[i].image));
                else url.push($04ce9c8dcd7d39f0$var$serializeImage(data[i]));
            } else // texture
            url = $04ce9c8dcd7d39f0$var$serializeImage(data);
            output.url = url;
        }
        if (!isRootObject) meta.images[this.uuid] = output;
        return output;
    }
}
function $04ce9c8dcd7d39f0$var$serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) // default images
    return $04ce9c8dcd7d39f0$export$698882cf06df44aa.getDataURL(image);
    else {
        if (image.data) // images of DataTexture
        return {
            data: Array.from(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        };
        else {
            console.warn("THREE.Texture: Unable to serialize Texture.");
            return {};
        }
    }
}
let $04ce9c8dcd7d39f0$var$textureId = 0;
class $04ce9c8dcd7d39f0$export$5431306cf43de24a extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(image = $04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_IMAGE, mapping = $04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_MAPPING, wrapS = $04ce9c8dcd7d39f0$export$9d9334239a5a5e06, wrapT = $04ce9c8dcd7d39f0$export$9d9334239a5a5e06, magFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8, minFilter = $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b, format = $04ce9c8dcd7d39f0$export$3f8bb04b555a363c, type = $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10, anisotropy = $04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_ANISOTROPY, colorSpace1 = $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51){
        super();
        this.isTexture = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$textureId++
        });
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.name = "";
        this.source = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(image);
        this.mipmaps = [];
        this.mapping = mapping;
        this.channel = 0;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type;
        this.offset = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0, 0);
        this.repeat = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.center = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new $04ce9c8dcd7d39f0$export$8ff26dafa08918();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
        if (typeof colorSpace1 === "string") this.colorSpace = colorSpace1;
        else {
            $04ce9c8dcd7d39f0$var$warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
            this.colorSpace = colorSpace1 === $04ce9c8dcd7d39f0$export$f32388edbb32674 ? $04ce9c8dcd7d39f0$export$561f394b24edfcaa : $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51;
        }
        this.userData = {};
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
        this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
    }
    get image() {
        return this.source.data;
    }
    set image(value = null) {
        this.source.data = value;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.source = source.source;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.channel = source.channel;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.colorSpace = source.colorSpace;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        this.needsUpdate = true;
        return this;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (!isRootObject && meta.textures[this.uuid] !== undefined) return meta.textures[this.uuid];
        const output = {
            metadata: {
                version: 4.6,
                type: "Texture",
                generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(meta).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        if (Object.keys(this.userData).length > 0) output.userData = this.userData;
        if (!isRootObject) meta.textures[this.uuid] = output;
        return output;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    transformUv(uv) {
        if (this.mapping !== $04ce9c8dcd7d39f0$export$1beec6768cbb3d2d) return uv;
        uv.applyMatrix3(this.matrix);
        if (uv.x < 0 || uv.x > 1) switch(this.wrapS){
            case $04ce9c8dcd7d39f0$export$533346c8e8dac0f5:
                uv.x = uv.x - Math.floor(uv.x);
                break;
            case $04ce9c8dcd7d39f0$export$9d9334239a5a5e06:
                uv.x = uv.x < 0 ? 0 : 1;
                break;
            case $04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f:
                if (Math.abs(Math.floor(uv.x) % 2) === 1) uv.x = Math.ceil(uv.x) - uv.x;
                else uv.x = uv.x - Math.floor(uv.x);
                break;
        }
        if (uv.y < 0 || uv.y > 1) switch(this.wrapT){
            case $04ce9c8dcd7d39f0$export$533346c8e8dac0f5:
                uv.y = uv.y - Math.floor(uv.y);
                break;
            case $04ce9c8dcd7d39f0$export$9d9334239a5a5e06:
                uv.y = uv.y < 0 ? 0 : 1;
                break;
            case $04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f:
                if (Math.abs(Math.floor(uv.y) % 2) === 1) uv.y = Math.ceil(uv.y) - uv.y;
                else uv.y = uv.y - Math.floor(uv.y);
                break;
        }
        if (this.flipY) uv.y = 1 - uv.y;
        return uv;
    }
    set needsUpdate(value) {
        if (value === true) {
            this.version++;
            this.source.needsUpdate = true;
        }
    }
    get encoding() {
        $04ce9c8dcd7d39f0$var$warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
        return this.colorSpace === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? $04ce9c8dcd7d39f0$export$f32388edbb32674 : $04ce9c8dcd7d39f0$export$7207336e4151a112;
    }
    set encoding(encoding) {
        $04ce9c8dcd7d39f0$var$warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
        this.colorSpace = encoding === $04ce9c8dcd7d39f0$export$f32388edbb32674 ? $04ce9c8dcd7d39f0$export$561f394b24edfcaa : $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51;
    }
}
$04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_IMAGE = null;
$04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_MAPPING = $04ce9c8dcd7d39f0$export$1beec6768cbb3d2d;
$04ce9c8dcd7d39f0$export$5431306cf43de24a.DEFAULT_ANISOTROPY = 1;
class $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3 {
    constructor(x = 0, y = 0, z = 0, w = 1){
        $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3.prototype.isVector4 = true;
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    get width() {
        return this.z;
    }
    set width(value) {
        this.z = value;
    }
    get height() {
        return this.w;
    }
    set height(value) {
        this.w = value;
    }
    set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setW(w) {
        this.w = w;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            case 3:
                this.w = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w !== undefined ? v.w : 1;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        this.w += v.w;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        this.w += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        this.w += v.w * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        this.w -= v.w;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        this.w -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        this.w *= v.w;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        this.w *= scalar;
        return this;
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
        // q is assumed to be normalized
        this.w = 2 * Math.acos(q.w);
        const s = Math.sqrt(1 - q.w * q.w);
        if (s < 0.0001) {
            this.x = 1;
            this.y = 0;
            this.z = 0;
        } else {
            this.x = q.x / s;
            this.y = q.y / s;
            this.z = q.z / s;
        }
        return this;
    }
    setAxisAngleFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        let angle, x, y, z; // variables for result
        const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
            // singularity found
            // first check for identity matrix which must have +1 for all terms
            // in leading diagonal and zero in other terms
            if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                // this singularity is identity matrix so angle = 0
                this.set(1, 0, 0, 0);
                return this; // zero angle, arbitrary axis
            }
            // otherwise this singularity is angle = 180
            angle = Math.PI;
            const xx = (m11 + 1) / 2;
            const yy = (m22 + 1) / 2;
            const zz = (m33 + 1) / 2;
            const xy = (m12 + m21) / 4;
            const xz = (m13 + m31) / 4;
            const yz = (m23 + m32) / 4;
            if (xx > yy && xx > zz) {
                // m11 is the largest diagonal term
                if (xx < epsilon) {
                    x = 0;
                    y = 0.707106781;
                    z = 0.707106781;
                } else {
                    x = Math.sqrt(xx);
                    y = xy / x;
                    z = xz / x;
                }
            } else if (yy > zz) {
                // m22 is the largest diagonal term
                if (yy < epsilon) {
                    x = 0.707106781;
                    y = 0;
                    z = 0.707106781;
                } else {
                    y = Math.sqrt(yy);
                    x = xy / y;
                    z = yz / y;
                }
            } else // m33 is the largest diagonal term so base result on this
            if (zz < epsilon) {
                x = 0.707106781;
                y = 0.707106781;
                z = 0;
            } else {
                z = Math.sqrt(zz);
                x = xz / z;
                y = yz / z;
            }
            this.set(x, y, z, angle);
            return this; // return 180 deg rotation
        }
        // as we have reached here there are no singularities so we can handle normally
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
        if (Math.abs(s) < 0.001) s = 1;
        // prevent divide by zero, should not happen if matrix is orthogonal and should be
        // caught by singularity test above, but I've left it in just in case
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        this.w = Math.min(this.w, v.w);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        this.w = Math.max(this.w, v.w);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        this.w = Math.max(min.w, Math.min(max.w, this.w));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        this.w = Math.max(minVal, Math.min(maxVal, this.w));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        this.w += (v.w - this.w) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        this.w = v1.w + (v2.w - v1.w) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        array[offset + 3] = this.w;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        this.w = attribute.getW(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
    }
}
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/ class $04ce9c8dcd7d39f0$export$efcb1f8bf367cbfb extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(width = 1, height = 1, options = {}){
        super();
        this.isRenderTarget = true;
        this.width = width;
        this.height = height;
        this.depth = 1;
        this.scissor = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, width, height);
        this.scissorTest = false;
        this.viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, width, height);
        const image = {
            width: width,
            height: height,
            depth: 1
        };
        if (options.encoding !== undefined) {
            // @deprecated, r152
            $04ce9c8dcd7d39f0$var$warnOnce("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === $04ce9c8dcd7d39f0$export$f32388edbb32674 ? $04ce9c8dcd7d39f0$export$561f394b24edfcaa : $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51;
        }
        this.texture = new $04ce9c8dcd7d39f0$export$5431306cf43de24a(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
        this.texture.isRenderTargetTexture = true;
        this.texture.flipY = false;
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
        this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
        this.samples = options.samples !== undefined ? options.samples : 0;
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.texture.image.width = width;
            this.texture.image.height = height;
            this.texture.image.depth = depth;
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.scissor.copy(source.scissor);
        this.scissorTest = source.scissorTest;
        this.viewport.copy(source.viewport);
        this.texture = source.texture.clone();
        this.texture.isRenderTargetTexture = true;
        // ensure image object is not shared, see #20328
        const image = Object.assign({}, source.texture.image);
        this.texture.source = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(image);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
        this.samples = source.samples;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
class $04ce9c8dcd7d39f0$export$3c052beb2e51e23f extends $04ce9c8dcd7d39f0$export$efcb1f8bf367cbfb {
    constructor(width = 1, height = 1, options = {}){
        super(width, height, options);
        this.isWebGLRenderTarget = true;
    }
}
class $04ce9c8dcd7d39f0$export$dfac6c8e811406a3 extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, depth = 1){
        super(null);
        this.isDataArrayTexture = true;
        this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        this.magFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.minFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.wrapR = $04ce9c8dcd7d39f0$export$9d9334239a5a5e06;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
class $04ce9c8dcd7d39f0$export$c77a02c11ed180c7 extends $04ce9c8dcd7d39f0$export$3c052beb2e51e23f {
    constructor(width = 1, height = 1, depth = 1){
        super(width, height);
        this.isWebGLArrayRenderTarget = true;
        this.depth = depth;
        this.texture = new $04ce9c8dcd7d39f0$export$dfac6c8e811406a3(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
    }
}
class $04ce9c8dcd7d39f0$export$d7a3086320f856db extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, depth = 1){
        // We're going to add .setXXX() methods for setting properties later.
        // Users can still set in DataTexture3D directly.
        //
        //	const texture = new THREE.DataTexture3D( data, width, height, depth );
        // 	texture.anisotropy = 16;
        //
        // See #14839
        super(null);
        this.isData3DTexture = true;
        this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        this.magFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.minFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.wrapR = $04ce9c8dcd7d39f0$export$9d9334239a5a5e06;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
class $04ce9c8dcd7d39f0$export$7ee06591009639df extends $04ce9c8dcd7d39f0$export$3c052beb2e51e23f {
    constructor(width = 1, height = 1, depth = 1){
        super(width, height);
        this.isWebGL3DRenderTarget = true;
        this.depth = depth;
        this.texture = new $04ce9c8dcd7d39f0$export$d7a3086320f856db(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
    }
}
class $04ce9c8dcd7d39f0$export$bd934554fb721730 extends $04ce9c8dcd7d39f0$export$3c052beb2e51e23f {
    constructor(width = 1, height = 1, count = 1, options = {}){
        super(width, height, options);
        this.isWebGLMultipleRenderTargets = true;
        const texture = this.texture;
        this.texture = [];
        for(let i = 0; i < count; i++){
            this.texture[i] = texture.clone();
            this.texture[i].isRenderTargetTexture = true;
        }
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            for(let i = 0, il = this.texture.length; i < il; i++){
                this.texture[i].image.width = width;
                this.texture[i].image.height = height;
                this.texture[i].image.depth = depth;
            }
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
    }
    copy(source) {
        this.dispose();
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.scissor.copy(source.scissor);
        this.scissorTest = source.scissorTest;
        this.viewport.copy(source.viewport);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
        this.texture.length = 0;
        for(let i = 0, il = source.texture.length; i < il; i++){
            this.texture[i] = source.texture[i].clone();
            this.texture[i].isRenderTargetTexture = true;
        }
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3 {
    constructor(x = 0, y = 0, z = 0, w = 1){
        this.isQuaternion = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
        // fuzz-free, array-based Quaternion SLERP operation
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t === 0) {
            dst[dstOffset + 0] = x0;
            dst[dstOffset + 1] = y0;
            dst[dstOffset + 2] = z0;
            dst[dstOffset + 3] = w0;
            return;
        }
        if (t === 1) {
            dst[dstOffset + 0] = x1;
            dst[dstOffset + 1] = y1;
            dst[dstOffset + 2] = z1;
            dst[dstOffset + 3] = w1;
            return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
            let s = 1 - t;
            const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
            // Skip the Slerp for tiny steps to avoid numeric problems:
            if (sqrSin > Number.EPSILON) {
                const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                s = Math.sin(s * len) / sin;
                t = Math.sin(t * len) / sin;
            }
            const tDir = t * dir;
            x0 = x0 * s + x1 * tDir;
            y0 = y0 * s + y1 * tDir;
            z0 = z0 * s + z1 * tDir;
            w0 = w0 * s + w1 * tDir;
            // Normalize in case we just did a lerp:
            if (s === 1 - t) {
                const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                x0 *= f;
                y0 *= f;
                z0 *= f;
                w0 *= f;
            }
        }
        dst[dstOffset] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
        const x0 = src0[srcOffset0];
        const y0 = src0[srcOffset0 + 1];
        const z0 = src0[srcOffset0 + 2];
        const w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1];
        const y1 = src1[srcOffset1 + 1];
        const z1 = src1[srcOffset1 + 2];
        const w1 = src1[srcOffset1 + 3];
        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onChangeCallback();
    }
    set(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
    }
    setFromEuler(euler, update) {
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        // http://www.mathworks.com/matlabcentral/fileexchange/
        // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
        //	content/SpinCalc.m
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch(order){
            case "XYZ":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "YXZ":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case "ZXY":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "ZYX":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case "YZX":
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case "XZY":
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            default:
                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
        }
        if (update !== false) this._onChangeCallback();
        return this;
    }
    setFromAxisAngle(axis, angle) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        // assumes axis is normalized
        const halfAngle = angle / 2, s = Math.sin(halfAngle);
        this._x = axis.x * s;
        this._y = axis.y * s;
        this._z = axis.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1.0);
            this._w = 0.25 / s;
            this._x = (m32 - m23) * s;
            this._y = (m13 - m31) * s;
            this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
            const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
            this._w = (m32 - m23) / s;
            this._x = 0.25 * s;
            this._y = (m12 + m21) / s;
            this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
            const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
            this._w = (m13 - m31) / s;
            this._x = (m12 + m21) / s;
            this._y = 0.25 * s;
            this._z = (m23 + m32) / s;
        } else {
            const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
            this._w = (m21 - m12) / s;
            this._x = (m13 + m31) / s;
            this._y = (m23 + m32) / s;
            this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
    }
    setFromUnitVectors(vFrom, vTo) {
        // assumes direction vectors vFrom and vTo are normalized
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
            // vFrom and vTo point in opposite directions
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                this._x = -vFrom.y;
                this._y = vFrom.x;
                this._z = 0;
                this._w = r;
            } else {
                this._x = 0;
                this._y = -vFrom.z;
                this._z = vFrom.y;
                this._w = r;
            }
        } else {
            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
            this._w = r;
        }
        return this.normalize();
    }
    angleTo(q) {
        return 2 * Math.acos(Math.abs($04ce9c8dcd7d39f0$var$clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
        const angle = this.angleTo(q);
        if (angle === 0) return this;
        const t = Math.min(1, step / angle);
        this.slerp(q, t);
        return this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        // quaternion is assumed to have unit length
        return this.conjugate();
    }
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
    }
    dot(v) {
        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let l = this.length();
        if (l === 0) {
            this._x = 0;
            this._y = 0;
            this._z = 0;
            this._w = 1;
        } else {
            l = 1 / l;
            this._x = this._x * l;
            this._y = this._y * l;
            this._z = this._z * l;
            this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
    }
    multiply(q) {
        return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
        return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
        const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
        const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
    }
    slerp(qb, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(qb);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
        let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
        if (cosHalfTheta < 0) {
            this._w = -qb._w;
            this._x = -qb._x;
            this._y = -qb._y;
            this._z = -qb._z;
            cosHalfTheta = -cosHalfTheta;
        } else this.copy(qb);
        if (cosHalfTheta >= 1.0) {
            this._w = w;
            this._x = x;
            this._y = y;
            this._z = z;
            return this;
        }
        const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
            const s = 1 - t;
            this._w = s * w + t * this._w;
            this._x = s * x + t * this._x;
            this._y = s * y + t * this._y;
            this._z = s * z + t * this._z;
            this.normalize();
            this._onChangeCallback();
            return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
    }
    slerpQuaternions(qa, qb, t) {
        return this.copy(qa).slerp(qb, t);
    }
    random() {
        // Derived from http://planning.cs.uiuc.edu/node198.html
        // Note, this source uses w, x, y, z ordering,
        // so we swap the order below.
        const u1 = Math.random();
        const sqrt1u1 = Math.sqrt(1 - u1);
        const sqrtu1 = Math.sqrt(u1);
        const u2 = 2 * Math.PI * Math.random();
        const u3 = 2 * Math.PI * Math.random();
        return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
    equals(quaternion) {
        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._w;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this._x = attribute.getX(index);
        this._y = attribute.getY(index);
        this._z = attribute.getZ(index);
        this._w = attribute.getW(index);
        return this;
    }
    toJSON() {
        return this.toArray();
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._w;
    }
}
class $04ce9c8dcd7d39f0$export$64b5c384219d3699 {
    constructor(x = 0, y = 0, z = 0){
        $04ce9c8dcd7d39f0$export$64b5c384219d3699.prototype.isVector3 = true;
        this.x = x;
        this.y = y;
        this.z = z;
    }
    set(x, y, z) {
        if (z === undefined) z = this.z; // sprite.scale.set(x,y)
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            default:
                throw new Error("index is out of range: " + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
    }
    multiplyVectors(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
    }
    applyEuler(euler) {
        return this.applyQuaternion($04ce9c8dcd7d39f0$var$_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
        return this.applyQuaternion($04ce9c8dcd7d39f0$var$_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
    }
    applyNormalMatrix(m) {
        return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
    }
    applyQuaternion(q) {
        const x = this.x, y = this.y, z = this.z;
        const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
        // calculate quat * vector
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
    }
    project(camera) {
        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
        // input: THREE.Matrix4 affine matrix
        // vector interpreted as a direction
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        this.z /= v.z;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        return this;
    }
    cross(v) {
        return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
        const ax = a.x, ay = a.y, az = a.z;
        const bx = b.x, by = b.y, bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    projectOnVector(v) {
        const denominator = v.lengthSq();
        if (denominator === 0) return this.set(0, 0, 0);
        const scalar = v.dot(this) / denominator;
        return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
        $04ce9c8dcd7d39f0$var$_vector$b.copy(this).projectOnVector(planeNormal);
        return this.sub($04ce9c8dcd7d39f0$var$_vector$b);
    }
    reflect(normal) {
        // reflect incident vector off plane orthogonal to normal
        // normal is assumed to have unit length
        return this.sub($04ce9c8dcd7d39f0$var$_vector$b.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        // clamp, to handle numerical problems
        return Math.acos($04ce9c8dcd7d39f0$var$clamp(theta, -1, 1));
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
        return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
        const sinPhiRadius = Math.sin(phi) * radius;
        this.x = sinPhiRadius * Math.sin(theta);
        this.y = Math.cos(phi) * radius;
        this.z = sinPhiRadius * Math.cos(theta);
        return this;
    }
    setFromCylindrical(c) {
        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
        this.x = radius * Math.sin(theta);
        this.y = y;
        this.z = radius * Math.cos(theta);
        return this;
    }
    setFromMatrixPosition(m) {
        const e = m.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
    }
    setFromMatrixScale(m) {
        const sx = this.setFromMatrixColumn(m, 0).length();
        const sy = this.setFromMatrixColumn(m, 1).length();
        const sz = this.setFromMatrixColumn(m, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
    }
    setFromMatrixColumn(m, index) {
        return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
        return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
        this.x = e._x;
        this.y = e._y;
        this.z = e._z;
        return this;
    }
    setFromColor(c) {
        this.x = c.r;
        this.y = c.g;
        this.z = c.b;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
    }
    randomDirection() {
        // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
        const u = (Math.random() - 0.5) * 2;
        const t = Math.random() * Math.PI * 2;
        const f = Math.sqrt(1 - u ** 2);
        this.x = f * Math.cos(t);
        this.y = f * Math.sin(t);
        this.z = u;
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
}
const $04ce9c8dcd7d39f0$var$_vector$b = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_quaternion$4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
class $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3 {
    constructor(min = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(Infinity, Infinity, Infinity), max = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity)){
        this.isBox3 = true;
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromArray(array) {
        this.makeEmpty();
        for(let i = 0, il = array.length; i < il; i += 3)this.expandByPoint($04ce9c8dcd7d39f0$var$_vector$a.fromArray(array, i));
        return this;
    }
    setFromBufferAttribute(attribute) {
        this.makeEmpty();
        for(let i = 0, il = attribute.count; i < il; i++)this.expandByPoint($04ce9c8dcd7d39f0$var$_vector$a.fromBufferAttribute(attribute, i));
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = $04ce9c8dcd7d39f0$var$_vector$a.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    setFromObject(object, precise = false) {
        this.makeEmpty();
        return this.expandByObject(object, precise);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    expandByObject(object, precise = false) {
        // Computes the world-axis-aligned bounding box of an object (including its children),
        // accounting for both the object's, and children's, world transforms
        object.updateWorldMatrix(false, false);
        if (object.boundingBox !== undefined) {
            if (object.boundingBox === null) object.computeBoundingBox();
            $04ce9c8dcd7d39f0$var$_box$3.copy(object.boundingBox);
            $04ce9c8dcd7d39f0$var$_box$3.applyMatrix4(object.matrixWorld);
            this.union($04ce9c8dcd7d39f0$var$_box$3);
        } else {
            const geometry = object.geometry;
            if (geometry !== undefined) {
                if (precise && geometry.attributes !== undefined && geometry.attributes.position !== undefined) {
                    const position = geometry.attributes.position;
                    for(let i = 0, l = position.count; i < l; i++){
                        $04ce9c8dcd7d39f0$var$_vector$a.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
                        this.expandByPoint($04ce9c8dcd7d39f0$var$_vector$a);
                    }
                } else {
                    if (geometry.boundingBox === null) geometry.computeBoundingBox();
                    $04ce9c8dcd7d39f0$var$_box$3.copy(geometry.boundingBox);
                    $04ce9c8dcd7d39f0$var$_box$3.applyMatrix4(object.matrixWorld);
                    this.union($04ce9c8dcd7d39f0$var$_box$3);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)this.expandByObject(children[i], precise);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
        // using 6 splitting planes to rule out intersections.
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
        // Find the point on the AABB closest to the sphere center.
        this.clampPoint(sphere.center, $04ce9c8dcd7d39f0$var$_vector$a);
        // If that point is inside the sphere, the AABB and sphere intersect.
        return $04ce9c8dcd7d39f0$var$_vector$a.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
        // We compute the minimum and maximum dot product values. If those values
        // are on the same side (back or front) of the plane, then there is no intersection.
        let min, max;
        if (plane.normal.x > 0) {
            min = plane.normal.x * this.min.x;
            max = plane.normal.x * this.max.x;
        } else {
            min = plane.normal.x * this.max.x;
            max = plane.normal.x * this.min.x;
        }
        if (plane.normal.y > 0) {
            min += plane.normal.y * this.min.y;
            max += plane.normal.y * this.max.y;
        } else {
            min += plane.normal.y * this.max.y;
            max += plane.normal.y * this.min.y;
        }
        if (plane.normal.z > 0) {
            min += plane.normal.z * this.min.z;
            max += plane.normal.z * this.max.z;
        } else {
            min += plane.normal.z * this.max.z;
            max += plane.normal.z * this.min.z;
        }
        return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
        if (this.isEmpty()) return false;
        // compute box center and extents
        this.getCenter($04ce9c8dcd7d39f0$var$_center);
        $04ce9c8dcd7d39f0$var$_extents.subVectors(this.max, $04ce9c8dcd7d39f0$var$_center);
        // translate triangle to aabb origin
        $04ce9c8dcd7d39f0$var$_v0$2.subVectors(triangle.a, $04ce9c8dcd7d39f0$var$_center);
        $04ce9c8dcd7d39f0$var$_v1$7.subVectors(triangle.b, $04ce9c8dcd7d39f0$var$_center);
        $04ce9c8dcd7d39f0$var$_v2$4.subVectors(triangle.c, $04ce9c8dcd7d39f0$var$_center);
        // compute edge vectors for triangle
        $04ce9c8dcd7d39f0$var$_f0.subVectors($04ce9c8dcd7d39f0$var$_v1$7, $04ce9c8dcd7d39f0$var$_v0$2);
        $04ce9c8dcd7d39f0$var$_f1.subVectors($04ce9c8dcd7d39f0$var$_v2$4, $04ce9c8dcd7d39f0$var$_v1$7);
        $04ce9c8dcd7d39f0$var$_f2.subVectors($04ce9c8dcd7d39f0$var$_v0$2, $04ce9c8dcd7d39f0$var$_v2$4);
        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
        let axes = [
            0,
            -$04ce9c8dcd7d39f0$var$_f0.z,
            $04ce9c8dcd7d39f0$var$_f0.y,
            0,
            -$04ce9c8dcd7d39f0$var$_f1.z,
            $04ce9c8dcd7d39f0$var$_f1.y,
            0,
            -$04ce9c8dcd7d39f0$var$_f2.z,
            $04ce9c8dcd7d39f0$var$_f2.y,
            $04ce9c8dcd7d39f0$var$_f0.z,
            0,
            -$04ce9c8dcd7d39f0$var$_f0.x,
            $04ce9c8dcd7d39f0$var$_f1.z,
            0,
            -$04ce9c8dcd7d39f0$var$_f1.x,
            $04ce9c8dcd7d39f0$var$_f2.z,
            0,
            -$04ce9c8dcd7d39f0$var$_f2.x,
            -$04ce9c8dcd7d39f0$var$_f0.y,
            $04ce9c8dcd7d39f0$var$_f0.x,
            0,
            -$04ce9c8dcd7d39f0$var$_f1.y,
            $04ce9c8dcd7d39f0$var$_f1.x,
            0,
            -$04ce9c8dcd7d39f0$var$_f2.y,
            $04ce9c8dcd7d39f0$var$_f2.x,
            0
        ];
        if (!$04ce9c8dcd7d39f0$var$satForAxes(axes, $04ce9c8dcd7d39f0$var$_v0$2, $04ce9c8dcd7d39f0$var$_v1$7, $04ce9c8dcd7d39f0$var$_v2$4, $04ce9c8dcd7d39f0$var$_extents)) return false;
        // test 3 face normals from the aabb
        axes = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (!$04ce9c8dcd7d39f0$var$satForAxes(axes, $04ce9c8dcd7d39f0$var$_v0$2, $04ce9c8dcd7d39f0$var$_v1$7, $04ce9c8dcd7d39f0$var$_v2$4, $04ce9c8dcd7d39f0$var$_extents)) return false;
        // finally testing the face normal of the triangle
        // use already existing triangle edge vectors here
        $04ce9c8dcd7d39f0$var$_triangleNormal.crossVectors($04ce9c8dcd7d39f0$var$_f0, $04ce9c8dcd7d39f0$var$_f1);
        axes = [
            $04ce9c8dcd7d39f0$var$_triangleNormal.x,
            $04ce9c8dcd7d39f0$var$_triangleNormal.y,
            $04ce9c8dcd7d39f0$var$_triangleNormal.z
        ];
        return $04ce9c8dcd7d39f0$var$satForAxes(axes, $04ce9c8dcd7d39f0$var$_v0$2, $04ce9c8dcd7d39f0$var$_v1$7, $04ce9c8dcd7d39f0$var$_v2$4, $04ce9c8dcd7d39f0$var$_extents);
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        return this.clampPoint(point, $04ce9c8dcd7d39f0$var$_vector$a).distanceTo(point);
    }
    getBoundingSphere(target) {
        if (this.isEmpty()) target.makeEmpty();
        else {
            this.getCenter(target.center);
            target.radius = this.getSize($04ce9c8dcd7d39f0$var$_vector$a).length() * 0.5;
        }
        return target;
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    applyMatrix4(matrix) {
        // transform of empty box is an empty box.
        if (this.isEmpty()) return this;
        // NOTE: I am using a binary pattern to specify all 2^3 combinations below
        $04ce9c8dcd7d39f0$var$_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
        $04ce9c8dcd7d39f0$var$_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
        $04ce9c8dcd7d39f0$var$_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
        $04ce9c8dcd7d39f0$var$_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
        $04ce9c8dcd7d39f0$var$_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
        $04ce9c8dcd7d39f0$var$_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
        $04ce9c8dcd7d39f0$var$_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
        $04ce9c8dcd7d39f0$var$_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
        this.setFromPoints($04ce9c8dcd7d39f0$var$_points);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
const $04ce9c8dcd7d39f0$var$_points = [
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699()
];
const $04ce9c8dcd7d39f0$var$_vector$a = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_box$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
// triangle centered vertices
const $04ce9c8dcd7d39f0$var$_v0$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v1$7 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v2$4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
// triangle edge vectors
const $04ce9c8dcd7d39f0$var$_f0 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_f1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_f2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_center = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_extents = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_triangleNormal = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_testAxis = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
function $04ce9c8dcd7d39f0$var$satForAxes(axes, v0, v1, v2, extents) {
    for(let i = 0, j = axes.length - 3; i <= j; i += 3){
        $04ce9c8dcd7d39f0$var$_testAxis.fromArray(axes, i);
        // project the aabb onto the separating axis
        const r = extents.x * Math.abs($04ce9c8dcd7d39f0$var$_testAxis.x) + extents.y * Math.abs($04ce9c8dcd7d39f0$var$_testAxis.y) + extents.z * Math.abs($04ce9c8dcd7d39f0$var$_testAxis.z);
        // project all 3 vertices of the triangle onto the separating axis
        const p0 = v0.dot($04ce9c8dcd7d39f0$var$_testAxis);
        const p1 = v1.dot($04ce9c8dcd7d39f0$var$_testAxis);
        const p2 = v2.dot($04ce9c8dcd7d39f0$var$_testAxis);
        // actual test, basically see if either of the most extreme of the triangle points intersects r
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) // points of the projected triangle are outside the projected half-length of the aabb
        // the axis is separating and we can exit
        return false;
    }
    return true;
}
const $04ce9c8dcd7d39f0$var$_box$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
const $04ce9c8dcd7d39f0$var$_v1$6 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v2$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$805e8b72413ccaba {
    constructor(center = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), radius = -1){
        this.center = center;
        this.radius = radius;
    }
    set(center, radius) {
        this.center.copy(center);
        this.radius = radius;
        return this;
    }
    setFromPoints(points, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== undefined) center.copy(optionalCenter);
        else $04ce9c8dcd7d39f0$var$_box$2.setFromPoints(points).getCenter(center);
        let maxRadiusSq = 0;
        for(let i = 0, il = points.length; i < il; i++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
    }
    copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
    }
    containsPoint(point) {
        return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
        return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
        const radiusSum = this.radius + sphere.radius;
        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
        return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
        const deltaLengthSq = this.center.distanceToSquared(point);
        target.copy(point);
        if (deltaLengthSq > this.radius * this.radius) {
            target.sub(this.center).normalize();
            target.multiplyScalar(this.radius).add(this.center);
        }
        return target;
    }
    getBoundingBox(target) {
        if (this.isEmpty()) {
            // Empty sphere produces empty bounding box
            target.makeEmpty();
            return target;
        }
        target.set(this.center, this.center);
        target.expandByScalar(this.radius);
        return target;
    }
    applyMatrix4(matrix) {
        this.center.applyMatrix4(matrix);
        this.radius = this.radius * matrix.getMaxScaleOnAxis();
        return this;
    }
    translate(offset) {
        this.center.add(offset);
        return this;
    }
    expandByPoint(point) {
        if (this.isEmpty()) {
            this.center.copy(point);
            this.radius = 0;
            return this;
        }
        $04ce9c8dcd7d39f0$var$_v1$6.subVectors(point, this.center);
        const lengthSq = $04ce9c8dcd7d39f0$var$_v1$6.lengthSq();
        if (lengthSq > this.radius * this.radius) {
            // calculate the minimal sphere
            const length = Math.sqrt(lengthSq);
            const delta = (length - this.radius) * 0.5;
            this.center.addScaledVector($04ce9c8dcd7d39f0$var$_v1$6, delta / length);
            this.radius += delta;
        }
        return this;
    }
    union(sphere) {
        if (sphere.isEmpty()) return this;
        if (this.isEmpty()) {
            this.copy(sphere);
            return this;
        }
        if (this.center.equals(sphere.center) === true) this.radius = Math.max(this.radius, sphere.radius);
        else {
            $04ce9c8dcd7d39f0$var$_v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
            this.expandByPoint($04ce9c8dcd7d39f0$var$_v1$6.copy(sphere.center).add($04ce9c8dcd7d39f0$var$_v2$3));
            this.expandByPoint($04ce9c8dcd7d39f0$var$_v1$6.copy(sphere.center).sub($04ce9c8dcd7d39f0$var$_v2$3));
        }
        return this;
    }
    equals(sphere) {
        return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $04ce9c8dcd7d39f0$var$_vector$9 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_segCenter = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_segDir = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_diff = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_edge1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_edge2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_normal$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$a186db52eed6d40e {
    constructor(origin = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), direction = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, -1)){
        this.origin = origin;
        this.direction = direction;
    }
    set(origin, direction) {
        this.origin.copy(origin);
        this.direction.copy(direction);
        return this;
    }
    copy(ray) {
        this.origin.copy(ray.origin);
        this.direction.copy(ray.direction);
        return this;
    }
    at(t, target) {
        return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
        this.direction.copy(v).sub(this.origin).normalize();
        return this;
    }
    recast(t) {
        this.origin.copy(this.at(t, $04ce9c8dcd7d39f0$var$_vector$9));
        return this;
    }
    closestPointToPoint(point, target) {
        target.subVectors(point, this.origin);
        const directionDistance = target.dot(this.direction);
        if (directionDistance < 0) return target.copy(this.origin);
        return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
        return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
        const directionDistance = $04ce9c8dcd7d39f0$var$_vector$9.subVectors(point, this.origin).dot(this.direction);
        // point behind the ray
        if (directionDistance < 0) return this.origin.distanceToSquared(point);
        $04ce9c8dcd7d39f0$var$_vector$9.copy(this.origin).addScaledVector(this.direction, directionDistance);
        return $04ce9c8dcd7d39f0$var$_vector$9.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
        // It returns the min distance between the ray and the segment
        // defined by v0 and v1
        // It can also set two optional targets :
        // - The closest point on the ray
        // - The closest point on the segment
        $04ce9c8dcd7d39f0$var$_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
        $04ce9c8dcd7d39f0$var$_segDir.copy(v1).sub(v0).normalize();
        $04ce9c8dcd7d39f0$var$_diff.copy(this.origin).sub($04ce9c8dcd7d39f0$var$_segCenter);
        const segExtent = v0.distanceTo(v1) * 0.5;
        const a01 = -this.direction.dot($04ce9c8dcd7d39f0$var$_segDir);
        const b0 = $04ce9c8dcd7d39f0$var$_diff.dot(this.direction);
        const b1 = -$04ce9c8dcd7d39f0$var$_diff.dot($04ce9c8dcd7d39f0$var$_segDir);
        const c = $04ce9c8dcd7d39f0$var$_diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
            // The ray and segment are not parallel.
            s0 = a01 * b1 - b0;
            s1 = a01 * b0 - b1;
            extDet = segExtent * det;
            if (s0 >= 0) {
                if (s1 >= -extDet) {
                    if (s1 <= extDet) {
                        // region 0
                        // Minimum at interior points of ray and segment.
                        const invDet = 1 / det;
                        s0 *= invDet;
                        s1 *= invDet;
                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                    } else {
                        // region 1
                        s1 = segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                    }
                } else {
                    // region 5
                    s1 = -segExtent;
                    s0 = Math.max(0, -(a01 * s1 + b0));
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            } else {
                if (s1 <= -extDet) {
                    // region 4
                    s0 = Math.max(0, -(-a01 * segExtent + b0));
                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                } else if (s1 <= extDet) {
                    // region 3
                    s0 = 0;
                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = s1 * (s1 + 2 * b1) + c;
                } else {
                    // region 2
                    s0 = Math.max(0, -(a01 * segExtent + b0));
                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            }
        } else {
            // Ray and segment are parallel.
            s1 = a01 > 0 ? -segExtent : segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
        if (optionalPointOnSegment) optionalPointOnSegment.copy($04ce9c8dcd7d39f0$var$_segCenter).addScaledVector($04ce9c8dcd7d39f0$var$_segDir, s1);
        return sqrDist;
    }
    intersectSphere(sphere, target) {
        $04ce9c8dcd7d39f0$var$_vector$9.subVectors(sphere.center, this.origin);
        const tca = $04ce9c8dcd7d39f0$var$_vector$9.dot(this.direction);
        const d2 = $04ce9c8dcd7d39f0$var$_vector$9.dot($04ce9c8dcd7d39f0$var$_vector$9) - tca * tca;
        const radius2 = sphere.radius * sphere.radius;
        if (d2 > radius2) return null;
        const thc = Math.sqrt(radius2 - d2);
        // t0 = first intersect point - entrance on front of sphere
        const t0 = tca - thc;
        // t1 = second intersect point - exit point on back of sphere
        const t1 = tca + thc;
        // test to see if t1 is behind the ray - if so, return null
        if (t1 < 0) return null;
        // test to see if t0 is behind the ray:
        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
        // in order to always return an intersect point that is in front of the ray.
        if (t0 < 0) return this.at(t1, target);
        // else t0 is in front of the ray, so return the first collision point scaled by t0
        return this.at(t0, target);
    }
    intersectsSphere(sphere) {
        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
        const denominator = plane.normal.dot(this.direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (plane.distanceToPoint(this.origin) === 0) return 0;
            // Null is preferable to undefined since undefined means.... it is undefined
            return null;
        }
        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
        // Return if the ray never intersects the plane
        return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
        const t = this.distanceToPlane(plane);
        if (t === null) return null;
        return this.at(t, target);
    }
    intersectsPlane(plane) {
        // check if the ray lies on the plane first
        const distToPoint = plane.distanceToPoint(this.origin);
        if (distToPoint === 0) return true;
        const denominator = plane.normal.dot(this.direction);
        if (denominator * distToPoint < 0) return true;
        // ray origin is behind the plane (and is pointing behind it)
        return false;
    }
    intersectBox(box, target) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
            tmin = (box.min.x - origin.x) * invdirx;
            tmax = (box.max.x - origin.x) * invdirx;
        } else {
            tmin = (box.max.x - origin.x) * invdirx;
            tmax = (box.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
            tymin = (box.min.y - origin.y) * invdiry;
            tymax = (box.max.y - origin.y) * invdiry;
        } else {
            tymin = (box.max.y - origin.y) * invdiry;
            tymax = (box.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) return null;
        if (tymin > tmin || isNaN(tmin)) tmin = tymin;
        if (tymax < tmax || isNaN(tmax)) tmax = tymax;
        if (invdirz >= 0) {
            tzmin = (box.min.z - origin.z) * invdirz;
            tzmax = (box.max.z - origin.z) * invdirz;
        } else {
            tzmin = (box.max.z - origin.z) * invdirz;
            tzmax = (box.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) return null;
        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
        //return point closest to the ray (positive side)
        if (tmax < 0) return null;
        return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
        return this.intersectBox(box, $04ce9c8dcd7d39f0$var$_vector$9) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
        // Compute the offset origin, edges, and normal.
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
        $04ce9c8dcd7d39f0$var$_edge1.subVectors(b, a);
        $04ce9c8dcd7d39f0$var$_edge2.subVectors(c, a);
        $04ce9c8dcd7d39f0$var$_normal$1.crossVectors($04ce9c8dcd7d39f0$var$_edge1, $04ce9c8dcd7d39f0$var$_edge2);
        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
        let DdN = this.direction.dot($04ce9c8dcd7d39f0$var$_normal$1);
        let sign;
        if (DdN > 0) {
            if (backfaceCulling) return null;
            sign = 1;
        } else if (DdN < 0) {
            sign = -1;
            DdN = -DdN;
        } else return null;
        $04ce9c8dcd7d39f0$var$_diff.subVectors(this.origin, a);
        const DdQxE2 = sign * this.direction.dot($04ce9c8dcd7d39f0$var$_edge2.crossVectors($04ce9c8dcd7d39f0$var$_diff, $04ce9c8dcd7d39f0$var$_edge2));
        // b1 < 0, no intersection
        if (DdQxE2 < 0) return null;
        const DdE1xQ = sign * this.direction.dot($04ce9c8dcd7d39f0$var$_edge1.cross($04ce9c8dcd7d39f0$var$_diff));
        // b2 < 0, no intersection
        if (DdE1xQ < 0) return null;
        // b1+b2 > 1, no intersection
        if (DdQxE2 + DdE1xQ > DdN) return null;
        // Line intersects triangle, check if ray does.
        const QdN = -sign * $04ce9c8dcd7d39f0$var$_diff.dot($04ce9c8dcd7d39f0$var$_normal$1);
        // t < 0, no intersection
        if (QdN < 0) return null;
        // Ray intersects triangle.
        return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
        this.origin.applyMatrix4(matrix4);
        this.direction.transformDirection(matrix4);
        return this;
    }
    equals(ray) {
        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44){
        $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5.prototype.isMatrix4 = true;
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        if (n11 !== undefined) this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        const te = this.elements;
        te[0] = n11;
        te[4] = n12;
        te[8] = n13;
        te[12] = n14;
        te[1] = n21;
        te[5] = n22;
        te[9] = n23;
        te[13] = n24;
        te[2] = n31;
        te[6] = n32;
        te[10] = n33;
        te[14] = n34;
        te[3] = n41;
        te[7] = n42;
        te[11] = n43;
        te[15] = n44;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    clone() {
        return new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5().fromArray(this.elements);
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        te[9] = me[9];
        te[10] = me[10];
        te[11] = me[11];
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        te[15] = me[15];
        return this;
    }
    copyPosition(m) {
        const te = this.elements, me = m.elements;
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        return this;
    }
    setFromMatrix3(m) {
        const me = m.elements;
        this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrixColumn(this, 0);
        yAxis.setFromMatrixColumn(this, 1);
        zAxis.setFromMatrixColumn(this, 2);
        return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
        this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
        return this;
    }
    extractRotation(m) {
        // this method does not support reflection matrices
        const te = this.elements;
        const me = m.elements;
        const scaleX = 1 / $04ce9c8dcd7d39f0$var$_v1$5.setFromMatrixColumn(m, 0).length();
        const scaleY = 1 / $04ce9c8dcd7d39f0$var$_v1$5.setFromMatrixColumn(m, 1).length();
        const scaleZ = 1 / $04ce9c8dcd7d39f0$var$_v1$5.setFromMatrixColumn(m, 2).length();
        te[0] = me[0] * scaleX;
        te[1] = me[1] * scaleX;
        te[2] = me[2] * scaleX;
        te[3] = 0;
        te[4] = me[4] * scaleY;
        te[5] = me[5] * scaleY;
        te[6] = me[6] * scaleY;
        te[7] = 0;
        te[8] = me[8] * scaleZ;
        te[9] = me[9] * scaleZ;
        te[10] = me[10] * scaleZ;
        te[11] = 0;
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromEuler(euler) {
        const te = this.elements;
        const x = euler.x, y = euler.y, z = euler.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (euler.order === "XYZ") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
        } else if (euler.order === "YXZ") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
        } else if (euler.order === "ZXY") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce - df * b;
            te[4] = -a * f;
            te[8] = de + cf * b;
            te[1] = cf + de * b;
            te[5] = a * e;
            te[9] = df - ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
        } else if (euler.order === "ZYX") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = be * d - af;
            te[8] = ae * d + bf;
            te[1] = c * f;
            te[5] = bf * d + ae;
            te[9] = af * d - be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
        } else if (euler.order === "YZX") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
        } else if (euler.order === "XZY") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = ac * f + bd;
            te[5] = a * e;
            te[9] = ad * f - bc;
            te[2] = bc * f - ad;
            te[6] = b * e;
            te[10] = bd * f + ac;
        }
        // bottom row
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        // last column
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromQuaternion(q) {
        return this.compose($04ce9c8dcd7d39f0$var$_zero, q, $04ce9c8dcd7d39f0$var$_one);
    }
    lookAt(eye, target, up) {
        const te = this.elements;
        $04ce9c8dcd7d39f0$var$_z.subVectors(eye, target);
        if ($04ce9c8dcd7d39f0$var$_z.lengthSq() === 0) // eye and target are in the same position
        $04ce9c8dcd7d39f0$var$_z.z = 1;
        $04ce9c8dcd7d39f0$var$_z.normalize();
        $04ce9c8dcd7d39f0$var$_x.crossVectors(up, $04ce9c8dcd7d39f0$var$_z);
        if ($04ce9c8dcd7d39f0$var$_x.lengthSq() === 0) {
            // up and z are parallel
            if (Math.abs(up.z) === 1) $04ce9c8dcd7d39f0$var$_z.x += 0.0001;
            else $04ce9c8dcd7d39f0$var$_z.z += 0.0001;
            $04ce9c8dcd7d39f0$var$_z.normalize();
            $04ce9c8dcd7d39f0$var$_x.crossVectors(up, $04ce9c8dcd7d39f0$var$_z);
        }
        $04ce9c8dcd7d39f0$var$_x.normalize();
        $04ce9c8dcd7d39f0$var$_y.crossVectors($04ce9c8dcd7d39f0$var$_z, $04ce9c8dcd7d39f0$var$_x);
        te[0] = $04ce9c8dcd7d39f0$var$_x.x;
        te[4] = $04ce9c8dcd7d39f0$var$_y.x;
        te[8] = $04ce9c8dcd7d39f0$var$_z.x;
        te[1] = $04ce9c8dcd7d39f0$var$_x.y;
        te[5] = $04ce9c8dcd7d39f0$var$_y.y;
        te[9] = $04ce9c8dcd7d39f0$var$_z.y;
        te[2] = $04ce9c8dcd7d39f0$var$_x.z;
        te[6] = $04ce9c8dcd7d39f0$var$_y.z;
        te[10] = $04ce9c8dcd7d39f0$var$_z.z;
        return this;
    }
    multiply(m) {
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[4] *= s;
        te[8] *= s;
        te[12] *= s;
        te[1] *= s;
        te[5] *= s;
        te[9] *= s;
        te[13] *= s;
        te[2] *= s;
        te[6] *= s;
        te[10] *= s;
        te[14] *= s;
        te[3] *= s;
        te[7] *= s;
        te[11] *= s;
        te[15] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
        const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
        const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
        const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
        //TODO: make this more efficient
        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
        const te = this.elements;
        let tmp;
        tmp = te[1];
        te[1] = te[4];
        te[4] = tmp;
        tmp = te[2];
        te[2] = te[8];
        te[8] = tmp;
        tmp = te[6];
        te[6] = te[9];
        te[9] = tmp;
        tmp = te[3];
        te[3] = te[12];
        te[12] = tmp;
        tmp = te[7];
        te[7] = te[13];
        te[13] = tmp;
        tmp = te[11];
        te[11] = te[14];
        te[14] = tmp;
        return this;
    }
    setPosition(x, y, z) {
        const te = this.elements;
        if (x.isVector3) {
            te[12] = x.x;
            te[13] = x.y;
            te[14] = x.z;
        } else {
            te[12] = x;
            te[13] = y;
            te[14] = z;
        }
        return this;
    }
    invert() {
        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te[4] = t12 * detInv;
        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te[8] = t13 * detInv;
        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te[12] = t14 * detInv;
        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
    }
    scale(v) {
        const te = this.elements;
        const x = v.x, y = v.y, z = v.z;
        te[0] *= x;
        te[4] *= y;
        te[8] *= z;
        te[1] *= x;
        te[5] *= y;
        te[9] *= z;
        te[2] *= x;
        te[6] *= y;
        te[10] *= z;
        te[3] *= x;
        te[7] *= y;
        te[11] *= z;
        return this;
    }
    getMaxScaleOnAxis() {
        const te = this.elements;
        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
        if (x.isVector3) this.set(1, 0, 0, x.x, 0, 1, 0, x.y, 0, 0, 1, x.z, 0, 0, 0, 1);
        else this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
        return this;
    }
    makeRotationX(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationY(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationZ(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationAxis(axis, angle) {
        // Based on http://www.gamedev.net/reference/articles/article1199.asp
        const c = Math.cos(angle);
        const s = Math.sin(angle);
        const t = 1 - c;
        const x = axis.x, y = axis.y, z = axis.z;
        const tx = t * x, ty = t * y;
        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
        return this;
    }
    makeScale(x, y, z) {
        this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
        return this;
    }
    compose(position, quaternion, scale) {
        const te = this.elements;
        const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale.x, sy = scale.y, sz = scale.z;
        te[0] = (1 - (yy + zz)) * sx;
        te[1] = (xy + wz) * sx;
        te[2] = (xz - wy) * sx;
        te[3] = 0;
        te[4] = (xy - wz) * sy;
        te[5] = (1 - (xx + zz)) * sy;
        te[6] = (yz + wx) * sy;
        te[7] = 0;
        te[8] = (xz + wy) * sz;
        te[9] = (yz - wx) * sz;
        te[10] = (1 - (xx + yy)) * sz;
        te[11] = 0;
        te[12] = position.x;
        te[13] = position.y;
        te[14] = position.z;
        te[15] = 1;
        return this;
    }
    decompose(position, quaternion, scale) {
        const te = this.elements;
        let sx = $04ce9c8dcd7d39f0$var$_v1$5.set(te[0], te[1], te[2]).length();
        const sy = $04ce9c8dcd7d39f0$var$_v1$5.set(te[4], te[5], te[6]).length();
        const sz = $04ce9c8dcd7d39f0$var$_v1$5.set(te[8], te[9], te[10]).length();
        // if determine is negative, we need to invert one scale
        const det = this.determinant();
        if (det < 0) sx = -sx;
        position.x = te[12];
        position.y = te[13];
        position.z = te[14];
        // scale the rotation part
        $04ce9c8dcd7d39f0$var$_m1$2.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[0] *= invSX;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[1] *= invSX;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[2] *= invSX;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[4] *= invSY;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[5] *= invSY;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[6] *= invSY;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[8] *= invSZ;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[9] *= invSZ;
        $04ce9c8dcd7d39f0$var$_m1$2.elements[10] *= invSZ;
        quaternion.setFromRotationMatrix($04ce9c8dcd7d39f0$var$_m1$2);
        scale.x = sx;
        scale.y = sy;
        scale.z = sz;
        return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
        const te = this.elements;
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        let c, d;
        if (coordinateSystem === $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
            c = -(far + near) / (far - near);
            d = -2 * far * near / (far - near);
        } else if (coordinateSystem === $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac) {
            c = -far / (far - near);
            d = -far * near / (far - near);
        } else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
        te[0] = x;
        te[4] = 0;
        te[8] = a;
        te[12] = 0;
        te[1] = 0;
        te[5] = y;
        te[9] = b;
        te[13] = 0;
        te[2] = 0;
        te[6] = 0;
        te[10] = c;
        te[14] = d;
        te[3] = 0;
        te[7] = 0;
        te[11] = -1;
        te[15] = 0;
        return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
        const te = this.elements;
        const w = 1.0 / (right - left);
        const h = 1.0 / (top - bottom);
        const p = 1.0 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        let z, zInv;
        if (coordinateSystem === $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
            z = (far + near) * p;
            zInv = -2 * p;
        } else if (coordinateSystem === $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac) {
            z = near * p;
            zInv = -1 * p;
        } else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
        te[0] = 2 * w;
        te[4] = 0;
        te[8] = 0;
        te[12] = -x;
        te[1] = 0;
        te[5] = 2 * h;
        te[9] = 0;
        te[13] = -y;
        te[2] = 0;
        te[6] = 0;
        te[10] = zInv;
        te[14] = -z;
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        te[15] = 1;
        return this;
    }
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i = 0; i < 16; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i = 0; i < 16; i++)this.elements[i] = array[i + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        array[offset + 9] = te[9];
        array[offset + 10] = te[10];
        array[offset + 11] = te[11];
        array[offset + 12] = te[12];
        array[offset + 13] = te[13];
        array[offset + 14] = te[14];
        array[offset + 15] = te[15];
        return array;
    }
}
const $04ce9c8dcd7d39f0$var$_v1$5 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_m1$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_zero = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 0);
const $04ce9c8dcd7d39f0$var$_one = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 1, 1);
const $04ce9c8dcd7d39f0$var$_x = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_y = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_z = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_matrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_quaternion$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
class $04ce9c8dcd7d39f0$export$d93cc409a0768c5f {
    constructor(x = 0, y = 0, z = 0, order = $04ce9c8dcd7d39f0$export$d93cc409a0768c5f.DEFAULT_ORDER){
        this.isEuler = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(value) {
        this._order = value;
        this._onChangeCallback();
    }
    set(x, y, z, order = this._order) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
        this._x = euler._x;
        this._y = euler._y;
        this._z = euler._z;
        this._order = euler._order;
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements;
        const m11 = te[0], m12 = te[4], m13 = te[8];
        const m21 = te[1], m22 = te[5], m23 = te[9];
        const m31 = te[2], m32 = te[6], m33 = te[10];
        switch(order){
            case "XYZ":
                this._y = Math.asin($04ce9c8dcd7d39f0$var$clamp(m13, -1, 1));
                if (Math.abs(m13) < 0.9999999) {
                    this._x = Math.atan2(-m23, m33);
                    this._z = Math.atan2(-m12, m11);
                } else {
                    this._x = Math.atan2(m32, m22);
                    this._z = 0;
                }
                break;
            case "YXZ":
                this._x = Math.asin(-$04ce9c8dcd7d39f0$var$clamp(m23, -1, 1));
                if (Math.abs(m23) < 0.9999999) {
                    this._y = Math.atan2(m13, m33);
                    this._z = Math.atan2(m21, m22);
                } else {
                    this._y = Math.atan2(-m31, m11);
                    this._z = 0;
                }
                break;
            case "ZXY":
                this._x = Math.asin($04ce9c8dcd7d39f0$var$clamp(m32, -1, 1));
                if (Math.abs(m32) < 0.9999999) {
                    this._y = Math.atan2(-m31, m33);
                    this._z = Math.atan2(-m12, m22);
                } else {
                    this._y = 0;
                    this._z = Math.atan2(m21, m11);
                }
                break;
            case "ZYX":
                this._y = Math.asin(-$04ce9c8dcd7d39f0$var$clamp(m31, -1, 1));
                if (Math.abs(m31) < 0.9999999) {
                    this._x = Math.atan2(m32, m33);
                    this._z = Math.atan2(m21, m11);
                } else {
                    this._x = 0;
                    this._z = Math.atan2(-m12, m22);
                }
                break;
            case "YZX":
                this._z = Math.asin($04ce9c8dcd7d39f0$var$clamp(m21, -1, 1));
                if (Math.abs(m21) < 0.9999999) {
                    this._x = Math.atan2(-m23, m22);
                    this._y = Math.atan2(-m31, m11);
                } else {
                    this._x = 0;
                    this._y = Math.atan2(m13, m33);
                }
                break;
            case "XZY":
                this._z = Math.asin(-$04ce9c8dcd7d39f0$var$clamp(m12, -1, 1));
                if (Math.abs(m12) < 0.9999999) {
                    this._x = Math.atan2(m32, m22);
                    this._y = Math.atan2(m13, m11);
                } else {
                    this._x = Math.atan2(-m23, m33);
                    this._y = 0;
                }
                break;
            default:
                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
        }
        this._order = order;
        if (update === true) this._onChangeCallback();
        return this;
    }
    setFromQuaternion(q, order, update) {
        $04ce9c8dcd7d39f0$var$_matrix.makeRotationFromQuaternion(q);
        return this.setFromRotationMatrix($04ce9c8dcd7d39f0$var$_matrix, order, update);
    }
    setFromVector3(v, order = this._order) {
        return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
        // WARNING: this discards revolution information -bhouston
        $04ce9c8dcd7d39f0$var$_quaternion$3.setFromEuler(this);
        return this.setFromQuaternion($04ce9c8dcd7d39f0$var$_quaternion$3, newOrder);
    }
    equals(euler) {
        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
        this._x = array[0];
        this._y = array[1];
        this._z = array[2];
        if (array[3] !== undefined) this._order = array[3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._order;
        return array;
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._order;
    }
}
$04ce9c8dcd7d39f0$export$d93cc409a0768c5f.DEFAULT_ORDER = "XYZ";
class $04ce9c8dcd7d39f0$export$89312ce47c0ca777 {
    constructor(){
        this.mask = 1;
    }
    set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
        this.mask |= 1 << channel | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(channel) {
        this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
        this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(layers) {
        return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
        return (this.mask & (1 << channel | 0)) !== 0;
    }
}
let $04ce9c8dcd7d39f0$var$_object3DId = 0;
const $04ce9c8dcd7d39f0$var$_v1$4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_q1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
const $04ce9c8dcd7d39f0$var$_m1$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_target = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_position$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_scale$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_quaternion$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
const $04ce9c8dcd7d39f0$var$_xAxis = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 0, 0);
const $04ce9c8dcd7d39f0$var$_yAxis = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0);
const $04ce9c8dcd7d39f0$var$_zAxis = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 1);
const $04ce9c8dcd7d39f0$var$_addedEvent = {
    type: "added"
};
const $04ce9c8dcd7d39f0$var$_removedEvent = {
    type: "removed"
};
class $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        this.isObject3D = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$_object3DId++
        });
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.name = "";
        this.type = "Object3D";
        this.parent = null;
        this.children = [];
        this.up = $04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_UP.clone();
        const position = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const rotation = new $04ce9c8dcd7d39f0$export$d93cc409a0768c5f();
        const quaternion = new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
        const scale = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 1, 1);
        function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, undefined, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
            position: {
                configurable: true,
                enumerable: true,
                value: position
            },
            rotation: {
                configurable: true,
                enumerable: true,
                value: rotation
            },
            quaternion: {
                configurable: true,
                enumerable: true,
                value: quaternion
            },
            scale: {
                configurable: true,
                enumerable: true,
                value: scale
            },
            modelViewMatrix: {
                value: new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5()
            },
            normalMatrix: {
                value: new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            }
        });
        this.matrix = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.matrixWorld = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.matrixAutoUpdate = $04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_MATRIX_AUTO_UPDATE;
        this.matrixWorldNeedsUpdate = false;
        this.matrixWorldAutoUpdate = $04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer
        this.layers = new $04ce9c8dcd7d39f0$export$89312ce47c0ca777();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {};
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(matrix) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        this.matrix.premultiply(matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
        this.quaternion.premultiply(q);
        return this;
    }
    setRotationFromAxisAngle(axis, angle) {
        // assumes axis is normalized
        this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
        this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
        // assumes q is normalized
        this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
        // rotate object on axis in object space
        // axis is assumed to be normalized
        $04ce9c8dcd7d39f0$var$_q1.setFromAxisAngle(axis, angle);
        this.quaternion.multiply($04ce9c8dcd7d39f0$var$_q1);
        return this;
    }
    rotateOnWorldAxis(axis, angle) {
        // rotate object on axis in world space
        // axis is assumed to be normalized
        // method assumes no rotated parent
        $04ce9c8dcd7d39f0$var$_q1.setFromAxisAngle(axis, angle);
        this.quaternion.premultiply($04ce9c8dcd7d39f0$var$_q1);
        return this;
    }
    rotateX(angle) {
        return this.rotateOnAxis($04ce9c8dcd7d39f0$var$_xAxis, angle);
    }
    rotateY(angle) {
        return this.rotateOnAxis($04ce9c8dcd7d39f0$var$_yAxis, angle);
    }
    rotateZ(angle) {
        return this.rotateOnAxis($04ce9c8dcd7d39f0$var$_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
        // translate object by distance along axis in object space
        // axis is assumed to be normalized
        $04ce9c8dcd7d39f0$var$_v1$4.copy(axis).applyQuaternion(this.quaternion);
        this.position.add($04ce9c8dcd7d39f0$var$_v1$4.multiplyScalar(distance));
        return this;
    }
    translateX(distance) {
        return this.translateOnAxis($04ce9c8dcd7d39f0$var$_xAxis, distance);
    }
    translateY(distance) {
        return this.translateOnAxis($04ce9c8dcd7d39f0$var$_yAxis, distance);
    }
    translateZ(distance) {
        return this.translateOnAxis($04ce9c8dcd7d39f0$var$_zAxis, distance);
    }
    localToWorld(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4($04ce9c8dcd7d39f0$var$_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z) {
        // This method does not support objects having non-uniformly-scaled parent(s)
        if (x.isVector3) $04ce9c8dcd7d39f0$var$_target.copy(x);
        else $04ce9c8dcd7d39f0$var$_target.set(x, y, z);
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        $04ce9c8dcd7d39f0$var$_position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) $04ce9c8dcd7d39f0$var$_m1$1.lookAt($04ce9c8dcd7d39f0$var$_position$3, $04ce9c8dcd7d39f0$var$_target, this.up);
        else $04ce9c8dcd7d39f0$var$_m1$1.lookAt($04ce9c8dcd7d39f0$var$_target, $04ce9c8dcd7d39f0$var$_position$3, this.up);
        this.quaternion.setFromRotationMatrix($04ce9c8dcd7d39f0$var$_m1$1);
        if (parent) {
            $04ce9c8dcd7d39f0$var$_m1$1.extractRotation(parent.matrixWorld);
            $04ce9c8dcd7d39f0$var$_q1.setFromRotationMatrix($04ce9c8dcd7d39f0$var$_m1$1);
            this.quaternion.premultiply($04ce9c8dcd7d39f0$var$_q1.invert());
        }
    }
    add(object) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.add(arguments[i]);
            return this;
        }
        if (object === this) {
            console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
            return this;
        }
        if (object && object.isObject3D) {
            if (object.parent !== null) object.parent.remove(object);
            object.parent = this;
            this.children.push(object);
            object.dispatchEvent($04ce9c8dcd7d39f0$var$_addedEvent);
        } else console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
        return this;
    }
    remove(object) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.remove(arguments[i]);
            return this;
        }
        const index = this.children.indexOf(object);
        if (index !== -1) {
            object.parent = null;
            this.children.splice(index, 1);
            object.dispatchEvent($04ce9c8dcd7d39f0$var$_removedEvent);
        }
        return this;
    }
    removeFromParent() {
        const parent = this.parent;
        if (parent !== null) parent.remove(this);
        return this;
    }
    clear() {
        for(let i = 0; i < this.children.length; i++){
            const object = this.children[i];
            object.parent = null;
            object.dispatchEvent($04ce9c8dcd7d39f0$var$_removedEvent);
        }
        this.children.length = 0;
        return this;
    }
    attach(object) {
        // adds object as a child of this, while maintaining the object's world transform
        // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
        this.updateWorldMatrix(true, false);
        $04ce9c8dcd7d39f0$var$_m1$1.copy(this.matrixWorld).invert();
        if (object.parent !== null) {
            object.parent.updateWorldMatrix(true, false);
            $04ce9c8dcd7d39f0$var$_m1$1.multiply(object.parent.matrixWorld);
        }
        object.applyMatrix4($04ce9c8dcd7d39f0$var$_m1$1);
        this.add(object);
        object.updateWorldMatrix(false, true);
        return this;
    }
    getObjectById(id) {
        return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
        return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
        if (this[name] === value) return this;
        for(let i = 0, l = this.children.length; i < l; i++){
            const child = this.children[i];
            const object = child.getObjectByProperty(name, value);
            if (object !== undefined) return object;
        }
        return undefined;
    }
    getObjectsByProperty(name, value) {
        let result = [];
        if (this[name] === value) result.push(this);
        for(let i = 0, l = this.children.length; i < l; i++){
            const childResult = this.children[i].getObjectsByProperty(name, value);
            if (childResult.length > 0) result = result.concat(childResult);
        }
        return result;
    }
    getWorldPosition(target) {
        this.updateWorldMatrix(true, false);
        return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose($04ce9c8dcd7d39f0$var$_position$3, target, $04ce9c8dcd7d39f0$var$_scale$2);
        return target;
    }
    getWorldScale(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose($04ce9c8dcd7d39f0$var$_position$3, $04ce9c8dcd7d39f0$var$_quaternion$2, target);
        return target;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {}
    traverse(callback) {
        callback(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverse(callback);
    }
    traverseVisible(callback) {
        if (this.visible === false) return;
        callback(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverseVisible(callback);
    }
    traverseAncestors(callback) {
        const parent = this.parent;
        if (parent !== null) {
            callback(parent);
            parent.traverseAncestors(callback);
        }
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
            if (this.parent === null) this.matrixWorld.copy(this.matrix);
            else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            this.matrixWorldNeedsUpdate = false;
            force = true;
        }
        // update children
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++){
            const child = children[i];
            if (child.matrixWorldAutoUpdate === true || force === true) child.updateMatrixWorld(force);
        }
    }
    updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) parent.updateWorldMatrix(true, false);
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.parent === null) this.matrixWorld.copy(this.matrix);
        else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        // update children
        if (updateChildren === true) {
            const children = this.children;
            for(let i = 0, l = children.length; i < l; i++){
                const child = children[i];
                if (child.matrixWorldAutoUpdate === true) child.updateWorldMatrix(false, true);
            }
        }
    }
    toJSON(meta) {
        // meta is a string when called from JSON.stringify
        const isRootObject = meta === undefined || typeof meta === "string";
        const output = {};
        // meta is a hash used to collect geometries, materials.
        // not providing it implies that this is the root object
        // being serialized.
        if (isRootObject) {
            // initialize meta obj
            meta = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {},
                skeletons: {},
                animations: {},
                nodes: {}
            };
            output.metadata = {
                version: 4.6,
                type: "Object",
                generator: "Object3D.toJSON"
            };
        }
        // standard Object3D serialization
        const object = {};
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== "") object.name = this.name;
        if (this.castShadow === true) object.castShadow = true;
        if (this.receiveShadow === true) object.receiveShadow = true;
        if (this.visible === false) object.visible = false;
        if (this.frustumCulled === false) object.frustumCulled = false;
        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
        if (Object.keys(this.userData).length > 0) object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        object.up = this.up.toArray();
        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
        // object specific properties
        if (this.isInstancedMesh) {
            object.type = "InstancedMesh";
            object.count = this.count;
            object.instanceMatrix = this.instanceMatrix.toJSON();
            if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
        }
        //
        function serialize(library, element) {
            if (library[element.uuid] === undefined) library[element.uuid] = element.toJSON(meta);
            return element.uuid;
        }
        if (this.isScene) {
            if (this.background) {
                if (this.background.isColor) object.background = this.background.toJSON();
                else if (this.background.isTexture) object.background = this.background.toJSON(meta).uuid;
            }
            if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) object.environment = this.environment.toJSON(meta).uuid;
        } else if (this.isMesh || this.isLine || this.isPoints) {
            object.geometry = serialize(meta.geometries, this.geometry);
            const parameters = this.geometry.parameters;
            if (parameters !== undefined && parameters.shapes !== undefined) {
                const shapes = parameters.shapes;
                if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
                    const shape = shapes[i];
                    serialize(meta.shapes, shape);
                }
                else serialize(meta.shapes, shapes);
            }
        }
        if (this.isSkinnedMesh) {
            object.bindMode = this.bindMode;
            object.bindMatrix = this.bindMatrix.toArray();
            if (this.skeleton !== undefined) {
                serialize(meta.skeletons, this.skeleton);
                object.skeleton = this.skeleton.uuid;
            }
        }
        if (this.material !== undefined) {
            if (Array.isArray(this.material)) {
                const uuids = [];
                for(let i = 0, l = this.material.length; i < l; i++)uuids.push(serialize(meta.materials, this.material[i]));
                object.material = uuids;
            } else object.material = serialize(meta.materials, this.material);
        }
        //
        if (this.children.length > 0) {
            object.children = [];
            for(let i = 0; i < this.children.length; i++)object.children.push(this.children[i].toJSON(meta).object);
        }
        //
        if (this.animations.length > 0) {
            object.animations = [];
            for(let i = 0; i < this.animations.length; i++){
                const animation = this.animations[i];
                object.animations.push(serialize(meta.animations, animation));
            }
        }
        if (isRootObject) {
            const geometries = extractFromCache(meta.geometries);
            const materials = extractFromCache(meta.materials);
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            const shapes = extractFromCache(meta.shapes);
            const skeletons = extractFromCache(meta.skeletons);
            const animations = extractFromCache(meta.animations);
            const nodes = extractFromCache(meta.nodes);
            if (geometries.length > 0) output.geometries = geometries;
            if (materials.length > 0) output.materials = materials;
            if (textures.length > 0) output.textures = textures;
            if (images.length > 0) output.images = images;
            if (shapes.length > 0) output.shapes = shapes;
            if (skeletons.length > 0) output.skeletons = skeletons;
            if (animations.length > 0) output.animations = animations;
            if (nodes.length > 0) output.nodes = nodes;
        }
        output.object = object;
        return output;
        // extract data from the cache hash
        // remove metadata on each item
        // and return as array
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
    }
    clone(recursive) {
        return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
        this.name = source.name;
        this.up.copy(source.up);
        this.position.copy(source.position);
        this.rotation.order = source.rotation.order;
        this.quaternion.copy(source.quaternion);
        this.scale.copy(source.scale);
        this.matrix.copy(source.matrix);
        this.matrixWorld.copy(source.matrixWorld);
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
        this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
        this.layers.mask = source.layers.mask;
        this.visible = source.visible;
        this.castShadow = source.castShadow;
        this.receiveShadow = source.receiveShadow;
        this.frustumCulled = source.frustumCulled;
        this.renderOrder = source.renderOrder;
        this.animations = source.animations.slice();
        this.userData = JSON.parse(JSON.stringify(source.userData));
        if (recursive === true) for(let i = 0; i < source.children.length; i++){
            const child = source.children[i];
            this.add(child.clone());
        }
        return this;
    }
}
$04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_UP = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0);
$04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_MATRIX_AUTO_UPDATE = true;
$04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
const $04ce9c8dcd7d39f0$var$_v0$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v1$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v2$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v3$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vab = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vac = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vbc = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vap = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vbp = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vcp = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
let $04ce9c8dcd7d39f0$var$warnedGetUV = false;
class $04ce9c8dcd7d39f0$export$5a465592bfe74b48 {
    constructor(a = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), b = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), c = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()){
        this.a = a;
        this.b = b;
        this.c = c;
    }
    static getNormal(a, b, c, target) {
        target.subVectors(c, b);
        $04ce9c8dcd7d39f0$var$_v0$1.subVectors(a, b);
        target.cross($04ce9c8dcd7d39f0$var$_v0$1);
        const targetLengthSq = target.lengthSq();
        if (targetLengthSq > 0) return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
        $04ce9c8dcd7d39f0$var$_v0$1.subVectors(c, a);
        $04ce9c8dcd7d39f0$var$_v1$3.subVectors(b, a);
        $04ce9c8dcd7d39f0$var$_v2$2.subVectors(point, a);
        const dot00 = $04ce9c8dcd7d39f0$var$_v0$1.dot($04ce9c8dcd7d39f0$var$_v0$1);
        const dot01 = $04ce9c8dcd7d39f0$var$_v0$1.dot($04ce9c8dcd7d39f0$var$_v1$3);
        const dot02 = $04ce9c8dcd7d39f0$var$_v0$1.dot($04ce9c8dcd7d39f0$var$_v2$2);
        const dot11 = $04ce9c8dcd7d39f0$var$_v1$3.dot($04ce9c8dcd7d39f0$var$_v1$3);
        const dot12 = $04ce9c8dcd7d39f0$var$_v1$3.dot($04ce9c8dcd7d39f0$var$_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        // collinear or singular triangle
        if (denom === 0) // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target.set(-2, -1, -1);
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        // barycentric coordinates must always sum to 1
        return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
        this.getBarycoord(point, a, b, c, $04ce9c8dcd7d39f0$var$_v3$1);
        return $04ce9c8dcd7d39f0$var$_v3$1.x >= 0 && $04ce9c8dcd7d39f0$var$_v3$1.y >= 0 && $04ce9c8dcd7d39f0$var$_v3$1.x + $04ce9c8dcd7d39f0$var$_v3$1.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
        if ($04ce9c8dcd7d39f0$var$warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            $04ce9c8dcd7d39f0$var$warnedGetUV = true;
        }
        return this.getInterpolation(point, p1, p2, p3, uv1, uv2, uv3, target);
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
        this.getBarycoord(point, p1, p2, p3, $04ce9c8dcd7d39f0$var$_v3$1);
        target.setScalar(0);
        target.addScaledVector(v1, $04ce9c8dcd7d39f0$var$_v3$1.x);
        target.addScaledVector(v2, $04ce9c8dcd7d39f0$var$_v3$1.y);
        target.addScaledVector(v3, $04ce9c8dcd7d39f0$var$_v3$1.z);
        return target;
    }
    static isFrontFacing(a, b, c, direction) {
        $04ce9c8dcd7d39f0$var$_v0$1.subVectors(c, b);
        $04ce9c8dcd7d39f0$var$_v1$3.subVectors(a, b);
        // strictly front facing
        return $04ce9c8dcd7d39f0$var$_v0$1.cross($04ce9c8dcd7d39f0$var$_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
        this.a.copy(points[i0]);
        this.b.copy(points[i1]);
        this.c.copy(points[i2]);
        return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
        this.a.fromBufferAttribute(attribute, i0);
        this.b.fromBufferAttribute(attribute, i1);
        this.c.fromBufferAttribute(attribute, i2);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(triangle) {
        this.a.copy(triangle.a);
        this.b.copy(triangle.b);
        this.c.copy(triangle.c);
        return this;
    }
    getArea() {
        $04ce9c8dcd7d39f0$var$_v0$1.subVectors(this.c, this.b);
        $04ce9c8dcd7d39f0$var$_v1$3.subVectors(this.a, this.b);
        return $04ce9c8dcd7d39f0$var$_v0$1.cross($04ce9c8dcd7d39f0$var$_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
        return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
        if ($04ce9c8dcd7d39f0$var$warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            $04ce9c8dcd7d39f0$var$warnedGetUV = true;
        }
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
        return $04ce9c8dcd7d39f0$export$5a465592bfe74b48.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
        return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
        const a = this.a, b = this.b, c = this.c;
        let v, w;
        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
        // under the accompanying license; see chapter 5.1.5 for detailed explanation.
        // basically, we're distinguishing which of the voronoi regions of the triangle
        // the point lies in with the minimum amount of redundant computation.
        $04ce9c8dcd7d39f0$var$_vab.subVectors(b, a);
        $04ce9c8dcd7d39f0$var$_vac.subVectors(c, a);
        $04ce9c8dcd7d39f0$var$_vap.subVectors(p, a);
        const d1 = $04ce9c8dcd7d39f0$var$_vab.dot($04ce9c8dcd7d39f0$var$_vap);
        const d2 = $04ce9c8dcd7d39f0$var$_vac.dot($04ce9c8dcd7d39f0$var$_vap);
        if (d1 <= 0 && d2 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
        return target.copy(a);
        $04ce9c8dcd7d39f0$var$_vbp.subVectors(p, b);
        const d3 = $04ce9c8dcd7d39f0$var$_vab.dot($04ce9c8dcd7d39f0$var$_vbp);
        const d4 = $04ce9c8dcd7d39f0$var$_vac.dot($04ce9c8dcd7d39f0$var$_vbp);
        if (d3 >= 0 && d4 <= d3) // vertex region of B; barycentric coords (0, 1, 0)
        return target.copy(b);
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
            v = d1 / (d1 - d3);
            // edge region of AB; barycentric coords (1-v, v, 0)
            return target.copy(a).addScaledVector($04ce9c8dcd7d39f0$var$_vab, v);
        }
        $04ce9c8dcd7d39f0$var$_vcp.subVectors(p, c);
        const d5 = $04ce9c8dcd7d39f0$var$_vab.dot($04ce9c8dcd7d39f0$var$_vcp);
        const d6 = $04ce9c8dcd7d39f0$var$_vac.dot($04ce9c8dcd7d39f0$var$_vcp);
        if (d6 >= 0 && d5 <= d6) // vertex region of C; barycentric coords (0, 0, 1)
        return target.copy(c);
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
            w = d2 / (d2 - d6);
            // edge region of AC; barycentric coords (1-w, 0, w)
            return target.copy(a).addScaledVector($04ce9c8dcd7d39f0$var$_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
            $04ce9c8dcd7d39f0$var$_vbc.subVectors(c, b);
            w = (d4 - d3) / (d4 - d3 + (d5 - d6));
            // edge region of BC; barycentric coords (0, 1-w, w)
            return target.copy(b).addScaledVector($04ce9c8dcd7d39f0$var$_vbc, w); // edge region of BC
        }
        // face region
        const denom = 1 / (va + vb + vc);
        // u = va * denom
        v = vb * denom;
        w = vc * denom;
        return target.copy(a).addScaledVector($04ce9c8dcd7d39f0$var$_vab, v).addScaledVector($04ce9c8dcd7d39f0$var$_vac, w);
    }
    equals(triangle) {
        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
}
let $04ce9c8dcd7d39f0$var$materialId = 0;
class $04ce9c8dcd7d39f0$export$a2d8b23205c25948 extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        this.isMaterial = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$materialId++
        });
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.name = "";
        this.type = "Material";
        this.blending = $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0;
        this.side = $04ce9c8dcd7d39f0$export$2ede184fc2998901;
        this.vertexColors = false;
        this.opacity = 1;
        this.transparent = false;
        this.alphaHash = false;
        this.blendSrc = $04ce9c8dcd7d39f0$export$d5773124e86cf28c;
        this.blendDst = $04ce9c8dcd7d39f0$export$11d468cc7f19e971;
        this.blendEquation = $04ce9c8dcd7d39f0$export$20183a0484ce21a0;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.depthFunc = $04ce9c8dcd7d39f0$export$296f78a0b892f81a;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 0xff;
        this.stencilFunc = $04ce9c8dcd7d39f0$export$14cf96713ddd97a8;
        this.stencilRef = 0;
        this.stencilFuncMask = 0xff;
        this.stencilFail = $04ce9c8dcd7d39f0$export$9f542ae4b5baca34;
        this.stencilZFail = $04ce9c8dcd7d39f0$export$9f542ae4b5baca34;
        this.stencilZPass = $04ce9c8dcd7d39f0$export$9f542ae4b5baca34;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null; // override the renderer's default precision for this material
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.forceSinglePass = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {};
        this.version = 0;
        this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(value) {
        if (this._alphaTest > 0 !== value > 0) this.version++;
        this._alphaTest = value;
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(values) {
        if (values === undefined) return;
        for(const key in values){
            const newValue = values[key];
            if (newValue === undefined) {
                console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
                continue;
            }
            const currentValue = this[key];
            if (currentValue === undefined) {
                console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
                continue;
            }
            if (currentValue && currentValue.isColor) currentValue.set(newValue);
            else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) currentValue.copy(newValue);
            else this[key] = newValue;
        }
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === "string";
        if (isRootObject) meta = {
            textures: {},
            images: {}
        };
        const data = {
            metadata: {
                version: 4.6,
                type: "Material",
                generator: "Material.toJSON"
            }
        };
        // standard Material serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (this.color && this.color.isColor) data.color = this.color.getHex();
        if (this.roughness !== undefined) data.roughness = this.roughness;
        if (this.metalness !== undefined) data.metalness = this.metalness;
        if (this.sheen !== undefined) data.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
        if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
        if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
        if (this.shininess !== undefined) data.shininess = this.shininess;
        if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
            data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
            data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.iridescence !== undefined) data.iridescence = this.iridescence;
        if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;
        if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
        if (this.iridescenceMap && this.iridescenceMap.isTexture) data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
        if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
        if (this.anisotropy !== undefined) data.anisotropy = this.anisotropy;
        if (this.anisotropyRotation !== undefined) data.anisotropyRotation = this.anisotropyRotation;
        if (this.anisotropyMap && this.anisotropyMap.isTexture) data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
        if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
        if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
        if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
            data.lightMap = this.lightMap.toJSON(meta).uuid;
            data.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
            data.aoMap = this.aoMap.toJSON(meta).uuid;
            data.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
            data.bumpMap = this.bumpMap.toJSON(meta).uuid;
            data.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
            data.normalMap = this.normalMap.toJSON(meta).uuid;
            data.normalMapType = this.normalMapType;
            data.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
            data.displacementMap = this.displacementMap.toJSON(meta).uuid;
            data.displacementScale = this.displacementScale;
            data.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
        if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
        if (this.envMap && this.envMap.isTexture) {
            data.envMap = this.envMap.toJSON(meta).uuid;
            if (this.combine !== undefined) data.combine = this.combine;
        }
        if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
        if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) data.gradientMap = this.gradientMap.toJSON(meta).uuid;
        if (this.transmission !== undefined) data.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
        if (this.thickness !== undefined) data.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
        if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== undefined) data.size = this.size;
        if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0) data.blending = this.blending;
        if (this.side !== $04ce9c8dcd7d39f0$export$2ede184fc2998901) data.side = this.side;
        if (this.vertexColors) data.vertexColors = true;
        if (this.opacity < 1) data.opacity = this.opacity;
        if (this.transparent === true) data.transparent = this.transparent;
        data.depthFunc = this.depthFunc;
        data.depthTest = this.depthTest;
        data.depthWrite = this.depthWrite;
        data.colorWrite = this.colorWrite;
        data.stencilWrite = this.stencilWrite;
        data.stencilWriteMask = this.stencilWriteMask;
        data.stencilFunc = this.stencilFunc;
        data.stencilRef = this.stencilRef;
        data.stencilFuncMask = this.stencilFuncMask;
        data.stencilFail = this.stencilFail;
        data.stencilZFail = this.stencilZFail;
        data.stencilZPass = this.stencilZPass;
        // rotation (SpriteMaterial)
        if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
        if (this.polygonOffset === true) data.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;
        if (this.dashSize !== undefined) data.dashSize = this.dashSize;
        if (this.gapSize !== undefined) data.gapSize = this.gapSize;
        if (this.scale !== undefined) data.scale = this.scale;
        if (this.dithering === true) data.dithering = true;
        if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
        if (this.alphaHash === true) data.alphaHash = this.alphaHash;
        if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
        if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
        if (this.forceSinglePass === true) data.forceSinglePass = this.forceSinglePass;
        if (this.wireframe === true) data.wireframe = this.wireframe;
        if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true) data.flatShading = this.flatShading;
        if (this.visible === false) data.visible = false;
        if (this.toneMapped === false) data.toneMapped = false;
        if (this.fog === false) data.fog = false;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        // TODO: Copied from Object3D.toJSON
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        if (isRootObject) {
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            if (textures.length > 0) data.textures = textures;
            if (images.length > 0) data.images = images;
        }
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.blending = source.blending;
        this.side = source.side;
        this.vertexColors = source.vertexColors;
        this.opacity = source.opacity;
        this.transparent = source.transparent;
        this.blendSrc = source.blendSrc;
        this.blendDst = source.blendDst;
        this.blendEquation = source.blendEquation;
        this.blendSrcAlpha = source.blendSrcAlpha;
        this.blendDstAlpha = source.blendDstAlpha;
        this.blendEquationAlpha = source.blendEquationAlpha;
        this.depthFunc = source.depthFunc;
        this.depthTest = source.depthTest;
        this.depthWrite = source.depthWrite;
        this.stencilWriteMask = source.stencilWriteMask;
        this.stencilFunc = source.stencilFunc;
        this.stencilRef = source.stencilRef;
        this.stencilFuncMask = source.stencilFuncMask;
        this.stencilFail = source.stencilFail;
        this.stencilZFail = source.stencilZFail;
        this.stencilZPass = source.stencilZPass;
        this.stencilWrite = source.stencilWrite;
        const srcPlanes = source.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
            const n = srcPlanes.length;
            dstPlanes = new Array(n);
            for(let i = 0; i !== n; ++i)dstPlanes[i] = srcPlanes[i].clone();
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source.clipIntersection;
        this.clipShadows = source.clipShadows;
        this.shadowSide = source.shadowSide;
        this.colorWrite = source.colorWrite;
        this.precision = source.precision;
        this.polygonOffset = source.polygonOffset;
        this.polygonOffsetFactor = source.polygonOffsetFactor;
        this.polygonOffsetUnits = source.polygonOffsetUnits;
        this.dithering = source.dithering;
        this.alphaTest = source.alphaTest;
        this.alphaHash = source.alphaHash;
        this.alphaToCoverage = source.alphaToCoverage;
        this.premultipliedAlpha = source.premultipliedAlpha;
        this.forceSinglePass = source.forceSinglePass;
        this.visible = source.visible;
        this.toneMapped = source.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
}
const $04ce9c8dcd7d39f0$var$_colorKeywords = {
    "aliceblue": 0xF0F8FF,
    "antiquewhite": 0xFAEBD7,
    "aqua": 0x00FFFF,
    "aquamarine": 0x7FFFD4,
    "azure": 0xF0FFFF,
    "beige": 0xF5F5DC,
    "bisque": 0xFFE4C4,
    "black": 0x000000,
    "blanchedalmond": 0xFFEBCD,
    "blue": 0x0000FF,
    "blueviolet": 0x8A2BE2,
    "brown": 0xA52A2A,
    "burlywood": 0xDEB887,
    "cadetblue": 0x5F9EA0,
    "chartreuse": 0x7FFF00,
    "chocolate": 0xD2691E,
    "coral": 0xFF7F50,
    "cornflowerblue": 0x6495ED,
    "cornsilk": 0xFFF8DC,
    "crimson": 0xDC143C,
    "cyan": 0x00FFFF,
    "darkblue": 0x00008B,
    "darkcyan": 0x008B8B,
    "darkgoldenrod": 0xB8860B,
    "darkgray": 0xA9A9A9,
    "darkgreen": 0x006400,
    "darkgrey": 0xA9A9A9,
    "darkkhaki": 0xBDB76B,
    "darkmagenta": 0x8B008B,
    "darkolivegreen": 0x556B2F,
    "darkorange": 0xFF8C00,
    "darkorchid": 0x9932CC,
    "darkred": 0x8B0000,
    "darksalmon": 0xE9967A,
    "darkseagreen": 0x8FBC8F,
    "darkslateblue": 0x483D8B,
    "darkslategray": 0x2F4F4F,
    "darkslategrey": 0x2F4F4F,
    "darkturquoise": 0x00CED1,
    "darkviolet": 0x9400D3,
    "deeppink": 0xFF1493,
    "deepskyblue": 0x00BFFF,
    "dimgray": 0x696969,
    "dimgrey": 0x696969,
    "dodgerblue": 0x1E90FF,
    "firebrick": 0xB22222,
    "floralwhite": 0xFFFAF0,
    "forestgreen": 0x228B22,
    "fuchsia": 0xFF00FF,
    "gainsboro": 0xDCDCDC,
    "ghostwhite": 0xF8F8FF,
    "gold": 0xFFD700,
    "goldenrod": 0xDAA520,
    "gray": 0x808080,
    "green": 0x008000,
    "greenyellow": 0xADFF2F,
    "grey": 0x808080,
    "honeydew": 0xF0FFF0,
    "hotpink": 0xFF69B4,
    "indianred": 0xCD5C5C,
    "indigo": 0x4B0082,
    "ivory": 0xFFFFF0,
    "khaki": 0xF0E68C,
    "lavender": 0xE6E6FA,
    "lavenderblush": 0xFFF0F5,
    "lawngreen": 0x7CFC00,
    "lemonchiffon": 0xFFFACD,
    "lightblue": 0xADD8E6,
    "lightcoral": 0xF08080,
    "lightcyan": 0xE0FFFF,
    "lightgoldenrodyellow": 0xFAFAD2,
    "lightgray": 0xD3D3D3,
    "lightgreen": 0x90EE90,
    "lightgrey": 0xD3D3D3,
    "lightpink": 0xFFB6C1,
    "lightsalmon": 0xFFA07A,
    "lightseagreen": 0x20B2AA,
    "lightskyblue": 0x87CEFA,
    "lightslategray": 0x778899,
    "lightslategrey": 0x778899,
    "lightsteelblue": 0xB0C4DE,
    "lightyellow": 0xFFFFE0,
    "lime": 0x00FF00,
    "limegreen": 0x32CD32,
    "linen": 0xFAF0E6,
    "magenta": 0xFF00FF,
    "maroon": 0x800000,
    "mediumaquamarine": 0x66CDAA,
    "mediumblue": 0x0000CD,
    "mediumorchid": 0xBA55D3,
    "mediumpurple": 0x9370DB,
    "mediumseagreen": 0x3CB371,
    "mediumslateblue": 0x7B68EE,
    "mediumspringgreen": 0x00FA9A,
    "mediumturquoise": 0x48D1CC,
    "mediumvioletred": 0xC71585,
    "midnightblue": 0x191970,
    "mintcream": 0xF5FFFA,
    "mistyrose": 0xFFE4E1,
    "moccasin": 0xFFE4B5,
    "navajowhite": 0xFFDEAD,
    "navy": 0x000080,
    "oldlace": 0xFDF5E6,
    "olive": 0x808000,
    "olivedrab": 0x6B8E23,
    "orange": 0xFFA500,
    "orangered": 0xFF4500,
    "orchid": 0xDA70D6,
    "palegoldenrod": 0xEEE8AA,
    "palegreen": 0x98FB98,
    "paleturquoise": 0xAFEEEE,
    "palevioletred": 0xDB7093,
    "papayawhip": 0xFFEFD5,
    "peachpuff": 0xFFDAB9,
    "peru": 0xCD853F,
    "pink": 0xFFC0CB,
    "plum": 0xDDA0DD,
    "powderblue": 0xB0E0E6,
    "purple": 0x800080,
    "rebeccapurple": 0x663399,
    "red": 0xFF0000,
    "rosybrown": 0xBC8F8F,
    "royalblue": 0x4169E1,
    "saddlebrown": 0x8B4513,
    "salmon": 0xFA8072,
    "sandybrown": 0xF4A460,
    "seagreen": 0x2E8B57,
    "seashell": 0xFFF5EE,
    "sienna": 0xA0522D,
    "silver": 0xC0C0C0,
    "skyblue": 0x87CEEB,
    "slateblue": 0x6A5ACD,
    "slategray": 0x708090,
    "slategrey": 0x708090,
    "snow": 0xFFFAFA,
    "springgreen": 0x00FF7F,
    "steelblue": 0x4682B4,
    "tan": 0xD2B48C,
    "teal": 0x008080,
    "thistle": 0xD8BFD8,
    "tomato": 0xFF6347,
    "turquoise": 0x40E0D0,
    "violet": 0xEE82EE,
    "wheat": 0xF5DEB3,
    "white": 0xFFFFFF,
    "whitesmoke": 0xF5F5F5,
    "yellow": 0xFFFF00,
    "yellowgreen": 0x9ACD32
};
const $04ce9c8dcd7d39f0$var$_hslA = {
    h: 0,
    s: 0,
    l: 0
};
const $04ce9c8dcd7d39f0$var$_hslB = {
    h: 0,
    s: 0,
    l: 0
};
function $04ce9c8dcd7d39f0$var$hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
}
class $04ce9c8dcd7d39f0$export$892596cec99bc70e {
    constructor(r, g, b){
        this.isColor = true;
        this.r = 1;
        this.g = 1;
        this.b = 1;
        return this.set(r, g, b);
    }
    set(r, g, b) {
        if (g === undefined && b === undefined) {
            // r is THREE.Color, hex or string
            const value = r;
            if (value && value.isColor) this.copy(value);
            else if (typeof value === "number") this.setHex(value);
            else if (typeof value === "string") this.setStyle(value);
        } else this.setRGB(r, g, b);
        return this;
    }
    setScalar(scalar) {
        this.r = scalar;
        this.g = scalar;
        this.b = scalar;
        return this;
    }
    setHex(hex, colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        hex = Math.floor(hex);
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setRGB(r, g, b, colorSpace1 = $04ce9c8dcd7d39f0$export$5e6fd513f44698c.workingColorSpace) {
        this.r = r;
        this.g = g;
        this.b = b;
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setHSL(h, s, l, colorSpace1 = $04ce9c8dcd7d39f0$export$5e6fd513f44698c.workingColorSpace) {
        // h,s,l ranges are in 0.0 - 1.0
        h = $04ce9c8dcd7d39f0$var$euclideanModulo(h, 1);
        s = $04ce9c8dcd7d39f0$var$clamp(s, 0, 1);
        l = $04ce9c8dcd7d39f0$var$clamp(l, 0, 1);
        if (s === 0) this.r = this.g = this.b = l;
        else {
            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
            const q = 2 * l - p;
            this.r = $04ce9c8dcd7d39f0$var$hue2rgb(q, p, h + 1 / 3);
            this.g = $04ce9c8dcd7d39f0$var$hue2rgb(q, p, h);
            this.b = $04ce9c8dcd7d39f0$var$hue2rgb(q, p, h - 1 / 3);
        }
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.toWorkingColorSpace(this, colorSpace1);
        return this;
    }
    setStyle(style, colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        function handleAlpha(string) {
            if (string === undefined) return;
            if (parseFloat(string) < 1) console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
        let m;
        if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
            // rgb / hsl
            let color;
            const name = m[1];
            const components = m[2];
            switch(name){
                case "rgb":
                case "rgba":
                    if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(255,0,0) rgba(255,0,0,0.5)
                        handleAlpha(color[4]);
                        return this.setRGB(Math.min(255, parseInt(color[1], 10)) / 255, Math.min(255, parseInt(color[2], 10)) / 255, Math.min(255, parseInt(color[3], 10)) / 255, colorSpace1);
                    }
                    if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                        handleAlpha(color[4]);
                        return this.setRGB(Math.min(100, parseInt(color[1], 10)) / 100, Math.min(100, parseInt(color[2], 10)) / 100, Math.min(100, parseInt(color[3], 10)) / 100, colorSpace1);
                    }
                    break;
                case "hsl":
                case "hsla":
                    if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                        handleAlpha(color[4]);
                        return this.setHSL(parseFloat(color[1]) / 360, parseFloat(color[2]) / 100, parseFloat(color[3]) / 100, colorSpace1);
                    }
                    break;
                default:
                    console.warn("THREE.Color: Unknown color model " + style);
            }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
            // hex color
            const hex = m[1];
            const size = hex.length;
            if (size === 3) // #ff0
            return this.setRGB(parseInt(hex.charAt(0), 16) / 15, parseInt(hex.charAt(1), 16) / 15, parseInt(hex.charAt(2), 16) / 15, colorSpace1);
            else if (size === 6) // #ff0000
            return this.setHex(parseInt(hex, 16), colorSpace1);
            else console.warn("THREE.Color: Invalid hex color " + style);
        } else if (style && style.length > 0) return this.setColorName(style, colorSpace1);
        return this;
    }
    setColorName(style, colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        // color keywords
        const hex = $04ce9c8dcd7d39f0$var$_colorKeywords[style.toLowerCase()];
        if (hex !== undefined) // red
        this.setHex(hex, colorSpace1);
        else // unknown color
        console.warn("THREE.Color: Unknown color " + style);
        return this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        return this;
    }
    copySRGBToLinear(color) {
        this.r = $04ce9c8dcd7d39f0$var$SRGBToLinear(color.r);
        this.g = $04ce9c8dcd7d39f0$var$SRGBToLinear(color.g);
        this.b = $04ce9c8dcd7d39f0$var$SRGBToLinear(color.b);
        return this;
    }
    copyLinearToSRGB(color) {
        this.r = $04ce9c8dcd7d39f0$var$LinearToSRGB(color.r);
        this.g = $04ce9c8dcd7d39f0$var$LinearToSRGB(color.g);
        this.b = $04ce9c8dcd7d39f0$var$LinearToSRGB(color.b);
        return this;
    }
    convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
    }
    convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
    }
    getHex(colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.fromWorkingColorSpace($04ce9c8dcd7d39f0$var$_color.copy(this), colorSpace1);
        return Math.round($04ce9c8dcd7d39f0$var$clamp($04ce9c8dcd7d39f0$var$_color.r * 255, 0, 255)) * 65536 + Math.round($04ce9c8dcd7d39f0$var$clamp($04ce9c8dcd7d39f0$var$_color.g * 255, 0, 255)) * 256 + Math.round($04ce9c8dcd7d39f0$var$clamp($04ce9c8dcd7d39f0$var$_color.b * 255, 0, 255));
    }
    getHexString(colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        return ("000000" + this.getHex(colorSpace1).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace1 = $04ce9c8dcd7d39f0$export$5e6fd513f44698c.workingColorSpace) {
        // h,s,l ranges are in 0.0 - 1.0
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.fromWorkingColorSpace($04ce9c8dcd7d39f0$var$_color.copy(this), colorSpace1);
        const r = $04ce9c8dcd7d39f0$var$_color.r, g = $04ce9c8dcd7d39f0$var$_color.g, b = $04ce9c8dcd7d39f0$var$_color.b;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let hue, saturation;
        const lightness = (min + max) / 2.0;
        if (min === max) {
            hue = 0;
            saturation = 0;
        } else {
            const delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch(max){
                case r:
                    hue = (g - b) / delta + (g < b ? 6 : 0);
                    break;
                case g:
                    hue = (b - r) / delta + 2;
                    break;
                case b:
                    hue = (r - g) / delta + 4;
                    break;
            }
            hue /= 6;
        }
        target.h = hue;
        target.s = saturation;
        target.l = lightness;
        return target;
    }
    getRGB(target, colorSpace1 = $04ce9c8dcd7d39f0$export$5e6fd513f44698c.workingColorSpace) {
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.fromWorkingColorSpace($04ce9c8dcd7d39f0$var$_color.copy(this), colorSpace1);
        target.r = $04ce9c8dcd7d39f0$var$_color.r;
        target.g = $04ce9c8dcd7d39f0$var$_color.g;
        target.b = $04ce9c8dcd7d39f0$var$_color.b;
        return target;
    }
    getStyle(colorSpace1 = $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
        $04ce9c8dcd7d39f0$export$5e6fd513f44698c.fromWorkingColorSpace($04ce9c8dcd7d39f0$var$_color.copy(this), colorSpace1);
        const r = $04ce9c8dcd7d39f0$var$_color.r, g = $04ce9c8dcd7d39f0$var$_color.g, b = $04ce9c8dcd7d39f0$var$_color.b;
        if (colorSpace1 !== $04ce9c8dcd7d39f0$export$561f394b24edfcaa) // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
        return `color(${colorSpace1} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
        return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    offsetHSL(h, s, l) {
        this.getHSL($04ce9c8dcd7d39f0$var$_hslA);
        $04ce9c8dcd7d39f0$var$_hslA.h += h;
        $04ce9c8dcd7d39f0$var$_hslA.s += s;
        $04ce9c8dcd7d39f0$var$_hslA.l += l;
        this.setHSL($04ce9c8dcd7d39f0$var$_hslA.h, $04ce9c8dcd7d39f0$var$_hslA.s, $04ce9c8dcd7d39f0$var$_hslA.l);
        return this;
    }
    add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        return this;
    }
    addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
    }
    addScalar(s) {
        this.r += s;
        this.g += s;
        this.b += s;
        return this;
    }
    sub(color) {
        this.r = Math.max(0, this.r - color.r);
        this.g = Math.max(0, this.g - color.g);
        this.b = Math.max(0, this.b - color.b);
        return this;
    }
    multiply(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b;
        return this;
    }
    multiplyScalar(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        return this;
    }
    lerp(color, alpha) {
        this.r += (color.r - this.r) * alpha;
        this.g += (color.g - this.g) * alpha;
        this.b += (color.b - this.b) * alpha;
        return this;
    }
    lerpColors(color1, color2, alpha) {
        this.r = color1.r + (color2.r - color1.r) * alpha;
        this.g = color1.g + (color2.g - color1.g) * alpha;
        this.b = color1.b + (color2.b - color1.b) * alpha;
        return this;
    }
    lerpHSL(color, alpha) {
        this.getHSL($04ce9c8dcd7d39f0$var$_hslA);
        color.getHSL($04ce9c8dcd7d39f0$var$_hslB);
        const h = $04ce9c8dcd7d39f0$var$lerp($04ce9c8dcd7d39f0$var$_hslA.h, $04ce9c8dcd7d39f0$var$_hslB.h, alpha);
        const s = $04ce9c8dcd7d39f0$var$lerp($04ce9c8dcd7d39f0$var$_hslA.s, $04ce9c8dcd7d39f0$var$_hslB.s, alpha);
        const l = $04ce9c8dcd7d39f0$var$lerp($04ce9c8dcd7d39f0$var$_hslA.l, $04ce9c8dcd7d39f0$var$_hslB.l, alpha);
        this.setHSL(h, s, l);
        return this;
    }
    setFromVector3(v) {
        this.r = v.x;
        this.g = v.y;
        this.b = v.z;
        return this;
    }
    applyMatrix3(m) {
        const r = this.r, g = this.g, b = this.b;
        const e = m.elements;
        this.r = e[0] * r + e[3] * g + e[6] * b;
        this.g = e[1] * r + e[4] * g + e[7] * b;
        this.b = e[2] * r + e[5] * g + e[8] * b;
        return this;
    }
    equals(c) {
        return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
        this.r = array[offset];
        this.g = array[offset + 1];
        this.b = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.r;
        array[offset + 1] = this.g;
        array[offset + 2] = this.b;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.r = attribute.getX(index);
        this.g = attribute.getY(index);
        this.b = attribute.getZ(index);
        return this;
    }
    toJSON() {
        return this.getHex();
    }
    *[Symbol.iterator]() {
        yield this.r;
        yield this.g;
        yield this.b;
    }
}
const $04ce9c8dcd7d39f0$var$_color = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
$04ce9c8dcd7d39f0$export$892596cec99bc70e.NAMES = $04ce9c8dcd7d39f0$var$_colorKeywords;
class $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshBasicMaterial = true;
        this.type = "MeshBasicMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff); // emissive
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $04ce9c8dcd7d39f0$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
    }
}
// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
const $04ce9c8dcd7d39f0$var$_tables = /*@__PURE__*/ $04ce9c8dcd7d39f0$var$_generateTables();
function $04ce9c8dcd7d39f0$var$_generateTables() {
    // float32 to float16 helpers
    const buffer = new ArrayBuffer(4);
    const floatView = new Float32Array(buffer);
    const uint32View = new Uint32Array(buffer);
    const baseTable = new Uint32Array(512);
    const shiftTable = new Uint32Array(512);
    for(let i = 0; i < 256; ++i){
        const e = i - 127;
        // very small number (0, -0)
        if (e < -27) {
            baseTable[i] = 0x0000;
            baseTable[i | 0x100] = 0x8000;
            shiftTable[i] = 24;
            shiftTable[i | 0x100] = 24;
        // small number (denorm)
        } else if (e < -14) {
            baseTable[i] = 0x0400 >> -e - 14;
            baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;
            shiftTable[i] = -e - 1;
            shiftTable[i | 0x100] = -e - 1;
        // normal number
        } else if (e <= 15) {
            baseTable[i] = e + 15 << 10;
            baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
            shiftTable[i] = 13;
            shiftTable[i | 0x100] = 13;
        // large number (Infinity, -Infinity)
        } else if (e < 128) {
            baseTable[i] = 0x7c00;
            baseTable[i | 0x100] = 0xfc00;
            shiftTable[i] = 24;
            shiftTable[i | 0x100] = 24;
        // stay (NaN, Infinity, -Infinity)
        } else {
            baseTable[i] = 0x7c00;
            baseTable[i | 0x100] = 0xfc00;
            shiftTable[i] = 13;
            shiftTable[i | 0x100] = 13;
        }
    }
    // float16 to float32 helpers
    const mantissaTable = new Uint32Array(2048);
    const exponentTable = new Uint32Array(64);
    const offsetTable = new Uint32Array(64);
    for(let i = 1; i < 1024; ++i){
        let m = i << 13; // zero pad mantissa bits
        let e = 0; // zero exponent
        // normalized
        while((m & 0x00800000) === 0){
            m <<= 1;
            e -= 0x00800000; // decrement exponent
        }
        m &= -8388609; // clear leading 1 bit
        e += 0x38800000; // adjust bias
        mantissaTable[i] = m | e;
    }
    for(let i = 1024; i < 2048; ++i)mantissaTable[i] = 0x38000000 + (i - 1024 << 13);
    for(let i = 1; i < 31; ++i)exponentTable[i] = i << 23;
    exponentTable[31] = 0x47800000;
    exponentTable[32] = 0x80000000;
    for(let i = 33; i < 63; ++i)exponentTable[i] = 0x80000000 + (i - 32 << 23);
    exponentTable[63] = 0xc7800000;
    for(let i = 1; i < 64; ++i)if (i !== 32) offsetTable[i] = 1024;
    return {
        floatView: floatView,
        uint32View: uint32View,
        baseTable: baseTable,
        shiftTable: shiftTable,
        mantissaTable: mantissaTable,
        exponentTable: exponentTable,
        offsetTable: offsetTable
    };
}
// float32 to float16
function $04ce9c8dcd7d39f0$var$toHalfFloat(val) {
    if (Math.abs(val) > 65504) console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
    val = $04ce9c8dcd7d39f0$var$clamp(val, -65504, 65504);
    $04ce9c8dcd7d39f0$var$_tables.floatView[0] = val;
    const f = $04ce9c8dcd7d39f0$var$_tables.uint32View[0];
    const e = f >> 23 & 0x1ff;
    return $04ce9c8dcd7d39f0$var$_tables.baseTable[e] + ((f & 0x007fffff) >> $04ce9c8dcd7d39f0$var$_tables.shiftTable[e]);
}
// float16 to float32
function $04ce9c8dcd7d39f0$var$fromHalfFloat(val) {
    const m = val >> 10;
    $04ce9c8dcd7d39f0$var$_tables.uint32View[0] = $04ce9c8dcd7d39f0$var$_tables.mantissaTable[$04ce9c8dcd7d39f0$var$_tables.offsetTable[m] + (val & 0x3ff)] + $04ce9c8dcd7d39f0$var$_tables.exponentTable[m];
    return $04ce9c8dcd7d39f0$var$_tables.floatView[0];
}
const $04ce9c8dcd7d39f0$export$11ce8b759162cc80 = {
    toHalfFloat: $04ce9c8dcd7d39f0$var$toHalfFloat,
    fromHalfFloat: $04ce9c8dcd7d39f0$var$fromHalfFloat
};
const $04ce9c8dcd7d39f0$var$_vector$8 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vector2$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
class $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized = false){
        if (Array.isArray(array)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.isBufferAttribute = true;
        this.name = "";
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== undefined ? array.length / itemSize : 0;
        this.normalized = normalized;
        this.usage = $04ce9c8dcd7d39f0$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.gpuType = $04ce9c8dcd7d39f0$export$f6d331659b644596;
        this.version = 0;
    }
    onUploadCallback() {}
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.name = source.name;
        this.array = new source.array.constructor(source.array);
        this.itemSize = source.itemSize;
        this.count = source.count;
        this.normalized = source.normalized;
        this.usage = source.usage;
        this.gpuType = source.gpuType;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.itemSize;
        index2 *= attribute.itemSize;
        for(let i = 0, l = this.itemSize; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
        return this;
    }
    copyArray(array) {
        this.array.set(array);
        return this;
    }
    applyMatrix3(m) {
        if (this.itemSize === 2) for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector2$1.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector2$1.applyMatrix3(m);
            this.setXY(i, $04ce9c8dcd7d39f0$var$_vector2$1.x, $04ce9c8dcd7d39f0$var$_vector2$1.y);
        }
        else if (this.itemSize === 3) for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$8.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$8.applyMatrix3(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$8.x, $04ce9c8dcd7d39f0$var$_vector$8.y, $04ce9c8dcd7d39f0$var$_vector$8.z);
        }
        return this;
    }
    applyMatrix4(m) {
        for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$8.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$8.applyMatrix4(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$8.x, $04ce9c8dcd7d39f0$var$_vector$8.y, $04ce9c8dcd7d39f0$var$_vector$8.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$8.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$8.applyNormalMatrix(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$8.x, $04ce9c8dcd7d39f0$var$_vector$8.y, $04ce9c8dcd7d39f0$var$_vector$8.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$8.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$8.transformDirection(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$8.x, $04ce9c8dcd7d39f0$var$_vector$8.y, $04ce9c8dcd7d39f0$var$_vector$8.z);
        }
        return this;
    }
    set(value, offset = 0) {
        // Matching BufferAttribute constructor, do not normalize the array.
        this.array.set(value, offset);
        return this;
    }
    getComponent(index, component) {
        let value = this.array[index * this.itemSize + component];
        if (this.normalized) value = $04ce9c8dcd7d39f0$var$denormalize(value, this.array);
        return value;
    }
    setComponent(index, component, value) {
        if (this.normalized) value = $04ce9c8dcd7d39f0$var$normalize(value, this.array);
        this.array[index * this.itemSize + component] = value;
        return this;
    }
    getX(index) {
        let x = this.array[index * this.itemSize];
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$denormalize(x, this.array);
        return x;
    }
    setX(index, x) {
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
        this.array[index * this.itemSize] = x;
        return this;
    }
    getY(index) {
        let y = this.array[index * this.itemSize + 1];
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$denormalize(y, this.array);
        return y;
    }
    setY(index, y) {
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        this.array[index * this.itemSize + 1] = y;
        return this;
    }
    getZ(index) {
        let z = this.array[index * this.itemSize + 2];
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$denormalize(z, this.array);
        return z;
    }
    setZ(index, z) {
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        this.array[index * this.itemSize + 2] = z;
        return this;
    }
    getW(index) {
        let w = this.array[index * this.itemSize + 3];
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$denormalize(w, this.array);
        return w;
    }
    setW(index, w) {
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        this.array[index * this.itemSize + 3] = w;
        return this;
    }
    setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
            w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        this.array[index + 3] = w;
        return this;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        const data = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
        };
        if (this.name !== "") data.name = this.name;
        if (this.usage !== $04ce9c8dcd7d39f0$export$763e8360f4d7f77d) data.usage = this.usage;
        if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
        return data;
    }
}
//
class $04ce9c8dcd7d39f0$export$f9ff2d6a20248cbf extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int8Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$cacc90cf35d11cdd extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint8Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$baaa85a1a812c157 extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint8ClampedArray(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$2b755a102ccdcefe extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int16Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$640a853f68025f2e extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$46b369aed2968a0a extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int32Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$7eb8c9fa25cd5bd6 extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint32Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$dbd3698c64958d69 extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
        this.isFloat16BufferAttribute = true;
    }
    getX(index) {
        let x = $04ce9c8dcd7d39f0$var$fromHalfFloat(this.array[index * this.itemSize]);
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$denormalize(x, this.array);
        return x;
    }
    setX(index, x) {
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
        this.array[index * this.itemSize] = $04ce9c8dcd7d39f0$var$toHalfFloat(x);
        return this;
    }
    getY(index) {
        let y = $04ce9c8dcd7d39f0$var$fromHalfFloat(this.array[index * this.itemSize + 1]);
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$denormalize(y, this.array);
        return y;
    }
    setY(index, y) {
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        this.array[index * this.itemSize + 1] = $04ce9c8dcd7d39f0$var$toHalfFloat(y);
        return this;
    }
    getZ(index) {
        let z = $04ce9c8dcd7d39f0$var$fromHalfFloat(this.array[index * this.itemSize + 2]);
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$denormalize(z, this.array);
        return z;
    }
    setZ(index, z) {
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        this.array[index * this.itemSize + 2] = $04ce9c8dcd7d39f0$var$toHalfFloat(z);
        return this;
    }
    getW(index) {
        let w = $04ce9c8dcd7d39f0$var$fromHalfFloat(this.array[index * this.itemSize + 3]);
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$denormalize(w, this.array);
        return w;
    }
    setW(index, w) {
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        this.array[index * this.itemSize + 3] = $04ce9c8dcd7d39f0$var$toHalfFloat(w);
        return this;
    }
    setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        }
        this.array[index + 0] = $04ce9c8dcd7d39f0$var$toHalfFloat(x);
        this.array[index + 1] = $04ce9c8dcd7d39f0$var$toHalfFloat(y);
        return this;
    }
    setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        }
        this.array[index + 0] = $04ce9c8dcd7d39f0$var$toHalfFloat(x);
        this.array[index + 1] = $04ce9c8dcd7d39f0$var$toHalfFloat(y);
        this.array[index + 2] = $04ce9c8dcd7d39f0$var$toHalfFloat(z);
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
            w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        }
        this.array[index + 0] = $04ce9c8dcd7d39f0$var$toHalfFloat(x);
        this.array[index + 1] = $04ce9c8dcd7d39f0$var$toHalfFloat(y);
        this.array[index + 2] = $04ce9c8dcd7d39f0$var$toHalfFloat(z);
        this.array[index + 3] = $04ce9c8dcd7d39f0$var$toHalfFloat(w);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$cbe7a62641830ebd extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Float32Array(array), itemSize, normalized);
    }
}
class $04ce9c8dcd7d39f0$export$9e0ade74842adbb8 extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Float64Array(array), itemSize, normalized);
    }
}
let $04ce9c8dcd7d39f0$var$_id$1 = 0;
const $04ce9c8dcd7d39f0$var$_m1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_obj = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$e4dd07dff30cc924();
const $04ce9c8dcd7d39f0$var$_offset = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_box$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
const $04ce9c8dcd7d39f0$var$_boxMorphTargets = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
const $04ce9c8dcd7d39f0$var$_vector$7 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$b7be63a67df8959 extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        this.isBufferGeometry = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$_id$1++
        });
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.name = "";
        this.type = "BufferGeometry";
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = {
            start: 0,
            count: Infinity
        };
        this.userData = {};
    }
    getIndex() {
        return this.index;
    }
    setIndex(index) {
        if (Array.isArray(index)) this.index = new ($04ce9c8dcd7d39f0$var$arrayNeedsUint32(index) ? $04ce9c8dcd7d39f0$export$7eb8c9fa25cd5bd6 : $04ce9c8dcd7d39f0$export$640a853f68025f2e)(index, 1);
        else this.index = index;
        return this;
    }
    getAttribute(name) {
        return this.attributes[name];
    }
    setAttribute(name, attribute) {
        this.attributes[name] = attribute;
        return this;
    }
    deleteAttribute(name) {
        delete this.attributes[name];
        return this;
    }
    hasAttribute(name) {
        return this.attributes[name] !== undefined;
    }
    addGroup(start, count, materialIndex = 0) {
        this.groups.push({
            start: start,
            count: count,
            materialIndex: materialIndex
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(start, count) {
        this.drawRange.start = start;
        this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
        const position = this.attributes.position;
        if (position !== undefined) {
            position.applyMatrix4(matrix);
            position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== undefined) {
            const normalMatrix = new $04ce9c8dcd7d39f0$export$8ff26dafa08918().getNormalMatrix(matrix);
            normal.applyNormalMatrix(normalMatrix);
            normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== undefined) {
            tangent.transformDirection(matrix);
            tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) this.computeBoundingBox();
        if (this.boundingSphere !== null) this.computeBoundingSphere();
        return this;
    }
    applyQuaternion(q) {
        $04ce9c8dcd7d39f0$var$_m1.makeRotationFromQuaternion(q);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    rotateX(angle) {
        // rotate geometry around world x-axis
        $04ce9c8dcd7d39f0$var$_m1.makeRotationX(angle);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    rotateY(angle) {
        // rotate geometry around world y-axis
        $04ce9c8dcd7d39f0$var$_m1.makeRotationY(angle);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    rotateZ(angle) {
        // rotate geometry around world z-axis
        $04ce9c8dcd7d39f0$var$_m1.makeRotationZ(angle);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    translate(x, y, z) {
        // translate geometry
        $04ce9c8dcd7d39f0$var$_m1.makeTranslation(x, y, z);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    scale(x, y, z) {
        // scale geometry
        $04ce9c8dcd7d39f0$var$_m1.makeScale(x, y, z);
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_m1);
        return this;
    }
    lookAt(vector) {
        $04ce9c8dcd7d39f0$var$_obj.lookAt(vector);
        $04ce9c8dcd7d39f0$var$_obj.updateMatrix();
        this.applyMatrix4($04ce9c8dcd7d39f0$var$_obj.matrix);
        return this;
    }
    center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter($04ce9c8dcd7d39f0$var$_offset).negate();
        this.translate($04ce9c8dcd7d39f0$var$_offset.x, $04ce9c8dcd7d39f0$var$_offset.y, $04ce9c8dcd7d39f0$var$_offset.z);
        return this;
    }
    setFromPoints(points) {
        const position = [];
        for(let i = 0, l = points.length; i < l; i++){
            const point = points[i];
            position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(position, 3));
        return this;
    }
    computeBoundingBox() {
        if (this.boundingBox === null) this.boundingBox = new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingBox.set(new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity), new $04ce9c8dcd7d39f0$export$64b5c384219d3699(Infinity, Infinity, Infinity));
            return;
        }
        if (position !== undefined) {
            this.boundingBox.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                $04ce9c8dcd7d39f0$var$_box$1.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    $04ce9c8dcd7d39f0$var$_vector$7.addVectors(this.boundingBox.min, $04ce9c8dcd7d39f0$var$_box$1.min);
                    this.boundingBox.expandByPoint($04ce9c8dcd7d39f0$var$_vector$7);
                    $04ce9c8dcd7d39f0$var$_vector$7.addVectors(this.boundingBox.max, $04ce9c8dcd7d39f0$var$_box$1.max);
                    this.boundingBox.expandByPoint($04ce9c8dcd7d39f0$var$_vector$7);
                } else {
                    this.boundingBox.expandByPoint($04ce9c8dcd7d39f0$var$_box$1.min);
                    this.boundingBox.expandByPoint($04ce9c8dcd7d39f0$var$_box$1.max);
                }
            }
        } else this.boundingBox.makeEmpty();
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        if (this.boundingSphere === null) this.boundingSphere = new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingSphere.set(new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), Infinity);
            return;
        }
        if (position) {
            // first, find the center of the bounding sphere
            const center = this.boundingSphere.center;
            $04ce9c8dcd7d39f0$var$_box$1.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                $04ce9c8dcd7d39f0$var$_boxMorphTargets.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    $04ce9c8dcd7d39f0$var$_vector$7.addVectors($04ce9c8dcd7d39f0$var$_box$1.min, $04ce9c8dcd7d39f0$var$_boxMorphTargets.min);
                    $04ce9c8dcd7d39f0$var$_box$1.expandByPoint($04ce9c8dcd7d39f0$var$_vector$7);
                    $04ce9c8dcd7d39f0$var$_vector$7.addVectors($04ce9c8dcd7d39f0$var$_box$1.max, $04ce9c8dcd7d39f0$var$_boxMorphTargets.max);
                    $04ce9c8dcd7d39f0$var$_box$1.expandByPoint($04ce9c8dcd7d39f0$var$_vector$7);
                } else {
                    $04ce9c8dcd7d39f0$var$_box$1.expandByPoint($04ce9c8dcd7d39f0$var$_boxMorphTargets.min);
                    $04ce9c8dcd7d39f0$var$_box$1.expandByPoint($04ce9c8dcd7d39f0$var$_boxMorphTargets.max);
                }
            }
            $04ce9c8dcd7d39f0$var$_box$1.getCenter(center);
            // second, try to find a boundingSphere with a radius smaller than the
            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
            let maxRadiusSq = 0;
            for(let i = 0, il = position.count; i < il; i++){
                $04ce9c8dcd7d39f0$var$_vector$7.fromBufferAttribute(position, i);
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($04ce9c8dcd7d39f0$var$_vector$7));
            }
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                const morphTargetsRelative = this.morphTargetsRelative;
                for(let j = 0, jl = morphAttribute.count; j < jl; j++){
                    $04ce9c8dcd7d39f0$var$_vector$7.fromBufferAttribute(morphAttribute, j);
                    if (morphTargetsRelative) {
                        $04ce9c8dcd7d39f0$var$_offset.fromBufferAttribute(position, j);
                        $04ce9c8dcd7d39f0$var$_vector$7.add($04ce9c8dcd7d39f0$var$_offset);
                    }
                    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($04ce9c8dcd7d39f0$var$_vector$7));
                }
            }
            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
            if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        // based on http://www.terathon.com/code/tangent.html
        // (per vertex tangents)
        if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
        }
        const indices = index.array;
        const positions = attributes.position.array;
        const normals = attributes.normal.array;
        const uvs = attributes.uv.array;
        const nVertices = positions.length / 3;
        if (this.hasAttribute("tangent") === false) this.setAttribute("tangent", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(new Float32Array(4 * nVertices), 4));
        const tangents = this.getAttribute("tangent").array;
        const tan1 = [], tan2 = [];
        for(let i = 0; i < nVertices; i++){
            tan1[i] = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            tan2[i] = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        }
        const vA = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), vB = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), vC = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), uvA = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), uvB = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), uvC = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), sdir = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), tdir = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        function handleTriangle(a, b, c) {
            vA.fromArray(positions, a * 3);
            vB.fromArray(positions, b * 3);
            vC.fromArray(positions, c * 3);
            uvA.fromArray(uvs, a * 2);
            uvB.fromArray(uvs, b * 2);
            uvC.fromArray(uvs, c * 2);
            vB.sub(vA);
            vC.sub(vA);
            uvB.sub(uvA);
            uvC.sub(uvA);
            const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);
            // silently ignore degenerate uv triangles having coincident or colinear vertices
            if (!isFinite(r)) return;
            sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
            tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);
            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) groups = [
            {
                start: 0,
                count: indices.length
            }
        ];
        for(let i = 0, il = groups.length; i < il; ++i){
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3)handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
        }
        const tmp = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), tmp2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const n = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), n2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        function handleVertex(v) {
            n.fromArray(normals, v * 3);
            n2.copy(n);
            const t = tan1[v];
            // Gram-Schmidt orthogonalize
            tmp.copy(t);
            tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
            // Calculate handedness
            tmp2.crossVectors(n2, t);
            const test = tmp2.dot(tan2[v]);
            const w = test < 0.0 ? -1 : 1.0;
            tangents[v * 4] = tmp.x;
            tangents[v * 4 + 1] = tmp.y;
            tangents[v * 4 + 2] = tmp.z;
            tangents[v * 4 + 3] = w;
        }
        for(let i = 0, il = groups.length; i < il; ++i){
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3){
                handleVertex(indices[j + 0]);
                handleVertex(indices[j + 1]);
                handleVertex(indices[j + 2]);
            }
        }
    }
    computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute("position");
        if (positionAttribute !== undefined) {
            let normalAttribute = this.getAttribute("normal");
            if (normalAttribute === undefined) {
                normalAttribute = new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(new Float32Array(positionAttribute.count * 3), 3);
                this.setAttribute("normal", normalAttribute);
            } else // reset existing normals to zero
            for(let i = 0, il = normalAttribute.count; i < il; i++)normalAttribute.setXYZ(i, 0, 0, 0);
            const pA = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), pB = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), pC = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const nA = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), nB = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), nC = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const cb = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), ab = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            // indexed elements
            if (index) for(let i = 0, il = index.count; i < il; i += 3){
                const vA = index.getX(i + 0);
                const vB = index.getX(i + 1);
                const vC = index.getX(i + 2);
                pA.fromBufferAttribute(positionAttribute, vA);
                pB.fromBufferAttribute(positionAttribute, vB);
                pC.fromBufferAttribute(positionAttribute, vC);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                nA.fromBufferAttribute(normalAttribute, vA);
                nB.fromBufferAttribute(normalAttribute, vB);
                nC.fromBufferAttribute(normalAttribute, vC);
                nA.add(cb);
                nB.add(cb);
                nC.add(cb);
                normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
            else // non-indexed elements (unconnected triangle soup)
            for(let i = 0, il = positionAttribute.count; i < il; i += 3){
                pA.fromBufferAttribute(positionAttribute, i + 0);
                pB.fromBufferAttribute(positionAttribute, i + 1);
                pC.fromBufferAttribute(positionAttribute, i + 2);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
            }
            this.normalizeNormals();
            normalAttribute.needsUpdate = true;
        }
    }
    normalizeNormals() {
        const normals = this.attributes.normal;
        for(let i = 0, il = normals.count; i < il; i++){
            $04ce9c8dcd7d39f0$var$_vector$7.fromBufferAttribute(normals, i);
            $04ce9c8dcd7d39f0$var$_vector$7.normalize();
            normals.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$7.x, $04ce9c8dcd7d39f0$var$_vector$7.y, $04ce9c8dcd7d39f0$var$_vector$7.z);
        }
    }
    toNonIndexed() {
        function convertBufferAttribute(attribute, indices) {
            const array = attribute.array;
            const itemSize = attribute.itemSize;
            const normalized = attribute.normalized;
            const array2 = new array.constructor(indices.length * itemSize);
            let index = 0, index2 = 0;
            for(let i = 0, l = indices.length; i < l; i++){
                if (attribute.isInterleavedBufferAttribute) index = indices[i] * attribute.data.stride + attribute.offset;
                else index = indices[i] * itemSize;
                for(let j = 0; j < itemSize; j++)array2[index2++] = array[index++];
            }
            return new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(array2, itemSize, normalized);
        }
        //
        if (this.index === null) {
            console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
            return this;
        }
        const geometry2 = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        const indices = this.index.array;
        const attributes = this.attributes;
        // attributes
        for(const name in attributes){
            const attribute = attributes[name];
            const newAttribute = convertBufferAttribute(attribute, indices);
            geometry2.setAttribute(name, newAttribute);
        }
        // morph attributes
        const morphAttributes = this.morphAttributes;
        for(const name in morphAttributes){
            const morphArray = [];
            const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, il = morphAttribute.length; i < il; i++){
                const attribute = morphAttribute[i];
                const newAttribute = convertBufferAttribute(attribute, indices);
                morphArray.push(newAttribute);
            }
            geometry2.morphAttributes[name] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        // groups
        const groups = this.groups;
        for(let i = 0, l = groups.length; i < l; i++){
            const group = groups[i];
            geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
            }
        };
        // standard BufferGeometry serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        if (this.parameters !== undefined) {
            const parameters = this.parameters;
            for(const key in parameters)if (parameters[key] !== undefined) data[key] = parameters[key];
            return data;
        }
        // for simplicity the code assumes attributes are not shared across geometries, see #15811
        data.data = {
            attributes: {}
        };
        const index = this.index;
        if (index !== null) data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
        };
        const attributes = this.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {};
        let hasMorphAttributes = false;
        for(const key in this.morphAttributes){
            const attributeArray = this.morphAttributes[key];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                array.push(attribute.toJSON(data.data));
            }
            if (array.length > 0) {
                morphAttributes[key] = array;
                hasMorphAttributes = true;
            }
        }
        if (hasMorphAttributes) {
            data.data.morphAttributes = morphAttributes;
            data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) data.data.groups = JSON.parse(JSON.stringify(groups));
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
        };
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        // reset
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        // used for storing cloned, shared data
        const data = {};
        // name
        this.name = source.name;
        // index
        const index = source.index;
        if (index !== null) this.setIndex(index.clone(data));
        // attributes
        const attributes = source.attributes;
        for(const name in attributes){
            const attribute = attributes[name];
            this.setAttribute(name, attribute.clone(data));
        }
        // morph attributes
        const morphAttributes = source.morphAttributes;
        for(const name in morphAttributes){
            const array = [];
            const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, l = morphAttribute.length; i < l; i++)array.push(morphAttribute[i].clone(data));
            this.morphAttributes[name] = array;
        }
        this.morphTargetsRelative = source.morphTargetsRelative;
        // groups
        const groups = source.groups;
        for(let i = 0, l = groups.length; i < l; i++){
            const group = groups[i];
            this.addGroup(group.start, group.count, group.materialIndex);
        }
        // bounding box
        const boundingBox = source.boundingBox;
        if (boundingBox !== null) this.boundingBox = boundingBox.clone();
        // bounding sphere
        const boundingSphere = source.boundingSphere;
        if (boundingSphere !== null) this.boundingSphere = boundingSphere.clone();
        // draw range
        this.drawRange.start = source.drawRange.start;
        this.drawRange.count = source.drawRange.count;
        // user data
        this.userData = source.userData;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
const $04ce9c8dcd7d39f0$var$_inverseMatrix$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_ray$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$a186db52eed6d40e();
const $04ce9c8dcd7d39f0$var$_sphere$5 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
const $04ce9c8dcd7d39f0$var$_sphereHitAt = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vA$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vB$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vC$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_tempA = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_morphA = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_uvA$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_uvB$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_uvC$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_normalA = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_normalB = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_normalC = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_intersectionPoint = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_intersectionPointWorld = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$e176487c05830cc5 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959(), material = new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5()){
        super();
        this.isMesh = true;
        this.type = "Mesh";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.morphTargetInfluences !== undefined) this.morphTargetInfluences = source.morphTargetInfluences.slice();
        if (source.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
    getVertexPosition(index, target) {
        const geometry = this.geometry;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        target.fromBufferAttribute(position, index);
        const morphInfluences = this.morphTargetInfluences;
        if (morphPosition && morphInfluences) {
            $04ce9c8dcd7d39f0$var$_morphA.set(0, 0, 0);
            for(let i = 0, il = morphPosition.length; i < il; i++){
                const influence = morphInfluences[i];
                const morphAttribute = morphPosition[i];
                if (influence === 0) continue;
                $04ce9c8dcd7d39f0$var$_tempA.fromBufferAttribute(morphAttribute, index);
                if (morphTargetsRelative) $04ce9c8dcd7d39f0$var$_morphA.addScaledVector($04ce9c8dcd7d39f0$var$_tempA, influence);
                else $04ce9c8dcd7d39f0$var$_morphA.addScaledVector($04ce9c8dcd7d39f0$var$_tempA.sub(target), influence);
            }
            target.add($04ce9c8dcd7d39f0$var$_morphA);
        }
        return target;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // test with bounding sphere in world space
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $04ce9c8dcd7d39f0$var$_sphere$5.copy(geometry.boundingSphere);
        $04ce9c8dcd7d39f0$var$_sphere$5.applyMatrix4(matrixWorld);
        // check distance from ray origin to bounding sphere
        $04ce9c8dcd7d39f0$var$_ray$3.copy(raycaster.ray).recast(raycaster.near);
        if ($04ce9c8dcd7d39f0$var$_sphere$5.containsPoint($04ce9c8dcd7d39f0$var$_ray$3.origin) === false) {
            if ($04ce9c8dcd7d39f0$var$_ray$3.intersectSphere($04ce9c8dcd7d39f0$var$_sphere$5, $04ce9c8dcd7d39f0$var$_sphereHitAt) === null) return;
            if ($04ce9c8dcd7d39f0$var$_ray$3.origin.distanceToSquared($04ce9c8dcd7d39f0$var$_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
        }
        // convert ray to local space of mesh
        $04ce9c8dcd7d39f0$var$_inverseMatrix$3.copy(matrixWorld).invert();
        $04ce9c8dcd7d39f0$var$_ray$3.copy(raycaster.ray).applyMatrix4($04ce9c8dcd7d39f0$var$_inverseMatrix$3);
        // test with bounding box in local space
        if (geometry.boundingBox !== null) {
            if ($04ce9c8dcd7d39f0$var$_ray$3.intersectsBox(geometry.boundingBox) === false) return;
        }
        // test for intersections with geometry
        this._computeIntersections(raycaster, intersects, $04ce9c8dcd7d39f0$var$_ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
        let intersection;
        const geometry = this.geometry;
        const material = this.material;
        const index = geometry.index;
        const position = geometry.attributes.position;
        const uv = geometry.attributes.uv;
        const uv1 = geometry.attributes.uv1;
        const normal = geometry.attributes.normal;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
            // indexed buffer geometry
            if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for(let j = start, jl = end; j < jl; j += 3){
                    const a = index.getX(j);
                    const b = index.getX(j + 1);
                    const c = index.getX(j + 2);
                    intersection = $04ce9c8dcd7d39f0$var$checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
                        intersection.face.materialIndex = group.materialIndex;
                        intersects.push(intersection);
                    }
                }
            }
            else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i = start, il = end; i < il; i += 3){
                    const a = index.getX(i);
                    const b = index.getX(i + 1);
                    const c = index.getX(i + 2);
                    intersection = $04ce9c8dcd7d39f0$var$checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
                        intersects.push(intersection);
                    }
                }
            }
        } else if (position !== undefined) {
            // non-indexed buffer geometry
            if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for(let j = start, jl = end; j < jl; j += 3){
                    const a = j;
                    const b = j + 1;
                    const c = j + 2;
                    intersection = $04ce9c8dcd7d39f0$var$checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
                        intersection.face.materialIndex = group.materialIndex;
                        intersects.push(intersection);
                    }
                }
            }
            else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(position.count, drawRange.start + drawRange.count);
                for(let i = start, il = end; i < il; i += 3){
                    const a = i;
                    const b = i + 1;
                    const c = i + 2;
                    intersection = $04ce9c8dcd7d39f0$var$checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                    if (intersection) {
                        intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
                        intersects.push(intersection);
                    }
                }
            }
        }
    }
}
function $04ce9c8dcd7d39f0$var$checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace) intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    else intersect = ray.intersectTriangle(pA, pB, pC, material.side === $04ce9c8dcd7d39f0$export$2ede184fc2998901, point);
    if (intersect === null) return null;
    $04ce9c8dcd7d39f0$var$_intersectionPointWorld.copy(point);
    $04ce9c8dcd7d39f0$var$_intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo($04ce9c8dcd7d39f0$var$_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
        distance: distance,
        point: $04ce9c8dcd7d39f0$var$_intersectionPointWorld.clone(),
        object: object
    };
}
function $04ce9c8dcd7d39f0$var$checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, $04ce9c8dcd7d39f0$var$_vA$1);
    object.getVertexPosition(b, $04ce9c8dcd7d39f0$var$_vB$1);
    object.getVertexPosition(c, $04ce9c8dcd7d39f0$var$_vC$1);
    const intersection = $04ce9c8dcd7d39f0$var$checkIntersection(object, material, raycaster, ray, $04ce9c8dcd7d39f0$var$_vA$1, $04ce9c8dcd7d39f0$var$_vB$1, $04ce9c8dcd7d39f0$var$_vC$1, $04ce9c8dcd7d39f0$var$_intersectionPoint);
    if (intersection) {
        if (uv) {
            $04ce9c8dcd7d39f0$var$_uvA$1.fromBufferAttribute(uv, a);
            $04ce9c8dcd7d39f0$var$_uvB$1.fromBufferAttribute(uv, b);
            $04ce9c8dcd7d39f0$var$_uvC$1.fromBufferAttribute(uv, c);
            intersection.uv = $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation($04ce9c8dcd7d39f0$var$_intersectionPoint, $04ce9c8dcd7d39f0$var$_vA$1, $04ce9c8dcd7d39f0$var$_vB$1, $04ce9c8dcd7d39f0$var$_vC$1, $04ce9c8dcd7d39f0$var$_uvA$1, $04ce9c8dcd7d39f0$var$_uvB$1, $04ce9c8dcd7d39f0$var$_uvC$1, new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1());
        }
        if (uv1) {
            $04ce9c8dcd7d39f0$var$_uvA$1.fromBufferAttribute(uv1, a);
            $04ce9c8dcd7d39f0$var$_uvB$1.fromBufferAttribute(uv1, b);
            $04ce9c8dcd7d39f0$var$_uvC$1.fromBufferAttribute(uv1, c);
            intersection.uv1 = $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation($04ce9c8dcd7d39f0$var$_intersectionPoint, $04ce9c8dcd7d39f0$var$_vA$1, $04ce9c8dcd7d39f0$var$_vB$1, $04ce9c8dcd7d39f0$var$_vC$1, $04ce9c8dcd7d39f0$var$_uvA$1, $04ce9c8dcd7d39f0$var$_uvB$1, $04ce9c8dcd7d39f0$var$_uvC$1, new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1());
            intersection.uv2 = intersection.uv1; // @deprecated, r152
        }
        if (normal) {
            $04ce9c8dcd7d39f0$var$_normalA.fromBufferAttribute(normal, a);
            $04ce9c8dcd7d39f0$var$_normalB.fromBufferAttribute(normal, b);
            $04ce9c8dcd7d39f0$var$_normalC.fromBufferAttribute(normal, c);
            intersection.normal = $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation($04ce9c8dcd7d39f0$var$_intersectionPoint, $04ce9c8dcd7d39f0$var$_vA$1, $04ce9c8dcd7d39f0$var$_vB$1, $04ce9c8dcd7d39f0$var$_vC$1, $04ce9c8dcd7d39f0$var$_normalA, $04ce9c8dcd7d39f0$var$_normalB, $04ce9c8dcd7d39f0$var$_normalC, new $04ce9c8dcd7d39f0$export$64b5c384219d3699());
            if (intersection.normal.dot(ray.direction) > 0) intersection.normal.multiplyScalar(-1);
        }
        const face = {
            a: a,
            b: b,
            c: c,
            normal: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
            materialIndex: 0
        };
        $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getNormal($04ce9c8dcd7d39f0$var$_vA$1, $04ce9c8dcd7d39f0$var$_vB$1, $04ce9c8dcd7d39f0$var$_vC$1, face.normal);
        intersection.face = face;
    }
    return intersection;
}
class $04ce9c8dcd7d39f0$export$33e43285f7406bd5 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1){
        super();
        this.type = "BoxGeometry";
        this.parameters = {
            width: width,
            height: height,
            depth: depth,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
        const scope = this;
        // segments
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let numberOfVertices = 0;
        let groupStart = 0;
        // build each side of the box geometry
        buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
        buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
        buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
        buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
        buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
        buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
            const segmentWidth = width / gridX;
            const segmentHeight = height / gridY;
            const widthHalf = width / 2;
            const heightHalf = height / 2;
            const depthHalf = depth / 2;
            const gridX1 = gridX + 1;
            const gridY1 = gridY + 1;
            let vertexCounter = 0;
            let groupCount = 0;
            const vector = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            // generate vertices, normals and uvs
            for(let iy = 0; iy < gridY1; iy++){
                const y = iy * segmentHeight - heightHalf;
                for(let ix = 0; ix < gridX1; ix++){
                    const x = ix * segmentWidth - widthHalf;
                    // set values to correct vector component
                    vector[u] = x * udir;
                    vector[v] = y * vdir;
                    vector[w] = depthHalf;
                    // now apply vector to vertex buffer
                    vertices.push(vector.x, vector.y, vector.z);
                    // set values to correct vector component
                    vector[u] = 0;
                    vector[v] = 0;
                    vector[w] = depth > 0 ? 1 : -1;
                    // now apply vector to normal buffer
                    normals.push(vector.x, vector.y, vector.z);
                    // uvs
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY);
                    // counters
                    vertexCounter += 1;
                }
            }
            // indices
            // 1. you need three indices to draw a single face
            // 2. a single segment consists of two faces
            // 3. so we need to generate six (2*3) indices per segment
            for(let iy = 0; iy < gridY; iy++)for(let ix = 0; ix < gridX; ix++){
                const a = numberOfVertices + ix + gridX1 * iy;
                const b = numberOfVertices + ix + gridX1 * (iy + 1);
                const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
                const d = numberOfVertices + (ix + 1) + gridX1 * iy;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // increase counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, materialIndex);
            // calculate new start value for groups
            groupStart += groupCount;
            // update total number of vertices
            numberOfVertices += vertexCounter;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$33e43285f7406bd5(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
}
/**
 * Uniform Utilities
 */ function $04ce9c8dcd7d39f0$var$cloneUniforms(src) {
    const dst = {};
    for(const u in src){
        dst[u] = {};
        for(const p in src[u]){
            const property = src[u][p];
            if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
                if (property.isRenderTargetTexture) {
                    console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
                    dst[u][p] = null;
                } else dst[u][p] = property.clone();
            } else if (Array.isArray(property)) dst[u][p] = property.slice();
            else dst[u][p] = property;
        }
    }
    return dst;
}
function $04ce9c8dcd7d39f0$var$mergeUniforms(uniforms) {
    const merged = {};
    for(let u = 0; u < uniforms.length; u++){
        const tmp = $04ce9c8dcd7d39f0$var$cloneUniforms(uniforms[u]);
        for(const p in tmp)merged[p] = tmp[p];
    }
    return merged;
}
function $04ce9c8dcd7d39f0$var$cloneUniformsGroups(src) {
    const dst = [];
    for(let u = 0; u < src.length; u++)dst.push(src[u].clone());
    return dst;
}
function $04ce9c8dcd7d39f0$var$getUnlitUniformColorSpace(renderer) {
    if (renderer.getRenderTarget() === null) // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
    return renderer.outputColorSpace;
    return $04ce9c8dcd7d39f0$export$42429b3acfb233a4;
}
// Legacy
const $04ce9c8dcd7d39f0$export$d8ecdf8615bfea69 = {
    clone: $04ce9c8dcd7d39f0$var$cloneUniforms,
    merge: $04ce9c8dcd7d39f0$var$mergeUniforms
};
var $04ce9c8dcd7d39f0$var$default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var $04ce9c8dcd7d39f0$var$default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
class $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isShaderMaterial = true;
        this.type = "ShaderMaterial";
        this.defines = {};
        this.uniforms = {};
        this.uniformsGroups = [];
        this.vertexShader = $04ce9c8dcd7d39f0$var$default_vertex;
        this.fragmentShader = $04ce9c8dcd7d39f0$var$default_fragment;
        this.linewidth = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false; // set to use scene fog
        this.lights = false; // set to use scene lights
        this.clipping = false; // set to use user-defined clipping planes
        this.forceSinglePass = true;
        this.extensions = {
            derivatives: false,
            fragDepth: false,
            drawBuffers: false,
            shaderTextureLOD: false // set to use shader texture LOD
        };
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        this.defaultAttributeValues = {
            "color": [
                1,
                1,
                1
            ],
            "uv": [
                0,
                0
            ],
            "uv1": [
                0,
                0
            ]
        };
        this.index0AttributeName = undefined;
        this.uniformsNeedUpdate = false;
        this.glslVersion = null;
        if (parameters !== undefined) this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.fragmentShader = source.fragmentShader;
        this.vertexShader = source.vertexShader;
        this.uniforms = $04ce9c8dcd7d39f0$var$cloneUniforms(source.uniforms);
        this.uniformsGroups = $04ce9c8dcd7d39f0$var$cloneUniformsGroups(source.uniformsGroups);
        this.defines = Object.assign({}, source.defines);
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.fog = source.fog;
        this.lights = source.lights;
        this.clipping = source.clipping;
        this.extensions = Object.assign({}, source.extensions);
        this.glslVersion = source.glslVersion;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.glslVersion = this.glslVersion;
        data.uniforms = {};
        for(const name in this.uniforms){
            const uniform = this.uniforms[name];
            const value = uniform.value;
            if (value && value.isTexture) data.uniforms[name] = {
                type: "t",
                value: value.toJSON(meta).uuid
            };
            else if (value && value.isColor) data.uniforms[name] = {
                type: "c",
                value: value.getHex()
            };
            else if (value && value.isVector2) data.uniforms[name] = {
                type: "v2",
                value: value.toArray()
            };
            else if (value && value.isVector3) data.uniforms[name] = {
                type: "v3",
                value: value.toArray()
            };
            else if (value && value.isVector4) data.uniforms[name] = {
                type: "v4",
                value: value.toArray()
            };
            else if (value && value.isMatrix3) data.uniforms[name] = {
                type: "m3",
                value: value.toArray()
            };
            else if (value && value.isMatrix4) data.uniforms[name] = {
                type: "m4",
                value: value.toArray()
            };
            else data.uniforms[name] = {
                value: value
            };
        }
        if (Object.keys(this.defines).length > 0) data.defines = this.defines;
        data.vertexShader = this.vertexShader;
        data.fragmentShader = this.fragmentShader;
        data.lights = this.lights;
        data.clipping = this.clipping;
        const extensions = {};
        for(const key in this.extensions)if (this.extensions[key] === true) extensions[key] = true;
        if (Object.keys(extensions).length > 0) data.extensions = extensions;
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$79f141de891a5fed extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.isCamera = true;
        this.type = "Camera";
        this.matrixWorldInverse = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.projectionMatrix = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.projectionMatrixInverse = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.coordinateSystem = $04ce9c8dcd7d39f0$export$5a0e9190d10875d3;
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.matrixWorldInverse.copy(source.matrixWorldInverse);
        this.projectionMatrix.copy(source.projectionMatrix);
        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
        this.coordinateSystem = source.coordinateSystem;
        return this;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
        super.updateWorldMatrix(updateParents, updateChildren);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class $04ce9c8dcd7d39f0$export$74e4ae24825f68d7 extends $04ce9c8dcd7d39f0$export$79f141de891a5fed {
    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000){
        super();
        this.isPerspectiveCamera = true;
        this.type = "PerspectiveCamera";
        this.fov = fov;
        this.zoom = 1;
        this.near = near;
        this.far = far;
        this.focus = 10;
        this.aspect = aspect;
        this.view = null;
        this.filmGauge = 35; // width of the film (default in millimeters)
        this.filmOffset = 0; // horizontal film offset (same unit as gauge)
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.fov = source.fov;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.aspect = source.aspect;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        return this;
    }
    /**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */ setFocalLength(focalLength) {
        /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = $04ce9c8dcd7d39f0$var$RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
    }
    /**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */ getFocalLength() {
        const vExtentSlope = Math.tan($04ce9c8dcd7d39f0$var$DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
        return $04ce9c8dcd7d39f0$var$RAD2DEG * 2 * Math.atan(Math.tan($04ce9c8dcd7d39f0$var$DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        // film not completely covered in portrait format (aspect < 1)
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        // film not completely covered in landscape format (aspect > 1)
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */ setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan($04ce9c8dcd7d39f0$var$DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
            left += view.offsetX * width / fullWidth;
            top -= view.offsetY * height / fullHeight;
            width *= view.width / fullWidth;
            height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0) left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
    }
}
const $04ce9c8dcd7d39f0$var$fov = -90; // negative fov is not an error
const $04ce9c8dcd7d39f0$var$aspect = 1;
class $04ce9c8dcd7d39f0$export$d0cdd0bd804995de extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(near, far, renderTarget){
        super();
        this.type = "CubeCamera";
        this.renderTarget = renderTarget;
        this.coordinateSystem = null;
        const cameraPX = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraPX.layers = this.layers;
        this.add(cameraPX);
        const cameraNX = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraNX.layers = this.layers;
        this.add(cameraNX);
        const cameraPY = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraPY.layers = this.layers;
        this.add(cameraPY);
        const cameraNY = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraNY.layers = this.layers;
        this.add(cameraNY);
        const cameraPZ = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraPZ.layers = this.layers;
        this.add(cameraPZ);
        const cameraNZ = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7($04ce9c8dcd7d39f0$var$fov, $04ce9c8dcd7d39f0$var$aspect, near, far);
        cameraNZ.layers = this.layers;
        this.add(cameraNZ);
    }
    updateCoordinateSystem() {
        const coordinateSystem = this.coordinateSystem;
        const cameras = this.children.concat();
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
        for (const camera of cameras)this.remove(camera);
        if (coordinateSystem === $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
            cameraPX.up.set(0, 1, 0);
            cameraPX.lookAt(1, 0, 0);
            cameraNX.up.set(0, 1, 0);
            cameraNX.lookAt(-1, 0, 0);
            cameraPY.up.set(0, 0, -1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, 1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, 1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, 1, 0);
            cameraNZ.lookAt(0, 0, -1);
        } else if (coordinateSystem === $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac) {
            cameraPX.up.set(0, -1, 0);
            cameraPX.lookAt(-1, 0, 0);
            cameraNX.up.set(0, -1, 0);
            cameraNX.lookAt(1, 0, 0);
            cameraPY.up.set(0, 0, 1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, -1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, -1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, -1, 0);
            cameraNZ.lookAt(0, 0, -1);
        } else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
        for (const camera of cameras){
            this.add(camera);
            camera.updateMatrixWorld();
        }
    }
    update(renderer, scene) {
        if (this.parent === null) this.updateMatrixWorld();
        const renderTarget = this.renderTarget;
        if (this.coordinateSystem !== renderer.coordinateSystem) {
            this.coordinateSystem = renderer.coordinateSystem;
            this.updateCoordinateSystem();
        }
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
        const currentRenderTarget = renderer.getRenderTarget();
        const currentXrEnabled = renderer.xr.enabled;
        renderer.xr.enabled = false;
        const generateMipmaps = renderTarget.texture.generateMipmaps;
        renderTarget.texture.generateMipmaps = false;
        renderer.setRenderTarget(renderTarget, 0);
        renderer.render(scene, cameraPX);
        renderer.setRenderTarget(renderTarget, 1);
        renderer.render(scene, cameraNX);
        renderer.setRenderTarget(renderTarget, 2);
        renderer.render(scene, cameraPY);
        renderer.setRenderTarget(renderTarget, 3);
        renderer.render(scene, cameraNY);
        renderer.setRenderTarget(renderTarget, 4);
        renderer.render(scene, cameraPZ);
        renderTarget.texture.generateMipmaps = generateMipmaps;
        renderer.setRenderTarget(renderTarget, 5);
        renderer.render(scene, cameraNZ);
        renderer.setRenderTarget(currentRenderTarget);
        renderer.xr.enabled = currentXrEnabled;
        renderTarget.texture.needsPMREMUpdate = true;
    }
}
class $04ce9c8dcd7d39f0$export$ee2e5a18258a4049 extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1){
        images = images !== undefined ? images : [];
        mapping = mapping !== undefined ? mapping : $04ce9c8dcd7d39f0$export$8759762a6477f2c4;
        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isCubeTexture = true;
        this.flipY = false;
    }
    get images() {
        return this.image;
    }
    set images(value) {
        this.image = value;
    }
}
class $04ce9c8dcd7d39f0$export$ac386671d651941e extends $04ce9c8dcd7d39f0$export$3c052beb2e51e23f {
    constructor(size = 1, options = {}){
        super(size, size, options);
        this.isWebGLCubeRenderTarget = true;
        const image = {
            width: size,
            height: size,
            depth: 1
        };
        const images = [
            image,
            image,
            image,
            image,
            image,
            image
        ];
        if (options.encoding !== undefined) {
            // @deprecated, r152
            $04ce9c8dcd7d39f0$var$warnOnce("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === $04ce9c8dcd7d39f0$export$f32388edbb32674 ? $04ce9c8dcd7d39f0$export$561f394b24edfcaa : $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51;
        }
        this.texture = new $04ce9c8dcd7d39f0$export$ee2e5a18258a4049(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
        // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
        // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
        // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
        // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
        // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
        // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
        this.texture.isRenderTargetTexture = true;
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
    }
    fromEquirectangularTexture(renderer, texture) {
        this.texture.type = texture.type;
        this.texture.colorSpace = texture.colorSpace;
        this.texture.generateMipmaps = texture.generateMipmaps;
        this.texture.minFilter = texture.minFilter;
        this.texture.magFilter = texture.magFilter;
        const shader = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: /* glsl */ `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: /* glsl */ `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        };
        const geometry = new $04ce9c8dcd7d39f0$export$33e43285f7406bd5(5, 5, 5);
        const material = new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
            name: "CubemapFromEquirect",
            uniforms: $04ce9c8dcd7d39f0$var$cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: $04ce9c8dcd7d39f0$export$d9f0486e75b5ace,
            blending: $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba
        });
        material.uniforms.tEquirect.value = texture;
        const mesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(geometry, material);
        const currentMinFilter = texture.minFilter;
        // Avoid blurred poles
        if (texture.minFilter === $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b) texture.minFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
        const camera = new $04ce9c8dcd7d39f0$export$d0cdd0bd804995de(1, 10, this);
        camera.update(renderer, mesh);
        texture.minFilter = currentMinFilter;
        mesh.geometry.dispose();
        mesh.material.dispose();
        return this;
    }
    clear(renderer, color, depth, stencil) {
        const currentRenderTarget = renderer.getRenderTarget();
        for(let i = 0; i < 6; i++){
            renderer.setRenderTarget(this, i);
            renderer.clear(color, depth, stencil);
        }
        renderer.setRenderTarget(currentRenderTarget);
    }
}
const $04ce9c8dcd7d39f0$var$_vector1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vector2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_normalMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918();
class $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0 {
    constructor(normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 0, 0), constant = 0){
        this.isPlane = true;
        // normal is assumed to be normalized
        this.normal = normal;
        this.constant = constant;
    }
    set(normal, constant) {
        this.normal.copy(normal);
        this.constant = constant;
        return this;
    }
    setComponents(x, y, z, w) {
        this.normal.set(x, y, z);
        this.constant = w;
        return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
        this.normal.copy(normal);
        this.constant = -point.dot(this.normal);
        return this;
    }
    setFromCoplanarPoints(a, b, c) {
        const normal = $04ce9c8dcd7d39f0$var$_vector1.subVectors(c, b).cross($04ce9c8dcd7d39f0$var$_vector2.subVectors(a, b)).normalize();
        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
        this.setFromNormalAndCoplanarPoint(normal, a);
        return this;
    }
    copy(plane) {
        this.normal.copy(plane.normal);
        this.constant = plane.constant;
        return this;
    }
    normalize() {
        // Note: will lead to a divide by zero if the plane is invalid.
        const inverseNormalLength = 1.0 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
    }
    negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
    }
    distanceToPoint(point) {
        return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
        return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
        return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    intersectLine(line, target) {
        const direction = line.delta($04ce9c8dcd7d39f0$var$_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (this.distanceToPoint(line.start) === 0) return target.copy(line.start);
            // Unsure if this is the correct method to handle this case.
            return null;
        }
        const t = -(line.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) return null;
        return target.copy(line.start).addScaledVector(direction, t);
    }
    intersectsLine(line) {
        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
        const startSign = this.distanceToPoint(line.start);
        const endSign = this.distanceToPoint(line.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
        return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
        return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
        return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || $04ce9c8dcd7d39f0$var$_normalMatrix.getNormalMatrix(matrix);
        const referencePoint = this.coplanarPoint($04ce9c8dcd7d39f0$var$_vector1).applyMatrix4(matrix);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
    }
    translate(offset) {
        this.constant -= offset.dot(this.normal);
        return this;
    }
    equals(plane) {
        return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $04ce9c8dcd7d39f0$var$_sphere$4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
const $04ce9c8dcd7d39f0$var$_vector$6 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$35efe6f4c85463d2 {
    constructor(p0 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), p1 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), p2 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), p3 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), p4 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), p5 = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0()){
        this.planes = [
            p0,
            p1,
            p2,
            p3,
            p4,
            p5
        ];
    }
    set(p0, p1, p2, p3, p4, p5) {
        const planes = this.planes;
        planes[0].copy(p0);
        planes[1].copy(p1);
        planes[2].copy(p2);
        planes[3].copy(p3);
        planes[4].copy(p4);
        planes[5].copy(p5);
        return this;
    }
    copy(frustum) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++)planes[i].copy(frustum.planes[i]);
        return this;
    }
    setFromProjectionMatrix(m, coordinateSystem = $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) {
        const planes = this.planes;
        const me = m.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        if (coordinateSystem === $04ce9c8dcd7d39f0$export$5a0e9190d10875d3) planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        else if (coordinateSystem === $04ce9c8dcd7d39f0$export$cc83beedcb9be9ac) planes[5].setComponents(me2, me6, me10, me14).normalize();
        else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
        return this;
    }
    intersectsObject(object) {
        if (object.boundingSphere !== undefined) {
            if (object.boundingSphere === null) object.computeBoundingSphere();
            $04ce9c8dcd7d39f0$var$_sphere$4.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
        } else {
            const geometry = object.geometry;
            if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
            $04ce9c8dcd7d39f0$var$_sphere$4.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        }
        return this.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere$4);
    }
    intersectsSprite(sprite) {
        $04ce9c8dcd7d39f0$var$_sphere$4.center.set(0, 0, 0);
        $04ce9c8dcd7d39f0$var$_sphere$4.radius = 0.7071067811865476;
        $04ce9c8dcd7d39f0$var$_sphere$4.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere$4);
    }
    intersectsSphere(sphere) {
        const planes = this.planes;
        const center = sphere.center;
        const negRadius = -sphere.radius;
        for(let i = 0; i < 6; i++){
            const distance = planes[i].distanceToPoint(center);
            if (distance < negRadius) return false;
        }
        return true;
    }
    intersectsBox(box) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            const plane = planes[i];
            // corner at max distance
            $04ce9c8dcd7d39f0$var$_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
            $04ce9c8dcd7d39f0$var$_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
            $04ce9c8dcd7d39f0$var$_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
            if (plane.distanceToPoint($04ce9c8dcd7d39f0$var$_vector$6) < 0) return false;
        }
        return true;
    }
    containsPoint(point) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            if (planes[i].distanceToPoint(point) < 0) return false;
        }
        return true;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
function $04ce9c8dcd7d39f0$var$WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
        start: function() {
            if (isAnimating === true) return;
            if (animationLoop === null) return;
            requestId = context.requestAnimationFrame(onAnimationFrame);
            isAnimating = true;
        },
        stop: function() {
            context.cancelAnimationFrame(requestId);
            isAnimating = false;
        },
        setAnimationLoop: function(callback) {
            animationLoop = callback;
        },
        setContext: function(value) {
            context = value;
        }
    };
}
function $04ce9c8dcd7d39f0$var$WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
        const array = attribute.array;
        const usage = attribute.usage;
        const buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        let type;
        if (array instanceof Float32Array) type = gl.FLOAT;
        else if (array instanceof Uint16Array) {
            if (attribute.isFloat16BufferAttribute) {
                if (isWebGL2) type = gl.HALF_FLOAT;
                else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
            } else type = gl.UNSIGNED_SHORT;
        } else if (array instanceof Int16Array) type = gl.SHORT;
        else if (array instanceof Uint32Array) type = gl.UNSIGNED_INT;
        else if (array instanceof Int32Array) type = gl.INT;
        else if (array instanceof Int8Array) type = gl.BYTE;
        else if (array instanceof Uint8Array) type = gl.UNSIGNED_BYTE;
        else if (array instanceof Uint8ClampedArray) type = gl.UNSIGNED_BYTE;
        else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
        return {
            buffer: buffer,
            type: type,
            bytesPerElement: array.BYTES_PER_ELEMENT,
            version: attribute.version
        };
    }
    function updateBuffer(buffer, attribute, bufferType) {
        const array = attribute.array;
        const updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) // Not using update ranges
        gl.bufferSubData(bufferType, 0, array);
        else {
            if (isWebGL2) gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
            else gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
            updateRange.count = -1; // reset range
        }
        attribute.onUploadCallback();
    }
    //
    function get(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        return buffers.get(attribute);
    }
    function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data) {
            gl.deleteBuffer(data.buffer);
            buffers.delete(attribute);
        }
    }
    function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
            const cached = buffers.get(attribute);
            if (!cached || cached.version < attribute.version) buffers.set(attribute, {
                buffer: attribute.buffer,
                type: attribute.type,
                bytesPerElement: attribute.elementSize,
                version: attribute.version
            });
            return;
        }
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data === undefined) buffers.set(attribute, createBuffer(attribute, bufferType));
        else if (data.version < attribute.version) {
            updateBuffer(data.buffer, attribute, bufferType);
            data.version = attribute.version;
        }
    }
    return {
        get: get,
        remove: remove,
        update: update
    };
}
class $04ce9c8dcd7d39f0$export$967d831af31f69ce extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1){
        super();
        this.type = "PlaneGeometry";
        this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
        const width_half = width / 2;
        const height_half = height / 2;
        const gridX = Math.floor(widthSegments);
        const gridY = Math.floor(heightSegments);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width / gridX;
        const segment_height = height / gridY;
        //
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for(let iy = 0; iy < gridY1; iy++){
            const y = iy * segment_height - height_half;
            for(let ix = 0; ix < gridX1; ix++){
                const x = ix * segment_width - width_half;
                vertices.push(x, -y, 0);
                normals.push(0, 0, 1);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
            }
        }
        for(let iy = 0; iy < gridY; iy++)for(let ix = 0; ix < gridX; ix++){
            const a = ix + gridX1 * iy;
            const b = ix + gridX1 * (iy + 1);
            const c = ix + 1 + gridX1 * (iy + 1);
            const d = ix + 1 + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$967d831af31f69ce(data.width, data.height, data.widthSegments, data.heightSegments);
    }
}
var $04ce9c8dcd7d39f0$var$alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
var $04ce9c8dcd7d39f0$var$alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var $04ce9c8dcd7d39f0$var$alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var $04ce9c8dcd7d39f0$var$alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
var $04ce9c8dcd7d39f0$var$alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var $04ce9c8dcd7d39f0$var$aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var $04ce9c8dcd7d39f0$var$begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
var $04ce9c8dcd7d39f0$var$beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var $04ce9c8dcd7d39f0$var$bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var $04ce9c8dcd7d39f0$var$iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var $04ce9c8dcd7d39f0$var$clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var $04ce9c8dcd7d39f0$var$clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var $04ce9c8dcd7d39f0$var$color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var $04ce9c8dcd7d39f0$var$color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var $04ce9c8dcd7d39f0$var$color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var $04ce9c8dcd7d39f0$var$color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var $04ce9c8dcd7d39f0$var$common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var $04ce9c8dcd7d39f0$var$cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var $04ce9c8dcd7d39f0$var$displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var $04ce9c8dcd7d39f0$var$emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var $04ce9c8dcd7d39f0$var$emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var $04ce9c8dcd7d39f0$var$colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var $04ce9c8dcd7d39f0$var$colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var $04ce9c8dcd7d39f0$var$envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var $04ce9c8dcd7d39f0$var$envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var $04ce9c8dcd7d39f0$var$fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var $04ce9c8dcd7d39f0$var$fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var $04ce9c8dcd7d39f0$var$fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var $04ce9c8dcd7d39f0$var$lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var $04ce9c8dcd7d39f0$var$lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var $04ce9c8dcd7d39f0$var$lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var $04ce9c8dcd7d39f0$var$lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var $04ce9c8dcd7d39f0$var$lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var $04ce9c8dcd7d39f0$var$lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var $04ce9c8dcd7d39f0$var$lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var $04ce9c8dcd7d39f0$var$lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var $04ce9c8dcd7d39f0$var$lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	anisotropyV /= material.anisotropy;\n	material.anisotropy = saturate( material.anisotropy );\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";
var $04ce9c8dcd7d39f0$var$lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var $04ce9c8dcd7d39f0$var$lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var $04ce9c8dcd7d39f0$var$lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var $04ce9c8dcd7d39f0$var$logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var $04ce9c8dcd7d39f0$var$logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var $04ce9c8dcd7d39f0$var$logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$map_fragment = "#ifdef USE_MAP\n	diffuseColor *= texture2D( map, vMapUv );\n#endif";
var $04ce9c8dcd7d39f0$var$map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var $04ce9c8dcd7d39f0$var$map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var $04ce9c8dcd7d39f0$var$map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var $04ce9c8dcd7d39f0$var$metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var $04ce9c8dcd7d39f0$var$metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var $04ce9c8dcd7d39f0$var$morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var $04ce9c8dcd7d39f0$var$normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var $04ce9c8dcd7d39f0$var$normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var $04ce9c8dcd7d39f0$var$clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var $04ce9c8dcd7d39f0$var$clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var $04ce9c8dcd7d39f0$var$iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var $04ce9c8dcd7d39f0$var$opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var $04ce9c8dcd7d39f0$var$packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var $04ce9c8dcd7d39f0$var$premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var $04ce9c8dcd7d39f0$var$project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var $04ce9c8dcd7d39f0$var$dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var $04ce9c8dcd7d39f0$var$dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var $04ce9c8dcd7d39f0$var$roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var $04ce9c8dcd7d39f0$var$shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var $04ce9c8dcd7d39f0$var$shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var $04ce9c8dcd7d39f0$var$skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var $04ce9c8dcd7d39f0$var$skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var $04ce9c8dcd7d39f0$var$skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var $04ce9c8dcd7d39f0$var$specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var $04ce9c8dcd7d39f0$var$specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var $04ce9c8dcd7d39f0$var$tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var $04ce9c8dcd7d39f0$var$tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var $04ce9c8dcd7d39f0$var$transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
var $04ce9c8dcd7d39f0$var$transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
var $04ce9c8dcd7d39f0$var$uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var $04ce9c8dcd7d39f0$var$uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var $04ce9c8dcd7d39f0$var$uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var $04ce9c8dcd7d39f0$var$worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
const $04ce9c8dcd7d39f0$var$vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const $04ce9c8dcd7d39f0$var$fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const $04ce9c8dcd7d39f0$var$fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const $04ce9c8dcd7d39f0$var$fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
const $04ce9c8dcd7d39f0$var$fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
const $04ce9c8dcd7d39f0$var$vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
const $04ce9c8dcd7d39f0$var$fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
const $04ce9c8dcd7d39f0$var$vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
const $04ce9c8dcd7d39f0$var$fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
const $04ce9c8dcd7d39f0$var$fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
const $04ce9c8dcd7d39f0$var$vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
const $04ce9c8dcd7d39f0$var$fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const $04ce9c8dcd7d39f0$var$vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const $04ce9c8dcd7d39f0$var$fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b = {
    alphahash_fragment: $04ce9c8dcd7d39f0$var$alphahash_fragment,
    alphahash_pars_fragment: $04ce9c8dcd7d39f0$var$alphahash_pars_fragment,
    alphamap_fragment: $04ce9c8dcd7d39f0$var$alphamap_fragment,
    alphamap_pars_fragment: $04ce9c8dcd7d39f0$var$alphamap_pars_fragment,
    alphatest_fragment: $04ce9c8dcd7d39f0$var$alphatest_fragment,
    alphatest_pars_fragment: $04ce9c8dcd7d39f0$var$alphatest_pars_fragment,
    aomap_fragment: $04ce9c8dcd7d39f0$var$aomap_fragment,
    aomap_pars_fragment: $04ce9c8dcd7d39f0$var$aomap_pars_fragment,
    begin_vertex: $04ce9c8dcd7d39f0$var$begin_vertex,
    beginnormal_vertex: $04ce9c8dcd7d39f0$var$beginnormal_vertex,
    bsdfs: $04ce9c8dcd7d39f0$var$bsdfs,
    iridescence_fragment: $04ce9c8dcd7d39f0$var$iridescence_fragment,
    bumpmap_pars_fragment: $04ce9c8dcd7d39f0$var$bumpmap_pars_fragment,
    clipping_planes_fragment: $04ce9c8dcd7d39f0$var$clipping_planes_fragment,
    clipping_planes_pars_fragment: $04ce9c8dcd7d39f0$var$clipping_planes_pars_fragment,
    clipping_planes_pars_vertex: $04ce9c8dcd7d39f0$var$clipping_planes_pars_vertex,
    clipping_planes_vertex: $04ce9c8dcd7d39f0$var$clipping_planes_vertex,
    color_fragment: $04ce9c8dcd7d39f0$var$color_fragment,
    color_pars_fragment: $04ce9c8dcd7d39f0$var$color_pars_fragment,
    color_pars_vertex: $04ce9c8dcd7d39f0$var$color_pars_vertex,
    color_vertex: $04ce9c8dcd7d39f0$var$color_vertex,
    common: $04ce9c8dcd7d39f0$var$common,
    cube_uv_reflection_fragment: $04ce9c8dcd7d39f0$var$cube_uv_reflection_fragment,
    defaultnormal_vertex: $04ce9c8dcd7d39f0$var$defaultnormal_vertex,
    displacementmap_pars_vertex: $04ce9c8dcd7d39f0$var$displacementmap_pars_vertex,
    displacementmap_vertex: $04ce9c8dcd7d39f0$var$displacementmap_vertex,
    emissivemap_fragment: $04ce9c8dcd7d39f0$var$emissivemap_fragment,
    emissivemap_pars_fragment: $04ce9c8dcd7d39f0$var$emissivemap_pars_fragment,
    colorspace_fragment: $04ce9c8dcd7d39f0$var$colorspace_fragment,
    colorspace_pars_fragment: $04ce9c8dcd7d39f0$var$colorspace_pars_fragment,
    envmap_fragment: $04ce9c8dcd7d39f0$var$envmap_fragment,
    envmap_common_pars_fragment: $04ce9c8dcd7d39f0$var$envmap_common_pars_fragment,
    envmap_pars_fragment: $04ce9c8dcd7d39f0$var$envmap_pars_fragment,
    envmap_pars_vertex: $04ce9c8dcd7d39f0$var$envmap_pars_vertex,
    envmap_physical_pars_fragment: $04ce9c8dcd7d39f0$var$envmap_physical_pars_fragment,
    envmap_vertex: $04ce9c8dcd7d39f0$var$envmap_vertex,
    fog_vertex: $04ce9c8dcd7d39f0$var$fog_vertex,
    fog_pars_vertex: $04ce9c8dcd7d39f0$var$fog_pars_vertex,
    fog_fragment: $04ce9c8dcd7d39f0$var$fog_fragment,
    fog_pars_fragment: $04ce9c8dcd7d39f0$var$fog_pars_fragment,
    gradientmap_pars_fragment: $04ce9c8dcd7d39f0$var$gradientmap_pars_fragment,
    lightmap_fragment: $04ce9c8dcd7d39f0$var$lightmap_fragment,
    lightmap_pars_fragment: $04ce9c8dcd7d39f0$var$lightmap_pars_fragment,
    lights_lambert_fragment: $04ce9c8dcd7d39f0$var$lights_lambert_fragment,
    lights_lambert_pars_fragment: $04ce9c8dcd7d39f0$var$lights_lambert_pars_fragment,
    lights_pars_begin: $04ce9c8dcd7d39f0$var$lights_pars_begin,
    lights_toon_fragment: $04ce9c8dcd7d39f0$var$lights_toon_fragment,
    lights_toon_pars_fragment: $04ce9c8dcd7d39f0$var$lights_toon_pars_fragment,
    lights_phong_fragment: $04ce9c8dcd7d39f0$var$lights_phong_fragment,
    lights_phong_pars_fragment: $04ce9c8dcd7d39f0$var$lights_phong_pars_fragment,
    lights_physical_fragment: $04ce9c8dcd7d39f0$var$lights_physical_fragment,
    lights_physical_pars_fragment: $04ce9c8dcd7d39f0$var$lights_physical_pars_fragment,
    lights_fragment_begin: $04ce9c8dcd7d39f0$var$lights_fragment_begin,
    lights_fragment_maps: $04ce9c8dcd7d39f0$var$lights_fragment_maps,
    lights_fragment_end: $04ce9c8dcd7d39f0$var$lights_fragment_end,
    logdepthbuf_fragment: $04ce9c8dcd7d39f0$var$logdepthbuf_fragment,
    logdepthbuf_pars_fragment: $04ce9c8dcd7d39f0$var$logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex: $04ce9c8dcd7d39f0$var$logdepthbuf_pars_vertex,
    logdepthbuf_vertex: $04ce9c8dcd7d39f0$var$logdepthbuf_vertex,
    map_fragment: $04ce9c8dcd7d39f0$var$map_fragment,
    map_pars_fragment: $04ce9c8dcd7d39f0$var$map_pars_fragment,
    map_particle_fragment: $04ce9c8dcd7d39f0$var$map_particle_fragment,
    map_particle_pars_fragment: $04ce9c8dcd7d39f0$var$map_particle_pars_fragment,
    metalnessmap_fragment: $04ce9c8dcd7d39f0$var$metalnessmap_fragment,
    metalnessmap_pars_fragment: $04ce9c8dcd7d39f0$var$metalnessmap_pars_fragment,
    morphcolor_vertex: $04ce9c8dcd7d39f0$var$morphcolor_vertex,
    morphnormal_vertex: $04ce9c8dcd7d39f0$var$morphnormal_vertex,
    morphtarget_pars_vertex: $04ce9c8dcd7d39f0$var$morphtarget_pars_vertex,
    morphtarget_vertex: $04ce9c8dcd7d39f0$var$morphtarget_vertex,
    normal_fragment_begin: $04ce9c8dcd7d39f0$var$normal_fragment_begin,
    normal_fragment_maps: $04ce9c8dcd7d39f0$var$normal_fragment_maps,
    normal_pars_fragment: $04ce9c8dcd7d39f0$var$normal_pars_fragment,
    normal_pars_vertex: $04ce9c8dcd7d39f0$var$normal_pars_vertex,
    normal_vertex: $04ce9c8dcd7d39f0$var$normal_vertex,
    normalmap_pars_fragment: $04ce9c8dcd7d39f0$var$normalmap_pars_fragment,
    clearcoat_normal_fragment_begin: $04ce9c8dcd7d39f0$var$clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps: $04ce9c8dcd7d39f0$var$clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment: $04ce9c8dcd7d39f0$var$clearcoat_pars_fragment,
    iridescence_pars_fragment: $04ce9c8dcd7d39f0$var$iridescence_pars_fragment,
    opaque_fragment: $04ce9c8dcd7d39f0$var$opaque_fragment,
    packing: $04ce9c8dcd7d39f0$var$packing,
    premultiplied_alpha_fragment: $04ce9c8dcd7d39f0$var$premultiplied_alpha_fragment,
    project_vertex: $04ce9c8dcd7d39f0$var$project_vertex,
    dithering_fragment: $04ce9c8dcd7d39f0$var$dithering_fragment,
    dithering_pars_fragment: $04ce9c8dcd7d39f0$var$dithering_pars_fragment,
    roughnessmap_fragment: $04ce9c8dcd7d39f0$var$roughnessmap_fragment,
    roughnessmap_pars_fragment: $04ce9c8dcd7d39f0$var$roughnessmap_pars_fragment,
    shadowmap_pars_fragment: $04ce9c8dcd7d39f0$var$shadowmap_pars_fragment,
    shadowmap_pars_vertex: $04ce9c8dcd7d39f0$var$shadowmap_pars_vertex,
    shadowmap_vertex: $04ce9c8dcd7d39f0$var$shadowmap_vertex,
    shadowmask_pars_fragment: $04ce9c8dcd7d39f0$var$shadowmask_pars_fragment,
    skinbase_vertex: $04ce9c8dcd7d39f0$var$skinbase_vertex,
    skinning_pars_vertex: $04ce9c8dcd7d39f0$var$skinning_pars_vertex,
    skinning_vertex: $04ce9c8dcd7d39f0$var$skinning_vertex,
    skinnormal_vertex: $04ce9c8dcd7d39f0$var$skinnormal_vertex,
    specularmap_fragment: $04ce9c8dcd7d39f0$var$specularmap_fragment,
    specularmap_pars_fragment: $04ce9c8dcd7d39f0$var$specularmap_pars_fragment,
    tonemapping_fragment: $04ce9c8dcd7d39f0$var$tonemapping_fragment,
    tonemapping_pars_fragment: $04ce9c8dcd7d39f0$var$tonemapping_pars_fragment,
    transmission_fragment: $04ce9c8dcd7d39f0$var$transmission_fragment,
    transmission_pars_fragment: $04ce9c8dcd7d39f0$var$transmission_pars_fragment,
    uv_pars_fragment: $04ce9c8dcd7d39f0$var$uv_pars_fragment,
    uv_pars_vertex: $04ce9c8dcd7d39f0$var$uv_pars_vertex,
    uv_vertex: $04ce9c8dcd7d39f0$var$uv_vertex,
    worldpos_vertex: $04ce9c8dcd7d39f0$var$worldpos_vertex,
    background_vert: $04ce9c8dcd7d39f0$var$vertex$h,
    background_frag: $04ce9c8dcd7d39f0$var$fragment$h,
    backgroundCube_vert: $04ce9c8dcd7d39f0$var$vertex$g,
    backgroundCube_frag: $04ce9c8dcd7d39f0$var$fragment$g,
    cube_vert: $04ce9c8dcd7d39f0$var$vertex$f,
    cube_frag: $04ce9c8dcd7d39f0$var$fragment$f,
    depth_vert: $04ce9c8dcd7d39f0$var$vertex$e,
    depth_frag: $04ce9c8dcd7d39f0$var$fragment$e,
    distanceRGBA_vert: $04ce9c8dcd7d39f0$var$vertex$d,
    distanceRGBA_frag: $04ce9c8dcd7d39f0$var$fragment$d,
    equirect_vert: $04ce9c8dcd7d39f0$var$vertex$c,
    equirect_frag: $04ce9c8dcd7d39f0$var$fragment$c,
    linedashed_vert: $04ce9c8dcd7d39f0$var$vertex$b,
    linedashed_frag: $04ce9c8dcd7d39f0$var$fragment$b,
    meshbasic_vert: $04ce9c8dcd7d39f0$var$vertex$a,
    meshbasic_frag: $04ce9c8dcd7d39f0$var$fragment$a,
    meshlambert_vert: $04ce9c8dcd7d39f0$var$vertex$9,
    meshlambert_frag: $04ce9c8dcd7d39f0$var$fragment$9,
    meshmatcap_vert: $04ce9c8dcd7d39f0$var$vertex$8,
    meshmatcap_frag: $04ce9c8dcd7d39f0$var$fragment$8,
    meshnormal_vert: $04ce9c8dcd7d39f0$var$vertex$7,
    meshnormal_frag: $04ce9c8dcd7d39f0$var$fragment$7,
    meshphong_vert: $04ce9c8dcd7d39f0$var$vertex$6,
    meshphong_frag: $04ce9c8dcd7d39f0$var$fragment$6,
    meshphysical_vert: $04ce9c8dcd7d39f0$var$vertex$5,
    meshphysical_frag: $04ce9c8dcd7d39f0$var$fragment$5,
    meshtoon_vert: $04ce9c8dcd7d39f0$var$vertex$4,
    meshtoon_frag: $04ce9c8dcd7d39f0$var$fragment$4,
    points_vert: $04ce9c8dcd7d39f0$var$vertex$3,
    points_frag: $04ce9c8dcd7d39f0$var$fragment$3,
    shadow_vert: $04ce9c8dcd7d39f0$var$vertex$2,
    shadow_frag: $04ce9c8dcd7d39f0$var$fragment$2,
    sprite_vert: $04ce9c8dcd7d39f0$var$vertex$1,
    sprite_frag: $04ce9c8dcd7d39f0$var$fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */ const $04ce9c8dcd7d39f0$export$6643083551874bf5 = {
    common: {
        diffuse: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        },
        specularMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1.0
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: 0.98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        },
        aoMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        },
        lightMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        normalScale: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        },
        emissiveMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        },
        metalnessMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        },
        roughnessMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 0.00025
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2000
        },
        fogColor: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotLightMap: {
            value: []
        },
        spotShadowMap: {
            value: []
        },
        spotLightMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        size: {
            value: 1.0
        },
        scale: {
            value: 1.0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        }
    },
    sprite: {
        diffuse: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        center: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, 0.5)
        },
        rotation: {
            value: 0.0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
        },
        alphaTest: {
            value: 0
        }
    }
};
const $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014 = {
    basic: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.specularmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.envmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.aomap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lightmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshbasic_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshbasic_frag
    },
    lambert: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.specularmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.envmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.aomap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lightmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.emissivemap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshlambert_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshlambert_frag
    },
    phong: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.specularmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.envmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.aomap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lightmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.emissivemap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
                },
                specular: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x111111)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphong_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphong_frag
    },
    standard: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.envmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.aomap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lightmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.emissivemap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.roughnessmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.metalnessmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
                },
                roughness: {
                    value: 1.0
                },
                metalness: {
                    value: 0.0
                },
                envMapIntensity: {
                    value: 1
                } // temporary
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphysical_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphysical_frag
    },
    toon: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.aomap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lightmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.emissivemap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.gradientmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshtoon_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshtoon_frag
    },
    matcap: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshmatcap_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshmatcap_frag
    },
    points: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.points,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.points_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.points_frag
    },
    dashed: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.linedashed_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.linedashed_frag
    },
    depth: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.depth_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.depth_frag
    },
    normal: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.bumpmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.normalmap,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            {
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshnormal_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshnormal_frag
    },
    sprite: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.sprite,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.sprite_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            t2D: {
                value: null
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.background_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.background_frag
    },
    backgroundCube: {
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            backgroundBlurriness: {
                value: 0
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.backgroundCube_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.backgroundCube_frag
    },
    cube: {
        uniforms: {
            tCube: {
                value: null
            },
            tFlip: {
                value: -1
            },
            opacity: {
                value: 1.0
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.cube_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.equirect_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.equirect_frag
    },
    distanceRGBA: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.common,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.displacementmap,
            {
                referencePosition: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699()
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1000
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.distanceRGBA_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.distanceRGBA_frag
    },
    shadow: {
        uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
            $04ce9c8dcd7d39f0$export$6643083551874bf5.lights,
            $04ce9c8dcd7d39f0$export$6643083551874bf5.fog,
            {
                color: {
                    value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x00000)
                },
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.shadow_vert,
        fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.shadow_frag
    }
};
$04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.physical = {
    uniforms: /*@__PURE__*/ $04ce9c8dcd7d39f0$var$mergeUniforms([
        $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            clearcoatNormalMap: {
                value: null
            },
            clearcoatNormalMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            clearcoatNormalScale: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1)
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatRoughnessMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            iridescence: {
                value: 0
            },
            iridescenceMap: {
                value: null
            },
            iridescenceMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            iridescenceIOR: {
                value: 1.3
            },
            iridescenceThicknessMinimum: {
                value: 100
            },
            iridescenceThicknessMaximum: {
                value: 400
            },
            iridescenceThicknessMap: {
                value: null
            },
            iridescenceThicknessMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
            },
            sheenColorMap: {
                value: null
            },
            sheenColorMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            sheenRoughness: {
                value: 1
            },
            sheenRoughnessMap: {
                value: null
            },
            sheenRoughnessMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            transmissionSamplerSize: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            thicknessMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000)
            },
            specularColor: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e(1, 1, 1)
            },
            specularColorMap: {
                value: null
            },
            specularColorMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            specularIntensity: {
                value: 1
            },
            specularIntensityMap: {
                value: null
            },
            specularIntensityMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            },
            anisotropyVector: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()
            },
            anisotropyMap: {
                value: null
            },
            anisotropyMapTransform: {
                value: /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$8ff26dafa08918()
            }
        }
    ]),
    vertexShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphysical_vert,
    fragmentShader: $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b.meshphysical_frag
};
const $04ce9c8dcd7d39f0$var$_rgb = {
    r: 0,
    b: 0,
    g: 0
};
function $04ce9c8dcd7d39f0$var$WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
        let forceClear = false;
        let background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) {
            const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
            background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
        }
        if (background === null) setClear(clearColor, clearAlpha);
        else if (background && background.isColor) {
            setClear(background, 1);
            forceClear = true;
        }
        const xr = renderer.xr;
        const environmentBlendMode = xr.getEnvironmentBlendMode();
        switch(environmentBlendMode){
            case "opaque":
                forceClear = true;
                break;
            case "additive":
                state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
                forceClear = true;
                break;
            case "alpha-blend":
                state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
                forceClear = true;
                break;
        }
        if (renderer.autoClear || forceClear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        if (background && (background.isCubeTexture || background.mapping === $04ce9c8dcd7d39f0$export$dbf3e70ff37af79)) {
            if (boxMesh === undefined) {
                boxMesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(new $04ce9c8dcd7d39f0$export$33e43285f7406bd5(1, 1, 1), new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
                    name: "BackgroundCubeMaterial",
                    uniforms: $04ce9c8dcd7d39f0$var$cloneUniforms($04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.backgroundCube.uniforms),
                    vertexShader: $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.backgroundCube.vertexShader,
                    fragmentShader: $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.backgroundCube.fragmentShader,
                    side: $04ce9c8dcd7d39f0$export$d9f0486e75b5ace,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                boxMesh.geometry.deleteAttribute("normal");
                boxMesh.geometry.deleteAttribute("uv");
                boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                };
                // add "envMap" material property so the renderer can evaluate it like for built-in materials
                Object.defineProperty(boxMesh.material, "envMap", {
                    get: function() {
                        return this.uniforms.envMap.value;
                    }
                });
                objects.update(boxMesh);
            }
            boxMesh.material.uniforms.envMap.value = background;
            boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
            boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
            boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
            boxMesh.material.toneMapped = background.colorSpace === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? false : true;
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                boxMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            boxMesh.layers.enableAll();
            // push to the pre-sorted opaque render list
            renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
            if (planeMesh === undefined) {
                planeMesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(new $04ce9c8dcd7d39f0$export$967d831af31f69ce(2, 2), new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
                    name: "BackgroundMaterial",
                    uniforms: $04ce9c8dcd7d39f0$var$cloneUniforms($04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.background.uniforms),
                    vertexShader: $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.background.vertexShader,
                    fragmentShader: $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014.background.fragmentShader,
                    side: $04ce9c8dcd7d39f0$export$2ede184fc2998901,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                planeMesh.geometry.deleteAttribute("normal");
                // add "map" material property so the renderer can evaluate it like for built-in materials
                Object.defineProperty(planeMesh.material, "map", {
                    get: function() {
                        return this.uniforms.t2D.value;
                    }
                });
                objects.update(planeMesh);
            }
            planeMesh.material.uniforms.t2D.value = background;
            planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
            planeMesh.material.toneMapped = background.colorSpace === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? false : true;
            if (background.matrixAutoUpdate === true) background.updateMatrix();
            planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                planeMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            planeMesh.layers.enableAll();
            // push to the pre-sorted opaque render list
            renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
    }
    function setClear(color, alpha) {
        color.getRGB($04ce9c8dcd7d39f0$var$_rgb, $04ce9c8dcd7d39f0$var$getUnlitUniformColorSpace(renderer));
        state.buffers.color.setClear($04ce9c8dcd7d39f0$var$_rgb.r, $04ce9c8dcd7d39f0$var$_rgb.g, $04ce9c8dcd7d39f0$var$_rgb.b, alpha, premultipliedAlpha);
    }
    return {
        getClearColor: function() {
            return clearColor;
        },
        setClearColor: function(color, alpha = 1) {
            clearColor.set(color);
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function() {
            return clearAlpha;
        },
        setClearAlpha: function(alpha) {
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        render: render
    };
}
function $04ce9c8dcd7d39f0$var$WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
        let updateBuffers = false;
        if (vaoAvailable) {
            const state = getBindingState(geometry, program, material);
            if (currentState !== state) {
                currentState = state;
                bindVertexArrayObject(currentState.object);
            }
            updateBuffers = needsUpdate(object, geometry, program, index);
            if (updateBuffers) saveCache(object, geometry, program, index);
        } else {
            const wireframe = material.wireframe === true;
            if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
                currentState.geometry = geometry.id;
                currentState.program = program.id;
                currentState.wireframe = wireframe;
                updateBuffers = true;
            }
        }
        if (index !== null) attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
        if (updateBuffers || forceUpdate) {
            forceUpdate = false;
            setupVertexAttributes(object, material, program, geometry);
            if (index !== null) gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
    }
    function createVertexArrayObject() {
        if (capabilities.isWebGL2) return gl.createVertexArray();
        return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
        return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
        return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
        const wireframe = material.wireframe === true;
        let programMap = bindingStates[geometry.id];
        if (programMap === undefined) {
            programMap = {};
            bindingStates[geometry.id] = programMap;
        }
        let stateMap = programMap[program.id];
        if (stateMap === undefined) {
            stateMap = {};
            programMap[program.id] = stateMap;
        }
        let state = stateMap[wireframe];
        if (state === undefined) {
            state = createBindingState(createVertexArrayObject());
            stateMap[wireframe] = state;
        }
        return state;
    }
    function createBindingState(vao) {
        const newAttributes = [];
        const enabledAttributes = [];
        const attributeDivisors = [];
        for(let i = 0; i < maxVertexAttributes; i++){
            newAttributes[i] = 0;
            enabledAttributes[i] = 0;
            attributeDivisors[i] = 0;
        }
        return {
            // for backward compatibility on non-VAO support browser
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: newAttributes,
            enabledAttributes: enabledAttributes,
            attributeDivisors: attributeDivisors,
            object: vao,
            attributes: {},
            index: null
        };
    }
    function needsUpdate(object, geometry, program, index) {
        const cachedAttributes = currentState.attributes;
        const geometryAttributes = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                const cachedAttribute = cachedAttributes[name];
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (cachedAttribute === undefined) return true;
                if (cachedAttribute.attribute !== geometryAttribute) return true;
                if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
                attributesNum++;
            }
        }
        if (currentState.attributesNum !== attributesNum) return true;
        if (currentState.index !== index) return true;
        return false;
    }
    function saveCache(object, geometry, program, index) {
        const cache = {};
        const attributes = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let attribute = attributes[name];
                if (attribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) attribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) attribute = object.instanceColor;
                }
                const data = {};
                data.attribute = attribute;
                if (attribute && attribute.data) data.data = attribute.data;
                cache[name] = data;
                attributesNum++;
            }
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
    }
    function initAttributes() {
        const newAttributes = currentState.newAttributes;
        for(let i = 0, il = newAttributes.length; i < il; i++)newAttributes[i] = 0;
    }
    function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        const attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
            gl.enableVertexAttribArray(attribute);
            enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
            const extension = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
            extension[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
            attributeDivisors[attribute] = meshPerAttribute;
        }
    }
    function disableUnusedAttributes() {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        for(let i = 0, il = enabledAttributes.length; i < il; i++)if (enabledAttributes[i] !== newAttributes[i]) {
            gl.disableVertexAttribArray(i);
            enabledAttributes[i] = 0;
        }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
        if (integer === true) gl.vertexAttribIPointer(index, size, type, stride, offset);
        else gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
            if (extensions.get("ANGLE_instanced_arrays") === null) return;
        }
        initAttributes();
        const geometryAttributes = geometry.attributes;
        const programAttributes = program.getAttributes();
        const materialDefaultAttributeValues = material.defaultAttributeValues;
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (geometryAttribute !== undefined) {
                    const normalized = geometryAttribute.normalized;
                    const size = geometryAttribute.itemSize;
                    const attribute = attributes.get(geometryAttribute);
                    // TODO Attribute may not be available on context restore
                    if (attribute === undefined) continue;
                    const buffer = attribute.buffer;
                    const type = attribute.type;
                    const bytesPerElement = attribute.bytesPerElement;
                    // check for integer attributes (WebGL 2 only)
                    const integer = capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === $04ce9c8dcd7d39f0$export$5c612977753abe2);
                    if (geometryAttribute.isInterleavedBufferAttribute) {
                        const data = geometryAttribute.data;
                        const stride = data.stride;
                        const offset = geometryAttribute.offset;
                        if (data.isInstancedInterleavedBuffer) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                        for(let i = 0; i < programAttribute.locationSize; i++)vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement, integer);
                    } else {
                        if (geometryAttribute.isInstancedBufferAttribute) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                        for(let i = 0; i < programAttribute.locationSize; i++)vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement, integer);
                    }
                } else if (materialDefaultAttributeValues !== undefined) {
                    const value = materialDefaultAttributeValues[name];
                    if (value !== undefined) switch(value.length){
                        case 2:
                            gl.vertexAttrib2fv(programAttribute.location, value);
                            break;
                        case 3:
                            gl.vertexAttrib3fv(programAttribute.location, value);
                            break;
                        case 4:
                            gl.vertexAttrib4fv(programAttribute.location, value);
                            break;
                        default:
                            gl.vertexAttrib1fv(programAttribute.location, value);
                    }
                }
            }
        }
        disableUnusedAttributes();
    }
    function dispose() {
        reset();
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            for(const programId in programMap){
                const stateMap = programMap[programId];
                for(const wireframe in stateMap){
                    deleteVertexArrayObject(stateMap[wireframe].object);
                    delete stateMap[wireframe];
                }
                delete programMap[programId];
            }
            delete bindingStates[geometryId];
        }
    }
    function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === undefined) return;
        const programMap = bindingStates[geometry.id];
        for(const programId in programMap){
            const stateMap = programMap[programId];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[programId];
        }
        delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            if (programMap[program.id] === undefined) continue;
            const stateMap = programMap[program.id];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[program.id];
        }
    }
    function reset() {
        resetDefaultState();
        forceUpdate = true;
        if (currentState === defaultState) return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
    }
    // for backward-compatibility
    function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
    }
    return {
        setup: setup,
        reset: reset,
        resetDefaultState: resetDefaultState,
        dispose: dispose,
        releaseStatesOfGeometry: releaseStatesOfGeometry,
        releaseStatesOfProgram: releaseStatesOfProgram,
        initAttributes: initAttributes,
        enableAttribute: enableAttribute,
        disableUnusedAttributes: disableUnusedAttributes
    };
}
function $04ce9c8dcd7d39f0$var$WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawArraysInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawArraysInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $04ce9c8dcd7d39f0$var$WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
        if (maxAnisotropy !== undefined) return maxAnisotropy;
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            const extension = extensions.get("EXT_texture_filter_anisotropic");
            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else maxAnisotropy = 0;
        return maxAnisotropy;
    }
    function getMaxPrecision(precision) {
        if (precision === "highp") {
            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) return "highp";
            precision = "mediump";
        }
        if (precision === "mediump") {
            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) return "mediump";
        }
        return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl.constructor.name === "WebGL2RenderingContext";
    let precision = parameters.precision !== undefined ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
        console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
        precision = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
    return {
        isWebGL2: isWebGL2,
        drawBuffers: drawBuffers,
        getMaxAnisotropy: getMaxAnisotropy,
        getMaxPrecision: getMaxPrecision,
        precision: precision,
        logarithmicDepthBuffer: logarithmicDepthBuffer,
        maxTextures: maxTextures,
        maxVertexTextures: maxVertexTextures,
        maxTextureSize: maxTextureSize,
        maxCubemapSize: maxCubemapSize,
        maxAttributes: maxAttributes,
        maxVertexUniforms: maxVertexUniforms,
        maxVaryings: maxVaryings,
        maxFragmentUniforms: maxFragmentUniforms,
        vertexTextures: vertexTextures,
        floatFragmentTextures: floatFragmentTextures,
        floatVertexTextures: floatVertexTextures,
        maxSamples: maxSamples
    };
}
function $04ce9c8dcd7d39f0$var$WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new $04ce9c8dcd7d39f0$export$7ff5ac152ef991b0(), viewNormalMatrix = new $04ce9c8dcd7d39f0$export$8ff26dafa08918(), uniform = {
        value: null,
        needsUpdate: false
    };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
        const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        numGlobalPlanes = planes.length;
        return enabled;
    };
    this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
    };
    this.endShadows = function() {
        renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
        globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
        const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        const materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
            // there's no local clipping
            if (renderingShadows) // there's no global clipping
            projectPlanes(null);
            else resetGlobalState();
        } else {
            const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
            let dstArray = materialProperties.clippingState || null;
            uniform.value = dstArray; // ensure unique state
            dstArray = projectPlanes(planes, camera, lGlobal, useCache);
            for(let i = 0; i !== lGlobal; ++i)dstArray[i] = globalState[i];
            materialProperties.clippingState = dstArray;
            this.numIntersection = clipIntersection ? this.numPlanes : 0;
            this.numPlanes += nGlobal;
        }
    };
    function resetGlobalState() {
        if (uniform.value !== globalState) {
            uniform.value = globalState;
            uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
        const nPlanes = planes !== null ? planes.length : 0;
        let dstArray = null;
        if (nPlanes !== 0) {
            dstArray = uniform.value;
            if (skipTransform !== true || dstArray === null) {
                const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
                viewNormalMatrix.getNormalMatrix(viewMatrix);
                if (dstArray === null || dstArray.length < flatSize) dstArray = new Float32Array(flatSize);
                for(let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4){
                    plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
                    plane.normal.toArray(dstArray, i4);
                    dstArray[i4 + 3] = plane.constant;
                }
            }
            uniform.value = dstArray;
            uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
    }
}
function $04ce9c8dcd7d39f0$var$WebGLCubeMaps(renderer) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
        if (mapping === $04ce9c8dcd7d39f0$export$d64030b316d3b087) texture.mapping = $04ce9c8dcd7d39f0$export$8759762a6477f2c4;
        else if (mapping === $04ce9c8dcd7d39f0$export$ee99d97d46898098) texture.mapping = $04ce9c8dcd7d39f0$export$dc59f8aed047f61d;
        return texture;
    }
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            if (mapping === $04ce9c8dcd7d39f0$export$d64030b316d3b087 || mapping === $04ce9c8dcd7d39f0$export$ee99d97d46898098) {
                if (cubemaps.has(texture)) {
                    const cubemap = cubemaps.get(texture).texture;
                    return mapTextureMapping(cubemap, texture.mapping);
                } else {
                    const image = texture.image;
                    if (image && image.height > 0) {
                        const renderTarget = new $04ce9c8dcd7d39f0$export$ac386671d651941e(image.height / 2);
                        renderTarget.fromEquirectangularTexture(renderer, texture);
                        cubemaps.set(texture, renderTarget);
                        texture.addEventListener("dispose", onTextureDispose);
                        return mapTextureMapping(renderTarget.texture, texture.mapping);
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemap = cubemaps.get(texture);
        if (cubemap !== undefined) {
            cubemaps.delete(texture);
            cubemap.dispose();
        }
    }
    function dispose() {
        cubemaps = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class $04ce9c8dcd7d39f0$export$9ebf355ee4ed261b extends $04ce9c8dcd7d39f0$export$79f141de891a5fed {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000){
        super();
        this.isOrthographicCamera = true;
        this.type = "OrthographicCamera";
        this.zoom = 1;
        this.view = null;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.near = near;
        this.far = far;
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.near = source.near;
        this.far = source.far;
        this.zoom = source.zoom;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
            const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
            const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            left += scaleW * this.view.offsetX;
            right = left + scaleW * this.view.width;
            top -= scaleH * this.view.offsetY;
            bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        return data;
    }
}
const $04ce9c8dcd7d39f0$var$LOD_MIN = 4;
// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const $04ce9c8dcd7d39f0$var$EXTRA_LOD_SIGMA = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
];
// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const $04ce9c8dcd7d39f0$var$MAX_SAMPLES = 20;
const $04ce9c8dcd7d39f0$var$_flatCamera = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$9ebf355ee4ed261b();
const $04ce9c8dcd7d39f0$var$_clearColor = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
let $04ce9c8dcd7d39f0$var$_oldTarget = null;
// Golden Ratio
const $04ce9c8dcd7d39f0$var$PHI = (1 + Math.sqrt(5)) / 2;
const $04ce9c8dcd7d39f0$var$INV_PHI = 1 / $04ce9c8dcd7d39f0$var$PHI;
// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const $04ce9c8dcd7d39f0$var$_axisDirections = [
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 1, 1),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-1, 1, 1),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 1, -1),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-1, 1, -1),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, $04ce9c8dcd7d39f0$var$PHI, $04ce9c8dcd7d39f0$var$INV_PHI),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, $04ce9c8dcd7d39f0$var$PHI, -$04ce9c8dcd7d39f0$var$INV_PHI),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699($04ce9c8dcd7d39f0$var$INV_PHI, 0, $04ce9c8dcd7d39f0$var$PHI),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-$04ce9c8dcd7d39f0$var$INV_PHI, 0, $04ce9c8dcd7d39f0$var$PHI),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699($04ce9c8dcd7d39f0$var$PHI, $04ce9c8dcd7d39f0$var$INV_PHI, 0),
    /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-$04ce9c8dcd7d39f0$var$PHI, $04ce9c8dcd7d39f0$var$INV_PHI, 0)
];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/ class $04ce9c8dcd7d39f0$export$6add42717753e221 {
    constructor(renderer){
        this._renderer = renderer;
        this._pingPongRenderTarget = null;
        this._lodMax = 0;
        this._cubeSize = 0;
        this._lodPlanes = [];
        this._sizeLods = [];
        this._sigmas = [];
        this._blurMaterial = null;
        this._cubemapMaterial = null;
        this._equirectMaterial = null;
        this._compileMaterial(this._blurMaterial);
    }
    /**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */ fromScene(scene, sigma = 0, near = 0.1, far = 100) {
        $04ce9c8dcd7d39f0$var$_oldTarget = this._renderer.getRenderTarget();
        this._setSize(256);
        const cubeUVRenderTarget = this._allocateTargets();
        cubeUVRenderTarget.depthBuffer = true;
        this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
        if (sigma > 0) this._blur(cubeUVRenderTarget, 0, 0, sigma);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    /**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromEquirectangular(equirectangular, renderTarget = null) {
        return this._fromTexture(equirectangular, renderTarget);
    }
    /**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromCubemap(cubemap, renderTarget = null) {
        return this._fromTexture(cubemap, renderTarget);
    }
    /**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileCubemapShader() {
        if (this._cubemapMaterial === null) {
            this._cubemapMaterial = $04ce9c8dcd7d39f0$var$_getCubemapMaterial();
            this._compileMaterial(this._cubemapMaterial);
        }
    }
    /**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileEquirectangularShader() {
        if (this._equirectMaterial === null) {
            this._equirectMaterial = $04ce9c8dcd7d39f0$var$_getEquirectMaterial();
            this._compileMaterial(this._equirectMaterial);
        }
    }
    /**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */ dispose() {
        this._dispose();
        if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
        if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
    }
    // private interface
    _setSize(cubeSize) {
        this._lodMax = Math.floor(Math.log2(cubeSize));
        this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
        if (this._blurMaterial !== null) this._blurMaterial.dispose();
        if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
        for(let i = 0; i < this._lodPlanes.length; i++)this._lodPlanes[i].dispose();
    }
    _cleanup(outputTarget) {
        this._renderer.setRenderTarget($04ce9c8dcd7d39f0$var$_oldTarget);
        outputTarget.scissorTest = false;
        $04ce9c8dcd7d39f0$var$_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
        if (texture.mapping === $04ce9c8dcd7d39f0$export$8759762a6477f2c4 || texture.mapping === $04ce9c8dcd7d39f0$export$dc59f8aed047f61d) this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
        else this._setSize(texture.image.width / 4);
        $04ce9c8dcd7d39f0$var$_oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = renderTarget || this._allocateTargets();
        this._textureToCubeUV(texture, cubeUVRenderTarget);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    _allocateTargets() {
        const width = 3 * Math.max(this._cubeSize, 112);
        const height = 4 * this._cubeSize;
        const params = {
            magFilter: $04ce9c8dcd7d39f0$export$8a72f490b25c56c8,
            minFilter: $04ce9c8dcd7d39f0$export$8a72f490b25c56c8,
            generateMipmaps: false,
            type: $04ce9c8dcd7d39f0$export$2697304443f382bc,
            format: $04ce9c8dcd7d39f0$export$3f8bb04b555a363c,
            colorSpace: $04ce9c8dcd7d39f0$export$42429b3acfb233a4,
            depthBuffer: false
        };
        const cubeUVRenderTarget = $04ce9c8dcd7d39f0$var$_createRenderTarget(width, height, params);
        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
            if (this._pingPongRenderTarget !== null) this._dispose();
            this._pingPongRenderTarget = $04ce9c8dcd7d39f0$var$_createRenderTarget(width, height, params);
            const { _lodMax: _lodMax } = this;
            ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = $04ce9c8dcd7d39f0$var$_createPlanes(_lodMax));
            this._blurMaterial = $04ce9c8dcd7d39f0$var$_getBlurShader(_lodMax, width, height);
        }
        return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
        const tmpMesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(this._lodPlanes[0], material);
        this._renderer.compile(tmpMesh, $04ce9c8dcd7d39f0$var$_flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
        const fov = 90;
        const aspect = 1;
        const cubeCamera = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7(fov, aspect, near, far);
        const upSign = [
            1,
            -1,
            1,
            1,
            1,
            1
        ];
        const forwardSign = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ];
        const renderer = this._renderer;
        const originalAutoClear = renderer.autoClear;
        const toneMapping = renderer.toneMapping;
        renderer.getClearColor($04ce9c8dcd7d39f0$var$_clearColor);
        renderer.toneMapping = $04ce9c8dcd7d39f0$export$9fcb6b4294603b2;
        renderer.autoClear = false;
        const backgroundMaterial = new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5({
            name: "PMREM.Background",
            side: $04ce9c8dcd7d39f0$export$d9f0486e75b5ace,
            depthWrite: false,
            depthTest: false
        });
        const backgroundBox = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(new $04ce9c8dcd7d39f0$export$33e43285f7406bd5(), backgroundMaterial);
        let useSolidColor = false;
        const background = scene.background;
        if (background) {
            if (background.isColor) {
                backgroundMaterial.color.copy(background);
                scene.background = null;
                useSolidColor = true;
            }
        } else {
            backgroundMaterial.color.copy($04ce9c8dcd7d39f0$var$_clearColor);
            useSolidColor = true;
        }
        for(let i = 0; i < 6; i++){
            const col = i % 3;
            if (col === 0) {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(forwardSign[i], 0, 0);
            } else if (col === 1) {
                cubeCamera.up.set(0, 0, upSign[i]);
                cubeCamera.lookAt(0, forwardSign[i], 0);
            } else {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(0, 0, forwardSign[i]);
            }
            const size = this._cubeSize;
            $04ce9c8dcd7d39f0$var$_setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
            renderer.setRenderTarget(cubeUVRenderTarget);
            if (useSolidColor) renderer.render(backgroundBox, cubeCamera);
            renderer.render(scene, cubeCamera);
        }
        backgroundBox.geometry.dispose();
        backgroundBox.material.dispose();
        renderer.toneMapping = toneMapping;
        renderer.autoClear = originalAutoClear;
        scene.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
        const renderer = this._renderer;
        const isCubeTexture = texture.mapping === $04ce9c8dcd7d39f0$export$8759762a6477f2c4 || texture.mapping === $04ce9c8dcd7d39f0$export$dc59f8aed047f61d;
        if (isCubeTexture) {
            if (this._cubemapMaterial === null) this._cubemapMaterial = $04ce9c8dcd7d39f0$var$_getCubemapMaterial();
            this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
        } else if (this._equirectMaterial === null) this._equirectMaterial = $04ce9c8dcd7d39f0$var$_getEquirectMaterial();
        const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
        const mesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(this._lodPlanes[0], material);
        const uniforms = material.uniforms;
        uniforms["envMap"].value = texture;
        const size = this._cubeSize;
        $04ce9c8dcd7d39f0$var$_setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        renderer.render(mesh, $04ce9c8dcd7d39f0$var$_flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
        const renderer = this._renderer;
        const autoClear = renderer.autoClear;
        renderer.autoClear = false;
        for(let i = 1; i < this._lodPlanes.length; i++){
            const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
            const poleAxis = $04ce9c8dcd7d39f0$var$_axisDirections[(i - 1) % $04ce9c8dcd7d39f0$var$_axisDirections.length];
            this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
        }
        renderer.autoClear = autoClear;
    }
    /**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */ _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
        const pingPongRenderTarget = this._pingPongRenderTarget;
        this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
        this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
        const renderer = this._renderer;
        const blurMaterial = this._blurMaterial;
        if (direction !== "latitudinal" && direction !== "longitudinal") console.error("blur direction must be either latitudinal or longitudinal!");
        // Number of standard deviations at which to cut off the discrete approximation.
        const STANDARD_DEVIATIONS = 3;
        const blurMesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(this._lodPlanes[lodOut], blurMaterial);
        const blurUniforms = blurMaterial.uniforms;
        const pixels = this._sizeLods[lodIn] - 1;
        const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * $04ce9c8dcd7d39f0$var$MAX_SAMPLES - 1);
        const sigmaPixels = sigmaRadians / radiansPerPixel;
        const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : $04ce9c8dcd7d39f0$var$MAX_SAMPLES;
        if (samples > $04ce9c8dcd7d39f0$var$MAX_SAMPLES) console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${$04ce9c8dcd7d39f0$var$MAX_SAMPLES}`);
        const weights = [];
        let sum = 0;
        for(let i = 0; i < $04ce9c8dcd7d39f0$var$MAX_SAMPLES; ++i){
            const x = i / sigmaPixels;
            const weight = Math.exp(-x * x / 2);
            weights.push(weight);
            if (i === 0) sum += weight;
            else if (i < samples) sum += 2 * weight;
        }
        for(let i = 0; i < weights.length; i++)weights[i] = weights[i] / sum;
        blurUniforms["envMap"].value = targetIn.texture;
        blurUniforms["samples"].value = samples;
        blurUniforms["weights"].value = weights;
        blurUniforms["latitudinal"].value = direction === "latitudinal";
        if (poleAxis) blurUniforms["poleAxis"].value = poleAxis;
        const { _lodMax: _lodMax } = this;
        blurUniforms["dTheta"].value = radiansPerPixel;
        blurUniforms["mipInt"].value = _lodMax - lodIn;
        const outputSize = this._sizeLods[lodOut];
        const x = 3 * outputSize * (lodOut > _lodMax - $04ce9c8dcd7d39f0$var$LOD_MIN ? lodOut - _lodMax + $04ce9c8dcd7d39f0$var$LOD_MIN : 0);
        const y = 4 * (this._cubeSize - outputSize);
        $04ce9c8dcd7d39f0$var$_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
        renderer.setRenderTarget(targetOut);
        renderer.render(blurMesh, $04ce9c8dcd7d39f0$var$_flatCamera);
    }
}
function $04ce9c8dcd7d39f0$var$_createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - $04ce9c8dcd7d39f0$var$LOD_MIN + 1 + $04ce9c8dcd7d39f0$var$EXTRA_LOD_SIGMA.length;
    for(let i = 0; i < totalLods; i++){
        const sizeLod = Math.pow(2, lod);
        sizeLods.push(sizeLod);
        let sigma = 1.0 / sizeLod;
        if (i > lodMax - $04ce9c8dcd7d39f0$var$LOD_MIN) sigma = $04ce9c8dcd7d39f0$var$EXTRA_LOD_SIGMA[i - lodMax + $04ce9c8dcd7d39f0$var$LOD_MIN - 1];
        else if (i === 0) sigma = 0;
        sigmas.push(sigma);
        const texelSize = 1.0 / (sizeLod - 2);
        const min = -texelSize;
        const max = 1 + texelSize;
        const uv1 = [
            min,
            min,
            max,
            min,
            max,
            max,
            min,
            min,
            max,
            max,
            min,
            max
        ];
        const cubeFaces = 6;
        const vertices = 6;
        const positionSize = 3;
        const uvSize = 2;
        const faceIndexSize = 1;
        const position = new Float32Array(positionSize * vertices * cubeFaces);
        const uv = new Float32Array(uvSize * vertices * cubeFaces);
        const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for(let face = 0; face < cubeFaces; face++){
            const x = face % 3 * 2 / 3 - 1;
            const y = face > 2 ? 0 : -1;
            const coordinates = [
                x,
                y,
                0,
                x + 2 / 3,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y + 1,
                0
            ];
            position.set(coordinates, positionSize * vertices * face);
            uv.set(uv1, uvSize * vertices * face);
            const fill = [
                face,
                face,
                face,
                face,
                face,
                face
            ];
            faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        const planes = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        planes.setAttribute("position", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(position, positionSize));
        planes.setAttribute("uv", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(uv, uvSize));
        planes.setAttribute("faceIndex", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(faceIndex, faceIndexSize));
        lodPlanes.push(planes);
        if (lod > $04ce9c8dcd7d39f0$var$LOD_MIN) lod--;
    }
    return {
        lodPlanes: lodPlanes,
        sizeLods: sizeLods,
        sigmas: sigmas
    };
}
function $04ce9c8dcd7d39f0$var$_createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(width, height, params);
    cubeUVRenderTarget.texture.mapping = $04ce9c8dcd7d39f0$export$dbf3e70ff37af79;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
}
function $04ce9c8dcd7d39f0$var$_setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
}
function $04ce9c8dcd7d39f0$var$_getBlurShader(lodMax, width, height) {
    const weights = new Float32Array($04ce9c8dcd7d39f0$var$MAX_SAMPLES);
    const poleAxis = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0);
    const shaderMaterial = new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
        name: "SphericalGaussianBlur",
        defines: {
            "n": $04ce9c8dcd7d39f0$var$MAX_SAMPLES,
            "CUBEUV_TEXEL_WIDTH": 1.0 / width,
            "CUBEUV_TEXEL_HEIGHT": 1.0 / height,
            "CUBEUV_MAX_MIP": `${lodMax}.0`
        },
        uniforms: {
            "envMap": {
                value: null
            },
            "samples": {
                value: 1
            },
            "weights": {
                value: weights
            },
            "latitudinal": {
                value: false
            },
            "dTheta": {
                value: 0
            },
            "mipInt": {
                value: 0
            },
            "poleAxis": {
                value: poleAxis
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $04ce9c8dcd7d39f0$var$_getEquirectMaterial() {
    return new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
        name: "EquirectangularToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
        blending: $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
}
function $04ce9c8dcd7d39f0$var$_getCubemapMaterial() {
    return new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
        name: "CubemapToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            },
            "flipEnvMap": {
                value: -1
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
        blending: $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
}
function $04ce9c8dcd7d39f0$var$_getCommonVertexShader() {
    return /* glsl */ `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function $04ce9c8dcd7d39f0$var$WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
        if (texture && texture.isTexture) {
            const mapping = texture.mapping;
            const isEquirectMap = mapping === $04ce9c8dcd7d39f0$export$d64030b316d3b087 || mapping === $04ce9c8dcd7d39f0$export$ee99d97d46898098;
            const isCubeMap = mapping === $04ce9c8dcd7d39f0$export$8759762a6477f2c4 || mapping === $04ce9c8dcd7d39f0$export$dc59f8aed047f61d;
            // equirect/cube map to cubeUV conversion
            if (isEquirectMap || isCubeMap) {
                if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
                    texture.needsPMREMUpdate = false;
                    let renderTarget = cubeUVmaps.get(texture);
                    if (pmremGenerator === null) pmremGenerator = new $04ce9c8dcd7d39f0$export$6add42717753e221(renderer);
                    renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
                    cubeUVmaps.set(texture, renderTarget);
                    return renderTarget.texture;
                } else {
                    if (cubeUVmaps.has(texture)) return cubeUVmaps.get(texture).texture;
                    else {
                        const image = texture.image;
                        if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                            if (pmremGenerator === null) pmremGenerator = new $04ce9c8dcd7d39f0$export$6add42717753e221(renderer);
                            const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                            cubeUVmaps.set(texture, renderTarget);
                            texture.addEventListener("dispose", onTextureDispose);
                            return renderTarget.texture;
                        } else // image not yet ready. try the conversion next frame
                        return null;
                    }
                }
            }
        }
        return texture;
    }
    function isCubeTextureComplete(image) {
        let count = 0;
        const length = 6;
        for(let i = 0; i < length; i++)if (image[i] !== undefined) count++;
        return count === length;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== undefined) {
            cubeUVmaps.delete(texture);
            cubemapUV.dispose();
        }
    }
    function dispose() {
        cubeUVmaps = new WeakMap();
        if (pmremGenerator !== null) {
            pmremGenerator.dispose();
            pmremGenerator = null;
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
function $04ce9c8dcd7d39f0$var$WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name) {
        if (extensions[name] !== undefined) return extensions[name];
        let extension;
        switch(name){
            case "WEBGL_depth_texture":
                extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
    }
    return {
        has: function(name) {
            return getExtension(name) !== null;
        },
        init: function(capabilities) {
            if (capabilities.isWebGL2) getExtension("EXT_color_buffer_float");
            else {
                getExtension("WEBGL_depth_texture");
                getExtension("OES_texture_float");
                getExtension("OES_texture_half_float");
                getExtension("OES_texture_half_float_linear");
                getExtension("OES_standard_derivatives");
                getExtension("OES_element_index_uint");
                getExtension("OES_vertex_array_object");
                getExtension("ANGLE_instanced_arrays");
            }
            getExtension("OES_texture_float_linear");
            getExtension("EXT_color_buffer_half_float");
            getExtension("WEBGL_multisampled_render_to_texture");
        },
        get: function(name) {
            const extension = getExtension(name);
            if (extension === null) console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
            return extension;
        }
    };
}
function $04ce9c8dcd7d39f0$var$WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
        const geometry = event.target;
        if (geometry.index !== null) attributes.remove(geometry.index);
        for(const name in geometry.attributes)attributes.remove(geometry.attributes[name]);
        for(const name in geometry.morphAttributes){
            const array = geometry.morphAttributes[name];
            for(let i = 0, l = array.length; i < l; i++)attributes.remove(array[i]);
        }
        geometry.removeEventListener("dispose", onGeometryDispose);
        delete geometries[geometry.id];
        const attribute = wireframeAttributes.get(geometry);
        if (attribute) {
            attributes.remove(attribute);
            wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) delete geometry._maxInstanceCount;
        //
        info.memory.geometries--;
    }
    function get(object, geometry) {
        if (geometries[geometry.id] === true) return geometry;
        geometry.addEventListener("dispose", onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
    }
    function update(geometry) {
        const geometryAttributes = geometry.attributes;
        // Updating index buffer in VAO now. See WebGLBindingStates.
        for(const name in geometryAttributes)attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
        // morph targets
        const morphAttributes = geometry.morphAttributes;
        for(const name in morphAttributes){
            const array = morphAttributes[name];
            for(let i = 0, l = array.length; i < l; i++)attributes.update(array[i], gl.ARRAY_BUFFER);
        }
    }
    function updateWireframeAttribute(geometry) {
        const indices = [];
        const geometryIndex = geometry.index;
        const geometryPosition = geometry.attributes.position;
        let version = 0;
        if (geometryIndex !== null) {
            const array = geometryIndex.array;
            version = geometryIndex.version;
            for(let i = 0, l = array.length; i < l; i += 3){
                const a = array[i + 0];
                const b = array[i + 1];
                const c = array[i + 2];
                indices.push(a, b, b, c, c, a);
            }
        } else if (geometryPosition !== undefined) {
            const array = geometryPosition.array;
            version = geometryPosition.version;
            for(let i = 0, l = array.length / 3 - 1; i < l; i += 3){
                const a = i + 0;
                const b = i + 1;
                const c = i + 2;
                indices.push(a, b, b, c, c, a);
            }
        } else return;
        const attribute = new ($04ce9c8dcd7d39f0$var$arrayNeedsUint32(indices) ? $04ce9c8dcd7d39f0$export$7eb8c9fa25cd5bd6 : $04ce9c8dcd7d39f0$export$640a853f68025f2e)(indices, 1);
        attribute.version = version;
        // Updating index buffer in VAO now. See WebGLBindingStates
        //
        const previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute) attributes.remove(previousAttribute);
        //
        wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
        const currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
            const geometryIndex = geometry.index;
            if (geometryIndex !== null) // if the attribute is obsolete, create a new one
            {
                if (currentAttribute.version < geometryIndex.version) updateWireframeAttribute(geometry);
            }
        } else updateWireframeAttribute(geometry);
        return wireframeAttributes.get(geometry);
    }
    return {
        get: get,
        update: update,
        getWireframeAttribute: getWireframeAttribute
    };
}
function $04ce9c8dcd7d39f0$var$WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawElementsInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawElementsInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $04ce9c8dcd7d39f0$var$WebGLInfo(gl) {
    const memory = {
        geometries: 0,
        textures: 0
    };
    const render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function update(count, mode, instanceCount) {
        render.calls++;
        switch(mode){
            case gl.TRIANGLES:
                render.triangles += instanceCount * (count / 3);
                break;
            case gl.LINES:
                render.lines += instanceCount * (count / 2);
                break;
            case gl.LINE_STRIP:
                render.lines += instanceCount * (count - 1);
                break;
            case gl.LINE_LOOP:
                render.lines += instanceCount * count;
                break;
            case gl.POINTS:
                render.points += instanceCount * count;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
                break;
        }
    }
    function reset() {
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
    }
    return {
        memory: memory,
        render: render,
        programs: null,
        autoReset: true,
        reset: reset,
        update: update
    };
}
function $04ce9c8dcd7d39f0$var$numericalSort(a, b) {
    return a[0] - b[0];
}
function $04ce9c8dcd7d39f0$var$absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
}
function $04ce9c8dcd7d39f0$var$WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const morphTextures = new WeakMap();
    const morph = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
    const workInfluences = [];
    for(let i = 0; i < 8; i++)workInfluences[i] = [
        i,
        0
    ];
    function update(object, geometry, program) {
        const objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
            // instead of using attributes, the WebGL 2 code path encodes morph targets
            // into an array of data textures. Each layer represents a single morph target.
            const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
            const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
            let entry = morphTextures.get(geometry);
            if (entry === undefined || entry.count !== morphTargetsCount) {
                if (entry !== undefined) entry.texture.dispose();
                const hasMorphPosition = geometry.morphAttributes.position !== undefined;
                const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
                const hasMorphColors = geometry.morphAttributes.color !== undefined;
                const morphTargets = geometry.morphAttributes.position || [];
                const morphNormals = geometry.morphAttributes.normal || [];
                const morphColors = geometry.morphAttributes.color || [];
                let vertexDataCount = 0;
                if (hasMorphPosition === true) vertexDataCount = 1;
                if (hasMorphNormals === true) vertexDataCount = 2;
                if (hasMorphColors === true) vertexDataCount = 3;
                let width = geometry.attributes.position.count * vertexDataCount;
                let height = 1;
                if (width > capabilities.maxTextureSize) {
                    height = Math.ceil(width / capabilities.maxTextureSize);
                    width = capabilities.maxTextureSize;
                }
                const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
                const texture = new $04ce9c8dcd7d39f0$export$dfac6c8e811406a3(buffer, width, height, morphTargetsCount);
                texture.type = $04ce9c8dcd7d39f0$export$f6d331659b644596;
                texture.needsUpdate = true;
                // fill buffer
                const vertexDataStride = vertexDataCount * 4;
                for(let i = 0; i < morphTargetsCount; i++){
                    const morphTarget = morphTargets[i];
                    const morphNormal = morphNormals[i];
                    const morphColor = morphColors[i];
                    const offset = width * height * 4 * i;
                    for(let j = 0; j < morphTarget.count; j++){
                        const stride = j * vertexDataStride;
                        if (hasMorphPosition === true) {
                            morph.fromBufferAttribute(morphTarget, j);
                            buffer[offset + stride + 0] = morph.x;
                            buffer[offset + stride + 1] = morph.y;
                            buffer[offset + stride + 2] = morph.z;
                            buffer[offset + stride + 3] = 0;
                        }
                        if (hasMorphNormals === true) {
                            morph.fromBufferAttribute(morphNormal, j);
                            buffer[offset + stride + 4] = morph.x;
                            buffer[offset + stride + 5] = morph.y;
                            buffer[offset + stride + 6] = morph.z;
                            buffer[offset + stride + 7] = 0;
                        }
                        if (hasMorphColors === true) {
                            morph.fromBufferAttribute(morphColor, j);
                            buffer[offset + stride + 8] = morph.x;
                            buffer[offset + stride + 9] = morph.y;
                            buffer[offset + stride + 10] = morph.z;
                            buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
                        }
                    }
                }
                entry = {
                    count: morphTargetsCount,
                    texture: texture,
                    size: new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(width, height)
                };
                morphTextures.set(geometry, entry);
                function disposeTexture() {
                    texture.dispose();
                    morphTextures.delete(geometry);
                    geometry.removeEventListener("dispose", disposeTexture);
                }
                geometry.addEventListener("dispose", disposeTexture);
            }
            //
            let morphInfluencesSum = 0;
            for(let i = 0; i < objectInfluences.length; i++)morphInfluencesSum += objectInfluences[i];
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
            program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
            program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
            program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
        } else {
            // When object doesn't have morph target influences defined, we treat it as a 0-length array
            // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
            const length = objectInfluences === undefined ? 0 : objectInfluences.length;
            let influences = influencesList[geometry.id];
            if (influences === undefined || influences.length !== length) {
                // initialise list
                influences = [];
                for(let i = 0; i < length; i++)influences[i] = [
                    i,
                    0
                ];
                influencesList[geometry.id] = influences;
            }
            // Collect influences
            for(let i = 0; i < length; i++){
                const influence = influences[i];
                influence[0] = i;
                influence[1] = objectInfluences[i];
            }
            influences.sort($04ce9c8dcd7d39f0$var$absNumericalSort);
            for(let i = 0; i < 8; i++)if (i < length && influences[i][1]) {
                workInfluences[i][0] = influences[i][0];
                workInfluences[i][1] = influences[i][1];
            } else {
                workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
                workInfluences[i][1] = 0;
            }
            workInfluences.sort($04ce9c8dcd7d39f0$var$numericalSort);
            const morphTargets = geometry.morphAttributes.position;
            const morphNormals = geometry.morphAttributes.normal;
            let morphInfluencesSum = 0;
            for(let i = 0; i < 8; i++){
                const influence = workInfluences[i];
                const index = influence[0];
                const value = influence[1];
                if (index !== Number.MAX_SAFE_INTEGER && value) {
                    if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) geometry.setAttribute("morphTarget" + i, morphTargets[index]);
                    if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) geometry.setAttribute("morphNormal" + i, morphNormals[index]);
                    morphInfluences[i] = value;
                    morphInfluencesSum += value;
                } else {
                    if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) geometry.deleteAttribute("morphTarget" + i);
                    if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) geometry.deleteAttribute("morphNormal" + i);
                    morphInfluences[i] = 0;
                }
            }
            // GLSL shader uses formula baseinfluence * base + sum(target * influence)
            // This allows us to switch between absolute morphs and relative morphs without changing shader code
            // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
            program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
        }
    }
    return {
        update: update
    };
}
function $04ce9c8dcd7d39f0$var$WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update(object) {
        const frame = info.render.frame;
        const geometry = object.geometry;
        const buffergeometry = geometries.get(object, geometry);
        // Update once per frame
        if (updateMap.get(buffergeometry) !== frame) {
            geometries.update(buffergeometry);
            updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
            if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) object.addEventListener("dispose", onInstancedMeshDispose);
            if (updateMap.get(object) !== frame) {
                attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
                if (object.instanceColor !== null) attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
                updateMap.set(object, frame);
            }
        }
        if (object.isSkinnedMesh) {
            const skeleton = object.skeleton;
            if (updateMap.get(skeleton) !== frame) {
                skeleton.update();
                updateMap.set(skeleton, frame);
            }
        }
        return buffergeometry;
    }
    function dispose() {
        updateMap = new WeakMap();
    }
    function onInstancedMeshDispose(event) {
        const instancedMesh = event.target;
        instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
        update: update,
        dispose: dispose
    };
}
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */ const $04ce9c8dcd7d39f0$var$emptyTexture = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$5431306cf43de24a();
const $04ce9c8dcd7d39f0$var$emptyArrayTexture = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$dfac6c8e811406a3();
const $04ce9c8dcd7d39f0$var$empty3dTexture = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$d7a3086320f856db();
const $04ce9c8dcd7d39f0$var$emptyCubeTexture = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$ee2e5a18258a4049();
// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
const $04ce9c8dcd7d39f0$var$arrayCacheF32 = [];
const $04ce9c8dcd7d39f0$var$arrayCacheI32 = [];
// Float32Array caches used for uploading Matrix uniforms
const $04ce9c8dcd7d39f0$var$mat4array = new Float32Array(16);
const $04ce9c8dcd7d39f0$var$mat3array = new Float32Array(9);
const $04ce9c8dcd7d39f0$var$mat2array = new Float32Array(4);
// Flattening for arrays of vectors and matrices
function $04ce9c8dcd7d39f0$var$flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    // unoptimized: ! isNaN( firstElem )
    // see http://jacksondunstan.com/articles/983
    const n = nBlocks * blockSize;
    let r = $04ce9c8dcd7d39f0$var$arrayCacheF32[n];
    if (r === undefined) {
        r = new Float32Array(n);
        $04ce9c8dcd7d39f0$var$arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for(let i = 1, offset = 0; i !== nBlocks; ++i){
            offset += blockSize;
            array[i].toArray(r, offset);
        }
    }
    return r;
}
function $04ce9c8dcd7d39f0$var$arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0, l = a.length; i < l; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function $04ce9c8dcd7d39f0$var$copyArray(a, b) {
    for(let i = 0, l = b.length; i < l; i++)a[i] = b[i];
}
// Texture unit allocation
function $04ce9c8dcd7d39f0$var$allocTexUnits(textures, n) {
    let r = $04ce9c8dcd7d39f0$var$arrayCacheI32[n];
    if (r === undefined) {
        r = new Int32Array(n);
        $04ce9c8dcd7d39f0$var$arrayCacheI32[n] = r;
    }
    for(let i = 0; i !== n; ++i)r[i] = textures.allocateTextureUnit();
    return r;
}
// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function $04ce9c8dcd7d39f0$var$setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
}
// Single float vector (from flat array or THREE.VectorN)
function $04ce9c8dcd7d39f0$var$setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2f(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform2fv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3f(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else if (v.r !== undefined) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
            gl.uniform3f(this.addr, v.r, v.g, v.b);
            cache[0] = v.r;
            cache[1] = v.g;
            cache[2] = v.b;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform3fv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform4fv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
// Single matrix (from flat array or THREE.MatrixN)
function $04ce9c8dcd7d39f0$var$setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix2fv(this.addr, false, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, elements)) return;
        $04ce9c8dcd7d39f0$var$mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, $04ce9c8dcd7d39f0$var$mat2array);
        $04ce9c8dcd7d39f0$var$copyArray(cache, elements);
    }
}
function $04ce9c8dcd7d39f0$var$setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix3fv(this.addr, false, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, elements)) return;
        $04ce9c8dcd7d39f0$var$mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, $04ce9c8dcd7d39f0$var$mat3array);
        $04ce9c8dcd7d39f0$var$copyArray(cache, elements);
    }
}
function $04ce9c8dcd7d39f0$var$setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix4fv(this.addr, false, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, elements)) return;
        $04ce9c8dcd7d39f0$var$mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, $04ce9c8dcd7d39f0$var$mat4array);
        $04ce9c8dcd7d39f0$var$copyArray(cache, elements);
    }
}
// Single integer / boolean
function $04ce9c8dcd7d39f0$var$setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
}
// Single integer / boolean vector (from flat array or THREE.VectorN)
function $04ce9c8dcd7d39f0$var$setValueV2i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2i(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform2iv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV3i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3i(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform3iv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV4i(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform4iv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
// Single unsigned integer
function $04ce9c8dcd7d39f0$var$setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
}
// Single unsigned integer vector (from flat array or THREE.VectorN)
function $04ce9c8dcd7d39f0$var$setValueV2ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2ui(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform2uiv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV3ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3ui(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform3uiv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
function $04ce9c8dcd7d39f0$var$setValueV4ui(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if ($04ce9c8dcd7d39f0$var$arraysEqual(cache, v)) return;
        gl.uniform4uiv(this.addr, v);
        $04ce9c8dcd7d39f0$var$copyArray(cache, v);
    }
}
// Single texture (2D / Cube)
function $04ce9c8dcd7d39f0$var$setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2D(v || $04ce9c8dcd7d39f0$var$emptyTexture, unit);
}
function $04ce9c8dcd7d39f0$var$setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture3D(v || $04ce9c8dcd7d39f0$var$empty3dTexture, unit);
}
function $04ce9c8dcd7d39f0$var$setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTextureCube(v || $04ce9c8dcd7d39f0$var$emptyCubeTexture, unit);
}
function $04ce9c8dcd7d39f0$var$setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2DArray(v || $04ce9c8dcd7d39f0$var$emptyArrayTexture, unit);
}
// Helper to pick the right setter for the singular case
function $04ce9c8dcd7d39f0$var$getSingularSetter(type) {
    switch(type){
        case 0x1406:
            return $04ce9c8dcd7d39f0$var$setValueV1f; // FLOAT
        case 0x8b50:
            return $04ce9c8dcd7d39f0$var$setValueV2f; // _VEC2
        case 0x8b51:
            return $04ce9c8dcd7d39f0$var$setValueV3f; // _VEC3
        case 0x8b52:
            return $04ce9c8dcd7d39f0$var$setValueV4f; // _VEC4
        case 0x8b5a:
            return $04ce9c8dcd7d39f0$var$setValueM2; // _MAT2
        case 0x8b5b:
            return $04ce9c8dcd7d39f0$var$setValueM3; // _MAT3
        case 0x8b5c:
            return $04ce9c8dcd7d39f0$var$setValueM4; // _MAT4
        case 0x1404:
        case 0x8b56:
            return $04ce9c8dcd7d39f0$var$setValueV1i; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return $04ce9c8dcd7d39f0$var$setValueV2i; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return $04ce9c8dcd7d39f0$var$setValueV3i; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return $04ce9c8dcd7d39f0$var$setValueV4i; // _VEC4
        case 0x1405:
            return $04ce9c8dcd7d39f0$var$setValueV1ui; // UINT
        case 0x8dc6:
            return $04ce9c8dcd7d39f0$var$setValueV2ui; // _VEC2
        case 0x8dc7:
            return $04ce9c8dcd7d39f0$var$setValueV3ui; // _VEC3
        case 0x8dc8:
            return $04ce9c8dcd7d39f0$var$setValueV4ui; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return $04ce9c8dcd7d39f0$var$setValueT1;
        case 0x8b5f:
        case 0x8dcb:
        case 0x8dd3:
            return $04ce9c8dcd7d39f0$var$setValueT3D1;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return $04ce9c8dcd7d39f0$var$setValueT6;
        case 0x8dc1:
        case 0x8dcf:
        case 0x8dd7:
        case 0x8dc4:
            return $04ce9c8dcd7d39f0$var$setValueT2DArray1;
    }
}
// Array of scalars
function $04ce9c8dcd7d39f0$var$setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
}
// Array of vectors (from flat array or array of THREE.VectorN)
function $04ce9c8dcd7d39f0$var$setValueV2fArray(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
}
function $04ce9c8dcd7d39f0$var$setValueV3fArray(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
}
function $04ce9c8dcd7d39f0$var$setValueV4fArray(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
}
// Array of matrices (from flat array or array of THREE.MatrixN)
function $04ce9c8dcd7d39f0$var$setValueM2Array(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
}
function $04ce9c8dcd7d39f0$var$setValueM3Array(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
}
function $04ce9c8dcd7d39f0$var$setValueM4Array(gl, v) {
    const data = $04ce9c8dcd7d39f0$var$flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
}
// Array of integer / boolean
function $04ce9c8dcd7d39f0$var$setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
}
// Array of integer / boolean vectors (from flat array)
function $04ce9c8dcd7d39f0$var$setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
}
function $04ce9c8dcd7d39f0$var$setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
}
function $04ce9c8dcd7d39f0$var$setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
}
// Array of unsigned integer
function $04ce9c8dcd7d39f0$var$setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
}
// Array of unsigned integer vectors (from flat array)
function $04ce9c8dcd7d39f0$var$setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
}
function $04ce9c8dcd7d39f0$var$setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
}
function $04ce9c8dcd7d39f0$var$setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
}
// Array of textures (2D / 3D / Cube / 2DArray)
function $04ce9c8dcd7d39f0$var$setValueT1Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = $04ce9c8dcd7d39f0$var$allocTexUnits(textures, n);
    if (!$04ce9c8dcd7d39f0$var$arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        $04ce9c8dcd7d39f0$var$copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture2D(v[i] || $04ce9c8dcd7d39f0$var$emptyTexture, units[i]);
}
function $04ce9c8dcd7d39f0$var$setValueT3DArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = $04ce9c8dcd7d39f0$var$allocTexUnits(textures, n);
    if (!$04ce9c8dcd7d39f0$var$arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        $04ce9c8dcd7d39f0$var$copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture3D(v[i] || $04ce9c8dcd7d39f0$var$empty3dTexture, units[i]);
}
function $04ce9c8dcd7d39f0$var$setValueT6Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = $04ce9c8dcd7d39f0$var$allocTexUnits(textures, n);
    if (!$04ce9c8dcd7d39f0$var$arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        $04ce9c8dcd7d39f0$var$copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTextureCube(v[i] || $04ce9c8dcd7d39f0$var$emptyCubeTexture, units[i]);
}
function $04ce9c8dcd7d39f0$var$setValueT2DArrayArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = $04ce9c8dcd7d39f0$var$allocTexUnits(textures, n);
    if (!$04ce9c8dcd7d39f0$var$arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        $04ce9c8dcd7d39f0$var$copyArray(cache, units);
    }
    for(let i = 0; i !== n; ++i)textures.setTexture2DArray(v[i] || $04ce9c8dcd7d39f0$var$emptyArrayTexture, units[i]);
}
// Helper to pick the right setter for a pure (bottom-level) array
function $04ce9c8dcd7d39f0$var$getPureArraySetter(type) {
    switch(type){
        case 0x1406:
            return $04ce9c8dcd7d39f0$var$setValueV1fArray; // FLOAT
        case 0x8b50:
            return $04ce9c8dcd7d39f0$var$setValueV2fArray; // _VEC2
        case 0x8b51:
            return $04ce9c8dcd7d39f0$var$setValueV3fArray; // _VEC3
        case 0x8b52:
            return $04ce9c8dcd7d39f0$var$setValueV4fArray; // _VEC4
        case 0x8b5a:
            return $04ce9c8dcd7d39f0$var$setValueM2Array; // _MAT2
        case 0x8b5b:
            return $04ce9c8dcd7d39f0$var$setValueM3Array; // _MAT3
        case 0x8b5c:
            return $04ce9c8dcd7d39f0$var$setValueM4Array; // _MAT4
        case 0x1404:
        case 0x8b56:
            return $04ce9c8dcd7d39f0$var$setValueV1iArray; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return $04ce9c8dcd7d39f0$var$setValueV2iArray; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return $04ce9c8dcd7d39f0$var$setValueV3iArray; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return $04ce9c8dcd7d39f0$var$setValueV4iArray; // _VEC4
        case 0x1405:
            return $04ce9c8dcd7d39f0$var$setValueV1uiArray; // UINT
        case 0x8dc6:
            return $04ce9c8dcd7d39f0$var$setValueV2uiArray; // _VEC2
        case 0x8dc7:
            return $04ce9c8dcd7d39f0$var$setValueV3uiArray; // _VEC3
        case 0x8dc8:
            return $04ce9c8dcd7d39f0$var$setValueV4uiArray; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return $04ce9c8dcd7d39f0$var$setValueT1Array;
        case 0x8b5f:
        case 0x8dcb:
        case 0x8dd3:
            return $04ce9c8dcd7d39f0$var$setValueT3DArray;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return $04ce9c8dcd7d39f0$var$setValueT6Array;
        case 0x8dc1:
        case 0x8dcf:
        case 0x8dd7:
        case 0x8dc4:
            return $04ce9c8dcd7d39f0$var$setValueT2DArrayArray;
    }
}
// --- Uniform Classes ---
class $04ce9c8dcd7d39f0$var$SingleUniform {
    constructor(id, activeInfo, addr){
        this.id = id;
        this.addr = addr;
        this.cache = [];
        this.setValue = $04ce9c8dcd7d39f0$var$getSingularSetter(activeInfo.type);
    // this.path = activeInfo.name; // DEBUG
    }
}
class $04ce9c8dcd7d39f0$var$PureArrayUniform {
    constructor(id, activeInfo, addr){
        this.id = id;
        this.addr = addr;
        this.cache = [];
        this.size = activeInfo.size;
        this.setValue = $04ce9c8dcd7d39f0$var$getPureArraySetter(activeInfo.type);
    // this.path = activeInfo.name; // DEBUG
    }
}
class $04ce9c8dcd7d39f0$var$StructuredUniform {
    constructor(id){
        this.id = id;
        this.seq = [];
        this.map = {};
    }
    setValue(gl, value, textures) {
        const seq = this.seq;
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i];
            u.setValue(gl, value[u.id], textures);
        }
    }
}
// --- Top-level ---
// Parser - builds up the property tree from the path strings
const $04ce9c8dcd7d39f0$var$RePathPart = /(\w+)(\])?(\[|\.)?/g;
// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function $04ce9c8dcd7d39f0$var$addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
}
function $04ce9c8dcd7d39f0$var$parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    // reset RegExp object, because of the early exit of a previous run
    $04ce9c8dcd7d39f0$var$RePathPart.lastIndex = 0;
    while(true){
        const match = $04ce9c8dcd7d39f0$var$RePathPart.exec(path), matchEnd = $04ce9c8dcd7d39f0$var$RePathPart.lastIndex;
        let id = match[1];
        const idIsIndex = match[2] === "]", subscript = match[3];
        if (idIsIndex) id = id | 0; // convert to integer
        if (subscript === undefined || subscript === "[" && matchEnd + 2 === pathLength) {
            // bare name or "pure" bottom-level array "[0]" suffix
            $04ce9c8dcd7d39f0$var$addUniform(container, subscript === undefined ? new $04ce9c8dcd7d39f0$var$SingleUniform(id, activeInfo, addr) : new $04ce9c8dcd7d39f0$var$PureArrayUniform(id, activeInfo, addr));
            break;
        } else {
            // step into inner node / create it in case it doesn't exist
            const map = container.map;
            let next = map[id];
            if (next === undefined) {
                next = new $04ce9c8dcd7d39f0$var$StructuredUniform(id);
                $04ce9c8dcd7d39f0$var$addUniform(container, next);
            }
            container = next;
        }
    }
}
// Root Container
class $04ce9c8dcd7d39f0$var$WebGLUniforms {
    constructor(gl, program){
        this.seq = [];
        this.map = {};
        const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for(let i = 0; i < n; ++i){
            const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
            $04ce9c8dcd7d39f0$var$parseUniform(info, addr, this);
        }
    }
    setValue(gl, name, value, textures) {
        const u = this.map[name];
        if (u !== undefined) u.setValue(gl, value, textures);
    }
    setOptional(gl, object, name) {
        const v = object[name];
        if (v !== undefined) this.setValue(gl, name, v);
    }
    static upload(gl, seq, values, textures) {
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i], v = values[u.id];
            if (v.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
            u.setValue(gl, v.value, textures);
        }
    }
    static seqWithValue(seq, values) {
        const r = [];
        for(let i = 0, n = seq.length; i !== n; ++i){
            const u = seq[i];
            if (u.id in values) r.push(u);
        }
        return r;
    }
}
function $04ce9c8dcd7d39f0$var$WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
}
let $04ce9c8dcd7d39f0$var$programIdCount = 0;
function $04ce9c8dcd7d39f0$var$handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for(let i = from; i < to; i++){
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
}
function $04ce9c8dcd7d39f0$var$getEncodingComponents(colorSpace1) {
    switch(colorSpace1){
        case $04ce9c8dcd7d39f0$export$42429b3acfb233a4:
            return [
                "Linear",
                "( value )"
            ];
        case $04ce9c8dcd7d39f0$export$561f394b24edfcaa:
            return [
                "sRGB",
                "( value )"
            ];
        default:
            console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace1);
            return [
                "Linear",
                "( value )"
            ];
    }
}
function $04ce9c8dcd7d39f0$var$getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
        // --enable-privileged-webgl-extension
        // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + $04ce9c8dcd7d39f0$var$handleSource(gl.getShaderSource(shader), errorLine);
    } else return errors;
}
function $04ce9c8dcd7d39f0$var$getTexelEncodingFunction(functionName, colorSpace1) {
    const components = $04ce9c8dcd7d39f0$var$getEncodingComponents(colorSpace1);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
}
function $04ce9c8dcd7d39f0$var$getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch(toneMapping){
        case $04ce9c8dcd7d39f0$export$98f52c2a46c598ca:
            toneMappingName = "Linear";
            break;
        case $04ce9c8dcd7d39f0$export$74b25e54b3bcd548:
            toneMappingName = "Reinhard";
            break;
        case $04ce9c8dcd7d39f0$export$932b3dd283d4a366:
            toneMappingName = "OptimizedCineon";
            break;
        case $04ce9c8dcd7d39f0$export$a0d98fe6d7e4af64:
            toneMappingName = "ACESFilmic";
            break;
        case $04ce9c8dcd7d39f0$export$2c7b09c1e9abfb5e:
            toneMappingName = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
            toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
function $04ce9c8dcd7d39f0$var$generateExtensions(parameters) {
    const chunks = [
        parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter($04ce9c8dcd7d39f0$var$filterEmptyLine).join("\n");
}
function $04ce9c8dcd7d39f0$var$generateDefines(defines) {
    const chunks = [];
    for(const name in defines){
        const value = defines[name];
        if (value === false) continue;
        chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
}
function $04ce9c8dcd7d39f0$var$fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for(let i = 0; i < n; i++){
        const info = gl.getActiveAttrib(program, i);
        const name = info.name;
        let locationSize = 1;
        if (info.type === gl.FLOAT_MAT2) locationSize = 2;
        if (info.type === gl.FLOAT_MAT3) locationSize = 3;
        if (info.type === gl.FLOAT_MAT4) locationSize = 4;
        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
        attributes[name] = {
            type: info.type,
            location: gl.getAttribLocation(program, name),
            locationSize: locationSize
        };
    }
    return attributes;
}
function $04ce9c8dcd7d39f0$var$filterEmptyLine(string) {
    return string !== "";
}
function $04ce9c8dcd7d39f0$var$replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function $04ce9c8dcd7d39f0$var$replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
// Resolve Includes
const $04ce9c8dcd7d39f0$var$includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function $04ce9c8dcd7d39f0$var$resolveIncludes(string) {
    return string.replace($04ce9c8dcd7d39f0$var$includePattern, $04ce9c8dcd7d39f0$var$includeReplacer);
}
const $04ce9c8dcd7d39f0$var$shaderChunkMap = new Map([
    [
        "encodings_fragment",
        "colorspace_fragment"
    ],
    [
        "encodings_pars_fragment",
        "colorspace_pars_fragment"
    ],
    [
        "output_fragment",
        "opaque_fragment"
    ]
]);
function $04ce9c8dcd7d39f0$var$includeReplacer(match, include) {
    let string = $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b[include];
    if (string === undefined) {
        const newInclude = $04ce9c8dcd7d39f0$var$shaderChunkMap.get(include);
        if (newInclude !== undefined) {
            string = $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b[newInclude];
            console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
        } else throw new Error("Can not resolve #include <" + include + ">");
    }
    return $04ce9c8dcd7d39f0$var$resolveIncludes(string);
}
// Unroll Loops
const $04ce9c8dcd7d39f0$var$unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function $04ce9c8dcd7d39f0$var$unrollLoops(string) {
    return string.replace($04ce9c8dcd7d39f0$var$unrollLoopPattern, $04ce9c8dcd7d39f0$var$loopReplacer);
}
function $04ce9c8dcd7d39f0$var$loopReplacer(match, start, end, snippet) {
    let string = "";
    for(let i = parseInt(start); i < parseInt(end); i++)string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    return string;
}
//
function $04ce9c8dcd7d39f0$var$generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") precisionstring += "\n#define HIGH_PRECISION";
    else if (parameters.precision === "mediump") precisionstring += "\n#define MEDIUM_PRECISION";
    else if (parameters.precision === "lowp") precisionstring += "\n#define LOW_PRECISION";
    return precisionstring;
}
function $04ce9c8dcd7d39f0$var$generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === $04ce9c8dcd7d39f0$export$5813f879eee7cd88) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    else if (parameters.shadowMapType === $04ce9c8dcd7d39f0$export$a47c4b43a1be34f0) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    else if (parameters.shadowMapType === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4) shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    return shadowMapTypeDefine;
}
function $04ce9c8dcd7d39f0$var$generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) switch(parameters.envMapMode){
        case $04ce9c8dcd7d39f0$export$8759762a6477f2c4:
        case $04ce9c8dcd7d39f0$export$dc59f8aed047f61d:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE";
            break;
        case $04ce9c8dcd7d39f0$export$dbf3e70ff37af79:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return envMapTypeDefine;
}
function $04ce9c8dcd7d39f0$var$generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) switch(parameters.envMapMode){
        case $04ce9c8dcd7d39f0$export$dc59f8aed047f61d:
            envMapModeDefine = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return envMapModeDefine;
}
function $04ce9c8dcd7d39f0$var$generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) switch(parameters.combine){
        case $04ce9c8dcd7d39f0$export$e50ac29801f1774d:
            envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case $04ce9c8dcd7d39f0$export$9f9d94f963c85479:
            envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
            break;
        case $04ce9c8dcd7d39f0$export$e641dc52bc3494aa:
            envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
            break;
    }
    return envMapBlendingDefine;
}
function $04ce9c8dcd7d39f0$var$generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null) return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1.0 / imageHeight;
    const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 112));
    return {
        texelWidth: texelWidth,
        texelHeight: texelHeight,
        maxMip: maxMip
    };
}
function $04ce9c8dcd7d39f0$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    // TODO Send this event to Three.js DevTools
    // console.log( 'WebGLProgram', cacheKey );
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = $04ce9c8dcd7d39f0$var$generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = $04ce9c8dcd7d39f0$var$generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = $04ce9c8dcd7d39f0$var$generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = $04ce9c8dcd7d39f0$var$generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = $04ce9c8dcd7d39f0$var$generateCubeUVSize(parameters);
    const customExtensions = parameters.isWebGL2 ? "" : $04ce9c8dcd7d39f0$var$generateExtensions(parameters);
    const customDefines = $04ce9c8dcd7d39f0$var$generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
        prefixVertex = [
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines
        ].filter($04ce9c8dcd7d39f0$var$filterEmptyLine).join("\n");
        if (prefixVertex.length > 0) prefixVertex += "\n";
        prefixFragment = [
            customExtensions,
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines
        ].filter($04ce9c8dcd7d39f0$var$filterEmptyLine).join("\n");
        if (prefixFragment.length > 0) prefixFragment += "\n";
    } else {
        prefixVertex = [
            $04ce9c8dcd7d39f0$var$generatePrecision(parameters),
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            parameters.instancing ? "#define USE_INSTANCING" : "",
            parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
            parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
            parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
            parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
            //
            parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
            parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
            parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
            parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
            parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
            parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
            parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
            parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
            parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
            parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
            parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
            parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
            parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
            parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
            parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
            parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
            parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
            parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
            parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
            parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
            parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
            parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
            parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
            //
            parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
            parameters.vertexColors ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUv1s ? "#define USE_UV1" : "",
            parameters.vertexUv2s ? "#define USE_UV2" : "",
            parameters.vertexUv3s ? "#define USE_UV3" : "",
            parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.skinning ? "#define USE_SKINNING" : "",
            parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
            parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
            parameters.morphColors && parameters.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
            parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            "#ifdef USE_INSTANCING",
            "	attribute mat4 instanceMatrix;",
            "#endif",
            "#ifdef USE_INSTANCING_COLOR",
            "	attribute vec3 instanceColor;",
            "#endif",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_UV1",
            "	attribute vec2 uv1;",
            "#endif",
            "#ifdef USE_UV2",
            "	attribute vec2 uv2;",
            "#endif",
            "#ifdef USE_UV3",
            "	attribute vec2 uv3;",
            "#endif",
            "#ifdef USE_TANGENT",
            "	attribute vec4 tangent;",
            "#endif",
            "#if defined( USE_COLOR_ALPHA )",
            "	attribute vec4 color;",
            "#elif defined( USE_COLOR )",
            "	attribute vec3 color;",
            "#endif",
            "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
            "	attribute vec3 morphTarget0;",
            "	attribute vec3 morphTarget1;",
            "	attribute vec3 morphTarget2;",
            "	attribute vec3 morphTarget3;",
            "	#ifdef USE_MORPHNORMALS",
            "		attribute vec3 morphNormal0;",
            "		attribute vec3 morphNormal1;",
            "		attribute vec3 morphNormal2;",
            "		attribute vec3 morphNormal3;",
            "	#else",
            "		attribute vec3 morphTarget4;",
            "		attribute vec3 morphTarget5;",
            "		attribute vec3 morphTarget6;",
            "		attribute vec3 morphTarget7;",
            "	#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "	attribute vec4 skinIndex;",
            "	attribute vec4 skinWeight;",
            "#endif",
            "\n"
        ].filter($04ce9c8dcd7d39f0$var$filterEmptyLine).join("\n");
        prefixFragment = [
            customExtensions,
            $04ce9c8dcd7d39f0$var$generatePrecision(parameters),
            "#define SHADER_TYPE " + parameters.shaderType,
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.matcap ? "#define USE_MATCAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapTypeDefine : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.envMap ? "#define " + envMapBlendingDefine : "",
            envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
            envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
            envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
            parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
            parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
            parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
            parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
            parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.alphaTest ? "#define USE_ALPHATEST" : "",
            parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
            parameters.sheen ? "#define USE_SHEEN" : "",
            parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
            parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUv1s ? "#define USE_UV1" : "",
            parameters.vertexUv2s ? "#define USE_UV2" : "",
            parameters.vertexUv3s ? "#define USE_UV3" : "",
            parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
            parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
            parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 viewMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            parameters.toneMapping !== $04ce9c8dcd7d39f0$export$9fcb6b4294603b2 ? "#define TONE_MAPPING" : "",
            parameters.toneMapping !== $04ce9c8dcd7d39f0$export$9fcb6b4294603b2 ? $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b["tonemapping_pars_fragment"] : "",
            parameters.toneMapping !== $04ce9c8dcd7d39f0$export$9fcb6b4294603b2 ? $04ce9c8dcd7d39f0$var$getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
            parameters.dithering ? "#define DITHERING" : "",
            parameters.opaque ? "#define OPAQUE" : "",
            $04ce9c8dcd7d39f0$export$955f9f2e84c43c8b["colorspace_pars_fragment"],
            $04ce9c8dcd7d39f0$var$getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
            parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
            "\n"
        ].filter($04ce9c8dcd7d39f0$var$filterEmptyLine).join("\n");
    }
    vertexShader = $04ce9c8dcd7d39f0$var$resolveIncludes(vertexShader);
    vertexShader = $04ce9c8dcd7d39f0$var$replaceLightNums(vertexShader, parameters);
    vertexShader = $04ce9c8dcd7d39f0$var$replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = $04ce9c8dcd7d39f0$var$resolveIncludes(fragmentShader);
    fragmentShader = $04ce9c8dcd7d39f0$var$replaceLightNums(fragmentShader, parameters);
    fragmentShader = $04ce9c8dcd7d39f0$var$replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = $04ce9c8dcd7d39f0$var$unrollLoops(vertexShader);
    fragmentShader = $04ce9c8dcd7d39f0$var$unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        // GLSL 3.0 conversion for built-in materials and ShaderMaterial
        versionString = "#version 300 es\n";
        prefixVertex = [
            "precision mediump sampler2DArray;",
            "#define attribute in",
            "#define varying out",
            "#define texture2D texture"
        ].join("\n") + "\n" + prefixVertex;
        prefixFragment = [
            "#define varying in",
            parameters.glslVersion === $04ce9c8dcd7d39f0$export$f63012db5506e7dd ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
            parameters.glslVersion === $04ce9c8dcd7d39f0$export$f63012db5506e7dd ? "" : "#define gl_FragColor pc_fragColor",
            "#define gl_FragDepthEXT gl_FragDepth",
            "#define texture2D texture",
            "#define textureCube texture",
            "#define texture2DProj textureProj",
            "#define texture2DLodEXT textureLod",
            "#define texture2DProjLodEXT textureProjLod",
            "#define textureCubeLodEXT textureLod",
            "#define texture2DGradEXT textureGrad",
            "#define texture2DProjGradEXT textureProjGrad",
            "#define textureCubeGradEXT textureGrad"
        ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    // console.log( '*VERTEX*', vertexGlsl );
    // console.log( '*FRAGMENT*', fragmentGlsl );
    const glVertexShader = $04ce9c8dcd7d39f0$var$WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = $04ce9c8dcd7d39f0$var$WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    // Force a particular attribute to index 0.
    if (parameters.index0AttributeName !== undefined) gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    else if (parameters.morphTargets === true) // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, "position");
    gl.linkProgram(program);
    // check for link errors
    if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
            runnable = false;
            if (typeof renderer.debug.onShaderError === "function") renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
            else {
                // default error reporting
                const vertexErrors = $04ce9c8dcd7d39f0$var$getShaderErrors(gl, glVertexShader, "vertex");
                const fragmentErrors = $04ce9c8dcd7d39f0$var$getShaderErrors(gl, glFragmentShader, "fragment");
                console.error("THREE.WebGLProgram: Shader Error " + gl.getError() + " - " + "VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\n" + "Program Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors);
            }
        } else if (programLog !== "") console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        else if (vertexLog === "" || fragmentLog === "") haveDiagnostics = false;
        if (haveDiagnostics) this.diagnostics = {
            runnable: runnable,
            programLog: programLog,
            vertexShader: {
                log: vertexLog,
                prefix: prefixVertex
            },
            fragmentShader: {
                log: fragmentLog,
                prefix: prefixFragment
            }
        };
    }
    // Clean up
    // Crashes in iOS9 and iOS10. #18402
    // gl.detachShader( program, glVertexShader );
    // gl.detachShader( program, glFragmentShader );
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    // set up caching for uniform locations
    let cachedUniforms;
    this.getUniforms = function() {
        if (cachedUniforms === undefined) cachedUniforms = new $04ce9c8dcd7d39f0$var$WebGLUniforms(gl, program);
        return cachedUniforms;
    };
    // set up caching for attribute locations
    let cachedAttributes;
    this.getAttributes = function() {
        if (cachedAttributes === undefined) cachedAttributes = $04ce9c8dcd7d39f0$var$fetchAttributeLocations(gl, program);
        return cachedAttributes;
    };
    // free resource
    this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = undefined;
    };
    //
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = $04ce9c8dcd7d39f0$var$programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
}
let $04ce9c8dcd7d39f0$var$_id = 0;
class $04ce9c8dcd7d39f0$var$WebGLShaderCache {
    constructor(){
        this.shaderCache = new Map();
        this.materialCache = new Map();
    }
    update(material) {
        const vertexShader = material.vertexShader;
        const fragmentShader = material.fragmentShader;
        const vertexShaderStage = this._getShaderStage(vertexShader);
        const fragmentShaderStage = this._getShaderStage(fragmentShader);
        const materialShaders = this._getShaderCacheForMaterial(material);
        if (materialShaders.has(vertexShaderStage) === false) {
            materialShaders.add(vertexShaderStage);
            vertexShaderStage.usedTimes++;
        }
        if (materialShaders.has(fragmentShaderStage) === false) {
            materialShaders.add(fragmentShaderStage);
            fragmentShaderStage.usedTimes++;
        }
        return this;
    }
    remove(material) {
        const materialShaders = this.materialCache.get(material);
        for (const shaderStage of materialShaders){
            shaderStage.usedTimes--;
            if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
        }
        this.materialCache.delete(material);
        return this;
    }
    getVertexShaderID(material) {
        return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
        return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear();
        this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
        const cache = this.materialCache;
        let set = cache.get(material);
        if (set === undefined) {
            set = new Set();
            cache.set(material, set);
        }
        return set;
    }
    _getShaderStage(code) {
        const cache = this.shaderCache;
        let stage = cache.get(code);
        if (stage === undefined) {
            stage = new $04ce9c8dcd7d39f0$var$WebGLShaderStage(code);
            cache.set(code, stage);
        }
        return stage;
    }
}
class $04ce9c8dcd7d39f0$var$WebGLShaderStage {
    constructor(code){
        this.id = $04ce9c8dcd7d39f0$var$_id++;
        this.code = code;
        this.usedTimes = 0;
    }
}
function $04ce9c8dcd7d39f0$var$WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new $04ce9c8dcd7d39f0$export$89312ce47c0ca777();
    const _customShaders = new $04ce9c8dcd7d39f0$var$WebGLShaderCache();
    const programs = [];
    const IS_WEBGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    function getChannel(value) {
        if (value === 0) return "uv";
        return `uv${value}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
        const fog = scene.fog;
        const geometry = object.geometry;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const envMapCubeUVHeight = !!envMap && envMap.mapping === $04ce9c8dcd7d39f0$export$dbf3e70ff37af79 ? envMap.image.height : null;
        const shaderID = shaderIDs[material.type];
        // heuristics to create shader parameters according to lights in the scene
        // (not to blow over maxLights budget)
        if (material.precision !== null) {
            precision = capabilities.getMaxPrecision(material.precision);
            if (precision !== material.precision) console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
        //
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
        let morphTextureStride = 0;
        if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
        if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
        if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;
        //
        let vertexShader, fragmentShader;
        let customVertexShaderID, customFragmentShaderID;
        if (shaderID) {
            const shader = $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014[shaderID];
            vertexShader = shader.vertexShader;
            fragmentShader = shader.fragmentShader;
        } else {
            vertexShader = material.vertexShader;
            fragmentShader = material.fragmentShader;
            _customShaders.update(material);
            customVertexShaderID = _customShaders.getVertexShaderID(material);
            customFragmentShaderID = _customShaders.getFragmentShaderID(material);
        }
        const currentRenderTarget = renderer.getRenderTarget();
        const IS_INSTANCEDMESH = object.isInstancedMesh === true;
        const HAS_MAP = !!material.map;
        const HAS_MATCAP = !!material.matcap;
        const HAS_ENVMAP = !!envMap;
        const HAS_AOMAP = !!material.aoMap;
        const HAS_LIGHTMAP = !!material.lightMap;
        const HAS_BUMPMAP = !!material.bumpMap;
        const HAS_NORMALMAP = !!material.normalMap;
        const HAS_DISPLACEMENTMAP = !!material.displacementMap;
        const HAS_EMISSIVEMAP = !!material.emissiveMap;
        const HAS_METALNESSMAP = !!material.metalnessMap;
        const HAS_ROUGHNESSMAP = !!material.roughnessMap;
        const HAS_ANISOTROPY = material.anisotropy > 0;
        const HAS_CLEARCOAT = material.clearcoat > 0;
        const HAS_IRIDESCENCE = material.iridescence > 0;
        const HAS_SHEEN = material.sheen > 0;
        const HAS_TRANSMISSION = material.transmission > 0;
        const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
        const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
        const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
        const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
        const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
        const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
        const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
        const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
        const HAS_SPECULARMAP = !!material.specularMap;
        const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
        const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
        const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
        const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
        const HAS_GRADIENTMAP = !!material.gradientMap;
        const HAS_ALPHAMAP = !!material.alphaMap;
        const HAS_ALPHATEST = material.alphaTest > 0;
        const HAS_ALPHAHASH = !!material.alphaHash;
        const HAS_EXTENSIONS = !!material.extensions;
        const HAS_ATTRIBUTE_UV1 = !!geometry.attributes.uv1;
        const HAS_ATTRIBUTE_UV2 = !!geometry.attributes.uv2;
        const HAS_ATTRIBUTE_UV3 = !!geometry.attributes.uv3;
        let toneMapping = $04ce9c8dcd7d39f0$export$9fcb6b4294603b2;
        if (material.toneMapped) {
            if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) toneMapping = renderer.toneMapping;
        }
        const parameters = {
            isWebGL2: IS_WEBGL2,
            shaderID: shaderID,
            shaderType: material.type,
            shaderName: material.name,
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            defines: material.defines,
            customVertexShaderID: customVertexShaderID,
            customFragmentShaderID: customFragmentShaderID,
            isRawShaderMaterial: material.isRawShaderMaterial === true,
            glslVersion: material.glslVersion,
            precision: precision,
            instancing: IS_INSTANCEDMESH,
            instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
            supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
            outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : $04ce9c8dcd7d39f0$export$42429b3acfb233a4,
            map: HAS_MAP,
            matcap: HAS_MATCAP,
            envMap: HAS_ENVMAP,
            envMapMode: HAS_ENVMAP && envMap.mapping,
            envMapCubeUVHeight: envMapCubeUVHeight,
            aoMap: HAS_AOMAP,
            lightMap: HAS_LIGHTMAP,
            bumpMap: HAS_BUMPMAP,
            normalMap: HAS_NORMALMAP,
            displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
            emissiveMap: HAS_EMISSIVEMAP,
            normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === $04ce9c8dcd7d39f0$export$9990ad26f9db5b2c,
            normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === $04ce9c8dcd7d39f0$export$2852a58ebdac27b8,
            metalnessMap: HAS_METALNESSMAP,
            roughnessMap: HAS_ROUGHNESSMAP,
            anisotropy: HAS_ANISOTROPY,
            anisotropyMap: HAS_ANISOTROPYMAP,
            clearcoat: HAS_CLEARCOAT,
            clearcoatMap: HAS_CLEARCOATMAP,
            clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
            clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
            iridescence: HAS_IRIDESCENCE,
            iridescenceMap: HAS_IRIDESCENCEMAP,
            iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
            sheen: HAS_SHEEN,
            sheenColorMap: HAS_SHEEN_COLORMAP,
            sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
            specularMap: HAS_SPECULARMAP,
            specularColorMap: HAS_SPECULAR_COLORMAP,
            specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
            transmission: HAS_TRANSMISSION,
            transmissionMap: HAS_TRANSMISSIONMAP,
            thicknessMap: HAS_THICKNESSMAP,
            gradientMap: HAS_GRADIENTMAP,
            opaque: material.transparent === false && material.blending === $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0,
            alphaMap: HAS_ALPHAMAP,
            alphaTest: HAS_ALPHATEST,
            alphaHash: HAS_ALPHAHASH,
            combine: material.combine,
            //
            mapUv: HAS_MAP && getChannel(material.map.channel),
            aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
            lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
            bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
            normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
            displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
            emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
            metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
            roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
            anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
            clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
            clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
            clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
            iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
            iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
            sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
            sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
            specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
            specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
            specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
            transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
            thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
            alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
            //
            vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
            vertexColors: material.vertexColors,
            vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
            vertexUv1s: HAS_ATTRIBUTE_UV1,
            vertexUv2s: HAS_ATTRIBUTE_UV2,
            vertexUv3s: HAS_ATTRIBUTE_UV3,
            pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
            fog: !!fog,
            useFog: material.fog === true,
            fogExp2: fog && fog.isFogExp2,
            flatShading: material.flatShading === true,
            sizeAttenuation: material.sizeAttenuation === true,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            skinning: object.isSkinnedMesh === true,
            morphTargets: geometry.morphAttributes.position !== undefined,
            morphNormals: geometry.morphAttributes.normal !== undefined,
            morphColors: geometry.morphAttributes.color !== undefined,
            morphTargetsCount: morphTargetsCount,
            morphTextureStride: morphTextureStride,
            numDirLights: lights.directional.length,
            numPointLights: lights.point.length,
            numSpotLights: lights.spot.length,
            numSpotLightMaps: lights.spotLightMap.length,
            numRectAreaLights: lights.rectArea.length,
            numHemiLights: lights.hemi.length,
            numDirLightShadows: lights.directionalShadowMap.length,
            numPointLightShadows: lights.pointShadowMap.length,
            numSpotLightShadows: lights.spotShadowMap.length,
            numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
            numClippingPlanes: clipping.numPlanes,
            numClipIntersection: clipping.numIntersection,
            dithering: material.dithering,
            shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
            shadowMapType: renderer.shadowMap.type,
            toneMapping: toneMapping,
            useLegacyLights: renderer._useLegacyLights,
            premultipliedAlpha: material.premultipliedAlpha,
            doubleSided: material.side === $04ce9c8dcd7d39f0$export$3b296b6f144d5b03,
            flipSided: material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace,
            useDepthPacking: material.depthPacking >= 0,
            depthPacking: material.depthPacking || 0,
            index0AttributeName: material.index0AttributeName,
            extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
            extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
            extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
            extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
            rendererExtensionFragDepth: IS_WEBGL2 || extensions.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has("EXT_shader_texture_lod"),
            customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
    }
    function getProgramCacheKey(parameters) {
        const array = [];
        if (parameters.shaderID) array.push(parameters.shaderID);
        else {
            array.push(parameters.customVertexShaderID);
            array.push(parameters.customFragmentShaderID);
        }
        if (parameters.defines !== undefined) for(const name in parameters.defines){
            array.push(name);
            array.push(parameters.defines[name]);
        }
        if (parameters.isRawShaderMaterial === false) {
            getProgramCacheKeyParameters(array, parameters);
            getProgramCacheKeyBooleans(array, parameters);
            array.push(renderer.outputColorSpace);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
        array.push(parameters.precision);
        array.push(parameters.outputColorSpace);
        array.push(parameters.envMapMode);
        array.push(parameters.envMapCubeUVHeight);
        array.push(parameters.mapUv);
        array.push(parameters.alphaMapUv);
        array.push(parameters.lightMapUv);
        array.push(parameters.aoMapUv);
        array.push(parameters.bumpMapUv);
        array.push(parameters.normalMapUv);
        array.push(parameters.displacementMapUv);
        array.push(parameters.emissiveMapUv);
        array.push(parameters.metalnessMapUv);
        array.push(parameters.roughnessMapUv);
        array.push(parameters.anisotropyMapUv);
        array.push(parameters.clearcoatMapUv);
        array.push(parameters.clearcoatNormalMapUv);
        array.push(parameters.clearcoatRoughnessMapUv);
        array.push(parameters.iridescenceMapUv);
        array.push(parameters.iridescenceThicknessMapUv);
        array.push(parameters.sheenColorMapUv);
        array.push(parameters.sheenRoughnessMapUv);
        array.push(parameters.specularMapUv);
        array.push(parameters.specularColorMapUv);
        array.push(parameters.specularIntensityMapUv);
        array.push(parameters.transmissionMapUv);
        array.push(parameters.thicknessMapUv);
        array.push(parameters.combine);
        array.push(parameters.fogExp2);
        array.push(parameters.sizeAttenuation);
        array.push(parameters.morphTargetsCount);
        array.push(parameters.morphAttributeCount);
        array.push(parameters.numDirLights);
        array.push(parameters.numPointLights);
        array.push(parameters.numSpotLights);
        array.push(parameters.numSpotLightMaps);
        array.push(parameters.numHemiLights);
        array.push(parameters.numRectAreaLights);
        array.push(parameters.numDirLightShadows);
        array.push(parameters.numPointLightShadows);
        array.push(parameters.numSpotLightShadows);
        array.push(parameters.numSpotLightShadowsWithMaps);
        array.push(parameters.shadowMapType);
        array.push(parameters.toneMapping);
        array.push(parameters.numClippingPlanes);
        array.push(parameters.numClipIntersection);
        array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
        _programLayers.disableAll();
        if (parameters.isWebGL2) _programLayers.enable(0);
        if (parameters.supportsVertexTextures) _programLayers.enable(1);
        if (parameters.instancing) _programLayers.enable(2);
        if (parameters.instancingColor) _programLayers.enable(3);
        if (parameters.matcap) _programLayers.enable(4);
        if (parameters.envMap) _programLayers.enable(5);
        if (parameters.normalMapObjectSpace) _programLayers.enable(6);
        if (parameters.normalMapTangentSpace) _programLayers.enable(7);
        if (parameters.clearcoat) _programLayers.enable(8);
        if (parameters.iridescence) _programLayers.enable(9);
        if (parameters.alphaTest) _programLayers.enable(10);
        if (parameters.vertexColors) _programLayers.enable(11);
        if (parameters.vertexAlphas) _programLayers.enable(12);
        if (parameters.vertexUv1s) _programLayers.enable(13);
        if (parameters.vertexUv2s) _programLayers.enable(14);
        if (parameters.vertexUv3s) _programLayers.enable(15);
        if (parameters.vertexTangents) _programLayers.enable(16);
        if (parameters.anisotropy) _programLayers.enable(17);
        array.push(_programLayers.mask);
        _programLayers.disableAll();
        if (parameters.fog) _programLayers.enable(0);
        if (parameters.useFog) _programLayers.enable(1);
        if (parameters.flatShading) _programLayers.enable(2);
        if (parameters.logarithmicDepthBuffer) _programLayers.enable(3);
        if (parameters.skinning) _programLayers.enable(4);
        if (parameters.morphTargets) _programLayers.enable(5);
        if (parameters.morphNormals) _programLayers.enable(6);
        if (parameters.morphColors) _programLayers.enable(7);
        if (parameters.premultipliedAlpha) _programLayers.enable(8);
        if (parameters.shadowMapEnabled) _programLayers.enable(9);
        if (parameters.useLegacyLights) _programLayers.enable(10);
        if (parameters.doubleSided) _programLayers.enable(11);
        if (parameters.flipSided) _programLayers.enable(12);
        if (parameters.useDepthPacking) _programLayers.enable(13);
        if (parameters.dithering) _programLayers.enable(14);
        if (parameters.transmission) _programLayers.enable(15);
        if (parameters.sheen) _programLayers.enable(16);
        if (parameters.opaque) _programLayers.enable(17);
        if (parameters.pointsUvs) _programLayers.enable(18);
        array.push(_programLayers.mask);
    }
    function getUniforms(material) {
        const shaderID = shaderIDs[material.type];
        let uniforms;
        if (shaderID) {
            const shader = $04ce9c8dcd7d39f0$export$bee4a7d47f8f5014[shaderID];
            uniforms = $04ce9c8dcd7d39f0$export$d8ecdf8615bfea69.clone(shader.uniforms);
        } else uniforms = material.uniforms;
        return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
        let program;
        // Check if code has been already compiled
        for(let p = 0, pl = programs.length; p < pl; p++){
            const preexistingProgram = programs[p];
            if (preexistingProgram.cacheKey === cacheKey) {
                program = preexistingProgram;
                ++program.usedTimes;
                break;
            }
        }
        if (program === undefined) {
            program = new $04ce9c8dcd7d39f0$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates);
            programs.push(program);
        }
        return program;
    }
    function releaseProgram(program) {
        if (--program.usedTimes === 0) {
            // Remove from unordered set
            const i = programs.indexOf(program);
            programs[i] = programs[programs.length - 1];
            programs.pop();
            // Free WebGL resources
            program.destroy();
        }
    }
    function releaseShaderCache(material) {
        _customShaders.remove(material);
    }
    function dispose() {
        _customShaders.dispose();
    }
    return {
        getParameters: getParameters,
        getProgramCacheKey: getProgramCacheKey,
        getUniforms: getUniforms,
        acquireProgram: acquireProgram,
        releaseProgram: releaseProgram,
        releaseShaderCache: releaseShaderCache,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs: programs,
        dispose: dispose
    };
}
function $04ce9c8dcd7d39f0$var$WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
        let map = properties.get(object);
        if (map === undefined) {
            map = {};
            properties.set(object, map);
        }
        return map;
    }
    function remove(object) {
        properties.delete(object);
    }
    function update(object, key, value) {
        properties.get(object)[key] = value;
    }
    function dispose() {
        properties = new WeakMap();
    }
    return {
        get: get,
        remove: remove,
        update: update,
        dispose: dispose
    };
}
function $04ce9c8dcd7d39f0$var$painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.material.id !== b.material.id) return a.material.id - b.material.id;
    else if (a.z !== b.z) return a.z - b.z;
    else return a.id - b.id;
}
function $04ce9c8dcd7d39f0$var$reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.z !== b.z) return b.z - a.z;
    else return a.id - b.id;
}
function $04ce9c8dcd7d39f0$var$WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        let renderItem = renderItems[renderItemsIndex];
        if (renderItem === undefined) {
            renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            };
            renderItems[renderItemsIndex] = renderItem;
        } else {
            renderItem.id = object.id;
            renderItem.object = object;
            renderItem.geometry = geometry;
            renderItem.material = material;
            renderItem.groupOrder = groupOrder;
            renderItem.renderOrder = object.renderOrder;
            renderItem.z = z;
            renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.push(renderItem);
        else if (material.transparent === true) transparent.push(renderItem);
        else opaque.push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.unshift(renderItem);
        else if (material.transparent === true) transparent.unshift(renderItem);
        else opaque.unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1) opaque.sort(customOpaqueSort || $04ce9c8dcd7d39f0$var$painterSortStable);
        if (transmissive.length > 1) transmissive.sort(customTransparentSort || $04ce9c8dcd7d39f0$var$reversePainterSortStable);
        if (transparent.length > 1) transparent.sort(customTransparentSort || $04ce9c8dcd7d39f0$var$reversePainterSortStable);
    }
    function finish() {
        // Clear references from inactive renderItems in the list
        for(let i = renderItemsIndex, il = renderItems.length; i < il; i++){
            const renderItem = renderItems[i];
            if (renderItem.id === null) break;
            renderItem.id = null;
            renderItem.object = null;
            renderItem.geometry = null;
            renderItem.material = null;
            renderItem.group = null;
        }
    }
    return {
        opaque: opaque,
        transmissive: transmissive,
        transparent: transparent,
        init: init,
        push: push,
        unshift: unshift,
        finish: finish,
        sort: sort
    };
}
function $04ce9c8dcd7d39f0$var$WebGLRenderLists() {
    let lists = new WeakMap();
    function get(scene, renderCallDepth) {
        const listArray = lists.get(scene);
        let list;
        if (listArray === undefined) {
            list = new $04ce9c8dcd7d39f0$var$WebGLRenderList();
            lists.set(scene, [
                list
            ]);
        } else if (renderCallDepth >= listArray.length) {
            list = new $04ce9c8dcd7d39f0$var$WebGLRenderList();
            listArray.push(list);
        } else list = listArray[renderCallDepth];
        return list;
    }
    function dispose() {
        lists = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
function $04ce9c8dcd7d39f0$var$UniformsCache() {
    const lights = {};
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        direction: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        color: new $04ce9c8dcd7d39f0$export$892596cec99bc70e()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        position: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        direction: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        color: new $04ce9c8dcd7d39f0$export$892596cec99bc70e(),
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        position: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        color: new $04ce9c8dcd7d39f0$export$892596cec99bc70e(),
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    uniforms = {
                        direction: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        skyColor: new $04ce9c8dcd7d39f0$export$892596cec99bc70e(),
                        groundColor: new $04ce9c8dcd7d39f0$export$892596cec99bc70e()
                    };
                    break;
                case "RectAreaLight":
                    uniforms = {
                        color: new $04ce9c8dcd7d39f0$export$892596cec99bc70e(),
                        position: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        halfWidth: new $04ce9c8dcd7d39f0$export$64b5c384219d3699(),
                        halfHeight: new $04ce9c8dcd7d39f0$export$64b5c384219d3699()
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
function $04ce9c8dcd7d39f0$var$ShadowUniformsCache() {
    const lights = {};
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(),
                        shadowCameraNear: 1,
                        shadowCameraFar: 1000
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
let $04ce9c8dcd7d39f0$var$nextVersion = 0;
function $04ce9c8dcd7d39f0$var$shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
}
function $04ce9c8dcd7d39f0$var$WebGLLights(extensions, capabilities) {
    const cache = new $04ce9c8dcd7d39f0$var$UniformsCache();
    const shadowCache = $04ce9c8dcd7d39f0$var$ShadowUniformsCache();
    const state = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
            numSpotMaps: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0
    };
    for(let i = 0; i < 9; i++)state.probe.push(new $04ce9c8dcd7d39f0$export$64b5c384219d3699());
    const vector3 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
    const matrix4 = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
    const matrix42 = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
    function setup(lights, useLegacyLights) {
        let r = 0, g = 0, b = 0;
        for(let i = 0; i < 9; i++)state.probe[i].set(0, 0, 0);
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        let numDirectionalShadows = 0;
        let numPointShadows = 0;
        let numSpotShadows = 0;
        let numSpotMaps = 0;
        let numSpotShadowsWithMaps = 0;
        // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
        lights.sort($04ce9c8dcd7d39f0$var$shadowCastingAndTexturingLightsFirst);
        // artist-friendly light intensity scaling factor
        const scaleFactor = useLegacyLights === true ? Math.PI : 1;
        for(let i = 0, l = lights.length; i < l; i++){
            const light = lights[i];
            const color = light.color;
            const intensity = light.intensity;
            const distance = light.distance;
            const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
            if (light.isAmbientLight) {
                r += color.r * intensity * scaleFactor;
                g += color.g * intensity * scaleFactor;
                b += color.b * intensity * scaleFactor;
            } else if (light.isLightProbe) for(let j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            else if (light.isDirectionalLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.directionalShadow[directionalLength] = shadowUniforms;
                    state.directionalShadowMap[directionalLength] = shadowMap;
                    state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                    numDirectionalShadows++;
                }
                state.directional[directionalLength] = uniforms;
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = cache.get(light);
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
                uniforms.distance = distance;
                uniforms.coneCos = Math.cos(light.angle);
                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                uniforms.decay = light.decay;
                state.spot[spotLength] = uniforms;
                const shadow = light.shadow;
                if (light.map) {
                    state.spotLightMap[numSpotMaps] = light.map;
                    numSpotMaps++;
                    // make sure the lightMatrix is up to date
                    // TODO : do it if required only
                    shadow.updateMatrices(light);
                    if (light.castShadow) numSpotShadowsWithMaps++;
                }
                state.spotLightMatrix[spotLength] = shadow.matrix;
                if (light.castShadow) {
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.spotShadow[spotLength] = shadowUniforms;
                    state.spotShadowMap[spotLength] = shadowMap;
                    numSpotShadows++;
                }
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(color).multiplyScalar(intensity);
                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
                state.rectArea[rectAreaLength] = uniforms;
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                uniforms.distance = light.distance;
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    shadowUniforms.shadowCameraNear = shadow.camera.near;
                    shadowUniforms.shadowCameraFar = shadow.camera.far;
                    state.pointShadow[pointLength] = shadowUniforms;
                    state.pointShadowMap[pointLength] = shadowMap;
                    state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                    numPointShadows++;
                }
                state.point[pointLength] = uniforms;
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = cache.get(light);
                uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
                state.hemi[hemiLength] = uniforms;
                hemiLength++;
            }
        }
        if (rectAreaLength > 0) {
            if (capabilities.isWebGL2) {
                // WebGL 2
                state.rectAreaLTC1 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_FLOAT_1;
                state.rectAreaLTC2 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_FLOAT_2;
            } else {
                // WebGL 1
                if (extensions.has("OES_texture_float_linear") === true) {
                    state.rectAreaLTC1 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_FLOAT_1;
                    state.rectAreaLTC2 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_FLOAT_2;
                } else if (extensions.has("OES_texture_half_float_linear") === true) {
                    state.rectAreaLTC1 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_HALF_1;
                    state.rectAreaLTC2 = $04ce9c8dcd7d39f0$export$6643083551874bf5.LTC_HALF_2;
                } else console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
            }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        const hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
            state.directional.length = directionalLength;
            state.spot.length = spotLength;
            state.rectArea.length = rectAreaLength;
            state.point.length = pointLength;
            state.hemi.length = hemiLength;
            state.directionalShadow.length = numDirectionalShadows;
            state.directionalShadowMap.length = numDirectionalShadows;
            state.pointShadow.length = numPointShadows;
            state.pointShadowMap.length = numPointShadows;
            state.spotShadow.length = numSpotShadows;
            state.spotShadowMap.length = numSpotShadows;
            state.directionalShadowMatrix.length = numDirectionalShadows;
            state.pointShadowMatrix.length = numPointShadows;
            state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
            state.spotLightMap.length = numSpotMaps;
            state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
            hash.directionalLength = directionalLength;
            hash.pointLength = pointLength;
            hash.spotLength = spotLength;
            hash.rectAreaLength = rectAreaLength;
            hash.hemiLength = hemiLength;
            hash.numDirectionalShadows = numDirectionalShadows;
            hash.numPointShadows = numPointShadows;
            hash.numSpotShadows = numSpotShadows;
            hash.numSpotMaps = numSpotMaps;
            state.version = $04ce9c8dcd7d39f0$var$nextVersion++;
        }
    }
    function setupView(lights, camera) {
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        const viewMatrix = camera.matrixWorldInverse;
        for(let i = 0, l = lights.length; i < l; i++){
            const light = lights[i];
            if (light.isDirectionalLight) {
                const uniforms = state.directional[directionalLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = state.spot[spotLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = state.rectArea[rectAreaLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                // extract local rotation of light to derive width/height half vectors
                matrix42.identity();
                matrix4.copy(light.matrixWorld);
                matrix4.premultiply(viewMatrix);
                matrix42.extractRotation(matrix4);
                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
                uniforms.halfWidth.applyMatrix4(matrix42);
                uniforms.halfHeight.applyMatrix4(matrix42);
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = state.point[pointLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = state.hemi[hemiLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                uniforms.direction.transformDirection(viewMatrix);
                hemiLength++;
            }
        }
    }
    return {
        setup: setup,
        setupView: setupView,
        state: state
    };
}
function $04ce9c8dcd7d39f0$var$WebGLRenderState(extensions, capabilities) {
    const lights = new $04ce9c8dcd7d39f0$var$WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
    }
    function pushLight(light) {
        lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
    }
    function setupLights(useLegacyLights) {
        lights.setup(lightsArray, useLegacyLights);
    }
    function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
    }
    const state = {
        lightsArray: lightsArray,
        shadowsArray: shadowsArray,
        lights: lights
    };
    return {
        init: init,
        state: state,
        setupLights: setupLights,
        setupLightsView: setupLightsView,
        pushLight: pushLight,
        pushShadow: pushShadow
    };
}
function $04ce9c8dcd7d39f0$var$WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene, renderCallDepth = 0) {
        const renderStateArray = renderStates.get(scene);
        let renderState;
        if (renderStateArray === undefined) {
            renderState = new $04ce9c8dcd7d39f0$var$WebGLRenderState(extensions, capabilities);
            renderStates.set(scene, [
                renderState
            ]);
        } else if (renderCallDepth >= renderStateArray.length) {
            renderState = new $04ce9c8dcd7d39f0$var$WebGLRenderState(extensions, capabilities);
            renderStateArray.push(renderState);
        } else renderState = renderStateArray[renderCallDepth];
        return renderState;
    }
    function dispose() {
        renderStates = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class $04ce9c8dcd7d39f0$export$2698c22ec13825db extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshDepthMaterial = true;
        this.type = "MeshDepthMaterial";
        this.depthPacking = $04ce9c8dcd7d39f0$export$deeb383078690b50;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.depthPacking = source.depthPacking;
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$33e187ed002f2a19 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshDistanceMaterial = true;
        this.type = "MeshDistanceMaterial";
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
const $04ce9c8dcd7d39f0$var$fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function $04ce9c8dcd7d39f0$var$WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new $04ce9c8dcd7d39f0$export$35efe6f4c85463d2();
    const _shadowMapSize = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), _viewportSize = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), _viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(), _depthMaterial = new $04ce9c8dcd7d39f0$export$2698c22ec13825db({
        depthPacking: $04ce9c8dcd7d39f0$export$8f910f4c4f73df11
    }), _distanceMaterial = new $04ce9c8dcd7d39f0$export$33e187ed002f2a19(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = {
        [$04ce9c8dcd7d39f0$export$2ede184fc2998901]: $04ce9c8dcd7d39f0$export$d9f0486e75b5ace,
        [$04ce9c8dcd7d39f0$export$d9f0486e75b5ace]: $04ce9c8dcd7d39f0$export$2ede184fc2998901,
        [$04ce9c8dcd7d39f0$export$3b296b6f144d5b03]: $04ce9c8dcd7d39f0$export$3b296b6f144d5b03
    };
    const shadowMaterialVertical = new $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()
            },
            radius: {
                value: 4.0
            }
        },
        vertexShader: $04ce9c8dcd7d39f0$var$vertex,
        fragmentShader: $04ce9c8dcd7d39f0$var$fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
    fullScreenTri.setAttribute("position", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(new Float32Array([
        -1,
        -1,
        0.5,
        3,
        -1,
        0.5,
        -1,
        3,
        0.5
    ]), 3));
    const fullScreenMesh = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = $04ce9c8dcd7d39f0$export$5813f879eee7cd88;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
        if (scope.enabled === false) return;
        if (scope.autoUpdate === false && scope.needsUpdate === false) return;
        if (lights.length === 0) return;
        const currentRenderTarget = _renderer.getRenderTarget();
        const activeCubeFace = _renderer.getActiveCubeFace();
        const activeMipmapLevel = _renderer.getActiveMipmapLevel();
        const _state = _renderer.state;
        // Set GL state for depth map.
        _state.setBlending($04ce9c8dcd7d39f0$export$63b8d6b580fc65ba);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        // check for shadow map type changes
        const toVSM = _previousType !== $04ce9c8dcd7d39f0$export$896ae1ade6c829c4 && this.type === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4;
        const fromVSM = _previousType === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4 && this.type !== $04ce9c8dcd7d39f0$export$896ae1ade6c829c4;
        // render depth map
        for(let i = 0, il = lights.length; i < il; i++){
            const light = lights[i];
            const shadow = light.shadow;
            if (shadow === undefined) {
                console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
                continue;
            }
            if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
            _shadowMapSize.copy(shadow.mapSize);
            const shadowFrameExtents = shadow.getFrameExtents();
            _shadowMapSize.multiply(shadowFrameExtents);
            _viewportSize.copy(shadow.mapSize);
            if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
                if (_shadowMapSize.x > _maxTextureSize) {
                    _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
                    _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                    shadow.mapSize.x = _viewportSize.x;
                }
                if (_shadowMapSize.y > _maxTextureSize) {
                    _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
                    _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                    shadow.mapSize.y = _viewportSize.y;
                }
            }
            if (shadow.map === null || toVSM === true || fromVSM === true) {
                const pars = this.type !== $04ce9c8dcd7d39f0$export$896ae1ade6c829c4 ? {
                    minFilter: $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0,
                    magFilter: $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0
                } : {};
                if (shadow.map !== null) shadow.map.dispose();
                shadow.map = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + ".shadowMap";
                shadow.camera.updateProjectionMatrix();
            }
            _renderer.setRenderTarget(shadow.map);
            _renderer.clear();
            const viewportCount = shadow.getViewportCount();
            for(let vp = 0; vp < viewportCount; vp++){
                const viewport = shadow.getViewport(vp);
                _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
                _state.viewport(_viewport);
                shadow.updateMatrices(light, vp);
                _frustum = shadow.getFrustum();
                renderObject(scene, camera, shadow.camera, light, this.type);
            }
            // do blur pass for VSM
            if (shadow.isPointLightShadow !== true && this.type === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4) VSMPass(shadow, camera);
            shadow.needsUpdate = false;
        }
        _previousType = this.type;
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
        const geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
            shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialVertical.needsUpdate = true;
            shadowMaterialHorizontal.needsUpdate = true;
        }
        if (shadow.mapPass === null) shadow.mapPass = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y);
        // vertical pass
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        // horizontal pass
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
        let result = null;
        const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== undefined) result = customMaterial;
        else {
            result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
            if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
                // in this case we need a unique material instance reflecting the
                // appropriate state
                const keyA = result.uuid, keyB = material.uuid;
                let materialsForVariant = _materialCache[keyA];
                if (materialsForVariant === undefined) {
                    materialsForVariant = {};
                    _materialCache[keyA] = materialsForVariant;
                }
                let cachedMaterial = materialsForVariant[keyB];
                if (cachedMaterial === undefined) {
                    cachedMaterial = result.clone();
                    materialsForVariant[keyB] = cachedMaterial;
                }
                result = cachedMaterial;
            }
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4) result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        else result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.map = material.map;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
            const materialProperties = _renderer.properties.get(result);
            materialProperties.light = light;
        }
        return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
            if ((object.castShadow || object.receiveShadow && type === $04ce9c8dcd7d39f0$export$896ae1ade6c829c4) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                const geometry = _objects.update(object);
                const material = object.material;
                if (Array.isArray(material)) {
                    const groups = geometry.groups;
                    for(let k = 0, kl = groups.length; k < kl; k++){
                        const group = groups[k];
                        const groupMaterial = material[group.materialIndex];
                        if (groupMaterial && groupMaterial.visible) {
                            const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                        }
                    }
                } else if (material.visible) {
                    const depthMaterial = getDepthMaterial(object, material, light, type);
                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)renderObject(children[i], camera, shadowCamera, light, type);
    }
}
function $04ce9c8dcd7d39f0$var$WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
        let locked = false;
        const color = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        let currentColorMask = null;
        const currentColorClear = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, 0, 0);
        return {
            setMask: function(colorMask) {
                if (currentColorMask !== colorMask && !locked) {
                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                    currentColorMask = colorMask;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(r, g, b, a, premultipliedAlpha) {
                if (premultipliedAlpha === true) {
                    r *= a;
                    g *= a;
                    b *= a;
                }
                color.set(r, g, b, a);
                if (currentColorClear.equals(color) === false) {
                    gl.clearColor(r, g, b, a);
                    currentColorClear.copy(color);
                }
            },
            reset: function() {
                locked = false;
                currentColorMask = null;
                currentColorClear.set(-1, 0, 0, 0); // set to invalid state
            }
        };
    }
    function DepthBuffer() {
        let locked = false;
        let currentDepthMask = null;
        let currentDepthFunc = null;
        let currentDepthClear = null;
        return {
            setTest: function(depthTest) {
                if (depthTest) enable(gl.DEPTH_TEST);
                else disable(gl.DEPTH_TEST);
            },
            setMask: function(depthMask) {
                if (currentDepthMask !== depthMask && !locked) {
                    gl.depthMask(depthMask);
                    currentDepthMask = depthMask;
                }
            },
            setFunc: function(depthFunc) {
                if (currentDepthFunc !== depthFunc) {
                    switch(depthFunc){
                        case $04ce9c8dcd7d39f0$export$69025ce147cee220:
                            gl.depthFunc(gl.NEVER);
                            break;
                        case $04ce9c8dcd7d39f0$export$7182eb52ea3b3f04:
                            gl.depthFunc(gl.ALWAYS);
                            break;
                        case $04ce9c8dcd7d39f0$export$eedccec66ab7ebe:
                            gl.depthFunc(gl.LESS);
                            break;
                        case $04ce9c8dcd7d39f0$export$296f78a0b892f81a:
                            gl.depthFunc(gl.LEQUAL);
                            break;
                        case $04ce9c8dcd7d39f0$export$a60d398fc7b7590e:
                            gl.depthFunc(gl.EQUAL);
                            break;
                        case $04ce9c8dcd7d39f0$export$7d7234c1240a1fc4:
                            gl.depthFunc(gl.GEQUAL);
                            break;
                        case $04ce9c8dcd7d39f0$export$c5e2c52991f30937:
                            gl.depthFunc(gl.GREATER);
                            break;
                        case $04ce9c8dcd7d39f0$export$2f843afa843d8916:
                            gl.depthFunc(gl.NOTEQUAL);
                            break;
                        default:
                            gl.depthFunc(gl.LEQUAL);
                    }
                    currentDepthFunc = depthFunc;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(depth) {
                if (currentDepthClear !== depth) {
                    gl.clearDepth(depth);
                    currentDepthClear = depth;
                }
            },
            reset: function() {
                locked = false;
                currentDepthMask = null;
                currentDepthFunc = null;
                currentDepthClear = null;
            }
        };
    }
    function StencilBuffer() {
        let locked = false;
        let currentStencilMask = null;
        let currentStencilFunc = null;
        let currentStencilRef = null;
        let currentStencilFuncMask = null;
        let currentStencilFail = null;
        let currentStencilZFail = null;
        let currentStencilZPass = null;
        let currentStencilClear = null;
        return {
            setTest: function(stencilTest) {
                if (!locked) {
                    if (stencilTest) enable(gl.STENCIL_TEST);
                    else disable(gl.STENCIL_TEST);
                }
            },
            setMask: function(stencilMask) {
                if (currentStencilMask !== stencilMask && !locked) {
                    gl.stencilMask(stencilMask);
                    currentStencilMask = stencilMask;
                }
            },
            setFunc: function(stencilFunc, stencilRef, stencilMask) {
                if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                    currentStencilFunc = stencilFunc;
                    currentStencilRef = stencilRef;
                    currentStencilFuncMask = stencilMask;
                }
            },
            setOp: function(stencilFail, stencilZFail, stencilZPass) {
                if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                    currentStencilFail = stencilFail;
                    currentStencilZFail = stencilZFail;
                    currentStencilZPass = stencilZPass;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(stencil) {
                if (currentStencilClear !== stencil) {
                    gl.clearStencil(stencil);
                    currentStencilClear = stencil;
                }
            },
            reset: function() {
                locked = false;
                currentStencilMask = null;
                currentStencilFunc = null;
                currentStencilRef = null;
                currentStencilFuncMask = null;
                currentStencilFail = null;
                currentStencilZFail = null;
                currentStencilZPass = null;
                currentStencilClear = null;
            }
        };
    }
    //
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = new WeakMap();
    const uboProgramMap = new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1.0;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2.0;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3().fromArray(scissorParam);
    const currentViewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3().fromArray(viewportParam);
    function createTexture(type, target, count, dimensions) {
        const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
        const texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        for(let i = 0; i < count; i++)if (isWebGL2 && (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY)) gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        else gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    if (isWebGL2) {
        emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
        emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    }
    // init
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc($04ce9c8dcd7d39f0$export$296f78a0b892f81a);
    setFlipSided(false);
    setCullFace($04ce9c8dcd7d39f0$export$b9a7b4fc5cb15f9b);
    enable(gl.CULL_FACE);
    setBlending($04ce9c8dcd7d39f0$export$63b8d6b580fc65ba);
    //
    function enable(id) {
        if (enabledCapabilities[id] !== true) {
            gl.enable(id);
            enabledCapabilities[id] = true;
        }
    }
    function disable(id) {
        if (enabledCapabilities[id] !== false) {
            gl.disable(id);
            enabledCapabilities[id] = false;
        }
    }
    function bindFramebuffer(target, framebuffer) {
        if (currentBoundFramebuffers[target] !== framebuffer) {
            gl.bindFramebuffer(target, framebuffer);
            currentBoundFramebuffers[target] = framebuffer;
            if (isWebGL2) {
                // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
                if (target === gl.DRAW_FRAMEBUFFER) currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
                if (target === gl.FRAMEBUFFER) currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
            }
            return true;
        }
        return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
        let drawBuffers = defaultDrawbuffers;
        let needsUpdate = false;
        if (renderTarget) {
            drawBuffers = currentDrawbuffers.get(framebuffer);
            if (drawBuffers === undefined) {
                drawBuffers = [];
                currentDrawbuffers.set(framebuffer, drawBuffers);
            }
            if (renderTarget.isWebGLMultipleRenderTargets) {
                const textures = renderTarget.texture;
                if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
                    for(let i = 0, il = textures.length; i < il; i++)drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
                    drawBuffers.length = textures.length;
                    needsUpdate = true;
                }
            } else if (drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
                drawBuffers[0] = gl.COLOR_ATTACHMENT0;
                needsUpdate = true;
            }
        } else if (drawBuffers[0] !== gl.BACK) {
            drawBuffers[0] = gl.BACK;
            needsUpdate = true;
        }
        if (needsUpdate) {
            if (capabilities.isWebGL2) gl.drawBuffers(drawBuffers);
            else extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers);
        }
    }
    function useProgram(program) {
        if (currentProgram !== program) {
            gl.useProgram(program);
            currentProgram = program;
            return true;
        }
        return false;
    }
    const equationToGL = {
        [$04ce9c8dcd7d39f0$export$20183a0484ce21a0]: gl.FUNC_ADD,
        [$04ce9c8dcd7d39f0$export$73e0df5177988548]: gl.FUNC_SUBTRACT,
        [$04ce9c8dcd7d39f0$export$28e582859cbec660]: gl.FUNC_REVERSE_SUBTRACT
    };
    if (isWebGL2) {
        equationToGL[$04ce9c8dcd7d39f0$export$c8c1508da8d0600c] = gl.MIN;
        equationToGL[$04ce9c8dcd7d39f0$export$99948c02fb51055f] = gl.MAX;
    } else {
        const extension = extensions.get("EXT_blend_minmax");
        if (extension !== null) {
            equationToGL[$04ce9c8dcd7d39f0$export$c8c1508da8d0600c] = extension.MIN_EXT;
            equationToGL[$04ce9c8dcd7d39f0$export$99948c02fb51055f] = extension.MAX_EXT;
        }
    }
    const factorToGL = {
        [$04ce9c8dcd7d39f0$export$2110f05edf778d3d]: gl.ZERO,
        [$04ce9c8dcd7d39f0$export$8805bad65e24940e]: gl.ONE,
        [$04ce9c8dcd7d39f0$export$7fbe15b28d28cf52]: gl.SRC_COLOR,
        [$04ce9c8dcd7d39f0$export$d5773124e86cf28c]: gl.SRC_ALPHA,
        [$04ce9c8dcd7d39f0$export$c05e2a1fc8609506]: gl.SRC_ALPHA_SATURATE,
        [$04ce9c8dcd7d39f0$export$ef5f2dd8ffac5574]: gl.DST_COLOR,
        [$04ce9c8dcd7d39f0$export$a78aed1ca2a87192]: gl.DST_ALPHA,
        [$04ce9c8dcd7d39f0$export$947829af9f2c17f6]: gl.ONE_MINUS_SRC_COLOR,
        [$04ce9c8dcd7d39f0$export$11d468cc7f19e971]: gl.ONE_MINUS_SRC_ALPHA,
        [$04ce9c8dcd7d39f0$export$56b85b2686ab16]: gl.ONE_MINUS_DST_COLOR,
        [$04ce9c8dcd7d39f0$export$5d0fe17fd8773bac]: gl.ONE_MINUS_DST_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === $04ce9c8dcd7d39f0$export$63b8d6b580fc65ba) {
            if (currentBlendingEnabled === true) {
                disable(gl.BLEND);
                currentBlendingEnabled = false;
            }
            return;
        }
        if (currentBlendingEnabled === false) {
            enable(gl.BLEND);
            currentBlendingEnabled = true;
        }
        if (blending !== $04ce9c8dcd7d39f0$export$eda4864c68df1fa2) {
            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                if (currentBlendEquation !== $04ce9c8dcd7d39f0$export$20183a0484ce21a0 || currentBlendEquationAlpha !== $04ce9c8dcd7d39f0$export$20183a0484ce21a0) {
                    gl.blendEquation(gl.FUNC_ADD);
                    currentBlendEquation = $04ce9c8dcd7d39f0$export$20183a0484ce21a0;
                    currentBlendEquationAlpha = $04ce9c8dcd7d39f0$export$20183a0484ce21a0;
                }
                if (premultipliedAlpha) switch(blending){
                    case $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case $04ce9c8dcd7d39f0$export$777d8f9551c2216b:
                        gl.blendFunc(gl.ONE, gl.ONE);
                        break;
                    case $04ce9c8dcd7d39f0$export$cdfa06f868e2e467:
                        gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                        break;
                    case $04ce9c8dcd7d39f0$export$4138e1c684b46a20:
                        gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                else switch(blending){
                    case $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case $04ce9c8dcd7d39f0$export$777d8f9551c2216b:
                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                        break;
                    case $04ce9c8dcd7d39f0$export$cdfa06f868e2e467:
                        gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                        break;
                    case $04ce9c8dcd7d39f0$export$4138e1c684b46a20:
                        gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                currentBlendSrc = null;
                currentBlendDst = null;
                currentBlendSrcAlpha = null;
                currentBlendDstAlpha = null;
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha;
            }
            return;
        }
        // custom blending
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
            gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
            currentBlendEquation = blendEquation;
            currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
            gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
            currentBlendSrc = blendSrc;
            currentBlendDst = blendDst;
            currentBlendSrcAlpha = blendSrcAlpha;
            currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
        material.side === $04ce9c8dcd7d39f0$export$3b296b6f144d5b03 ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
        let flipSided = material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace;
        if (frontFaceCW) flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === $04ce9c8dcd7d39f0$export$5b29a26d96ee6af0 && material.transparent === false ? setBlending($04ce9c8dcd7d39f0$export$63b8d6b580fc65ba) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        const stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
            stencilBuffer.setMask(material.stencilWriteMask);
            stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
            stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    //
    function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
            if (flipSided) gl.frontFace(gl.CW);
            else gl.frontFace(gl.CCW);
            currentFlipSided = flipSided;
        }
    }
    function setCullFace(cullFace) {
        if (cullFace !== $04ce9c8dcd7d39f0$export$3237e1f2c1ea1f44) {
            enable(gl.CULL_FACE);
            if (cullFace !== currentCullFace) {
                if (cullFace === $04ce9c8dcd7d39f0$export$b9a7b4fc5cb15f9b) gl.cullFace(gl.BACK);
                else if (cullFace === $04ce9c8dcd7d39f0$export$b8058bcc7037d3f3) gl.cullFace(gl.FRONT);
                else gl.cullFace(gl.FRONT_AND_BACK);
            }
        } else disable(gl.CULL_FACE);
        currentCullFace = cullFace;
    }
    function setLineWidth(width) {
        if (width !== currentLineWidth) {
            if (lineWidthAvailable) gl.lineWidth(width);
            currentLineWidth = width;
        }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
            enable(gl.POLYGON_OFFSET_FILL);
            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                gl.polygonOffset(factor, units);
                currentPolygonOffsetFactor = factor;
                currentPolygonOffsetUnits = units;
            }
        } else disable(gl.POLYGON_OFFSET_FILL);
    }
    function setScissorTest(scissorTest) {
        if (scissorTest) enable(gl.SCISSOR_TEST);
        else disable(gl.SCISSOR_TEST);
    }
    // texture
    function activeTexture(webglSlot) {
        if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
        }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
        if (webglSlot === undefined) {
            if (currentTextureSlot === null) webglSlot = gl.TEXTURE0 + maxTextures - 1;
            else webglSlot = currentTextureSlot;
        }
        let boundTexture = currentBoundTextures[webglSlot];
        if (boundTexture === undefined) {
            boundTexture = {
                type: undefined,
                texture: undefined
            };
            currentBoundTextures[webglSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
            if (currentTextureSlot !== webglSlot) {
                gl.activeTexture(webglSlot);
                currentTextureSlot = webglSlot;
            }
            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
            boundTexture.type = webglType;
            boundTexture.texture = webglTexture;
        }
    }
    function unbindTexture() {
        const boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== undefined && boundTexture.type !== undefined) {
            gl.bindTexture(boundTexture.type, null);
            boundTexture.type = undefined;
            boundTexture.texture = undefined;
        }
    }
    function compressedTexImage2D() {
        try {
            gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexImage3D() {
        try {
            gl.compressedTexImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texSubImage2D() {
        try {
            gl.texSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texSubImage3D() {
        try {
            gl.texSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexSubImage2D() {
        try {
            gl.compressedTexSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function compressedTexSubImage3D() {
        try {
            gl.compressedTexSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texStorage2D() {
        try {
            gl.texStorage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texStorage3D() {
        try {
            gl.texStorage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texImage2D() {
        try {
            gl.texImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    function texImage3D() {
        try {
            gl.texImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    }
    //
    function scissor(scissor) {
        if (currentScissor.equals(scissor) === false) {
            gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
            currentScissor.copy(scissor);
        }
    }
    function viewport(viewport) {
        if (currentViewport.equals(viewport) === false) {
            gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
            currentViewport.copy(viewport);
        }
    }
    function updateUBOMapping(uniformsGroup, program) {
        let mapping = uboProgramMap.get(program);
        if (mapping === undefined) {
            mapping = new WeakMap();
            uboProgramMap.set(program, mapping);
        }
        let blockIndex = mapping.get(uniformsGroup);
        if (blockIndex === undefined) {
            blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
            mapping.set(uniformsGroup, blockIndex);
        }
    }
    function uniformBlockBinding(uniformsGroup, program) {
        const mapping = uboProgramMap.get(program);
        const blockIndex = mapping.get(uniformsGroup);
        if (uboBindings.get(program) !== blockIndex) {
            // bind shader specific block index to global block point
            gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
            uboBindings.set(program, blockIndex);
        }
    }
    //
    function reset() {
        // reset state
        gl.disable(gl.BLEND);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.disable(gl.SCISSOR_TEST);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.clearDepth(1);
        gl.stencilMask(0xffffffff);
        gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearStencil(0);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.polygonOffset(0, 0);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        if (isWebGL2 === true) {
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // reset internals
        enabledCapabilities = {};
        currentTextureSlot = null;
        currentBoundTextures = {};
        currentBoundFramebuffers = {};
        currentDrawbuffers = new WeakMap();
        defaultDrawbuffers = [];
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
    }
    return {
        buffers: {
            color: colorBuffer,
            depth: depthBuffer,
            stencil: stencilBuffer
        },
        enable: enable,
        disable: disable,
        bindFramebuffer: bindFramebuffer,
        drawBuffers: drawBuffers,
        useProgram: useProgram,
        setBlending: setBlending,
        setMaterial: setMaterial,
        setFlipSided: setFlipSided,
        setCullFace: setCullFace,
        setLineWidth: setLineWidth,
        setPolygonOffset: setPolygonOffset,
        setScissorTest: setScissorTest,
        activeTexture: activeTexture,
        bindTexture: bindTexture,
        unbindTexture: unbindTexture,
        compressedTexImage2D: compressedTexImage2D,
        compressedTexImage3D: compressedTexImage3D,
        texImage2D: texImage2D,
        texImage3D: texImage3D,
        updateUBOMapping: updateUBOMapping,
        uniformBlockBinding: uniformBlockBinding,
        texStorage2D: texStorage2D,
        texStorage3D: texStorage3D,
        texSubImage2D: texSubImage2D,
        texSubImage3D: texSubImage3D,
        compressedTexSubImage2D: compressedTexSubImage2D,
        compressedTexSubImage3D: compressedTexSubImage3D,
        scissor: scissor,
        viewport: viewport,
        reset: reset
    };
}
function $04ce9c8dcd7d39f0$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _videoTextures = new WeakMap();
    let _canvas;
    const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
    // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
    let useOffscreenCanvas = false;
    try {
        useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    // Ignore any errors
    }
    function createCanvas(width, height) {
        // Use OffscreenCanvas when available. Specially needed in web workers
        return useOffscreenCanvas ? // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height) : $04ce9c8dcd7d39f0$var$createElementNS("canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        let scale = 1;
        // handle case if texture exceeds max size
        if (image.width > maxSize || image.height > maxSize) scale = maxSize / Math.max(image.width, image.height);
        // only perform resize if necessary
        if (scale < 1 || needsPowerOfTwo === true) {
            // only perform resize for certain image types
            if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
                const floor = needsPowerOfTwo ? $04ce9c8dcd7d39f0$var$floorPowerOfTwo : Math.floor;
                const width = floor(scale * image.width);
                const height = floor(scale * image.height);
                if (_canvas === undefined) _canvas = createCanvas(width, height);
                // cube textures can't reuse the same canvas
                const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                canvas.width = width;
                canvas.height = height;
                const context = canvas.getContext("2d");
                context.drawImage(image, 0, 0, width, height);
                console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
                return canvas;
            } else {
                if ("data" in image) console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
                return image;
            }
        }
        return image;
    }
    function isPowerOfTwo$1(image) {
        return $04ce9c8dcd7d39f0$var$isPowerOfTwo(image.width) && $04ce9c8dcd7d39f0$var$isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2) return false;
        return texture.wrapS !== $04ce9c8dcd7d39f0$export$9d9334239a5a5e06 || texture.wrapT !== $04ce9c8dcd7d39f0$export$9d9334239a5a5e06 || texture.minFilter !== $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 && texture.minFilter !== $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 && texture.minFilter !== $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
    }
    function generateMipmap(target) {
        _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace1, forceLinearTransfer = false) {
        if (isWebGL2 === false) return glFormat;
        if (internalFormatName !== null) {
            if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
        }
        let internalFormat = glFormat;
        if (glFormat === _gl.RED) {
            if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
        }
        if (glFormat === _gl.RED_INTEGER) {
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
            if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
            if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
            if (glType === _gl.BYTE) internalFormat = _gl.R8I;
            if (glType === _gl.SHORT) internalFormat = _gl.R16I;
            if (glType === _gl.INT) internalFormat = _gl.R32I;
        }
        if (glFormat === _gl.RG) {
            if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
        }
        if (glFormat === _gl.RGBA) {
            if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
            if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
            if (glType === _gl.UNSIGNED_BYTE) internalFormat = colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa && forceLinearTransfer === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
            if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
            if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
        }
        if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) extensions.get("EXT_color_buffer_float");
        return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
        if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 && texture.minFilter !== $04ce9c8dcd7d39f0$export$8a72f490b25c56c8) return Math.log2(Math.max(image.width, image.height)) + 1;
        else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) // user-defined mipmaps
        return texture.mipmaps.length;
        else if (texture.isCompressedTexture && Array.isArray(texture.image)) return image.mipmaps.length;
        else // texture without mipmaps (only base level)
        return 1;
    }
    // Fallback filters for non-power-of-2 textures
    function filterFallback(f) {
        if (f === $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 || f === $04ce9c8dcd7d39f0$export$d129e38cf6feaa8c || f === $04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2) return _gl.NEAREST;
        return _gl.LINEAR;
    }
    //
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) _videoTextures.delete(texture);
    }
    function onRenderTargetDispose(event) {
        const renderTarget = event.target;
        renderTarget.removeEventListener("dispose", onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
    }
    //
    function deallocateTexture(texture) {
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === undefined) return;
        // check if it's necessary to remove the WebGLTexture object
        const source = texture.source;
        const webglTextures = _sources.get(source);
        if (webglTextures) {
            const webglTexture = webglTextures[textureProperties.__cacheKey];
            webglTexture.usedTimes--;
            // the WebGLTexture object is not used anymore, remove it
            if (webglTexture.usedTimes === 0) deleteTexture(texture);
            // remove the weak map entry if no WebGLTexture uses the source anymore
            if (Object.keys(webglTextures).length === 0) _sources.delete(source);
        }
        properties.remove(texture);
    }
    function deleteTexture(texture) {
        const textureProperties = properties.get(texture);
        _gl.deleteTexture(textureProperties.__webglTexture);
        const source = texture.source;
        const webglTextures = _sources.get(source);
        delete webglTextures[textureProperties.__cacheKey];
        info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglTexture !== undefined) {
            _gl.deleteTexture(textureProperties.__webglTexture);
            info.memory.textures--;
        }
        if (renderTarget.depthTexture) renderTarget.depthTexture.dispose();
        if (renderTarget.isWebGLCubeRenderTarget) for(let i = 0; i < 6; i++){
            if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) for(let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
            else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
        else {
            if (Array.isArray(renderTargetProperties.__webglFramebuffer)) for(let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
            else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
            if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
            if (renderTargetProperties.__webglColorRenderbuffer) {
                for(let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++)if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
            }
            if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) for(let i = 0, il = texture.length; i < il; i++){
            const attachmentProperties = properties.get(texture[i]);
            if (attachmentProperties.__webglTexture) {
                _gl.deleteTexture(attachmentProperties.__webglTexture);
                info.memory.textures--;
            }
            properties.remove(texture[i]);
        }
        properties.remove(texture);
        properties.remove(renderTarget);
    }
    //
    let textureUnits = 0;
    function resetTextureUnits() {
        textureUnits = 0;
    }
    function allocateTextureUnit() {
        const textureUnit = textureUnits;
        if (textureUnit >= maxTextures) console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
        textureUnits += 1;
        return textureUnit;
    }
    function getTextureCacheKey(texture) {
        const array = [];
        array.push(texture.wrapS);
        array.push(texture.wrapT);
        array.push(texture.wrapR || 0);
        array.push(texture.magFilter);
        array.push(texture.minFilter);
        array.push(texture.anisotropy);
        array.push(texture.internalFormat);
        array.push(texture.format);
        array.push(texture.type);
        array.push(texture.generateMipmaps);
        array.push(texture.premultiplyAlpha);
        array.push(texture.flipY);
        array.push(texture.unpackAlignment);
        array.push(texture.colorSpace);
        return array.join();
    }
    //
    function setTexture2D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.isVideoTexture) updateVideoTexture(texture);
        if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
            const image = texture.image;
            if (image === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
            else if (image.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
        }
        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadCubeTexture(textureProperties, texture, slot);
            return;
        }
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
        [$04ce9c8dcd7d39f0$export$533346c8e8dac0f5]: _gl.REPEAT,
        [$04ce9c8dcd7d39f0$export$9d9334239a5a5e06]: _gl.CLAMP_TO_EDGE,
        [$04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
        [$04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0]: _gl.NEAREST,
        [$04ce9c8dcd7d39f0$export$d129e38cf6feaa8c]: _gl.NEAREST_MIPMAP_NEAREST,
        [$04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2]: _gl.NEAREST_MIPMAP_LINEAR,
        [$04ce9c8dcd7d39f0$export$8a72f490b25c56c8]: _gl.LINEAR,
        [$04ce9c8dcd7d39f0$export$19a719f377145a13]: _gl.LINEAR_MIPMAP_NEAREST,
        [$04ce9c8dcd7d39f0$export$5d8599b6a933fb1b]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
        [$04ce9c8dcd7d39f0$export$d9e2d19a747baaab]: _gl.NEVER,
        [$04ce9c8dcd7d39f0$export$187b73a3e352c145]: _gl.ALWAYS,
        [$04ce9c8dcd7d39f0$export$36bcf49c713b3eb7]: _gl.LESS,
        [$04ce9c8dcd7d39f0$export$64eea11eb407ddf1]: _gl.LEQUAL,
        [$04ce9c8dcd7d39f0$export$66f28d946fc6a0d5]: _gl.EQUAL,
        [$04ce9c8dcd7d39f0$export$1cdcb70d53d65f61]: _gl.GEQUAL,
        [$04ce9c8dcd7d39f0$export$155af022118f3a38]: _gl.GREATER,
        [$04ce9c8dcd7d39f0$export$67ab95dde6bed156]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
            if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
        } else {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
            if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
            if (texture.wrapS !== $04ce9c8dcd7d39f0$export$9d9334239a5a5e06 || texture.wrapT !== $04ce9c8dcd7d39f0$export$9d9334239a5a5e06) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
            if (texture.minFilter !== $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0 && texture.minFilter !== $04ce9c8dcd7d39f0$export$8a72f490b25c56c8) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
        if (texture.compareFunction) {
            _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
            _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
        }
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            const extension = extensions.get("EXT_texture_filter_anisotropic");
            if (texture.magFilter === $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0) return;
            if (texture.minFilter !== $04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2 && texture.minFilter !== $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b) return;
            if (texture.type === $04ce9c8dcd7d39f0$export$f6d331659b644596 && extensions.has("OES_texture_float_linear") === false) return; // verify extension for WebGL 1 and WebGL 2
            if (isWebGL2 === false && texture.type === $04ce9c8dcd7d39f0$export$2697304443f382bc && extensions.has("OES_texture_half_float_linear") === false) return; // verify extension for WebGL 1 only
            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                properties.get(texture).__currentAnisotropy = texture.anisotropy;
            }
        }
    }
    function initTexture(textureProperties, texture) {
        let forceUpload = false;
        if (textureProperties.__webglInit === undefined) {
            textureProperties.__webglInit = true;
            texture.addEventListener("dispose", onTextureDispose);
        }
        // create Source <-> WebGLTextures mapping if necessary
        const source = texture.source;
        let webglTextures = _sources.get(source);
        if (webglTextures === undefined) {
            webglTextures = {};
            _sources.set(source, webglTextures);
        }
        // check if there is already a WebGLTexture object for the given texture parameters
        const textureCacheKey = getTextureCacheKey(texture);
        if (textureCacheKey !== textureProperties.__cacheKey) {
            // if not, create a new instance of WebGLTexture
            if (webglTextures[textureCacheKey] === undefined) {
                // create new entry
                webglTextures[textureCacheKey] = {
                    texture: _gl.createTexture(),
                    usedTimes: 0
                };
                info.memory.textures++;
                // when a new instance of WebGLTexture was created, a texture upload is required
                // even if the image contents are identical
                forceUpload = true;
            }
            webglTextures[textureCacheKey].usedTimes++;
            // every time the texture cache key changes, it's necessary to check if an instance of
            // WebGLTexture can be deleted in order to avoid a memory leak.
            const webglTexture = webglTextures[textureProperties.__cacheKey];
            if (webglTexture !== undefined) {
                webglTextures[textureProperties.__cacheKey].usedTimes--;
                if (webglTexture.usedTimes === 0) deleteTexture(texture);
            }
            // store references to cache key and WebGLTexture object
            textureProperties.__cacheKey = textureCacheKey;
            textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
        }
        return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
        let textureType = _gl.TEXTURE_2D;
        if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
        if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
            state.activeTexture(_gl.TEXTURE0 + slot);
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
            _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
            const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
            let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
            image = verifyColorSpace(texture, image);
            const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace);
            let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
            setTextureParameters(textureType, texture, supportsMips);
            let mipmap;
            const mipmaps = texture.mipmaps;
            const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
            const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
            const levels = getMipLevels(texture, image, supportsMips);
            if (texture.isDepthTexture) {
                // populate depth texture with dummy data
                glInternalFormat = _gl.DEPTH_COMPONENT;
                if (isWebGL2) {
                    if (texture.type === $04ce9c8dcd7d39f0$export$f6d331659b644596) glInternalFormat = _gl.DEPTH_COMPONENT32F;
                    else if (texture.type === $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96) glInternalFormat = _gl.DEPTH_COMPONENT24;
                    else if (texture.type === $04ce9c8dcd7d39f0$export$6c8ea339bfab1301) glInternalFormat = _gl.DEPTH24_STENCIL8;
                    else glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D
                } else if (texture.type === $04ce9c8dcd7d39f0$export$f6d331659b644596) console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
                // validation checks for WebGL 1
                if (texture.format === $04ce9c8dcd7d39f0$export$c1b6b5136be58045 && glInternalFormat === _gl.DEPTH_COMPONENT) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                {
                    if (texture.type !== $04ce9c8dcd7d39f0$export$c63dc51868b06a9d && texture.type !== $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96) {
                        console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                        texture.type = $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96;
                        glType = utils.convert(texture.type);
                    }
                }
                if (texture.format === $04ce9c8dcd7d39f0$export$1e113ac2d0905829 && glInternalFormat === _gl.DEPTH_COMPONENT) {
                    // Depth stencil textures need the DEPTH_STENCIL internal format
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    glInternalFormat = _gl.DEPTH_STENCIL;
                    // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                    // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    if (texture.type !== $04ce9c8dcd7d39f0$export$6c8ea339bfab1301) {
                        console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                        texture.type = $04ce9c8dcd7d39f0$export$6c8ea339bfab1301;
                        glType = utils.convert(texture.type);
                    }
                }
                //
                if (allocateMemory) {
                    if (useTexStorage) state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
                    else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
                }
            } else if (texture.isDataTexture) {
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
                if (mipmaps.length > 0 && supportsMips) {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                    texture.generateMipmaps = false;
                } else if (useTexStorage) {
                    if (allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
                } else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            } else if (texture.isCompressedTexture) {
                if (texture.isCompressedArrayTexture) {
                    if (useTexStorage && allocateMemory) state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (texture.format !== $04ce9c8dcd7d39f0$export$3f8bb04b555a363c) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                                else state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                        } else if (useTexStorage) state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                        else state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                    }
                } else {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (texture.format !== $04ce9c8dcd7d39f0$export$3f8bb04b555a363c) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                                else state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                        } else if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                }
            } else if (texture.isDataArrayTexture) {
                if (useTexStorage) {
                    if (allocateMemory) state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
                    state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
                } else state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            } else if (texture.isData3DTexture) {
                if (useTexStorage) {
                    if (allocateMemory) state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
                    state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
                } else state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            } else if (texture.isFramebufferTexture) {
                if (allocateMemory) {
                    if (useTexStorage) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    else {
                        let width = image.width, height = image.height;
                        for(let i = 0; i < levels; i++){
                            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                            width >>= 1;
                            height >>= 1;
                        }
                    }
                }
            } else {
                // regular Texture (image, video, canvas)
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
                if (mipmaps.length > 0 && supportsMips) {
                    if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                    for(let i = 0, il = mipmaps.length; i < il; i++){
                        mipmap = mipmaps[i];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
                        else state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
                    }
                    texture.generateMipmaps = false;
                } else if (useTexStorage) {
                    if (allocateMemory) state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                    state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
                } else state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(textureType);
            sourceProperties.__version = source.version;
            if (texture.onUpdate) texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6) return;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
            state.activeTexture(_gl.TEXTURE0 + slot);
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
            _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
            const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
            const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
            const cubeImage = [];
            for(let i = 0; i < 6; i++){
                if (!isCompressed && !isDataTexture) cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
                else cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
                cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
            }
            const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
            const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
            const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
            let levels = getMipLevels(texture, image, supportsMips);
            setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
            let mipmaps;
            if (isCompressed) {
                if (useTexStorage && allocateMemory) state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
                for(let i = 0; i < 6; i++){
                    mipmaps = cubeImage[i].mipmaps;
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        if (texture.format !== $04ce9c8dcd7d39f0$export$3f8bb04b555a363c) {
                            if (glFormat !== null) {
                                if (useTexStorage) state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                                else state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                            } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                        } else if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    }
                }
            } else {
                mipmaps = texture.mipmaps;
                if (useTexStorage && allocateMemory) {
                    // TODO: Uniformly handle mipmap definitions
                    // Normal textures and compressed cube textures define base level + mips with their mipmap array
                    // Uncompressed cube textures use their mipmap array only for mips (no base level)
                    if (mipmaps.length > 0) levels++;
                    state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
                }
                for(let i = 0; i < 6; i++)if (isDataTexture) {
                    if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                    else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        const mipmapImage = mipmap.image[i].image;
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                    }
                } else {
                    if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                    else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
                    for(let j = 0; j < mipmaps.length; j++){
                        const mipmap = mipmaps[j];
                        if (useTexStorage) state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                        else state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                    }
                }
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) // We assume images for cube map have the same size.
            generateMipmap(_gl.TEXTURE_CUBE_MAP);
            sourceProperties.__version = source.version;
            if (texture.onUpdate) texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
    }
    // Render targets
    // Setup storage for target texture and bind it to correct framebuffer
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const renderTargetProperties = properties.get(renderTarget);
        if (!renderTargetProperties.__hasExternalTextures) {
            const width = Math.max(1, renderTarget.width >> level);
            const height = Math.max(1, renderTarget.height >> level);
            if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
            else state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
        else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, level);
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            let glInternalFormat = _gl.DEPTH_COMPONENT16;
            if (isMultisample || useMultisampledRTT(renderTarget)) {
                const depthTexture = renderTarget.depthTexture;
                if (depthTexture && depthTexture.isDepthTexture) {
                    if (depthTexture.type === $04ce9c8dcd7d39f0$export$f6d331659b644596) glInternalFormat = _gl.DEPTH_COMPONENT32F;
                    else if (depthTexture.type === $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96) glInternalFormat = _gl.DEPTH_COMPONENT24;
                }
                const samples = getRenderTargetSamples(renderTarget);
                if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && useMultisampledRTT(renderTarget) === false) _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
            else if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else {
            const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
                renderTarget.texture
            ];
            for(let i = 0; i < textures.length; i++){
                const texture = textures[i];
                const glFormat = utils.convert(texture.format, texture.colorSpace);
                const glType = utils.convert(texture.type);
                const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
                const samples = getRenderTargetSamples(renderTarget);
                if (isMultisample && useMultisampledRTT(renderTarget) === false) _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else if (useMultisampledRTT(renderTarget)) multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
            }
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    // Setup resources for a Depth Texture for a FBO (needs an extension)
    function setupDepthTexture(framebuffer, renderTarget) {
        const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        // upload an empty depth texture with framebuffer size
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
            renderTarget.depthTexture.image.width = renderTarget.width;
            renderTarget.depthTexture.image.height = renderTarget.height;
            renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        const samples = getRenderTargetSamples(renderTarget);
        if (renderTarget.depthTexture.format === $04ce9c8dcd7d39f0$export$c1b6b5136be58045) {
            if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        } else if (renderTarget.depthTexture.format === $04ce9c8dcd7d39f0$export$1e113ac2d0905829) {
            if (useMultisampledRTT(renderTarget)) multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        } else throw new Error("Unknown depthTexture format");
    }
    // Setup GL resources for a non-texture depth buffer
    function setupDepthRenderbuffer(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
            if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for(let i = 0; i < 6; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
                renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            }
        } else {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    // rebind framebuffer with external textures
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
        const renderTargetProperties = properties.get(renderTarget);
        if (colorTexture !== undefined) setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
        if (depthTexture !== undefined) setupDepthRenderbuffer(renderTarget);
    }
    // Set up GL resources for the render target
    function setupRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        renderTarget.addEventListener("dispose", onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
            if (textureProperties.__webglTexture === undefined) textureProperties.__webglTexture = _gl.createTexture();
            textureProperties.__version = texture.version;
            info.memory.textures++;
        }
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        // Setup framebuffer
        if (isCube) {
            renderTargetProperties.__webglFramebuffer = [];
            for(let i = 0; i < 6; i++)if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
                renderTargetProperties.__webglFramebuffer[i] = [];
                for(let level = 0; level < texture.mipmaps.length; level++)renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
            } else renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        } else {
            if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
                renderTargetProperties.__webglFramebuffer = [];
                for(let level = 0; level < texture.mipmaps.length; level++)renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
            } else renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
            if (isMultipleRenderTargets) {
                if (capabilities.drawBuffers) {
                    const textures = renderTarget.texture;
                    for(let i = 0, il = textures.length; i < il; i++){
                        const attachmentProperties = properties.get(textures[i]);
                        if (attachmentProperties.__webglTexture === undefined) {
                            attachmentProperties.__webglTexture = _gl.createTexture();
                            info.memory.textures++;
                        }
                    }
                } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            }
            if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
                const textures = isMultipleRenderTargets ? texture : [
                    texture
                ];
                renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                renderTargetProperties.__webglColorRenderbuffer = [];
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                for(let i = 0; i < textures.length; i++){
                    const texture = textures[i];
                    renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
                    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                    const glFormat = utils.convert(texture.format, texture.colorSpace);
                    const glType = utils.convert(texture.type);
                    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true);
                    const samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                }
                _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
                if (renderTarget.depthBuffer) {
                    renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                    setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
                }
                state.bindFramebuffer(_gl.FRAMEBUFFER, null);
            }
        }
        // Setup color buffer
        if (isCube) {
            state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
            setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
            for(let i = 0; i < 6; i++){
                if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) for(let level = 0; level < texture.mipmaps.length; level++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
                else setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
            }
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(_gl.TEXTURE_CUBE_MAP);
            state.unbindTexture();
        } else if (isMultipleRenderTargets) {
            const textures = renderTarget.texture;
            for(let i = 0, il = textures.length; i < il; i++){
                const attachment = textures[i];
                const attachmentProperties = properties.get(attachment);
                state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
                setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
                if (textureNeedsGenerateMipmaps(attachment, supportsMips)) generateMipmap(_gl.TEXTURE_2D);
            }
            state.unbindTexture();
        } else {
            let glTextureType = _gl.TEXTURE_2D;
            if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
                if (isWebGL2) glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
                else console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
            }
            state.bindTexture(glTextureType, textureProperties.__webglTexture);
            setTextureParameters(glTextureType, texture, supportsMips);
            if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) for(let level = 0; level < texture.mipmaps.length; level++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
            else setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(glTextureType);
            state.unbindTexture();
        }
        // Setup depth and stencil buffers
        if (renderTarget.depthBuffer) setupDepthRenderbuffer(renderTarget);
    }
    function updateRenderTargetMipmap(renderTarget) {
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
            renderTarget.texture
        ];
        for(let i = 0, il = textures.length; i < il; i++){
            const texture = textures[i];
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
                const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
                const webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture);
                generateMipmap(target);
                state.unbindTexture();
            }
        }
    }
    function updateMultisampleRenderTarget(renderTarget) {
        if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
            const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [
                renderTarget.texture
            ];
            const width = renderTarget.width;
            const height = renderTarget.height;
            let mask = _gl.COLOR_BUFFER_BIT;
            const invalidationArray = [];
            const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderTargetProperties = properties.get(renderTarget);
            const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
            // If MRT we need to remove FBO attachments
            if (isMultipleRenderTargets) for(let i = 0; i < textures.length; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
            }
            state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            for(let i = 0; i < textures.length; i++){
                invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
                if (renderTarget.depthBuffer) invalidationArray.push(depthStyle);
                const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;
                if (ignoreDepthValues === false) {
                    if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
                    if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
                }
                if (isMultipleRenderTargets) _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                if (ignoreDepthValues === true) {
                    _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [
                        depthStyle
                    ]);
                    _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [
                        depthStyle
                    ]);
                }
                if (isMultipleRenderTargets) {
                    const webglTexture = properties.get(textures[i]).__webglTexture;
                    _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
                }
                _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
                if (supportsInvalidateFramebuffer) _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
            }
            state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
            // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
            if (isMultipleRenderTargets) for(let i = 0; i < textures.length; i++){
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
                _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
                const webglTexture = properties.get(textures[i]).__webglTexture;
                state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
            }
            state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        }
    }
    function getRenderTargetSamples(renderTarget) {
        return Math.min(maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        return isWebGL2 && renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
        const frame = info.render.frame;
        // Check the last frame we updated the VideoTexture
        if (_videoTextures.get(texture) !== frame) {
            _videoTextures.set(texture, frame);
            texture.update();
        }
    }
    function verifyColorSpace(texture, image) {
        const colorSpace1 = texture.colorSpace;
        const format = texture.format;
        const type = texture.type;
        if (texture.isCompressedTexture === true || texture.format === $04ce9c8dcd7d39f0$export$ca1dce8b5e1de74d) return image;
        if (colorSpace1 !== $04ce9c8dcd7d39f0$export$42429b3acfb233a4 && colorSpace1 !== $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51) {
            // sRGB
            if (colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
                if (isWebGL2 === false) {
                    // in WebGL 1, try to use EXT_sRGB extension and unsized formats
                    if (extensions.has("EXT_sRGB") === true && format === $04ce9c8dcd7d39f0$export$3f8bb04b555a363c) {
                        texture.format = $04ce9c8dcd7d39f0$export$ca1dce8b5e1de74d;
                        // it's not possible to generate mips in WebGL 1 with this extension
                        texture.minFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
                        texture.generateMipmaps = false;
                    } else // slow fallback (CPU decode)
                    image = $04ce9c8dcd7d39f0$export$698882cf06df44aa.sRGBToLinear(image);
                } else // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
                if (format !== $04ce9c8dcd7d39f0$export$3f8bb04b555a363c || type !== $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10) console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
            } else console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace1);
        }
        return image;
    }
    //
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
}
function $04ce9c8dcd7d39f0$export$ddaebcad857649a8(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p, colorSpace1 = $04ce9c8dcd7d39f0$export$bfcb490c2dd3db51) {
        let extension;
        if (p === $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10) return gl.UNSIGNED_BYTE;
        if (p === $04ce9c8dcd7d39f0$export$b3969b01faf587f2) return gl.UNSIGNED_SHORT_4_4_4_4;
        if (p === $04ce9c8dcd7d39f0$export$18886f8ae33e90de) return gl.UNSIGNED_SHORT_5_5_5_1;
        if (p === $04ce9c8dcd7d39f0$export$545fce0311a9796a) return gl.BYTE;
        if (p === $04ce9c8dcd7d39f0$export$88572337f312435f) return gl.SHORT;
        if (p === $04ce9c8dcd7d39f0$export$c63dc51868b06a9d) return gl.UNSIGNED_SHORT;
        if (p === $04ce9c8dcd7d39f0$export$5c612977753abe2) return gl.INT;
        if (p === $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96) return gl.UNSIGNED_INT;
        if (p === $04ce9c8dcd7d39f0$export$f6d331659b644596) return gl.FLOAT;
        if (p === $04ce9c8dcd7d39f0$export$2697304443f382bc) {
            if (isWebGL2) return gl.HALF_FLOAT;
            extension = extensions.get("OES_texture_half_float");
            if (extension !== null) return extension.HALF_FLOAT_OES;
            else return null;
        }
        if (p === $04ce9c8dcd7d39f0$export$988473390501ed4b) return gl.ALPHA;
        if (p === $04ce9c8dcd7d39f0$export$3f8bb04b555a363c) return gl.RGBA;
        if (p === $04ce9c8dcd7d39f0$export$cc09ccbf6d1ed449) return gl.LUMINANCE;
        if (p === $04ce9c8dcd7d39f0$export$9053a81c4a69c289) return gl.LUMINANCE_ALPHA;
        if (p === $04ce9c8dcd7d39f0$export$c1b6b5136be58045) return gl.DEPTH_COMPONENT;
        if (p === $04ce9c8dcd7d39f0$export$1e113ac2d0905829) return gl.DEPTH_STENCIL;
        // WebGL 1 sRGB fallback
        if (p === $04ce9c8dcd7d39f0$export$ca1dce8b5e1de74d) {
            extension = extensions.get("EXT_sRGB");
            if (extension !== null) return extension.SRGB_ALPHA_EXT;
            else return null;
        }
        // WebGL2 formats.
        if (p === $04ce9c8dcd7d39f0$export$4e041a7967d15c4b) return gl.RED;
        if (p === $04ce9c8dcd7d39f0$export$aa92e870a709d190) return gl.RED_INTEGER;
        if (p === $04ce9c8dcd7d39f0$export$6cdf0b461c7ce8a0) return gl.RG;
        if (p === $04ce9c8dcd7d39f0$export$1ba1c45f9f77d4d7) return gl.RG_INTEGER;
        if (p === $04ce9c8dcd7d39f0$export$c200e7d26f592f21) return gl.RGBA_INTEGER;
        // S3TC
        if (p === $04ce9c8dcd7d39f0$export$21d1799c6d552fc0 || p === $04ce9c8dcd7d39f0$export$afa304c3e981b668 || p === $04ce9c8dcd7d39f0$export$d2a1a68024a3e56c || p === $04ce9c8dcd7d39f0$export$9a79c424327dacf9) {
            if (colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa) {
                extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
                if (extension !== null) {
                    if (p === $04ce9c8dcd7d39f0$export$21d1799c6d552fc0) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$afa304c3e981b668) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$d2a1a68024a3e56c) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$9a79c424327dacf9) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                } else return null;
            } else {
                extension = extensions.get("WEBGL_compressed_texture_s3tc");
                if (extension !== null) {
                    if (p === $04ce9c8dcd7d39f0$export$21d1799c6d552fc0) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$afa304c3e981b668) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$d2a1a68024a3e56c) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    if (p === $04ce9c8dcd7d39f0$export$9a79c424327dacf9) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                } else return null;
            }
        }
        // PVRTC
        if (p === $04ce9c8dcd7d39f0$export$19ada9bbb1af3573 || p === $04ce9c8dcd7d39f0$export$d0f0355bb3d948e4 || p === $04ce9c8dcd7d39f0$export$b82296714358084c || p === $04ce9c8dcd7d39f0$export$b71692456c47b6c3) {
            extension = extensions.get("WEBGL_compressed_texture_pvrtc");
            if (extension !== null) {
                if (p === $04ce9c8dcd7d39f0$export$19ada9bbb1af3573) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (p === $04ce9c8dcd7d39f0$export$d0f0355bb3d948e4) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (p === $04ce9c8dcd7d39f0$export$b82296714358084c) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (p === $04ce9c8dcd7d39f0$export$b71692456c47b6c3) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            } else return null;
        }
        // ETC1
        if (p === $04ce9c8dcd7d39f0$export$6ab91af2d757aee7) {
            extension = extensions.get("WEBGL_compressed_texture_etc1");
            if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
            else return null;
        }
        // ETC2
        if (p === $04ce9c8dcd7d39f0$export$7800993ef8106a6a || p === $04ce9c8dcd7d39f0$export$23ed8300a860e7d8) {
            extension = extensions.get("WEBGL_compressed_texture_etc");
            if (extension !== null) {
                if (p === $04ce9c8dcd7d39f0$export$7800993ef8106a6a) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
                if (p === $04ce9c8dcd7d39f0$export$23ed8300a860e7d8) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
            } else return null;
        }
        // ASTC
        if (p === $04ce9c8dcd7d39f0$export$dc5570b4a2b92d48 || p === $04ce9c8dcd7d39f0$export$68880cd325f8b2fb || p === $04ce9c8dcd7d39f0$export$7d2c0be323373d95 || p === $04ce9c8dcd7d39f0$export$22b52da301fc3a3e || p === $04ce9c8dcd7d39f0$export$c009e2cb4a66485e || p === $04ce9c8dcd7d39f0$export$118fff5afa255b63 || p === $04ce9c8dcd7d39f0$export$120713c829ae0667 || p === $04ce9c8dcd7d39f0$export$c79eeabbf53313e9 || p === $04ce9c8dcd7d39f0$export$443cf6567cdd6424 || p === $04ce9c8dcd7d39f0$export$6573984fc9840780 || p === $04ce9c8dcd7d39f0$export$e7aee563f30091de || p === $04ce9c8dcd7d39f0$export$2eb8634622ddeab7 || p === $04ce9c8dcd7d39f0$export$202b1ce7b5d25742 || p === $04ce9c8dcd7d39f0$export$18ab77abd087e467) {
            extension = extensions.get("WEBGL_compressed_texture_astc");
            if (extension !== null) {
                if (p === $04ce9c8dcd7d39f0$export$dc5570b4a2b92d48) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
                if (p === $04ce9c8dcd7d39f0$export$68880cd325f8b2fb) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
                if (p === $04ce9c8dcd7d39f0$export$7d2c0be323373d95) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
                if (p === $04ce9c8dcd7d39f0$export$22b52da301fc3a3e) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
                if (p === $04ce9c8dcd7d39f0$export$c009e2cb4a66485e) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
                if (p === $04ce9c8dcd7d39f0$export$118fff5afa255b63) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
                if (p === $04ce9c8dcd7d39f0$export$120713c829ae0667) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
                if (p === $04ce9c8dcd7d39f0$export$c79eeabbf53313e9) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
                if (p === $04ce9c8dcd7d39f0$export$443cf6567cdd6424) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
                if (p === $04ce9c8dcd7d39f0$export$6573984fc9840780) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
                if (p === $04ce9c8dcd7d39f0$export$e7aee563f30091de) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
                if (p === $04ce9c8dcd7d39f0$export$2eb8634622ddeab7) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
                if (p === $04ce9c8dcd7d39f0$export$202b1ce7b5d25742) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
                if (p === $04ce9c8dcd7d39f0$export$18ab77abd087e467) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
            } else return null;
        }
        // BPTC
        if (p === $04ce9c8dcd7d39f0$export$ce40b115e188bc81) {
            extension = extensions.get("EXT_texture_compression_bptc");
            if (extension !== null) {
                if (p === $04ce9c8dcd7d39f0$export$ce40b115e188bc81) return colorSpace1 === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
            } else return null;
        }
        // RGTC
        if (p === $04ce9c8dcd7d39f0$export$b1688df4c4c21670 || p === $04ce9c8dcd7d39f0$export$fc15e5d8261eed58 || p === $04ce9c8dcd7d39f0$export$d220f6ade8463a0f || p === $04ce9c8dcd7d39f0$export$768646d09dc1b6ef) {
            extension = extensions.get("EXT_texture_compression_rgtc");
            if (extension !== null) {
                if (p === $04ce9c8dcd7d39f0$export$ce40b115e188bc81) return extension.COMPRESSED_RED_RGTC1_EXT;
                if (p === $04ce9c8dcd7d39f0$export$fc15e5d8261eed58) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
                if (p === $04ce9c8dcd7d39f0$export$d220f6ade8463a0f) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
                if (p === $04ce9c8dcd7d39f0$export$768646d09dc1b6ef) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
            } else return null;
        }
        //
        if (p === $04ce9c8dcd7d39f0$export$6c8ea339bfab1301) {
            if (isWebGL2) return gl.UNSIGNED_INT_24_8;
            extension = extensions.get("WEBGL_depth_texture");
            if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
            else return null;
        }
        // if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
        return gl[p] !== undefined ? gl[p] : null;
    }
    return {
        convert: convert
    };
}
class $04ce9c8dcd7d39f0$export$56b937d9e5581166 extends $04ce9c8dcd7d39f0$export$74e4ae24825f68d7 {
    constructor(array = []){
        super();
        this.isArrayCamera = true;
        this.cameras = array;
    }
}
class $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.isGroup = true;
        this.type = "Group";
    }
}
const $04ce9c8dcd7d39f0$var$_moveEvent = {
    type: "move"
};
class $04ce9c8dcd7d39f0$var$WebXRController {
    constructor(){
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
    }
    getHandSpace() {
        if (this._hand === null) {
            this._hand = new $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4();
            this._hand.matrixAutoUpdate = false;
            this._hand.visible = false;
            this._hand.joints = {};
            this._hand.inputState = {
                pinching: false
            };
        }
        return this._hand;
    }
    getTargetRaySpace() {
        if (this._targetRay === null) {
            this._targetRay = new $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4();
            this._targetRay.matrixAutoUpdate = false;
            this._targetRay.visible = false;
            this._targetRay.hasLinearVelocity = false;
            this._targetRay.linearVelocity = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            this._targetRay.hasAngularVelocity = false;
            this._targetRay.angularVelocity = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        }
        return this._targetRay;
    }
    getGripSpace() {
        if (this._grip === null) {
            this._grip = new $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4();
            this._grip.matrixAutoUpdate = false;
            this._grip.visible = false;
            this._grip.hasLinearVelocity = false;
            this._grip.linearVelocity = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            this._grip.hasAngularVelocity = false;
            this._grip.angularVelocity = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        }
        return this._grip;
    }
    dispatchEvent(event) {
        if (this._targetRay !== null) this._targetRay.dispatchEvent(event);
        if (this._grip !== null) this._grip.dispatchEvent(event);
        if (this._hand !== null) this._hand.dispatchEvent(event);
        return this;
    }
    connect(inputSource) {
        if (inputSource && inputSource.hand) {
            const hand = this._hand;
            if (hand) for (const inputjoint of inputSource.hand.values())// Initialize hand with joints when connected
            this._getHandJoint(hand, inputjoint);
        }
        this.dispatchEvent({
            type: "connected",
            data: inputSource
        });
        return this;
    }
    disconnect(inputSource) {
        this.dispatchEvent({
            type: "disconnected",
            data: inputSource
        });
        if (this._targetRay !== null) this._targetRay.visible = false;
        if (this._grip !== null) this._grip.visible = false;
        if (this._hand !== null) this._hand.visible = false;
        return this;
    }
    update(inputSource, frame, referenceSpace) {
        let inputPose = null;
        let gripPose = null;
        let handPose = null;
        const targetRay = this._targetRay;
        const grip = this._grip;
        const hand = this._hand;
        if (inputSource && frame.session.visibilityState !== "visible-blurred") {
            if (hand && inputSource.hand) {
                handPose = true;
                for (const inputjoint of inputSource.hand.values()){
                    // Update the joints groups with the XRJoint poses
                    const jointPose = frame.getJointPose(inputjoint, referenceSpace);
                    // The transform of this joint will be updated with the joint pose on each frame
                    const joint = this._getHandJoint(hand, inputjoint);
                    if (jointPose !== null) {
                        joint.matrix.fromArray(jointPose.transform.matrix);
                        joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                        joint.matrixWorldNeedsUpdate = true;
                        joint.jointRadius = jointPose.radius;
                    }
                    joint.visible = jointPose !== null;
                }
                // Custom events
                // Check pinchz
                const indexTip = hand.joints["index-finger-tip"];
                const thumbTip = hand.joints["thumb-tip"];
                const distance = indexTip.position.distanceTo(thumbTip.position);
                const distanceToPinch = 0.02;
                const threshold = 0.005;
                if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                    hand.inputState.pinching = false;
                    this.dispatchEvent({
                        type: "pinchend",
                        handedness: inputSource.handedness,
                        target: this
                    });
                } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                    hand.inputState.pinching = true;
                    this.dispatchEvent({
                        type: "pinchstart",
                        handedness: inputSource.handedness,
                        target: this
                    });
                }
            } else if (grip !== null && inputSource.gripSpace) {
                gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
                if (gripPose !== null) {
                    grip.matrix.fromArray(gripPose.transform.matrix);
                    grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                    grip.matrixWorldNeedsUpdate = true;
                    if (gripPose.linearVelocity) {
                        grip.hasLinearVelocity = true;
                        grip.linearVelocity.copy(gripPose.linearVelocity);
                    } else grip.hasLinearVelocity = false;
                    if (gripPose.angularVelocity) {
                        grip.hasAngularVelocity = true;
                        grip.angularVelocity.copy(gripPose.angularVelocity);
                    } else grip.hasAngularVelocity = false;
                }
            }
            if (targetRay !== null) {
                inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
                // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
                if (inputPose === null && gripPose !== null) inputPose = gripPose;
                if (inputPose !== null) {
                    targetRay.matrix.fromArray(inputPose.transform.matrix);
                    targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                    targetRay.matrixWorldNeedsUpdate = true;
                    if (inputPose.linearVelocity) {
                        targetRay.hasLinearVelocity = true;
                        targetRay.linearVelocity.copy(inputPose.linearVelocity);
                    } else targetRay.hasLinearVelocity = false;
                    if (inputPose.angularVelocity) {
                        targetRay.hasAngularVelocity = true;
                        targetRay.angularVelocity.copy(inputPose.angularVelocity);
                    } else targetRay.hasAngularVelocity = false;
                    this.dispatchEvent($04ce9c8dcd7d39f0$var$_moveEvent);
                }
            }
        }
        if (targetRay !== null) targetRay.visible = inputPose !== null;
        if (grip !== null) grip.visible = gripPose !== null;
        if (hand !== null) hand.visible = handPose !== null;
        return this;
    }
    // private method
    _getHandJoint(hand, inputjoint) {
        if (hand.joints[inputjoint.jointName] === undefined) {
            const joint = new $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4();
            joint.matrixAutoUpdate = false;
            joint.visible = false;
            hand.joints[inputjoint.jointName] = joint;
            hand.add(joint);
        }
        return hand.joints[inputjoint.jointName];
    }
}
class $04ce9c8dcd7d39f0$export$fc830aa069cc8c2f extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format){
        format = format !== undefined ? format : $04ce9c8dcd7d39f0$export$c1b6b5136be58045;
        if (format !== $04ce9c8dcd7d39f0$export$c1b6b5136be58045 && format !== $04ce9c8dcd7d39f0$export$1e113ac2d0905829) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        if (type === undefined && format === $04ce9c8dcd7d39f0$export$c1b6b5136be58045) type = $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96;
        if (type === undefined && format === $04ce9c8dcd7d39f0$export$1e113ac2d0905829) type = $04ce9c8dcd7d39f0$export$6c8ea339bfab1301;
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isDepthTexture = true;
        this.image = {
            width: width,
            height: height
        };
        this.magFilter = magFilter !== undefined ? magFilter : $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.minFilter = minFilter !== undefined ? minFilter : $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.flipY = false;
        this.generateMipmaps = false;
        this.compareFunction = null;
    }
    copy(source) {
        super.copy(source);
        this.compareFunction = source.compareFunction;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
        return data;
    }
}
class $04ce9c8dcd7d39f0$var$WebXRManager extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(renderer, gl){
        super();
        const scope = this;
        let session = null;
        let framebufferScaleFactor = 1.0;
        let referenceSpace = null;
        let referenceSpaceType = "local-floor";
        // Set default foveation to maximum.
        let foveation = 1.0;
        let customReferenceSpace = null;
        let pose = null;
        let glBinding = null;
        let glProjLayer = null;
        let glBaseLayer = null;
        let xrFrame = null;
        const attributes = gl.getContextAttributes();
        let initialRenderTarget = null;
        let newRenderTarget = null;
        const controllers = [];
        const controllerInputSources = [];
        //
        const cameraL = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7();
        cameraL.layers.enable(1);
        cameraL.viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        const cameraR = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7();
        cameraR.layers.enable(2);
        cameraR.viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        const cameras = [
            cameraL,
            cameraR
        ];
        const cameraXR = new $04ce9c8dcd7d39f0$export$56b937d9e5581166();
        cameraXR.layers.enable(1);
        cameraXR.layers.enable(2);
        let _currentDepthNear = null;
        let _currentDepthFar = null;
        //
        this.cameraAutoUpdate = true;
        this.enabled = false;
        this.isPresenting = false;
        this.getController = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $04ce9c8dcd7d39f0$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
        };
        this.getControllerGrip = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $04ce9c8dcd7d39f0$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getGripSpace();
        };
        this.getHand = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $04ce9c8dcd7d39f0$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getHandSpace();
        };
        //
        function onSessionEvent(event) {
            const controllerIndex = controllerInputSources.indexOf(event.inputSource);
            if (controllerIndex === -1) return;
            const controller = controllers[controllerIndex];
            if (controller !== undefined) {
                controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
                controller.dispatchEvent({
                    type: event.type,
                    data: event.inputSource
                });
            }
        }
        function onSessionEnd() {
            session.removeEventListener("select", onSessionEvent);
            session.removeEventListener("selectstart", onSessionEvent);
            session.removeEventListener("selectend", onSessionEvent);
            session.removeEventListener("squeeze", onSessionEvent);
            session.removeEventListener("squeezestart", onSessionEvent);
            session.removeEventListener("squeezeend", onSessionEvent);
            session.removeEventListener("end", onSessionEnd);
            session.removeEventListener("inputsourceschange", onInputSourcesChange);
            for(let i = 0; i < controllers.length; i++){
                const inputSource = controllerInputSources[i];
                if (inputSource === null) continue;
                controllerInputSources[i] = null;
                controllers[i].disconnect(inputSource);
            }
            _currentDepthNear = null;
            _currentDepthFar = null;
            // restore framebuffer/rendering state
            renderer.setRenderTarget(initialRenderTarget);
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            newRenderTarget = null;
            //
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({
                type: "sessionend"
            });
        }
        this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        };
        this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        };
        this.getReferenceSpace = function() {
            return customReferenceSpace || referenceSpace;
        };
        this.setReferenceSpace = function(space) {
            customReferenceSpace = space;
        };
        this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        this.getBinding = function() {
            return glBinding;
        };
        this.getFrame = function() {
            return xrFrame;
        };
        this.getSession = function() {
            return session;
        };
        this.setSession = async function(value) {
            session = value;
            if (session !== null) {
                initialRenderTarget = renderer.getRenderTarget();
                session.addEventListener("select", onSessionEvent);
                session.addEventListener("selectstart", onSessionEvent);
                session.addEventListener("selectend", onSessionEvent);
                session.addEventListener("squeeze", onSessionEvent);
                session.addEventListener("squeezestart", onSessionEvent);
                session.addEventListener("squeezeend", onSessionEvent);
                session.addEventListener("end", onSessionEnd);
                session.addEventListener("inputsourceschange", onInputSourcesChange);
                if (attributes.xrCompatible !== true) await gl.makeXRCompatible();
                if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
                    const layerInit = {
                        antialias: session.renderState.layers === undefined ? attributes.antialias : true,
                        alpha: true,
                        depth: attributes.depth,
                        stencil: attributes.stencil,
                        framebufferScaleFactor: framebufferScaleFactor
                    };
                    glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                    session.updateRenderState({
                        baseLayer: glBaseLayer
                    });
                    newRenderTarget = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
                        format: $04ce9c8dcd7d39f0$export$3f8bb04b555a363c,
                        type: $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10,
                        colorSpace: renderer.outputColorSpace,
                        stencilBuffer: attributes.stencil
                    });
                } else {
                    let depthFormat = null;
                    let depthType = null;
                    let glDepthFormat = null;
                    if (attributes.depth) {
                        glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
                        depthFormat = attributes.stencil ? $04ce9c8dcd7d39f0$export$1e113ac2d0905829 : $04ce9c8dcd7d39f0$export$c1b6b5136be58045;
                        depthType = attributes.stencil ? $04ce9c8dcd7d39f0$export$6c8ea339bfab1301 : $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96;
                    }
                    const projectionlayerInit = {
                        colorFormat: gl.RGBA8,
                        depthFormat: glDepthFormat,
                        scaleFactor: framebufferScaleFactor
                    };
                    glBinding = new XRWebGLBinding(session, gl);
                    glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                    session.updateRenderState({
                        layers: [
                            glProjLayer
                        ]
                    });
                    newRenderTarget = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: $04ce9c8dcd7d39f0$export$3f8bb04b555a363c,
                        type: $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10,
                        depthTexture: new $04ce9c8dcd7d39f0$export$fc830aa069cc8c2f(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        colorSpace: renderer.outputColorSpace,
                        samples: attributes.antialias ? 4 : 0
                    });
                    const renderTargetProperties = renderer.properties.get(newRenderTarget);
                    renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
                }
                newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
                this.setFoveation(foveation);
                customReferenceSpace = null;
                referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
                animation.setContext(session);
                animation.start();
                scope.isPresenting = true;
                scope.dispatchEvent({
                    type: "sessionstart"
                });
            }
        };
        this.getEnvironmentBlendMode = function() {
            if (session !== null) return session.environmentBlendMode;
        };
        function onInputSourcesChange(event) {
            // Notify disconnected
            for(let i = 0; i < event.removed.length; i++){
                const inputSource = event.removed[i];
                const index = controllerInputSources.indexOf(inputSource);
                if (index >= 0) {
                    controllerInputSources[index] = null;
                    controllers[index].disconnect(inputSource);
                }
            }
            // Notify connected
            for(let i = 0; i < event.added.length; i++){
                const inputSource = event.added[i];
                let controllerIndex = controllerInputSources.indexOf(inputSource);
                if (controllerIndex === -1) {
                    // Assign input source a controller that currently has no input source
                    for(let i = 0; i < controllers.length; i++){
                        if (i >= controllerInputSources.length) {
                            controllerInputSources.push(inputSource);
                            controllerIndex = i;
                            break;
                        } else if (controllerInputSources[i] === null) {
                            controllerInputSources[i] = inputSource;
                            controllerIndex = i;
                            break;
                        }
                    }
                    // If all controllers do currently receive input we ignore new ones
                    if (controllerIndex === -1) break;
                }
                const controller = controllers[controllerIndex];
                if (controller) controller.connect(inputSource);
            }
        }
        //
        const cameraLPos = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const cameraRPos = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        /**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */ function setProjectionFromUnion(camera, cameraL, cameraR) {
            cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
            const ipd = cameraLPos.distanceTo(cameraRPos);
            const projL = cameraL.projectionMatrix.elements;
            const projR = cameraR.projectionMatrix.elements;
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            const near = projL[14] / (projL[10] - 1);
            const far = projL[14] / (projL[10] + 1);
            const topFov = (projL[9] + 1) / projL[5];
            const bottomFov = (projL[9] - 1) / projL[5];
            const leftFov = (projL[8] - 1) / projL[0];
            const rightFov = (projR[8] + 1) / projR[0];
            const left = near * leftFov;
            const right = near * rightFov;
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            const zOffset = ipd / (-leftFov + rightFov);
            const xOffset = zOffset * -leftFov;
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            const near2 = near + zOffset;
            const far2 = far + zOffset;
            const left2 = left - xOffset;
            const right2 = right + (ipd - xOffset);
            const top2 = topFov * far / far2 * near2;
            const bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        }
        function updateCamera(camera, parent) {
            if (parent === null) camera.matrixWorld.copy(camera.matrix);
            else camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.updateCamera = function(camera) {
            if (session === null) return;
            cameraXR.near = cameraR.near = cameraL.near = camera.near;
            cameraXR.far = cameraR.far = cameraL.far = camera.far;
            if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
                // Note that the new renderState won't apply until the next frame. See #18320
                session.updateRenderState({
                    depthNear: cameraXR.near,
                    depthFar: cameraXR.far
                });
                _currentDepthNear = cameraXR.near;
                _currentDepthFar = cameraXR.far;
            }
            const parent = camera.parent;
            const cameras = cameraXR.cameras;
            updateCamera(cameraXR, parent);
            for(let i = 0; i < cameras.length; i++)updateCamera(cameras[i], parent);
            // update projection matrix for proper view frustum culling
            if (cameras.length === 2) setProjectionFromUnion(cameraXR, cameraL, cameraR);
            else // assume single camera setup (AR)
            cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
            // update user camera and its children
            updateUserCamera(camera, cameraXR, parent);
        };
        function updateUserCamera(camera, cameraXR, parent) {
            if (parent === null) camera.matrix.copy(cameraXR.matrixWorld);
            else {
                camera.matrix.copy(parent.matrixWorld);
                camera.matrix.invert();
                camera.matrix.multiply(cameraXR.matrixWorld);
            }
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.updateMatrixWorld(true);
            const children = camera.children;
            for(let i = 0, l = children.length; i < l; i++)children[i].updateMatrixWorld(true);
            camera.projectionMatrix.copy(cameraXR.projectionMatrix);
            camera.projectionMatrixInverse.copy(cameraXR.projectionMatrixInverse);
            if (camera.isPerspectiveCamera) {
                camera.fov = $04ce9c8dcd7d39f0$var$RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
                camera.zoom = 1;
            }
        }
        this.getCamera = function() {
            return cameraXR;
        };
        this.getFoveation = function() {
            if (glProjLayer === null && glBaseLayer === null) return undefined;
            return foveation;
        };
        this.setFoveation = function(value) {
            // 0 = no foveation = full resolution
            // 1 = maximum foveation = the edges render at lower resolution
            foveation = value;
            if (glProjLayer !== null) glProjLayer.fixedFoveation = value;
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) glBaseLayer.fixedFoveation = value;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
                const views = pose.views;
                if (glBaseLayer !== null) {
                    renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
                    renderer.setRenderTarget(newRenderTarget);
                }
                let cameraXRNeedsUpdate = false;
                // check if it's necessary to rebuild cameraXR's camera list
                if (views.length !== cameraXR.cameras.length) {
                    cameraXR.cameras.length = 0;
                    cameraXRNeedsUpdate = true;
                }
                for(let i = 0; i < views.length; i++){
                    const view = views[i];
                    let viewport = null;
                    if (glBaseLayer !== null) viewport = glBaseLayer.getViewport(view);
                    else {
                        const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                        viewport = glSubImage.viewport;
                        // For side-by-side projection, we only produce a single texture for both eyes.
                        if (i === 0) {
                            renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
                            renderer.setRenderTarget(newRenderTarget);
                        }
                    }
                    let camera = cameras[i];
                    if (camera === undefined) {
                        camera = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7();
                        camera.layers.enable(i);
                        camera.viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
                        cameras[i] = camera;
                    }
                    camera.matrix.fromArray(view.transform.matrix);
                    camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
                    camera.projectionMatrix.fromArray(view.projectionMatrix);
                    camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
                    camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                    if (i === 0) {
                        cameraXR.matrix.copy(camera.matrix);
                        cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
                    }
                    if (cameraXRNeedsUpdate === true) cameraXR.cameras.push(camera);
                }
            }
            //
            for(let i = 0; i < controllers.length; i++){
                const inputSource = controllerInputSources[i];
                const controller = controllers[i];
                if (inputSource !== null && controller !== undefined) controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
            }
            if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
            if (frame.detectedPlanes) scope.dispatchEvent({
                type: "planesdetected",
                data: frame
            });
            xrFrame = null;
        }
        const animation = new $04ce9c8dcd7d39f0$var$WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        };
        this.dispose = function() {};
    }
}
function $04ce9c8dcd7d39f0$var$WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
        if (map.matrixAutoUpdate === true) map.updateMatrix();
        uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
        fog.color.getRGB(uniforms.fogColor.value, $04ce9c8dcd7d39f0$var$getUnlitUniformColorSpace(renderer));
        if (fog.isFog) {
            uniforms.fogNear.value = fog.near;
            uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) uniforms.fogDensity.value = fog.density;
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshLambertMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshToonMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsStandard(uniforms, material);
            if (material.isMeshPhysicalMaterial) refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        } else if (material.isMeshMatcapMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshDistanceMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isLineBasicMaterial) {
            refreshUniformsLine(uniforms, material);
            if (material.isLineDashedMaterial) refreshUniformsDash(uniforms, material);
        } else if (material.isPointsMaterial) refreshUniformsPoints(uniforms, material, pixelRatio, height);
        else if (material.isSpriteMaterial) refreshUniformsSprites(uniforms, material);
        else if (material.isShadowMaterial) {
            uniforms.color.value.copy(material.color);
            uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) material.uniformsNeedUpdate = false; // #15581
    }
    function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) uniforms.diffuse.value.copy(material.color);
        if (material.emissive) uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        if (material.emissiveMap) {
            uniforms.emissiveMap.value = material.emissiveMap;
            refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
        }
        if (material.specularMap) {
            uniforms.specularMap.value = material.specularMap;
            refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        const envMap = properties.get(material).envMap;
        if (envMap) {
            uniforms.envMap.value = envMap;
            uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            uniforms.reflectivity.value = material.reflectivity;
            uniforms.ior.value = material.ior;
            uniforms.refractionRatio.value = material.refractionRatio;
        }
        if (material.lightMap) {
            uniforms.lightMap.value = material.lightMap;
            // artist-friendly light intensity scaling factor
            const scaleFactor = renderer._useLegacyLights === true ? Math.PI : 1;
            uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
            refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
        }
        if (material.aoMap) {
            uniforms.aoMap.value = material.aoMap;
            uniforms.aoMapIntensity.value = material.aoMapIntensity;
            refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
        }
    }
    function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
    }
    function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.uvTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
    }
    function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) {
            uniforms.map.value = material.map;
            refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
            uniforms.alphaMap.value = material.alphaMap;
            refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
    }
    function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
    }
    function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) uniforms.gradientMap.value = material.gradientMap;
    }
    function refreshUniformsStandard(uniforms, material) {
        uniforms.metalness.value = material.metalness;
        if (material.metalnessMap) {
            uniforms.metalnessMap.value = material.metalnessMap;
            refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
        }
        uniforms.roughness.value = material.roughness;
        if (material.roughnessMap) {
            uniforms.roughnessMap.value = material.roughnessMap;
            refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
        }
        const envMap = properties.get(material).envMap;
        if (envMap) //uniforms.envMap.value = material.envMap; // part of uniforms common
        uniforms.envMapIntensity.value = material.envMapIntensity;
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        uniforms.ior.value = material.ior; // also part of uniforms common
        if (material.sheen > 0) {
            uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
            uniforms.sheenRoughness.value = material.sheenRoughness;
            if (material.sheenColorMap) {
                uniforms.sheenColorMap.value = material.sheenColorMap;
                refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
            }
            if (material.sheenRoughnessMap) {
                uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
                refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
            }
        }
        if (material.clearcoat > 0) {
            uniforms.clearcoat.value = material.clearcoat;
            uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
            if (material.clearcoatMap) {
                uniforms.clearcoatMap.value = material.clearcoatMap;
                refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
            }
            if (material.clearcoatRoughnessMap) {
                uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
                refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
            }
            if (material.clearcoatNormalMap) {
                uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
                uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
                if (material.side === $04ce9c8dcd7d39f0$export$d9f0486e75b5ace) uniforms.clearcoatNormalScale.value.negate();
            }
        }
        if (material.iridescence > 0) {
            uniforms.iridescence.value = material.iridescence;
            uniforms.iridescenceIOR.value = material.iridescenceIOR;
            uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
            uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
            if (material.iridescenceMap) {
                uniforms.iridescenceMap.value = material.iridescenceMap;
                refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
            }
            if (material.iridescenceThicknessMap) {
                uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
                refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
            }
        }
        if (material.transmission > 0) {
            uniforms.transmission.value = material.transmission;
            uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
            uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
            if (material.transmissionMap) {
                uniforms.transmissionMap.value = material.transmissionMap;
                refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
            }
            uniforms.thickness.value = material.thickness;
            if (material.thicknessMap) {
                uniforms.thicknessMap.value = material.thicknessMap;
                refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
            }
            uniforms.attenuationDistance.value = material.attenuationDistance;
            uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        if (material.anisotropy > 0) {
            uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
            if (material.anisotropyMap) {
                uniforms.anisotropyMap.value = material.anisotropyMap;
                refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
            }
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularColorMap) {
            uniforms.specularColorMap.value = material.specularColorMap;
            refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
        }
        if (material.specularIntensityMap) {
            uniforms.specularIntensityMap.value = material.specularIntensityMap;
            refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
        }
    }
    function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) uniforms.matcap.value = material.matcap;
    }
    function refreshUniformsDistance(uniforms, material) {
        const light = properties.get(material).light;
        uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
        uniforms.nearDistance.value = light.shadow.camera.near;
        uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
        refreshFogUniforms: refreshFogUniforms,
        refreshMaterialUniforms: refreshMaterialUniforms
    };
}
function $04ce9c8dcd7d39f0$var$WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0; // binding points are global whereas block indices are per shader program
    function bind(uniformsGroup, program) {
        const webglProgram = program.program;
        state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
        let buffer = buffers[uniformsGroup.id];
        if (buffer === undefined) {
            prepareUniformsGroup(uniformsGroup);
            buffer = createBuffer(uniformsGroup);
            buffers[uniformsGroup.id] = buffer;
            uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
        }
        // ensure to update the binding points/block indices mapping for this program
        const webglProgram = program.program;
        state.updateUBOMapping(uniformsGroup, webglProgram);
        // update UBO once per frame
        const frame = info.render.frame;
        if (updateList[uniformsGroup.id] !== frame) {
            updateBufferData(uniformsGroup);
            updateList[uniformsGroup.id] = frame;
        }
    }
    function createBuffer(uniformsGroup) {
        // the setup of an UBO is independent of a particular shader program but global
        const bindingPointIndex = allocateBindingPointIndex();
        uniformsGroup.__bindingPointIndex = bindingPointIndex;
        const buffer = gl.createBuffer();
        const size = uniformsGroup.__size;
        const usage = uniformsGroup.usage;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
        gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
        return buffer;
    }
    function allocateBindingPointIndex() {
        for(let i = 0; i < maxBindingPoints; i++)if (allocatedBindingPoints.indexOf(i) === -1) {
            allocatedBindingPoints.push(i);
            return i;
        }
        console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
        return 0;
    }
    function updateBufferData(uniformsGroup) {
        const buffer = buffers[uniformsGroup.id];
        const uniforms = uniformsGroup.uniforms;
        const cache = uniformsGroup.__cache;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        for(let i = 0, il = uniforms.length; i < il; i++){
            const uniform = uniforms[i];
            // partly update the buffer if necessary
            if (hasUniformChanged(uniform, i, cache) === true) {
                const offset = uniform.__offset;
                const values = Array.isArray(uniform.value) ? uniform.value : [
                    uniform.value
                ];
                let arrayOffset = 0;
                for(let i = 0; i < values.length; i++){
                    const value = values[i];
                    const info = getUniformSize(value);
                    if (typeof value === "number") {
                        uniform.__data[0] = value;
                        gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
                    } else if (value.isMatrix3) {
                        // manually converting 3x3 to 3x4
                        uniform.__data[0] = value.elements[0];
                        uniform.__data[1] = value.elements[1];
                        uniform.__data[2] = value.elements[2];
                        uniform.__data[3] = value.elements[0];
                        uniform.__data[4] = value.elements[3];
                        uniform.__data[5] = value.elements[4];
                        uniform.__data[6] = value.elements[5];
                        uniform.__data[7] = value.elements[0];
                        uniform.__data[8] = value.elements[6];
                        uniform.__data[9] = value.elements[7];
                        uniform.__data[10] = value.elements[8];
                        uniform.__data[11] = value.elements[0];
                    } else {
                        value.toArray(uniform.__data, arrayOffset);
                        arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;
                    }
                }
                gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
            }
        }
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, cache) {
        const value = uniform.value;
        if (cache[index] === undefined) {
            // cache entry does not exist so far
            if (typeof value === "number") cache[index] = value;
            else {
                const values = Array.isArray(value) ? value : [
                    value
                ];
                const tempValues = [];
                for(let i = 0; i < values.length; i++)tempValues.push(values[i].clone());
                cache[index] = tempValues;
            }
            return true;
        } else {
            // compare current value with cached entry
            if (typeof value === "number") {
                if (cache[index] !== value) {
                    cache[index] = value;
                    return true;
                }
            } else {
                const cachedObjects = Array.isArray(cache[index]) ? cache[index] : [
                    cache[index]
                ];
                const values = Array.isArray(value) ? value : [
                    value
                ];
                for(let i = 0; i < cachedObjects.length; i++){
                    const cachedObject = cachedObjects[i];
                    if (cachedObject.equals(values[i]) === false) {
                        cachedObject.copy(values[i]);
                        return true;
                    }
                }
            }
        }
        return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
        // determine total buffer size according to the STD140 layout
        // Hint: STD140 is the only supported layout in WebGL 2
        const uniforms = uniformsGroup.uniforms;
        let offset = 0; // global buffer offset in bytes
        const chunkSize = 16; // size of a chunk in bytes
        let chunkOffset = 0; // offset within a single chunk in bytes
        for(let i = 0, l = uniforms.length; i < l; i++){
            const uniform = uniforms[i];
            const infos = {
                boundary: 0,
                storage: 0 // bytes
            };
            const values = Array.isArray(uniform.value) ? uniform.value : [
                uniform.value
            ];
            for(let j = 0, jl = values.length; j < jl; j++){
                const value = values[j];
                const info = getUniformSize(value);
                infos.boundary += info.boundary;
                infos.storage += info.storage;
            }
            // the following two properties will be used for partial buffer updates
            uniform.__data = new Float32Array(infos.storage / Float32Array.BYTES_PER_ELEMENT);
            uniform.__offset = offset;
            //
            if (i > 0) {
                chunkOffset = offset % chunkSize;
                const remainingSizeInChunk = chunkSize - chunkOffset;
                // check for chunk overflow
                if (chunkOffset !== 0 && remainingSizeInChunk - infos.boundary < 0) {
                    // add padding and adjust offset
                    offset += chunkSize - chunkOffset;
                    uniform.__offset = offset;
                }
            }
            offset += infos.storage;
        }
        // ensure correct final padding
        chunkOffset = offset % chunkSize;
        if (chunkOffset > 0) offset += chunkSize - chunkOffset;
        //
        uniformsGroup.__size = offset;
        uniformsGroup.__cache = {};
        return this;
    }
    function getUniformSize(value) {
        const info = {
            boundary: 0,
            storage: 0 // bytes
        };
        // determine sizes according to STD140
        if (typeof value === "number") {
            // float/int
            info.boundary = 4;
            info.storage = 4;
        } else if (value.isVector2) {
            // vec2
            info.boundary = 8;
            info.storage = 8;
        } else if (value.isVector3 || value.isColor) {
            // vec3
            info.boundary = 16;
            info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
        } else if (value.isVector4) {
            // vec4
            info.boundary = 16;
            info.storage = 16;
        } else if (value.isMatrix3) {
            // mat3 (in STD140 a 3x3 matrix is represented as 3x4)
            info.boundary = 48;
            info.storage = 48;
        } else if (value.isMatrix4) {
            // mat4
            info.boundary = 64;
            info.storage = 64;
        } else if (value.isTexture) console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
        else console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
        return info;
    }
    function onUniformsGroupsDispose(event) {
        const uniformsGroup = event.target;
        uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
        const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
        allocatedBindingPoints.splice(index, 1);
        gl.deleteBuffer(buffers[uniformsGroup.id]);
        delete buffers[uniformsGroup.id];
        delete updateList[uniformsGroup.id];
    }
    function dispose() {
        for(const id in buffers)gl.deleteBuffer(buffers[id]);
        allocatedBindingPoints = [];
        buffers = {};
        updateList = {};
    }
    return {
        bind: bind,
        update: update,
        dispose: dispose
    };
}
function $04ce9c8dcd7d39f0$var$createCanvasElement() {
    const canvas = $04ce9c8dcd7d39f0$var$createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
}
class $04ce9c8dcd7d39f0$export$f6cc00ef28d7cf97 {
    constructor(parameters = {}){
        const { canvas: canvas = $04ce9c8dcd7d39f0$var$createCanvasElement(), context: context = null, depth: depth = true, stencil: stencil = true, alpha: alpha = false, antialias: antialias = false, premultipliedAlpha: premultipliedAlpha = true, preserveDrawingBuffer: preserveDrawingBuffer = false, powerPreference: powerPreference = "default", failIfMajorPerformanceCaveat: failIfMajorPerformanceCaveat = false } = parameters;
        this.isWebGLRenderer = true;
        let _alpha;
        if (context !== null) _alpha = context.getContextAttributes().alpha;
        else _alpha = alpha;
        const uintClearColor = new Uint32Array(4);
        const intClearColor = new Int32Array(4);
        let currentRenderList = null;
        let currentRenderState = null;
        // render() can be called from within a callback triggered by another render.
        // We track this so that the nested render call gets its list and state isolated from the parent render call.
        const renderListStack = [];
        const renderStateStack = [];
        // public properties
        this.domElement = canvas;
        // Debug configuration container
        this.debug = {
            /**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */ checkShaderErrors: true,
            /**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */ onShaderError: null
        };
        // clearing
        this.autoClear = true;
        this.autoClearColor = true;
        this.autoClearDepth = true;
        this.autoClearStencil = true;
        // scene graph
        this.sortObjects = true;
        // user-defined clipping
        this.clippingPlanes = [];
        this.localClippingEnabled = false;
        // physically based shading
        this.outputColorSpace = $04ce9c8dcd7d39f0$export$561f394b24edfcaa;
        // physical lights
        this._useLegacyLights = false;
        // tone mapping
        this.toneMapping = $04ce9c8dcd7d39f0$export$9fcb6b4294603b2;
        this.toneMappingExposure = 1.0;
        // internal properties
        const _this = this;
        let _isContextLost = false;
        // internal state cache
        let _currentActiveCubeFace = 0;
        let _currentActiveMipmapLevel = 0;
        let _currentRenderTarget = null;
        let _currentMaterialId = -1;
        let _currentCamera = null;
        const _currentViewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        const _currentScissor = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        let _currentScissorTest = null;
        const _currentClearColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        let _currentClearAlpha = 0;
        //
        let _width = canvas.width;
        let _height = canvas.height;
        let _pixelRatio = 1;
        let _opaqueSort = null;
        let _transparentSort = null;
        const _viewport = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, _width, _height);
        const _scissor = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, _width, _height);
        let _scissorTest = false;
        // frustum
        const _frustum = new $04ce9c8dcd7d39f0$export$35efe6f4c85463d2();
        // clipping
        let _clippingEnabled = false;
        let _localClippingEnabled = false;
        // transmission
        let _transmissionRenderTarget = null;
        // camera matrices cache
        const _projScreenMatrix = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        const _vector2 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        const _vector3 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const _emptyScene = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: true
        };
        function getTargetPixelRatio() {
            return _currentRenderTarget === null ? _pixelRatio : 1;
        }
        // initialize
        let _gl = context;
        function getContext(contextNames, contextAttributes) {
            for(let i = 0; i < contextNames.length; i++){
                const contextName = contextNames[i];
                const context = canvas.getContext(contextName, contextAttributes);
                if (context !== null) return context;
            }
            return null;
        }
        try {
            const contextAttributes = {
                alpha: true,
                depth: depth,
                stencil: stencil,
                antialias: antialias,
                premultipliedAlpha: premultipliedAlpha,
                preserveDrawingBuffer: preserveDrawingBuffer,
                powerPreference: powerPreference,
                failIfMajorPerformanceCaveat: failIfMajorPerformanceCaveat
            };
            // OffscreenCanvas does not have setAttribute, see #22811
            if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${$04ce9c8dcd7d39f0$export$3545e07a80636437}`);
            // event listeners must be registered before WebGL context is created, see #12753
            canvas.addEventListener("webglcontextlost", onContextLost, false);
            canvas.addEventListener("webglcontextrestored", onContextRestore, false);
            canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
            if (_gl === null) {
                const contextNames = [
                    "webgl2",
                    "webgl",
                    "experimental-webgl"
                ];
                if (_this.isWebGL1Renderer === true) contextNames.shift();
                _gl = getContext(contextNames, contextAttributes);
                if (_gl === null) {
                    if (getContext(contextNames)) throw new Error("Error creating WebGL context with your selected attributes.");
                    else throw new Error("Error creating WebGL context.");
                }
            }
            if (typeof WebGLRenderingContext !== "undefined" && _gl instanceof WebGLRenderingContext) console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.");
            // Some experimental-webgl implementations do not have getShaderPrecisionFormat
            if (_gl.getShaderPrecisionFormat === undefined) _gl.getShaderPrecisionFormat = function() {
                return {
                    "rangeMin": 1,
                    "rangeMax": 1,
                    "precision": 1
                };
            };
        } catch (error) {
            console.error("THREE.WebGLRenderer: " + error.message);
            throw error;
        }
        let extensions, capabilities, state, info;
        let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
        let programCache, materials, renderLists, renderStates, clipping, shadowMap;
        let background, morphtargets, bufferRenderer, indexedBufferRenderer;
        let utils, bindingStates, uniformsGroups;
        function initGLContext() {
            extensions = new $04ce9c8dcd7d39f0$var$WebGLExtensions(_gl);
            capabilities = new $04ce9c8dcd7d39f0$var$WebGLCapabilities(_gl, extensions, parameters);
            extensions.init(capabilities);
            utils = new $04ce9c8dcd7d39f0$export$ddaebcad857649a8(_gl, extensions, capabilities);
            state = new $04ce9c8dcd7d39f0$var$WebGLState(_gl, extensions, capabilities);
            info = new $04ce9c8dcd7d39f0$var$WebGLInfo(_gl);
            properties = new $04ce9c8dcd7d39f0$var$WebGLProperties();
            textures = new $04ce9c8dcd7d39f0$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
            cubemaps = new $04ce9c8dcd7d39f0$var$WebGLCubeMaps(_this);
            cubeuvmaps = new $04ce9c8dcd7d39f0$var$WebGLCubeUVMaps(_this);
            attributes = new $04ce9c8dcd7d39f0$var$WebGLAttributes(_gl, capabilities);
            bindingStates = new $04ce9c8dcd7d39f0$var$WebGLBindingStates(_gl, extensions, attributes, capabilities);
            geometries = new $04ce9c8dcd7d39f0$var$WebGLGeometries(_gl, attributes, info, bindingStates);
            objects = new $04ce9c8dcd7d39f0$var$WebGLObjects(_gl, geometries, attributes, info);
            morphtargets = new $04ce9c8dcd7d39f0$var$WebGLMorphtargets(_gl, capabilities, textures);
            clipping = new $04ce9c8dcd7d39f0$var$WebGLClipping(properties);
            programCache = new $04ce9c8dcd7d39f0$var$WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
            materials = new $04ce9c8dcd7d39f0$var$WebGLMaterials(_this, properties);
            renderLists = new $04ce9c8dcd7d39f0$var$WebGLRenderLists();
            renderStates = new $04ce9c8dcd7d39f0$var$WebGLRenderStates(extensions, capabilities);
            background = new $04ce9c8dcd7d39f0$var$WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
            shadowMap = new $04ce9c8dcd7d39f0$var$WebGLShadowMap(_this, objects, capabilities);
            uniformsGroups = new $04ce9c8dcd7d39f0$var$WebGLUniformsGroups(_gl, info, capabilities, state);
            bufferRenderer = new $04ce9c8dcd7d39f0$var$WebGLBufferRenderer(_gl, extensions, info, capabilities);
            indexedBufferRenderer = new $04ce9c8dcd7d39f0$var$WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
            info.programs = programCache.programs;
            _this.capabilities = capabilities;
            _this.extensions = extensions;
            _this.properties = properties;
            _this.renderLists = renderLists;
            _this.shadowMap = shadowMap;
            _this.state = state;
            _this.info = info;
        }
        initGLContext();
        // xr
        const xr = new $04ce9c8dcd7d39f0$var$WebXRManager(_this, _gl);
        this.xr = xr;
        // API
        this.getContext = function() {
            return _gl;
        };
        this.getContextAttributes = function() {
            return _gl.getContextAttributes();
        };
        this.forceContextLoss = function() {
            const extension = extensions.get("WEBGL_lose_context");
            if (extension) extension.loseContext();
        };
        this.forceContextRestore = function() {
            const extension = extensions.get("WEBGL_lose_context");
            if (extension) extension.restoreContext();
        };
        this.getPixelRatio = function() {
            return _pixelRatio;
        };
        this.setPixelRatio = function(value) {
            if (value === undefined) return;
            _pixelRatio = value;
            this.setSize(_width, _height, false);
        };
        this.getSize = function(target) {
            return target.set(_width, _height);
        };
        this.setSize = function(width, height, updateStyle = true) {
            if (xr.isPresenting) {
                console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                return;
            }
            _width = width;
            _height = height;
            canvas.width = Math.floor(width * _pixelRatio);
            canvas.height = Math.floor(height * _pixelRatio);
            if (updateStyle === true) {
                canvas.style.width = width + "px";
                canvas.style.height = height + "px";
            }
            this.setViewport(0, 0, width, height);
        };
        this.getDrawingBufferSize = function(target) {
            return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
        };
        this.setDrawingBufferSize = function(width, height, pixelRatio) {
            _width = width;
            _height = height;
            _pixelRatio = pixelRatio;
            canvas.width = Math.floor(width * pixelRatio);
            canvas.height = Math.floor(height * pixelRatio);
            this.setViewport(0, 0, width, height);
        };
        this.getCurrentViewport = function(target) {
            return target.copy(_currentViewport);
        };
        this.getViewport = function(target) {
            return target.copy(_viewport);
        };
        this.setViewport = function(x, y, width, height) {
            if (x.isVector4) _viewport.set(x.x, x.y, x.z, x.w);
            else _viewport.set(x, y, width, height);
            state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissor = function(target) {
            return target.copy(_scissor);
        };
        this.setScissor = function(x, y, width, height) {
            if (x.isVector4) _scissor.set(x.x, x.y, x.z, x.w);
            else _scissor.set(x, y, width, height);
            state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissorTest = function() {
            return _scissorTest;
        };
        this.setScissorTest = function(boolean) {
            state.setScissorTest(_scissorTest = boolean);
        };
        this.setOpaqueSort = function(method) {
            _opaqueSort = method;
        };
        this.setTransparentSort = function(method) {
            _transparentSort = method;
        };
        // Clearing
        this.getClearColor = function(target) {
            return target.copy(background.getClearColor());
        };
        this.setClearColor = function() {
            background.setClearColor.apply(background, arguments);
        };
        this.getClearAlpha = function() {
            return background.getClearAlpha();
        };
        this.setClearAlpha = function() {
            background.setClearAlpha.apply(background, arguments);
        };
        this.clear = function(color = true, depth = true, stencil = true) {
            let bits = 0;
            if (color) {
                // check if we're trying to clear an integer target
                let isIntegerFormat = false;
                if (_currentRenderTarget !== null) {
                    const targetFormat = _currentRenderTarget.texture.format;
                    isIntegerFormat = targetFormat === $04ce9c8dcd7d39f0$export$c200e7d26f592f21 || targetFormat === $04ce9c8dcd7d39f0$export$1ba1c45f9f77d4d7 || targetFormat === $04ce9c8dcd7d39f0$export$aa92e870a709d190;
                }
                // use the appropriate clear functions to clear the target if it's a signed
                // or unsigned integer target
                if (isIntegerFormat) {
                    const targetType = _currentRenderTarget.texture.type;
                    const isUnsignedType = targetType === $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10 || targetType === $04ce9c8dcd7d39f0$export$c3c7fc4518ebba96 || targetType === $04ce9c8dcd7d39f0$export$c63dc51868b06a9d || targetType === $04ce9c8dcd7d39f0$export$6c8ea339bfab1301 || targetType === $04ce9c8dcd7d39f0$export$b3969b01faf587f2 || targetType === $04ce9c8dcd7d39f0$export$18886f8ae33e90de;
                    const clearColor = background.getClearColor();
                    const a = background.getClearAlpha();
                    const r = clearColor.r;
                    const g = clearColor.g;
                    const b = clearColor.b;
                    if (isUnsignedType) {
                        uintClearColor[0] = r;
                        uintClearColor[1] = g;
                        uintClearColor[2] = b;
                        uintClearColor[3] = a;
                        _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
                    } else {
                        intClearColor[0] = r;
                        intClearColor[1] = g;
                        intClearColor[2] = b;
                        intClearColor[3] = a;
                        _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
                    }
                } else bits |= _gl.COLOR_BUFFER_BIT;
            }
            if (depth) bits |= _gl.DEPTH_BUFFER_BIT;
            if (stencil) bits |= _gl.STENCIL_BUFFER_BIT;
            _gl.clear(bits);
        };
        this.clearColor = function() {
            this.clear(true, false, false);
        };
        this.clearDepth = function() {
            this.clear(false, true, false);
        };
        this.clearStencil = function() {
            this.clear(false, false, true);
        };
        //
        this.dispose = function() {
            canvas.removeEventListener("webglcontextlost", onContextLost, false);
            canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
            canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
            renderLists.dispose();
            renderStates.dispose();
            properties.dispose();
            cubemaps.dispose();
            cubeuvmaps.dispose();
            objects.dispose();
            bindingStates.dispose();
            uniformsGroups.dispose();
            programCache.dispose();
            xr.dispose();
            xr.removeEventListener("sessionstart", onXRSessionStart);
            xr.removeEventListener("sessionend", onXRSessionEnd);
            if (_transmissionRenderTarget) {
                _transmissionRenderTarget.dispose();
                _transmissionRenderTarget = null;
            }
            animation.stop();
        };
        // Events
        function onContextLost(event) {
            event.preventDefault();
            console.log("THREE.WebGLRenderer: Context Lost.");
            _isContextLost = true;
        }
        function onContextRestore() {
            console.log("THREE.WebGLRenderer: Context Restored.");
            _isContextLost = false;
            const infoAutoReset = info.autoReset;
            const shadowMapEnabled = shadowMap.enabled;
            const shadowMapAutoUpdate = shadowMap.autoUpdate;
            const shadowMapNeedsUpdate = shadowMap.needsUpdate;
            const shadowMapType = shadowMap.type;
            initGLContext();
            info.autoReset = infoAutoReset;
            shadowMap.enabled = shadowMapEnabled;
            shadowMap.autoUpdate = shadowMapAutoUpdate;
            shadowMap.needsUpdate = shadowMapNeedsUpdate;
            shadowMap.type = shadowMapType;
        }
        function onContextCreationError(event) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
        }
        function onMaterialDispose(event) {
            const material = event.target;
            material.removeEventListener("dispose", onMaterialDispose);
            deallocateMaterial(material);
        }
        // Buffer deallocation
        function deallocateMaterial(material) {
            releaseMaterialProgramReferences(material);
            properties.remove(material);
        }
        function releaseMaterialProgramReferences(material) {
            const programs = properties.get(material).programs;
            if (programs !== undefined) {
                programs.forEach(function(program) {
                    programCache.releaseProgram(program);
                });
                if (material.isShaderMaterial) programCache.releaseShaderCache(material);
            }
        }
        // Buffer rendering
        this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
            if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
            const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
            const program = setProgram(camera, scene, geometry, material, object);
            state.setMaterial(material, frontFaceCW);
            //
            let index = geometry.index;
            let rangeFactor = 1;
            if (material.wireframe === true) {
                index = geometries.getWireframeAttribute(geometry);
                if (index === undefined) return;
                rangeFactor = 2;
            }
            //
            const drawRange = geometry.drawRange;
            const position = geometry.attributes.position;
            let drawStart = drawRange.start * rangeFactor;
            let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
            if (group !== null) {
                drawStart = Math.max(drawStart, group.start * rangeFactor);
                drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
            }
            if (index !== null) {
                drawStart = Math.max(drawStart, 0);
                drawEnd = Math.min(drawEnd, index.count);
            } else if (position !== undefined && position !== null) {
                drawStart = Math.max(drawStart, 0);
                drawEnd = Math.min(drawEnd, position.count);
            }
            const drawCount = drawEnd - drawStart;
            if (drawCount < 0 || drawCount === Infinity) return;
            //
            bindingStates.setup(object, material, program, geometry, index);
            let attribute;
            let renderer = bufferRenderer;
            if (index !== null) {
                attribute = attributes.get(index);
                renderer = indexedBufferRenderer;
                renderer.setIndex(attribute);
            }
            //
            if (object.isMesh) {
                if (material.wireframe === true) {
                    state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                    renderer.setMode(_gl.LINES);
                } else renderer.setMode(_gl.TRIANGLES);
            } else if (object.isLine) {
                let lineWidth = material.linewidth;
                if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
                state.setLineWidth(lineWidth * getTargetPixelRatio());
                if (object.isLineSegments) renderer.setMode(_gl.LINES);
                else if (object.isLineLoop) renderer.setMode(_gl.LINE_LOOP);
                else renderer.setMode(_gl.LINE_STRIP);
            } else if (object.isPoints) renderer.setMode(_gl.POINTS);
            else if (object.isSprite) renderer.setMode(_gl.TRIANGLES);
            if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
            else if (geometry.isInstancedBufferGeometry) {
                const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
                const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
                renderer.renderInstances(drawStart, drawCount, instanceCount);
            } else renderer.render(drawStart, drawCount);
        };
        // Compile
        this.compile = function(scene, camera) {
            function prepare(material, scene, object) {
                if (material.transparent === true && material.side === $04ce9c8dcd7d39f0$export$3b296b6f144d5b03 && material.forceSinglePass === false) {
                    material.side = $04ce9c8dcd7d39f0$export$d9f0486e75b5ace;
                    material.needsUpdate = true;
                    getProgram(material, scene, object);
                    material.side = $04ce9c8dcd7d39f0$export$2ede184fc2998901;
                    material.needsUpdate = true;
                    getProgram(material, scene, object);
                    material.side = $04ce9c8dcd7d39f0$export$3b296b6f144d5b03;
                } else getProgram(material, scene, object);
            }
            currentRenderState = renderStates.get(scene);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            scene.traverseVisible(function(object) {
                if (object.isLight && object.layers.test(camera.layers)) {
                    currentRenderState.pushLight(object);
                    if (object.castShadow) currentRenderState.pushShadow(object);
                }
            });
            currentRenderState.setupLights(_this._useLegacyLights);
            scene.traverse(function(object) {
                const material = object.material;
                if (material) {
                    if (Array.isArray(material)) for(let i = 0; i < material.length; i++){
                        const material2 = material[i];
                        prepare(material2, scene, object);
                    }
                    else prepare(material, scene, object);
                }
            });
            renderStateStack.pop();
            currentRenderState = null;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time) {
            if (onAnimationFrameCallback) onAnimationFrameCallback(time);
        }
        function onXRSessionStart() {
            animation.stop();
        }
        function onXRSessionEnd() {
            animation.start();
        }
        const animation = new $04ce9c8dcd7d39f0$var$WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        if (typeof self !== "undefined") animation.setContext(self);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
            xr.setAnimationLoop(callback);
            callback === null ? animation.stop() : animation.start();
        };
        xr.addEventListener("sessionstart", onXRSessionStart);
        xr.addEventListener("sessionend", onXRSessionEnd);
        // Rendering
        this.render = function(scene, camera) {
            if (camera !== undefined && camera.isCamera !== true) {
                console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                return;
            }
            if (_isContextLost === true) return;
            // update scene graph
            if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
            // update camera matrices and frustum
            if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
            if (xr.enabled === true && xr.isPresenting === true) {
                if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
                camera = xr.getCamera(); // use XR camera for rendering
            }
            //
            if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
            currentRenderState = renderStates.get(scene, renderStateStack.length);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
            _frustum.setFromProjectionMatrix(_projScreenMatrix);
            _localClippingEnabled = this.localClippingEnabled;
            _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
            currentRenderList = renderLists.get(scene, renderListStack.length);
            currentRenderList.init();
            renderListStack.push(currentRenderList);
            projectObject(scene, camera, 0, _this.sortObjects);
            currentRenderList.finish();
            if (_this.sortObjects === true) currentRenderList.sort(_opaqueSort, _transparentSort);
            //
            this.info.render.frame++;
            if (_clippingEnabled === true) clipping.beginShadows();
            const shadowsArray = currentRenderState.state.shadowsArray;
            shadowMap.render(shadowsArray, scene, camera);
            if (_clippingEnabled === true) clipping.endShadows();
            //
            if (this.info.autoReset === true) this.info.reset();
            //
            background.render(currentRenderList, scene);
            // render scene
            currentRenderState.setupLights(_this._useLegacyLights);
            if (camera.isArrayCamera) {
                const cameras = camera.cameras;
                for(let i = 0, l = cameras.length; i < l; i++){
                    const camera2 = cameras[i];
                    renderScene(currentRenderList, scene, camera2, camera2.viewport);
                }
            } else renderScene(currentRenderList, scene, camera);
            //
            if (_currentRenderTarget !== null) {
                // resolve multisample renderbuffers to a single-sample texture if necessary
                textures.updateMultisampleRenderTarget(_currentRenderTarget);
                // Generate mipmap if we're using any kind of mipmap filtering
                textures.updateRenderTargetMipmap(_currentRenderTarget);
            }
            //
            if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
            // _gl.finish();
            bindingStates.resetDefaultState();
            _currentMaterialId = -1;
            _currentCamera = null;
            renderStateStack.pop();
            if (renderStateStack.length > 0) currentRenderState = renderStateStack[renderStateStack.length - 1];
            else currentRenderState = null;
            renderListStack.pop();
            if (renderListStack.length > 0) currentRenderList = renderListStack[renderListStack.length - 1];
            else currentRenderList = null;
        };
        function projectObject(object, camera, groupOrder, sortObjects) {
            if (object.visible === false) return;
            const visible = object.layers.test(camera.layers);
            if (visible) {
                if (object.isGroup) groupOrder = object.renderOrder;
                else if (object.isLOD) {
                    if (object.autoUpdate === true) object.update(camera);
                } else if (object.isLight) {
                    currentRenderState.pushLight(object);
                    if (object.castShadow) currentRenderState.pushShadow(object);
                } else if (object.isSprite) {
                    if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                        if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                        const geometry = objects.update(object);
                        const material = object.material;
                        if (material.visible) currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                    }
                } else if (object.isMesh || object.isLine || object.isPoints) {
                    if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                        const geometry = objects.update(object);
                        const material = object.material;
                        if (sortObjects) {
                            if (object.boundingSphere !== undefined) {
                                if (object.boundingSphere === null) object.computeBoundingSphere();
                                _vector3.copy(object.boundingSphere.center);
                            } else {
                                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                                _vector3.copy(geometry.boundingSphere.center);
                            }
                            _vector3.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                        }
                        if (Array.isArray(material)) {
                            const groups = geometry.groups;
                            for(let i = 0, l = groups.length; i < l; i++){
                                const group = groups[i];
                                const groupMaterial = material[group.materialIndex];
                                if (groupMaterial && groupMaterial.visible) currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                            }
                        } else if (material.visible) currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                    }
                }
            }
            const children = object.children;
            for(let i = 0, l = children.length; i < l; i++)projectObject(children[i], camera, groupOrder, sortObjects);
        }
        function renderScene(currentRenderList, scene, camera, viewport) {
            const opaqueObjects = currentRenderList.opaque;
            const transmissiveObjects = currentRenderList.transmissive;
            const transparentObjects = currentRenderList.transparent;
            currentRenderState.setupLightsView(camera);
            if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
            if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
            if (viewport) state.viewport(_currentViewport.copy(viewport));
            if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
            if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
            if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
            // Ensure depth buffer writing is enabled so it can be cleared on next render
            state.buffers.depth.setTest(true);
            state.buffers.depth.setMask(true);
            state.buffers.color.setMask(true);
            state.setPolygonOffset(false);
        }
        function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
            const isWebGL2 = capabilities.isWebGL2;
            if (_transmissionRenderTarget === null) _transmissionRenderTarget = new $04ce9c8dcd7d39f0$export$3c052beb2e51e23f(1, 1, {
                generateMipmaps: true,
                type: extensions.has("EXT_color_buffer_half_float") ? $04ce9c8dcd7d39f0$export$2697304443f382bc : $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10,
                minFilter: $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b,
                samples: isWebGL2 ? 4 : 0
            });
            _this.getDrawingBufferSize(_vector2);
            if (isWebGL2) _transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
            else _transmissionRenderTarget.setSize($04ce9c8dcd7d39f0$var$floorPowerOfTwo(_vector2.x), $04ce9c8dcd7d39f0$var$floorPowerOfTwo(_vector2.y));
            //
            const currentRenderTarget = _this.getRenderTarget();
            _this.setRenderTarget(_transmissionRenderTarget);
            _this.getClearColor(_currentClearColor);
            _currentClearAlpha = _this.getClearAlpha();
            if (_currentClearAlpha < 1) _this.setClearColor(0xffffff, 0.5);
            _this.clear();
            // Turn off the features which can affect the frag color for opaque objects pass.
            // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
            const currentToneMapping = _this.toneMapping;
            _this.toneMapping = $04ce9c8dcd7d39f0$export$9fcb6b4294603b2;
            renderObjects(opaqueObjects, scene, camera);
            textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
            textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            let renderTargetNeedsUpdate = false;
            for(let i = 0, l = transmissiveObjects.length; i < l; i++){
                const renderItem = transmissiveObjects[i];
                const object = renderItem.object;
                const geometry = renderItem.geometry;
                const material = renderItem.material;
                const group = renderItem.group;
                if (material.side === $04ce9c8dcd7d39f0$export$3b296b6f144d5b03 && object.layers.test(camera.layers)) {
                    const currentSide = material.side;
                    material.side = $04ce9c8dcd7d39f0$export$d9f0486e75b5ace;
                    material.needsUpdate = true;
                    renderObject(object, scene, camera, geometry, material, group);
                    material.side = currentSide;
                    material.needsUpdate = true;
                    renderTargetNeedsUpdate = true;
                }
            }
            if (renderTargetNeedsUpdate === true) {
                textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
                textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            }
            _this.setRenderTarget(currentRenderTarget);
            _this.setClearColor(_currentClearColor, _currentClearAlpha);
            _this.toneMapping = currentToneMapping;
        }
        function renderObjects(renderList, scene, camera) {
            const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
            for(let i = 0, l = renderList.length; i < l; i++){
                const renderItem = renderList[i];
                const object = renderItem.object;
                const geometry = renderItem.geometry;
                const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
                const group = renderItem.group;
                if (object.layers.test(camera.layers)) renderObject(object, scene, camera, geometry, material, group);
            }
        }
        function renderObject(object, scene, camera, geometry, material, group) {
            object.onBeforeRender(_this, scene, camera, geometry, material, group);
            object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
            object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
            material.onBeforeRender(_this, scene, camera, geometry, object, group);
            if (material.transparent === true && material.side === $04ce9c8dcd7d39f0$export$3b296b6f144d5b03 && material.forceSinglePass === false) {
                material.side = $04ce9c8dcd7d39f0$export$d9f0486e75b5ace;
                material.needsUpdate = true;
                _this.renderBufferDirect(camera, scene, geometry, material, object, group);
                material.side = $04ce9c8dcd7d39f0$export$2ede184fc2998901;
                material.needsUpdate = true;
                _this.renderBufferDirect(camera, scene, geometry, material, object, group);
                material.side = $04ce9c8dcd7d39f0$export$3b296b6f144d5b03;
            } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            object.onAfterRender(_this, scene, camera, geometry, material, group);
        }
        function getProgram(material, scene, object) {
            if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            const shadowsArray = currentRenderState.state.shadowsArray;
            const lightsStateVersion = lights.state.version;
            const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
            const programCacheKey = programCache.getProgramCacheKey(parameters);
            let programs = materialProperties.programs;
            // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
            materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
            materialProperties.fog = scene.fog;
            materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
            if (programs === undefined) {
                // new material
                material.addEventListener("dispose", onMaterialDispose);
                programs = new Map();
                materialProperties.programs = programs;
            }
            let program = programs.get(programCacheKey);
            if (program !== undefined) // early out if program and light state is identical
            {
                if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                    updateCommonMaterialProperties(material, parameters);
                    return program;
                }
            } else {
                parameters.uniforms = programCache.getUniforms(material);
                material.onBuild(object, parameters, _this);
                material.onBeforeCompile(parameters, _this);
                program = programCache.acquireProgram(parameters, programCacheKey);
                programs.set(programCacheKey, program);
                materialProperties.uniforms = parameters.uniforms;
            }
            const uniforms = materialProperties.uniforms;
            if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) uniforms.clippingPlanes = clipping.uniform;
            updateCommonMaterialProperties(material, parameters);
            // store the light setup it was created for
            materialProperties.needsLights = materialNeedsLights(material);
            materialProperties.lightsStateVersion = lightsStateVersion;
            if (materialProperties.needsLights) {
                // wire up the material to this renderer's lighting state
                uniforms.ambientLightColor.value = lights.state.ambient;
                uniforms.lightProbe.value = lights.state.probe;
                uniforms.directionalLights.value = lights.state.directional;
                uniforms.directionalLightShadows.value = lights.state.directionalShadow;
                uniforms.spotLights.value = lights.state.spot;
                uniforms.spotLightShadows.value = lights.state.spotShadow;
                uniforms.rectAreaLights.value = lights.state.rectArea;
                uniforms.ltc_1.value = lights.state.rectAreaLTC1;
                uniforms.ltc_2.value = lights.state.rectAreaLTC2;
                uniforms.pointLights.value = lights.state.point;
                uniforms.pointLightShadows.value = lights.state.pointShadow;
                uniforms.hemisphereLights.value = lights.state.hemi;
                uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
                uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
                uniforms.spotShadowMap.value = lights.state.spotShadowMap;
                uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
                uniforms.spotLightMap.value = lights.state.spotLightMap;
                uniforms.pointShadowMap.value = lights.state.pointShadowMap;
                uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
            // TODO (abelnation): add area lights shadow info to uniforms
            }
            const progUniforms = program.getUniforms();
            const uniformsList = $04ce9c8dcd7d39f0$var$WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
            materialProperties.currentProgram = program;
            materialProperties.uniformsList = uniformsList;
            return program;
        }
        function updateCommonMaterialProperties(material, parameters) {
            const materialProperties = properties.get(material);
            materialProperties.outputColorSpace = parameters.outputColorSpace;
            materialProperties.instancing = parameters.instancing;
            materialProperties.instancingColor = parameters.instancingColor;
            materialProperties.skinning = parameters.skinning;
            materialProperties.morphTargets = parameters.morphTargets;
            materialProperties.morphNormals = parameters.morphNormals;
            materialProperties.morphColors = parameters.morphColors;
            materialProperties.morphTargetsCount = parameters.morphTargetsCount;
            materialProperties.numClippingPlanes = parameters.numClippingPlanes;
            materialProperties.numIntersection = parameters.numClipIntersection;
            materialProperties.vertexAlphas = parameters.vertexAlphas;
            materialProperties.vertexTangents = parameters.vertexTangents;
            materialProperties.toneMapping = parameters.toneMapping;
        }
        function setProgram(camera, scene, geometry, material, object) {
            if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
            textures.resetTextureUnits();
            const fog = scene.fog;
            const environment = material.isMeshStandardMaterial ? scene.environment : null;
            const colorSpace1 = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : $04ce9c8dcd7d39f0$export$42429b3acfb233a4;
            const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
            const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
            const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
            const morphTargets = !!geometry.morphAttributes.position;
            const morphNormals = !!geometry.morphAttributes.normal;
            const morphColors = !!geometry.morphAttributes.color;
            let toneMapping = $04ce9c8dcd7d39f0$export$9fcb6b4294603b2;
            if (material.toneMapped) {
                if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) toneMapping = _this.toneMapping;
            }
            const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
            const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            if (_clippingEnabled === true) {
                if (_localClippingEnabled === true || camera !== _currentCamera) {
                    const useCache = camera === _currentCamera && material.id === _currentMaterialId;
                    // we might want to call this function with some ClippingGroup
                    // object instead of the material, once it becomes feasible
                    // (#8465, #8379)
                    clipping.setState(material, camera, useCache);
                }
            }
            //
            let needsProgramChange = false;
            if (material.version === materialProperties.__version) {
                if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) needsProgramChange = true;
                else if (materialProperties.outputColorSpace !== colorSpace1) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancing === false) needsProgramChange = true;
                else if (!object.isInstancedMesh && materialProperties.instancing === true) needsProgramChange = true;
                else if (object.isSkinnedMesh && materialProperties.skinning === false) needsProgramChange = true;
                else if (!object.isSkinnedMesh && materialProperties.skinning === true) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) needsProgramChange = true;
                else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) needsProgramChange = true;
                else if (materialProperties.envMap !== envMap) needsProgramChange = true;
                else if (material.fog === true && materialProperties.fog !== fog) needsProgramChange = true;
                else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) needsProgramChange = true;
                else if (materialProperties.vertexAlphas !== vertexAlphas) needsProgramChange = true;
                else if (materialProperties.vertexTangents !== vertexTangents) needsProgramChange = true;
                else if (materialProperties.morphTargets !== morphTargets) needsProgramChange = true;
                else if (materialProperties.morphNormals !== morphNormals) needsProgramChange = true;
                else if (materialProperties.morphColors !== morphColors) needsProgramChange = true;
                else if (materialProperties.toneMapping !== toneMapping) needsProgramChange = true;
                else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) needsProgramChange = true;
            } else {
                needsProgramChange = true;
                materialProperties.__version = material.version;
            }
            //
            let program = materialProperties.currentProgram;
            if (needsProgramChange === true) program = getProgram(material, scene, object);
            let refreshProgram = false;
            let refreshMaterial = false;
            let refreshLights = false;
            const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
            if (state.useProgram(program.program)) {
                refreshProgram = true;
                refreshMaterial = true;
                refreshLights = true;
            }
            if (material.id !== _currentMaterialId) {
                _currentMaterialId = material.id;
                refreshMaterial = true;
            }
            if (refreshProgram || _currentCamera !== camera) {
                p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
                if (capabilities.logarithmicDepthBuffer) p_uniforms.setValue(_gl, "logDepthBufFC", 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
                if (_currentCamera !== camera) {
                    _currentCamera = camera;
                    // lighting uniforms depend on the camera so enforce an update
                    // now, in case this material supports lights - or later, when
                    // the next material that does gets activated:
                    refreshMaterial = true; // set to true on material change
                    refreshLights = true; // remains set until update done
                }
                // load material specific uniforms
                // (shader material also gets them for the sake of genericity)
                if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
                    const uCamPos = p_uniforms.map.cameraPosition;
                    if (uCamPos !== undefined) uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
                }
                if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
                if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
            }
            // skinning and morph target uniforms must be set even if material didn't change
            // auto-setting of texture unit for bone and morph texture must go before other textures
            // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
            if (object.isSkinnedMesh) {
                p_uniforms.setOptional(_gl, object, "bindMatrix");
                p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
                const skeleton = object.skeleton;
                if (skeleton) {
                    if (capabilities.floatVertexTextures) {
                        if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
                        p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
                        p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
                    } else console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
                }
            }
            const morphAttributes = geometry.morphAttributes;
            if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) morphtargets.update(object, geometry, program);
            if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
                materialProperties.receiveShadow = object.receiveShadow;
                p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
            }
            // https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
            if (material.isMeshGouraudMaterial && material.envMap !== null) {
                m_uniforms.envMap.value = envMap;
                m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            }
            if (refreshMaterial) {
                p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
                if (materialProperties.needsLights) // the current material requires lighting info
                // note: all lighting uniforms are always set correctly
                // they simply reference the renderer's state for their
                // values
                //
                // use the current material's .needsUpdate flags to set
                // the GL state when required
                markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
                // refresh uniforms common to several materials
                if (fog && material.fog === true) materials.refreshFogUniforms(m_uniforms, fog);
                materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
                $04ce9c8dcd7d39f0$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
            }
            if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
                $04ce9c8dcd7d39f0$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
                material.uniformsNeedUpdate = false;
            }
            if (material.isSpriteMaterial) p_uniforms.setValue(_gl, "center", object.center);
            // common matrices
            p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
            p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
            p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
            // UBOs
            if (material.isShaderMaterial || material.isRawShaderMaterial) {
                const groups = material.uniformsGroups;
                for(let i = 0, l = groups.length; i < l; i++)if (capabilities.isWebGL2) {
                    const group = groups[i];
                    uniformsGroups.update(group, program);
                    uniformsGroups.bind(group, program);
                } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
            return program;
        }
        // If uniforms are marked as clean, they don't need to be loaded to the GPU.
        function markUniformsLightsNeedsUpdate(uniforms, value) {
            uniforms.ambientLightColor.needsUpdate = value;
            uniforms.lightProbe.needsUpdate = value;
            uniforms.directionalLights.needsUpdate = value;
            uniforms.directionalLightShadows.needsUpdate = value;
            uniforms.pointLights.needsUpdate = value;
            uniforms.pointLightShadows.needsUpdate = value;
            uniforms.spotLights.needsUpdate = value;
            uniforms.spotLightShadows.needsUpdate = value;
            uniforms.rectAreaLights.needsUpdate = value;
            uniforms.hemisphereLights.needsUpdate = value;
        }
        function materialNeedsLights(material) {
            return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
        }
        this.getActiveCubeFace = function() {
            return _currentActiveCubeFace;
        };
        this.getActiveMipmapLevel = function() {
            return _currentActiveMipmapLevel;
        };
        this.getRenderTarget = function() {
            return _currentRenderTarget;
        };
        this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
            properties.get(renderTarget.texture).__webglTexture = colorTexture;
            properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__hasExternalTextures = true;
            if (renderTargetProperties.__hasExternalTextures) {
                renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
                if (!renderTargetProperties.__autoAllocateDepthBuffer) // The multisample_render_to_texture extension doesn't work properly if there
                // are midframe flushes and an external depth buffer. Disable use of the extension.
                {
                    if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
                        console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
                        renderTargetProperties.__useRenderToTexture = false;
                    }
                }
            }
        };
        this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
            renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
        };
        this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
            _currentRenderTarget = renderTarget;
            _currentActiveCubeFace = activeCubeFace;
            _currentActiveMipmapLevel = activeMipmapLevel;
            let useDefaultFramebuffer = true;
            let framebuffer = null;
            let isCube = false;
            let isRenderTarget3D = false;
            if (renderTarget) {
                const renderTargetProperties = properties.get(renderTarget);
                if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
                    // We need to make sure to rebind the framebuffer.
                    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
                    useDefaultFramebuffer = false;
                } else if (renderTargetProperties.__webglFramebuffer === undefined) textures.setupRenderTarget(renderTarget);
                else if (renderTargetProperties.__hasExternalTextures) // Color and depth texture must be rebound in order for the swapchain to update.
                textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
                const texture = renderTarget.texture;
                if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) isRenderTarget3D = true;
                const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
                if (renderTarget.isWebGLCubeRenderTarget) {
                    if (Array.isArray(__webglFramebuffer[activeCubeFace])) framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
                    else framebuffer = __webglFramebuffer[activeCubeFace];
                    isCube = true;
                } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
                else if (Array.isArray(__webglFramebuffer)) framebuffer = __webglFramebuffer[activeMipmapLevel];
                else framebuffer = __webglFramebuffer;
                _currentViewport.copy(renderTarget.viewport);
                _currentScissor.copy(renderTarget.scissor);
                _currentScissorTest = renderTarget.scissorTest;
            } else {
                _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
                _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
                _currentScissorTest = _scissorTest;
            }
            const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) state.drawBuffers(renderTarget, framebuffer);
            state.viewport(_currentViewport);
            state.scissor(_currentScissor);
            state.setScissorTest(_currentScissorTest);
            if (isCube) {
                const textureProperties = properties.get(renderTarget.texture);
                _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
            } else if (isRenderTarget3D) {
                const textureProperties = properties.get(renderTarget.texture);
                const layer = activeCubeFace || 0;
                _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
            }
            _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
        };
        this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
            if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                return;
            }
            let framebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) framebuffer = framebuffer[activeCubeFaceIndex];
            if (framebuffer) {
                state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                try {
                    const texture = renderTarget.texture;
                    const textureFormat = texture.format;
                    const textureType = texture.type;
                    if (textureFormat !== $04ce9c8dcd7d39f0$export$3f8bb04b555a363c && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        return;
                    }
                    const halfFloatSupportedByExt = textureType === $04ce9c8dcd7d39f0$export$2697304443f382bc && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
                    if (textureType !== $04ce9c8dcd7d39f0$export$2e8ce08d3f6f5e10 && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
                    !(textureType === $04ce9c8dcd7d39f0$export$f6d331659b644596 && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
                    !halfFloatSupportedByExt) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        return;
                    }
                    // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                    if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
                } finally{
                    // restore framebuffer of current render target if necessary
                    const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                }
            }
        };
        this.copyFramebufferToTexture = function(position, texture, level = 0) {
            const levelScale = Math.pow(2, -level);
            const width = Math.floor(texture.image.width * levelScale);
            const height = Math.floor(texture.image.height * levelScale);
            textures.setTexture2D(texture, 0);
            _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
            state.unbindTexture();
        };
        this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
            const width = srcTexture.image.width;
            const height = srcTexture.image.height;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            textures.setTexture2D(dstTexture, 0);
            // As another texture upload may have changed pixelStorei
            // parameters, make sure they are correct for the dstTexture
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            if (srcTexture.isDataTexture) _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
            else if (srcTexture.isCompressedTexture) _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
            else _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
            // Generate mipmaps only when copying level 0
            if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
            state.unbindTexture();
        };
        this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
            if (_this.isWebGL1Renderer) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                return;
            }
            const width = sourceBox.max.x - sourceBox.min.x + 1;
            const height = sourceBox.max.y - sourceBox.min.y + 1;
            const depth = sourceBox.max.z - sourceBox.min.z + 1;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            let glTarget;
            if (dstTexture.isData3DTexture) {
                textures.setTexture3D(dstTexture, 0);
                glTarget = _gl.TEXTURE_3D;
            } else if (dstTexture.isDataArrayTexture) {
                textures.setTexture2DArray(dstTexture, 0);
                glTarget = _gl.TEXTURE_2D_ARRAY;
            } else {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                return;
            }
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
            const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
            const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
            const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
            const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
            const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
            if (srcTexture.isDataTexture || srcTexture.isData3DTexture) _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
            else if (srcTexture.isCompressedArrayTexture) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
                _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
            } else _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
            // Generate mipmaps only when copying level 0
            if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
            state.unbindTexture();
        };
        this.initTexture = function(texture) {
            if (texture.isCubeTexture) textures.setTextureCube(texture, 0);
            else if (texture.isData3DTexture) textures.setTexture3D(texture, 0);
            else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textures.setTexture2DArray(texture, 0);
            else textures.setTexture2D(texture, 0);
            state.unbindTexture();
        };
        this.resetState = function() {
            _currentActiveCubeFace = 0;
            _currentActiveMipmapLevel = 0;
            _currentRenderTarget = null;
            state.reset();
            bindingStates.reset();
        };
        if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    get coordinateSystem() {
        return $04ce9c8dcd7d39f0$export$5a0e9190d10875d3;
    }
    get physicallyCorrectLights() {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        return !this.useLegacyLights;
    }
    set physicallyCorrectLights(value) {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        this.useLegacyLights = !value;
    }
    get outputEncoding() {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
        return this.outputColorSpace === $04ce9c8dcd7d39f0$export$561f394b24edfcaa ? $04ce9c8dcd7d39f0$export$f32388edbb32674 : $04ce9c8dcd7d39f0$export$7207336e4151a112;
    }
    set outputEncoding(encoding) {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
        this.outputColorSpace = encoding === $04ce9c8dcd7d39f0$export$f32388edbb32674 ? $04ce9c8dcd7d39f0$export$561f394b24edfcaa : $04ce9c8dcd7d39f0$export$42429b3acfb233a4;
    }
    get useLegacyLights() {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
        return this._useLegacyLights;
    }
    set useLegacyLights(value) {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
        this._useLegacyLights = value;
    }
}
class $04ce9c8dcd7d39f0$export$a2f65229194348f9 extends $04ce9c8dcd7d39f0$export$f6cc00ef28d7cf97 {
}
$04ce9c8dcd7d39f0$export$a2f65229194348f9.prototype.isWebGL1Renderer = true;
class $04ce9c8dcd7d39f0$export$6f1519f023b8d0f6 {
    constructor(color, density = 0.00025){
        this.isFogExp2 = true;
        this.name = "";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color);
        this.density = density;
    }
    clone() {
        return new $04ce9c8dcd7d39f0$export$6f1519f023b8d0f6(this.color, this.density);
    }
    toJSON() {
        return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
        };
    }
}
class $04ce9c8dcd7d39f0$export$3c890837b09508d4 {
    constructor(color, near = 1, far = 1000){
        this.isFog = true;
        this.name = "";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color);
        this.near = near;
        this.far = far;
    }
    clone() {
        return new $04ce9c8dcd7d39f0$export$3c890837b09508d4(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}
class $04ce9c8dcd7d39f0$export$38af1803e3442a7f extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.isScene = true;
        this.type = "Scene";
        this.background = null;
        this.environment = null;
        this.fog = null;
        this.backgroundBlurriness = 0;
        this.backgroundIntensity = 1;
        this.overrideMaterial = null;
        if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.background !== null) this.background = source.background.clone();
        if (source.environment !== null) this.environment = source.environment.clone();
        if (source.fog !== null) this.fog = source.fog.clone();
        this.backgroundBlurriness = source.backgroundBlurriness;
        this.backgroundIntensity = source.backgroundIntensity;
        if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.fog !== null) data.object.fog = this.fog.toJSON();
        if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
        if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$3d5cd879f108f53f {
    constructor(array, stride){
        this.isInterleavedBuffer = true;
        this.array = array;
        this.stride = stride;
        this.count = array !== undefined ? array.length / stride : 0;
        this.usage = $04ce9c8dcd7d39f0$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
    }
    onUploadCallback() {}
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.array = new source.array.constructor(source.array);
        this.count = source.count;
        this.stride = source.stride;
        this.usage = source.usage;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.stride;
        index2 *= attribute.stride;
        for(let i = 0, l = this.stride; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
        return this;
    }
    set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
    }
    clone(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {};
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
        const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
        const ib = new this.constructor(array, this.stride);
        ib.setUsage(this.usage);
        return ib;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    toJSON(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {};
        // generate UUID for array buffer if necessary
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
        //
        return {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}
const $04ce9c8dcd7d39f0$var$_vector$5 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$920b6d07334599c7 {
    constructor(interleavedBuffer, itemSize, offset, normalized = false){
        this.isInterleavedBufferAttribute = true;
        this.name = "";
        this.data = interleavedBuffer;
        this.itemSize = itemSize;
        this.offset = offset;
        this.normalized = normalized;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(value) {
        this.data.needsUpdate = value;
    }
    applyMatrix4(m) {
        for(let i = 0, l = this.data.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$5.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$5.applyMatrix4(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$5.x, $04ce9c8dcd7d39f0$var$_vector$5.y, $04ce9c8dcd7d39f0$var$_vector$5.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$5.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$5.applyNormalMatrix(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$5.x, $04ce9c8dcd7d39f0$var$_vector$5.y, $04ce9c8dcd7d39f0$var$_vector$5.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i = 0, l = this.count; i < l; i++){
            $04ce9c8dcd7d39f0$var$_vector$5.fromBufferAttribute(this, i);
            $04ce9c8dcd7d39f0$var$_vector$5.transformDirection(m);
            this.setXYZ(i, $04ce9c8dcd7d39f0$var$_vector$5.x, $04ce9c8dcd7d39f0$var$_vector$5.y, $04ce9c8dcd7d39f0$var$_vector$5.z);
        }
        return this;
    }
    setX(index, x) {
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
        this.data.array[index * this.data.stride + this.offset] = x;
        return this;
    }
    setY(index, y) {
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        this.data.array[index * this.data.stride + this.offset + 1] = y;
        return this;
    }
    setZ(index, z) {
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        this.data.array[index * this.data.stride + this.offset + 2] = z;
        return this;
    }
    setW(index, w) {
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        this.data.array[index * this.data.stride + this.offset + 3] = w;
        return this;
    }
    getX(index) {
        let x = this.data.array[index * this.data.stride + this.offset];
        if (this.normalized) x = $04ce9c8dcd7d39f0$var$denormalize(x, this.array);
        return x;
    }
    getY(index) {
        let y = this.data.array[index * this.data.stride + this.offset + 1];
        if (this.normalized) y = $04ce9c8dcd7d39f0$var$denormalize(y, this.array);
        return y;
    }
    getZ(index) {
        let z = this.data.array[index * this.data.stride + this.offset + 2];
        if (this.normalized) z = $04ce9c8dcd7d39f0$var$denormalize(z, this.array);
        return z;
    }
    getW(index) {
        let w = this.data.array[index * this.data.stride + this.offset + 3];
        if (this.normalized) w = $04ce9c8dcd7d39f0$var$denormalize(w, this.array);
        return w;
    }
    setXY(index, x, y) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
            x = $04ce9c8dcd7d39f0$var$normalize(x, this.array);
            y = $04ce9c8dcd7d39f0$var$normalize(y, this.array);
            z = $04ce9c8dcd7d39f0$var$normalize(z, this.array);
            w = $04ce9c8dcd7d39f0$var$normalize(w, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        this.data.array[index + 3] = w;
        return this;
    }
    clone(data) {
        if (data === undefined) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            return new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(new this.array.constructor(array), this.itemSize, this.normalized);
        } else {
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
            return new $04ce9c8dcd7d39f0$export$920b6d07334599c7(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
    }
    toJSON(data) {
        if (data === undefined) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            // de-interleave data and save it as an ordinary buffer attribute for now
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: array,
                normalized: this.normalized
            };
        } else {
            // save as true interleaved attribute
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
            return {
                isInterleavedBufferAttribute: true,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
            };
        }
    }
}
class $04ce9c8dcd7d39f0$export$5ec7dd1c6994bf8e extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isSpriteMaterial = true;
        this.type = "SpriteMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff);
        this.map = null;
        this.alphaMap = null;
        this.rotation = 0;
        this.sizeAttenuation = true;
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.rotation = source.rotation;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
    }
}
let $04ce9c8dcd7d39f0$var$_geometry;
const $04ce9c8dcd7d39f0$var$_intersectPoint = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_worldScale = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_mvPosition = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_alignedPosition = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_rotatedPosition = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_viewWorldMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_vA = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vB = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_vC = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_uvA = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_uvB = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
const $04ce9c8dcd7d39f0$var$_uvC = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
class $04ce9c8dcd7d39f0$export$3075603db8e6204c extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(material){
        super();
        this.isSprite = true;
        this.type = "Sprite";
        if ($04ce9c8dcd7d39f0$var$_geometry === undefined) {
            $04ce9c8dcd7d39f0$var$_geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
            const float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]);
            const interleavedBuffer = new $04ce9c8dcd7d39f0$export$3d5cd879f108f53f(float32Array, 5);
            $04ce9c8dcd7d39f0$var$_geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            $04ce9c8dcd7d39f0$var$_geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$920b6d07334599c7(interleavedBuffer, 3, 0, false));
            $04ce9c8dcd7d39f0$var$_geometry.setAttribute("uv", new $04ce9c8dcd7d39f0$export$920b6d07334599c7(interleavedBuffer, 2, 3, false));
        }
        this.geometry = $04ce9c8dcd7d39f0$var$_geometry;
        this.material = material !== undefined ? material : new $04ce9c8dcd7d39f0$export$5ec7dd1c6994bf8e();
        this.center = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, 0.5);
    }
    raycast(raycaster, intersects) {
        if (raycaster.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
        $04ce9c8dcd7d39f0$var$_worldScale.setFromMatrixScale(this.matrixWorld);
        $04ce9c8dcd7d39f0$var$_viewWorldMatrix.copy(raycaster.camera.matrixWorld);
        this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
        $04ce9c8dcd7d39f0$var$_mvPosition.setFromMatrixPosition(this.modelViewMatrix);
        if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) $04ce9c8dcd7d39f0$var$_worldScale.multiplyScalar(-$04ce9c8dcd7d39f0$var$_mvPosition.z);
        const rotation = this.material.rotation;
        let sin, cos;
        if (rotation !== 0) {
            cos = Math.cos(rotation);
            sin = Math.sin(rotation);
        }
        const center = this.center;
        $04ce9c8dcd7d39f0$var$transformVertex($04ce9c8dcd7d39f0$var$_vA.set(-0.5, -0.5, 0), $04ce9c8dcd7d39f0$var$_mvPosition, center, $04ce9c8dcd7d39f0$var$_worldScale, sin, cos);
        $04ce9c8dcd7d39f0$var$transformVertex($04ce9c8dcd7d39f0$var$_vB.set(0.5, -0.5, 0), $04ce9c8dcd7d39f0$var$_mvPosition, center, $04ce9c8dcd7d39f0$var$_worldScale, sin, cos);
        $04ce9c8dcd7d39f0$var$transformVertex($04ce9c8dcd7d39f0$var$_vC.set(0.5, 0.5, 0), $04ce9c8dcd7d39f0$var$_mvPosition, center, $04ce9c8dcd7d39f0$var$_worldScale, sin, cos);
        $04ce9c8dcd7d39f0$var$_uvA.set(0, 0);
        $04ce9c8dcd7d39f0$var$_uvB.set(1, 0);
        $04ce9c8dcd7d39f0$var$_uvC.set(1, 1);
        // check first triangle
        let intersect = raycaster.ray.intersectTriangle($04ce9c8dcd7d39f0$var$_vA, $04ce9c8dcd7d39f0$var$_vB, $04ce9c8dcd7d39f0$var$_vC, false, $04ce9c8dcd7d39f0$var$_intersectPoint);
        if (intersect === null) {
            // check second triangle
            $04ce9c8dcd7d39f0$var$transformVertex($04ce9c8dcd7d39f0$var$_vB.set(-0.5, 0.5, 0), $04ce9c8dcd7d39f0$var$_mvPosition, center, $04ce9c8dcd7d39f0$var$_worldScale, sin, cos);
            $04ce9c8dcd7d39f0$var$_uvB.set(0, 1);
            intersect = raycaster.ray.intersectTriangle($04ce9c8dcd7d39f0$var$_vA, $04ce9c8dcd7d39f0$var$_vC, $04ce9c8dcd7d39f0$var$_vB, false, $04ce9c8dcd7d39f0$var$_intersectPoint);
            if (intersect === null) return;
        }
        const distance = raycaster.ray.origin.distanceTo($04ce9c8dcd7d39f0$var$_intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            point: $04ce9c8dcd7d39f0$var$_intersectPoint.clone(),
            uv: $04ce9c8dcd7d39f0$export$5a465592bfe74b48.getInterpolation($04ce9c8dcd7d39f0$var$_intersectPoint, $04ce9c8dcd7d39f0$var$_vA, $04ce9c8dcd7d39f0$var$_vB, $04ce9c8dcd7d39f0$var$_vC, $04ce9c8dcd7d39f0$var$_uvA, $04ce9c8dcd7d39f0$var$_uvB, $04ce9c8dcd7d39f0$var$_uvC, new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()),
            face: null,
            object: this
        });
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.center !== undefined) this.center.copy(source.center);
        this.material = source.material;
        return this;
    }
}
function $04ce9c8dcd7d39f0$var$transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    // compute position in camera space
    $04ce9c8dcd7d39f0$var$_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    // to check if rotation is not zero
    if (sin !== undefined) {
        $04ce9c8dcd7d39f0$var$_rotatedPosition.x = cos * $04ce9c8dcd7d39f0$var$_alignedPosition.x - sin * $04ce9c8dcd7d39f0$var$_alignedPosition.y;
        $04ce9c8dcd7d39f0$var$_rotatedPosition.y = sin * $04ce9c8dcd7d39f0$var$_alignedPosition.x + cos * $04ce9c8dcd7d39f0$var$_alignedPosition.y;
    } else $04ce9c8dcd7d39f0$var$_rotatedPosition.copy($04ce9c8dcd7d39f0$var$_alignedPosition);
    vertexPosition.copy(mvPosition);
    vertexPosition.x += $04ce9c8dcd7d39f0$var$_rotatedPosition.x;
    vertexPosition.y += $04ce9c8dcd7d39f0$var$_rotatedPosition.y;
    // transform to world space
    vertexPosition.applyMatrix4($04ce9c8dcd7d39f0$var$_viewWorldMatrix);
}
const $04ce9c8dcd7d39f0$var$_v1$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v2$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$112e7237be0c5f30 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this._currentLevel = 0;
        this.type = "LOD";
        Object.defineProperties(this, {
            levels: {
                enumerable: true,
                value: []
            },
            isLOD: {
                value: true
            }
        });
        this.autoUpdate = true;
    }
    copy(source) {
        super.copy(source, false);
        const levels = source.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            this.addLevel(level.object.clone(), level.distance, level.hysteresis);
        }
        this.autoUpdate = source.autoUpdate;
        return this;
    }
    addLevel(object, distance = 0, hysteresis = 0) {
        distance = Math.abs(distance);
        const levels = this.levels;
        let l;
        for(l = 0; l < levels.length; l++){
            if (distance < levels[l].distance) break;
        }
        levels.splice(l, 0, {
            distance: distance,
            hysteresis: hysteresis,
            object: object
        });
        this.add(object);
        return this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(distance) {
        const levels = this.levels;
        if (levels.length > 0) {
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                let levelDistance = levels[i].distance;
                if (levels[i].object.visible) levelDistance -= levelDistance * levels[i].hysteresis;
                if (distance < levelDistance) break;
            }
            return levels[i - 1].object;
        }
        return null;
    }
    raycast(raycaster, intersects) {
        const levels = this.levels;
        if (levels.length > 0) {
            $04ce9c8dcd7d39f0$var$_v1$2.setFromMatrixPosition(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo($04ce9c8dcd7d39f0$var$_v1$2);
            this.getObjectForDistance(distance).raycast(raycaster, intersects);
        }
    }
    update(camera) {
        const levels = this.levels;
        if (levels.length > 1) {
            $04ce9c8dcd7d39f0$var$_v1$2.setFromMatrixPosition(camera.matrixWorld);
            $04ce9c8dcd7d39f0$var$_v2$1.setFromMatrixPosition(this.matrixWorld);
            const distance = $04ce9c8dcd7d39f0$var$_v1$2.distanceTo($04ce9c8dcd7d39f0$var$_v2$1) / camera.zoom;
            levels[0].object.visible = true;
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                let levelDistance = levels[i].distance;
                if (levels[i].object.visible) levelDistance -= levelDistance * levels[i].hysteresis;
                if (distance >= levelDistance) {
                    levels[i - 1].object.visible = false;
                    levels[i].object.visible = true;
                } else break;
            }
            this._currentLevel = i - 1;
            for(; i < l; i++)levels[i].object.visible = false;
        }
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.autoUpdate === false) data.object.autoUpdate = false;
        data.object.levels = [];
        const levels = this.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            data.object.levels.push({
                object: level.object.uuid,
                distance: level.distance,
                hysteresis: level.hysteresis
            });
        }
        return data;
    }
}
const $04ce9c8dcd7d39f0$var$_basePosition = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_skinIndex = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
const $04ce9c8dcd7d39f0$var$_skinWeight = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
const $04ce9c8dcd7d39f0$var$_vector3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_matrix4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_vertex = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_sphere$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
const $04ce9c8dcd7d39f0$var$_inverseMatrix$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_ray$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$a186db52eed6d40e();
class $04ce9c8dcd7d39f0$export$b303577035157ecf extends $04ce9c8dcd7d39f0$export$e176487c05830cc5 {
    constructor(geometry, material){
        super(geometry, material);
        this.isSkinnedMesh = true;
        this.type = "SkinnedMesh";
        this.bindMode = "attached";
        this.bindMatrix = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.bindMatrixInverse = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.boundingBox = null;
        this.boundingSphere = null;
    }
    computeBoundingBox() {
        const geometry = this.geometry;
        if (this.boundingBox === null) this.boundingBox = new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
        this.boundingBox.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for(let i = 0; i < positionAttribute.count; i++){
            $04ce9c8dcd7d39f0$var$_vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, $04ce9c8dcd7d39f0$var$_vertex);
            this.boundingBox.expandByPoint($04ce9c8dcd7d39f0$var$_vertex);
        }
    }
    computeBoundingSphere() {
        const geometry = this.geometry;
        if (this.boundingSphere === null) this.boundingSphere = new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
        this.boundingSphere.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for(let i = 0; i < positionAttribute.count; i++){
            $04ce9c8dcd7d39f0$var$_vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, $04ce9c8dcd7d39f0$var$_vertex);
            this.boundingSphere.expandByPoint($04ce9c8dcd7d39f0$var$_vertex);
        }
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.bindMode = source.bindMode;
        this.bindMatrix.copy(source.bindMatrix);
        this.bindMatrixInverse.copy(source.bindMatrixInverse);
        this.skeleton = source.skeleton;
        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
        return this;
    }
    raycast(raycaster, intersects) {
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // test with bounding sphere in world space
        if (this.boundingSphere === null) this.computeBoundingSphere();
        $04ce9c8dcd7d39f0$var$_sphere$3.copy(this.boundingSphere);
        $04ce9c8dcd7d39f0$var$_sphere$3.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere$3) === false) return;
        // convert ray to local space of skinned mesh
        $04ce9c8dcd7d39f0$var$_inverseMatrix$2.copy(matrixWorld).invert();
        $04ce9c8dcd7d39f0$var$_ray$2.copy(raycaster.ray).applyMatrix4($04ce9c8dcd7d39f0$var$_inverseMatrix$2);
        // test with bounding box in local space
        if (this.boundingBox !== null) {
            if ($04ce9c8dcd7d39f0$var$_ray$2.intersectsBox(this.boundingBox) === false) return;
        }
        // test for intersections with geometry
        this._computeIntersections(raycaster, intersects, $04ce9c8dcd7d39f0$var$_ray$2);
    }
    getVertexPosition(index, target) {
        super.getVertexPosition(index, target);
        this.applyBoneTransform(index, target);
        return target;
    }
    bind(skeleton, bindMatrix) {
        this.skeleton = skeleton;
        if (bindMatrix === undefined) {
            this.updateMatrixWorld(true);
            this.skeleton.calculateInverses();
            bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        const vector = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3();
        const skinWeight = this.geometry.attributes.skinWeight;
        for(let i = 0, l = skinWeight.count; i < l; i++){
            vector.fromBufferAttribute(skinWeight, i);
            const scale = 1.0 / vector.manhattanLength();
            if (scale !== Infinity) vector.multiplyScalar(scale);
            else vector.set(1, 0, 0, 0); // do something reasonable
            skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
        }
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.bindMode === "attached") this.bindMatrixInverse.copy(this.matrixWorld).invert();
        else if (this.bindMode === "detached") this.bindMatrixInverse.copy(this.bindMatrix).invert();
        else console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    applyBoneTransform(index, vector) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        $04ce9c8dcd7d39f0$var$_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        $04ce9c8dcd7d39f0$var$_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        $04ce9c8dcd7d39f0$var$_basePosition.copy(vector).applyMatrix4(this.bindMatrix);
        vector.set(0, 0, 0);
        for(let i = 0; i < 4; i++){
            const weight = $04ce9c8dcd7d39f0$var$_skinWeight.getComponent(i);
            if (weight !== 0) {
                const boneIndex = $04ce9c8dcd7d39f0$var$_skinIndex.getComponent(i);
                $04ce9c8dcd7d39f0$var$_matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
                vector.addScaledVector($04ce9c8dcd7d39f0$var$_vector3.copy($04ce9c8dcd7d39f0$var$_basePosition).applyMatrix4($04ce9c8dcd7d39f0$var$_matrix4), weight);
            }
        }
        return vector.applyMatrix4(this.bindMatrixInverse);
    }
    boneTransform(index, vector) {
        console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.");
        return this.applyBoneTransform(index, vector);
    }
}
class $04ce9c8dcd7d39f0$export$b127726e56765aa4 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.isBone = true;
        this.type = "Bone";
    }
}
class $04ce9c8dcd7d39f0$export$b691f601014eabe1 extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0, minFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0, anisotropy, colorSpace1){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isDataTexture = true;
        this.image = {
            data: data,
            width: width,
            height: height
        };
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
const $04ce9c8dcd7d39f0$var$_offsetMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_identityMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
class $04ce9c8dcd7d39f0$export$8f31e4c4a37b8e9c {
    constructor(bones = [], boneInverses = []){
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.init();
    }
    init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        // calculate inverse bone matrices if necessary
        if (boneInverses.length === 0) this.calculateInverses();
        else // handle special case
        if (bones.length !== boneInverses.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
            this.boneInverses = [];
            for(let i = 0, il = this.bones.length; i < il; i++)this.boneInverses.push(new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5());
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let i = 0, il = this.bones.length; i < il; i++){
            const inverse = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
            if (this.bones[i]) inverse.copy(this.bones[i].matrixWorld).invert();
            this.boneInverses.push(inverse);
        }
    }
    pose() {
        // recover the bind-time world matrices
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone) bone.matrixWorld.copy(this.boneInverses[i]).invert();
        }
        // compute the local matrices, positions, rotations and scales
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone) {
                if (bone.parent && bone.parent.isBone) {
                    bone.matrix.copy(bone.parent.matrixWorld).invert();
                    bone.matrix.multiply(bone.matrixWorld);
                } else bone.matrix.copy(bone.matrixWorld);
                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
            }
        }
    }
    update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        // flatten bone matrices to array
        for(let i = 0, il = bones.length; i < il; i++){
            // compute the offset between the current and the original transform
            const matrix = bones[i] ? bones[i].matrixWorld : $04ce9c8dcd7d39f0$var$_identityMatrix;
            $04ce9c8dcd7d39f0$var$_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
            $04ce9c8dcd7d39f0$var$_offsetMatrix.toArray(boneMatrices, i * 16);
        }
        if (boneTexture !== null) boneTexture.needsUpdate = true;
    }
    clone() {
        return new $04ce9c8dcd7d39f0$export$8f31e4c4a37b8e9c(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        // layout (1 matrix = 4 pixels)
        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
        let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
        size = $04ce9c8dcd7d39f0$var$ceilPowerOfTwo(size);
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
        boneMatrices.set(this.boneMatrices); // copy current values
        const boneTexture = new $04ce9c8dcd7d39f0$export$b691f601014eabe1(boneMatrices, size, size, $04ce9c8dcd7d39f0$export$3f8bb04b555a363c, $04ce9c8dcd7d39f0$export$f6d331659b644596);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        this.boneTextureSize = size;
        return this;
    }
    getBoneByName(name) {
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone.name === name) return bone;
        }
        return undefined;
    }
    dispose() {
        if (this.boneTexture !== null) {
            this.boneTexture.dispose();
            this.boneTexture = null;
        }
    }
    fromJSON(json, bones) {
        this.uuid = json.uuid;
        for(let i = 0, l = json.bones.length; i < l; i++){
            const uuid = json.bones[i];
            let bone = bones[uuid];
            if (bone === undefined) {
                console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
                bone = new $04ce9c8dcd7d39f0$export$b127726e56765aa4();
            }
            this.bones.push(bone);
            this.boneInverses.push(new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5().fromArray(json.boneInverses[i]));
        }
        this.init();
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for(let i = 0, l = bones.length; i < l; i++){
            const bone = bones[i];
            data.bones.push(bone.uuid);
            const boneInverse = boneInverses[i];
            data.boneInverses.push(boneInverse.toArray());
        }
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$32ea87a8b54d744a extends $04ce9c8dcd7d39f0$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized, meshPerAttribute = 1){
        super(array, itemSize, normalized);
        this.isInstancedBufferAttribute = true;
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.meshPerAttribute = this.meshPerAttribute;
        data.isInstancedBufferAttribute = true;
        return data;
    }
}
const $04ce9c8dcd7d39f0$var$_instanceLocalMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_instanceWorldMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_instanceIntersects = [];
const $04ce9c8dcd7d39f0$var$_box3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
const $04ce9c8dcd7d39f0$var$_identity = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_mesh = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$e176487c05830cc5();
const $04ce9c8dcd7d39f0$var$_sphere$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
class $04ce9c8dcd7d39f0$export$f3c979c331175ad7 extends $04ce9c8dcd7d39f0$export$e176487c05830cc5 {
    constructor(geometry, material, count){
        super(geometry, material);
        this.isInstancedMesh = true;
        this.instanceMatrix = new $04ce9c8dcd7d39f0$export$32ea87a8b54d744a(new Float32Array(count * 16), 16);
        this.instanceColor = null;
        this.count = count;
        this.boundingBox = null;
        this.boundingSphere = null;
        for(let i = 0; i < count; i++)this.setMatrixAt(i, $04ce9c8dcd7d39f0$var$_identity);
    }
    computeBoundingBox() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingBox === null) this.boundingBox = new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
        if (geometry.boundingBox === null) geometry.computeBoundingBox();
        this.boundingBox.makeEmpty();
        for(let i = 0; i < count; i++){
            this.getMatrixAt(i, $04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            $04ce9c8dcd7d39f0$var$_box3.copy(geometry.boundingBox).applyMatrix4($04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            this.boundingBox.union($04ce9c8dcd7d39f0$var$_box3);
        }
    }
    computeBoundingSphere() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingSphere === null) this.boundingSphere = new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        this.boundingSphere.makeEmpty();
        for(let i = 0; i < count; i++){
            this.getMatrixAt(i, $04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            $04ce9c8dcd7d39f0$var$_sphere$2.copy(geometry.boundingSphere).applyMatrix4($04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            this.boundingSphere.union($04ce9c8dcd7d39f0$var$_sphere$2);
        }
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.instanceMatrix.copy(source.instanceMatrix);
        if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
        this.count = source.count;
        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
        return this;
    }
    getColorAt(index, color) {
        color.fromArray(this.instanceColor.array, index * 3);
    }
    getMatrixAt(index, matrix) {
        matrix.fromArray(this.instanceMatrix.array, index * 16);
    }
    raycast(raycaster, intersects) {
        const matrixWorld = this.matrixWorld;
        const raycastTimes = this.count;
        $04ce9c8dcd7d39f0$var$_mesh.geometry = this.geometry;
        $04ce9c8dcd7d39f0$var$_mesh.material = this.material;
        if ($04ce9c8dcd7d39f0$var$_mesh.material === undefined) return;
        // test with bounding sphere first
        if (this.boundingSphere === null) this.computeBoundingSphere();
        $04ce9c8dcd7d39f0$var$_sphere$2.copy(this.boundingSphere);
        $04ce9c8dcd7d39f0$var$_sphere$2.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere$2) === false) return;
        // now test each instance
        for(let instanceId = 0; instanceId < raycastTimes; instanceId++){
            // calculate the world matrix for each instance
            this.getMatrixAt(instanceId, $04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            $04ce9c8dcd7d39f0$var$_instanceWorldMatrix.multiplyMatrices(matrixWorld, $04ce9c8dcd7d39f0$var$_instanceLocalMatrix);
            // the mesh represents this single instance
            $04ce9c8dcd7d39f0$var$_mesh.matrixWorld = $04ce9c8dcd7d39f0$var$_instanceWorldMatrix;
            $04ce9c8dcd7d39f0$var$_mesh.raycast(raycaster, $04ce9c8dcd7d39f0$var$_instanceIntersects);
            // process the result of raycast
            for(let i = 0, l = $04ce9c8dcd7d39f0$var$_instanceIntersects.length; i < l; i++){
                const intersect = $04ce9c8dcd7d39f0$var$_instanceIntersects[i];
                intersect.instanceId = instanceId;
                intersect.object = this;
                intersects.push(intersect);
            }
            $04ce9c8dcd7d39f0$var$_instanceIntersects.length = 0;
        }
    }
    setColorAt(index, color) {
        if (this.instanceColor === null) this.instanceColor = new $04ce9c8dcd7d39f0$export$32ea87a8b54d744a(new Float32Array(this.instanceMatrix.count * 3), 3);
        color.toArray(this.instanceColor.array, index * 3);
    }
    setMatrixAt(index, matrix) {
        matrix.toArray(this.instanceMatrix.array, index * 16);
    }
    updateMorphTargets() {}
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}
class $04ce9c8dcd7d39f0$export$fbaaa33907730a0c extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isLineBasicMaterial = true;
        this.type = "LineBasicMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff);
        this.map = null;
        this.linewidth = 1;
        this.linecap = "round";
        this.linejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.linewidth = source.linewidth;
        this.linecap = source.linecap;
        this.linejoin = source.linejoin;
        this.fog = source.fog;
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_start$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_end$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_inverseMatrix$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_ray$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$a186db52eed6d40e();
const $04ce9c8dcd7d39f0$var$_sphere$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
class $04ce9c8dcd7d39f0$export$17d680238e50603e extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959(), material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c()){
        super();
        this.isLine = true;
        this.type = "Line";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    computeLineDistances() {
        const geometry = this.geometry;
        // we assume non-indexed geometry
        if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [
                0
            ];
            for(let i = 1, l = positionAttribute.count; i < l; i++){
                $04ce9c8dcd7d39f0$var$_start$1.fromBufferAttribute(positionAttribute, i - 1);
                $04ce9c8dcd7d39f0$var$_end$1.fromBufferAttribute(positionAttribute, i);
                lineDistances[i] = lineDistances[i - 1];
                lineDistances[i] += $04ce9c8dcd7d39f0$var$_start$1.distanceTo($04ce9c8dcd7d39f0$var$_end$1);
            }
            geometry.setAttribute("lineDistance", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(lineDistances, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Line.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $04ce9c8dcd7d39f0$var$_sphere$1.copy(geometry.boundingSphere);
        $04ce9c8dcd7d39f0$var$_sphere$1.applyMatrix4(matrixWorld);
        $04ce9c8dcd7d39f0$var$_sphere$1.radius += threshold;
        if (raycaster.ray.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere$1) === false) return;
        //
        $04ce9c8dcd7d39f0$var$_inverseMatrix$1.copy(matrixWorld).invert();
        $04ce9c8dcd7d39f0$var$_ray$1.copy(raycaster.ray).applyMatrix4($04ce9c8dcd7d39f0$var$_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const vStart = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const vEnd = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const interSegment = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const interRay = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const step = this.isLineSegments ? 2 : 1;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for(let i = start, l = end - 1; i < l; i += step){
                const a = index.getX(i);
                const b = index.getX(i + 1);
                vStart.fromBufferAttribute(positionAttribute, a);
                vEnd.fromBufferAttribute(positionAttribute, b);
                const distSq = $04ce9c8dcd7d39f0$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                if (distSq > localThresholdSq) continue;
                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                const distance = raycaster.ray.origin.distanceTo(interRay);
                if (distance < raycaster.near || distance > raycaster.far) continue;
                intersects.push({
                    distance: distance,
                    // What do we want? intersection point on the ray or on the segment??
                    // point: raycaster.ray.at( distance ),
                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                    index: i,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for(let i = start, l = end - 1; i < l; i += step){
                vStart.fromBufferAttribute(positionAttribute, i);
                vEnd.fromBufferAttribute(positionAttribute, i + 1);
                const distSq = $04ce9c8dcd7d39f0$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                if (distSq > localThresholdSq) continue;
                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                const distance = raycaster.ray.origin.distanceTo(interRay);
                if (distance < raycaster.near || distance > raycaster.far) continue;
                intersects.push({
                    distance: distance,
                    // What do we want? intersection point on the ray or on the segment??
                    // point: raycaster.ray.at( distance ),
                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                    index: i,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        }
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
}
const $04ce9c8dcd7d39f0$var$_start = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_end = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 extends $04ce9c8dcd7d39f0$export$17d680238e50603e {
    constructor(geometry, material){
        super(geometry, material);
        this.isLineSegments = true;
        this.type = "LineSegments";
    }
    computeLineDistances() {
        const geometry = this.geometry;
        // we assume non-indexed geometry
        if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [];
            for(let i = 0, l = positionAttribute.count; i < l; i += 2){
                $04ce9c8dcd7d39f0$var$_start.fromBufferAttribute(positionAttribute, i);
                $04ce9c8dcd7d39f0$var$_end.fromBufferAttribute(positionAttribute, i + 1);
                lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                lineDistances[i + 1] = lineDistances[i] + $04ce9c8dcd7d39f0$var$_start.distanceTo($04ce9c8dcd7d39f0$var$_end);
            }
            geometry.setAttribute("lineDistance", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(lineDistances, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$f85a24d745e4f17d extends $04ce9c8dcd7d39f0$export$17d680238e50603e {
    constructor(geometry, material){
        super(geometry, material);
        this.isLineLoop = true;
        this.type = "LineLoop";
    }
}
class $04ce9c8dcd7d39f0$export$a178c45366ce5d6b extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isPointsMaterial = true;
        this.type = "PointsMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff);
        this.map = null;
        this.alphaMap = null;
        this.size = 1;
        this.sizeAttenuation = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.size = source.size;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_inverseMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_ray = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$a186db52eed6d40e();
const $04ce9c8dcd7d39f0$var$_sphere = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$805e8b72413ccaba();
const $04ce9c8dcd7d39f0$var$_position$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$1c787534cb11aa3e extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959(), material = new $04ce9c8dcd7d39f0$export$a178c45366ce5d6b()){
        super();
        this.isPoints = true;
        this.type = "Points";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Points.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $04ce9c8dcd7d39f0$var$_sphere.copy(geometry.boundingSphere);
        $04ce9c8dcd7d39f0$var$_sphere.applyMatrix4(matrixWorld);
        $04ce9c8dcd7d39f0$var$_sphere.radius += threshold;
        if (raycaster.ray.intersectsSphere($04ce9c8dcd7d39f0$var$_sphere) === false) return;
        //
        $04ce9c8dcd7d39f0$var$_inverseMatrix.copy(matrixWorld).invert();
        $04ce9c8dcd7d39f0$var$_ray.copy(raycaster.ray).applyMatrix4($04ce9c8dcd7d39f0$var$_inverseMatrix);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for(let i = start, il = end; i < il; i++){
                const a = index.getX(i);
                $04ce9c8dcd7d39f0$var$_position$2.fromBufferAttribute(positionAttribute, a);
                $04ce9c8dcd7d39f0$var$testPoint($04ce9c8dcd7d39f0$var$_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
            }
        } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for(let i = start, l = end; i < l; i++){
                $04ce9c8dcd7d39f0$var$_position$2.fromBufferAttribute(positionAttribute, i);
                $04ce9c8dcd7d39f0$var$testPoint($04ce9c8dcd7d39f0$var$_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
            }
        }
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== undefined) {
                this.morphTargetInfluences = [];
                this.morphTargetDictionary = {};
                for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                    const name = morphAttribute[m].name || String(m);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[name] = m;
                }
            }
        }
    }
}
function $04ce9c8dcd7d39f0$var$testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    const rayPointDistanceSq = $04ce9c8dcd7d39f0$var$_ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
        const intersectPoint = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        $04ce9c8dcd7d39f0$var$_ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint,
            index: index,
            face: null,
            object: object
        });
    }
}
class $04ce9c8dcd7d39f0$export$6e09d1edf8d5a25c extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isVideoTexture = true;
        this.minFilter = minFilter !== undefined ? minFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
        this.magFilter = magFilter !== undefined ? magFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
        this.generateMipmaps = false;
        const scope = this;
        function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
        }
        if ("requestVideoFrameCallback" in video) video.requestVideoFrameCallback(updateVideo);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        const video = this.image;
        const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) this.needsUpdate = true;
    }
}
class $04ce9c8dcd7d39f0$export$9270d786f73ce6fe extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(width, height){
        super({
            width: width,
            height: height
        });
        this.isFramebufferTexture = true;
        this.magFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.minFilter = $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0;
        this.generateMipmaps = false;
        this.needsUpdate = true;
    }
}
class $04ce9c8dcd7d39f0$export$3466bac9141a5cc4 extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace1){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace1);
        this.isCompressedTexture = true;
        this.image = {
            width: width,
            height: height
        };
        this.mipmaps = mipmaps;
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
        this.flipY = false;
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
        this.generateMipmaps = false;
    }
}
class $04ce9c8dcd7d39f0$export$5fe6b8e34b274fcb extends $04ce9c8dcd7d39f0$export$3466bac9141a5cc4 {
    constructor(mipmaps, width, height, depth, format, type){
        super(mipmaps, width, height, format, type);
        this.isCompressedArrayTexture = true;
        this.image.depth = depth;
        this.wrapR = $04ce9c8dcd7d39f0$export$9d9334239a5a5e06;
    }
}
class $04ce9c8dcd7d39f0$export$d80173634de65bff extends $04ce9c8dcd7d39f0$export$3466bac9141a5cc4 {
    constructor(images, format, type){
        super(undefined, images[0].width, images[0].height, format, type, $04ce9c8dcd7d39f0$export$8759762a6477f2c4);
        this.isCompressedCubeTexture = true;
        this.isCubeTexture = true;
        this.image = images;
    }
}
class $04ce9c8dcd7d39f0$export$f7189e49152d1c13 extends $04ce9c8dcd7d39f0$export$5431306cf43de24a {
    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isCanvasTexture = true;
        this.needsUpdate = true;
    }
}
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ class $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(){
        this.type = "Curve";
        this.arcLengthDivisions = 200;
    }
    // Virtual base class method to overwrite and implement in subclasses
    //	- t [0 .. 1]
    getPoint() {
        console.warn("THREE.Curve: .getPoint() not implemented.");
        return null;
    }
    // Get point at relative position in curve according to arc length
    // - u [0 .. 1]
    getPointAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getPoint(t, optionalTarget);
    }
    // Get sequence of points using getPoint( t )
    getPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPoint(d / divisions));
        return points;
    }
    // Get sequence of points using getPointAt( u )
    getSpacedPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPointAt(d / divisions));
        return points;
    }
    // Get total curve arc length
    getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
    }
    // Get list of cumulative segment lengths
    getLengths(divisions = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for(let p = 1; p <= divisions; p++){
            current = this.getPoint(p / divisions);
            sum += current.distanceTo(last);
            cache.push(sum);
            last = current;
        }
        this.cacheArcLengths = cache;
        return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    }
    updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
    }
    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
    getUtoTmapping(u, distance) {
        const arcLengths = this.getLengths();
        let i = 0;
        const il = arcLengths.length;
        let targetArcLength; // The targeted u distance value to get
        if (distance) targetArcLength = distance;
        else targetArcLength = u * arcLengths[il - 1];
        // binary search for the index with largest value smaller than target u distance
        let low = 0, high = il - 1, comparison;
        while(low <= high){
            i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
            comparison = arcLengths[i] - targetArcLength;
            if (comparison < 0) low = i + 1;
            else if (comparison > 0) high = i - 1;
            else {
                high = i;
                break;
            // DONE
            }
        }
        i = high;
        if (arcLengths[i] === targetArcLength) return i / (il - 1);
        // we could get finer grain at lengths, or use simple interpolation between two points
        const lengthBefore = arcLengths[i];
        const lengthAfter = arcLengths[i + 1];
        const segmentLength = lengthAfter - lengthBefore;
        // determine where we are between the 'before' and 'after' points
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        // add that fractional amount to t
        const t = (i + segmentFraction) / (il - 1);
        return t;
    }
    // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation
    getTangent(t, optionalTarget) {
        const delta = 0.0001;
        let t1 = t - delta;
        let t2 = t + delta;
        // Capping in case of danger
        if (t1 < 0) t1 = 0;
        if (t2 > 1) t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget || (pt1.isVector2 ? new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1() : new $04ce9c8dcd7d39f0$export$64b5c384219d3699());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
    }
    getTangentAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getTangent(t, optionalTarget);
    }
    computeFrenetFrames(segments, closed) {
        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const mat = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        // compute the tangent vectors for each segment on the curve
        for(let i = 0; i <= segments; i++){
            const u = i / segments;
            tangents[i] = this.getTangentAt(u, new $04ce9c8dcd7d39f0$export$64b5c384219d3699());
        }
        // select an initial normal vector perpendicular to the first tangent vector,
        // and in the direction of the minimum tangent xyz component
        normals[0] = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        binormals[0] = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
            min = tx;
            normal.set(1, 0, 0);
        }
        if (ty <= min) {
            min = ty;
            normal.set(0, 1, 0);
        }
        if (tz <= min) normal.set(0, 0, 1);
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        // compute the slowly-varying normal and binormal vectors for each segment on the curve
        for(let i = 1; i <= segments; i++){
            normals[i] = normals[i - 1].clone();
            binormals[i] = binormals[i - 1].clone();
            vec.crossVectors(tangents[i - 1], tangents[i]);
            if (vec.length() > Number.EPSILON) {
                vec.normalize();
                const theta = Math.acos($04ce9c8dcd7d39f0$var$clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors
                normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
            }
            binormals[i].crossVectors(tangents[i], normals[i]);
        }
        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
        if (closed === true) {
            let theta = Math.acos($04ce9c8dcd7d39f0$var$clamp(normals[0].dot(normals[segments]), -1, 1));
            theta /= segments;
            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) theta = -theta;
            for(let i = 1; i <= segments; i++){
                // twist a little...
                normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
                binormals[i].crossVectors(tangents[i], normals[i]);
            }
        }
        return {
            tangents: tangents,
            normals: normals,
            binormals: binormals
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.arcLengthDivisions = source.arcLengthDivisions;
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.6,
                type: "Curve",
                generator: "Curve.toJSON"
            }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
    }
    fromJSON(json) {
        this.arcLengthDivisions = json.arcLengthDivisions;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$3f87a931616cde04 extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0){
        super();
        this.isEllipseCurve = true;
        this.type = "EllipseCurve";
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
    }
    getPoint(t, optionalTarget) {
        const point = optionalTarget || new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        // ensures that deltaAngle is 0 .. 2 PI
        while(deltaAngle < 0)deltaAngle += twoPi;
        while(deltaAngle > twoPi)deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
            if (samePoints) deltaAngle = 0;
            else deltaAngle = twoPi;
        }
        if (this.aClockwise === true && !samePoints) {
            if (deltaAngle === twoPi) deltaAngle = -twoPi;
            else deltaAngle = deltaAngle - twoPi;
        }
        const angle = this.aStartAngle + t * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle);
        let y = this.aY + this.yRadius * Math.sin(angle);
        if (this.aRotation !== 0) {
            const cos = Math.cos(this.aRotation);
            const sin = Math.sin(this.aRotation);
            const tx = x - this.aX;
            const ty = y - this.aY;
            // Rotate the point about the center of the ellipse.
            x = tx * cos - ty * sin + this.aX;
            y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
    }
    copy(source) {
        super.copy(source);
        this.aX = source.aX;
        this.aY = source.aY;
        this.xRadius = source.xRadius;
        this.yRadius = source.yRadius;
        this.aStartAngle = source.aStartAngle;
        this.aEndAngle = source.aEndAngle;
        this.aClockwise = source.aClockwise;
        this.aRotation = source.aRotation;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.aX = json.aX;
        this.aY = json.aY;
        this.xRadius = json.xRadius;
        this.yRadius = json.yRadius;
        this.aStartAngle = json.aStartAngle;
        this.aEndAngle = json.aEndAngle;
        this.aClockwise = json.aClockwise;
        this.aRotation = json.aRotation;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$b1eedc9aab6300e8 extends $04ce9c8dcd7d39f0$export$3f87a931616cde04 {
    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise){
        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        this.isArcCurve = true;
        this.type = "ArcCurve";
    }
}
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/ function $04ce9c8dcd7d39f0$var$CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    /*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */ function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
        initCatmullRom: function(x0, x1, x2, x3, tension) {
            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
            // compute tangents when parameterized in [t1,t2]
            let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
            let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
            // rescale tangents for parametrization in [0,1]
            t1 *= dt1;
            t2 *= dt1;
            init(x1, x2, t1, t2);
        },
        calc: function(t) {
            const t2 = t * t;
            const t3 = t2 * t;
            return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
    };
}
//
const $04ce9c8dcd7d39f0$var$tmp = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$px = /*@__PURE__*/ new $04ce9c8dcd7d39f0$var$CubicPoly();
const $04ce9c8dcd7d39f0$var$py = /*@__PURE__*/ new $04ce9c8dcd7d39f0$var$CubicPoly();
const $04ce9c8dcd7d39f0$var$pz = /*@__PURE__*/ new $04ce9c8dcd7d39f0$var$CubicPoly();
class $04ce9c8dcd7d39f0$export$b9146b27c24b744c extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5){
        super();
        this.isCatmullRomCurve3 = true;
        this.type = "CatmullRomCurve3";
        this.points = points;
        this.closed = closed;
        this.curveType = curveType;
        this.tension = tension;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const points = this.points;
        const l = points.length;
        const p = (l - (this.closed ? 0 : 1)) * t;
        let intPoint = Math.floor(p);
        let weight = p - intPoint;
        if (this.closed) intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        else if (weight === 0 && intPoint === l - 1) {
            intPoint = l - 2;
            weight = 1;
        }
        let p0, p3; // 4 points (p1 & p2 defined below)
        if (this.closed || intPoint > 0) p0 = points[(intPoint - 1) % l];
        else {
            // extrapolate first point
            $04ce9c8dcd7d39f0$var$tmp.subVectors(points[0], points[1]).add(points[0]);
            p0 = $04ce9c8dcd7d39f0$var$tmp;
        }
        const p1 = points[intPoint % l];
        const p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) p3 = points[(intPoint + 2) % l];
        else {
            // extrapolate last point
            $04ce9c8dcd7d39f0$var$tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
            p3 = $04ce9c8dcd7d39f0$var$tmp;
        }
        if (this.curveType === "centripetal" || this.curveType === "chordal") {
            // init Centripetal / Chordal Catmull-Rom
            const pow = this.curveType === "chordal" ? 0.5 : 0.25;
            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            // safety check for repeated points
            if (dt1 < 1e-4) dt1 = 1.0;
            if (dt0 < 1e-4) dt0 = dt1;
            if (dt2 < 1e-4) dt2 = dt1;
            $04ce9c8dcd7d39f0$var$px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
            $04ce9c8dcd7d39f0$var$py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
            $04ce9c8dcd7d39f0$var$pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === "catmullrom") {
            $04ce9c8dcd7d39f0$var$px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
            $04ce9c8dcd7d39f0$var$py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
            $04ce9c8dcd7d39f0$var$pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
        }
        point.set($04ce9c8dcd7d39f0$var$px.calc(weight), $04ce9c8dcd7d39f0$var$py.calc(weight), $04ce9c8dcd7d39f0$var$pz.calc(weight));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i = 0, l = source.points.length; i < l; i++){
            const point = source.points[i];
            this.points.push(point.clone());
        }
        this.closed = source.closed;
        this.curveType = source.curveType;
        this.tension = source.tension;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i = 0, l = json.points.length; i < l; i++){
            const point = json.points[i];
            this.points.push(new $04ce9c8dcd7d39f0$export$64b5c384219d3699().fromArray(point));
        }
        this.closed = json.closed;
        this.curveType = json.curveType;
        this.tension = json.tension;
        return this;
    }
}
/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */ function $04ce9c8dcd7d39f0$var$CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
//
function $04ce9c8dcd7d39f0$var$QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
}
function $04ce9c8dcd7d39f0$var$QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
}
function $04ce9c8dcd7d39f0$var$QuadraticBezierP2(t, p) {
    return t * t * p;
}
function $04ce9c8dcd7d39f0$var$QuadraticBezier(t, p0, p1, p2) {
    return $04ce9c8dcd7d39f0$var$QuadraticBezierP0(t, p0) + $04ce9c8dcd7d39f0$var$QuadraticBezierP1(t, p1) + $04ce9c8dcd7d39f0$var$QuadraticBezierP2(t, p2);
}
//
function $04ce9c8dcd7d39f0$var$CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
}
function $04ce9c8dcd7d39f0$var$CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
}
function $04ce9c8dcd7d39f0$var$CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
}
function $04ce9c8dcd7d39f0$var$CubicBezierP3(t, p) {
    return t * t * t * p;
}
function $04ce9c8dcd7d39f0$var$CubicBezier(t, p0, p1, p2, p3) {
    return $04ce9c8dcd7d39f0$var$CubicBezierP0(t, p0) + $04ce9c8dcd7d39f0$var$CubicBezierP1(t, p1) + $04ce9c8dcd7d39f0$var$CubicBezierP2(t, p2) + $04ce9c8dcd7d39f0$var$CubicBezierP3(t, p3);
}
class $04ce9c8dcd7d39f0$export$e36650d36468bb39 extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v1 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v2 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v3 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()){
        super();
        this.isCubicBezierCurve = true;
        this.type = "CubicBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set($04ce9c8dcd7d39f0$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $04ce9c8dcd7d39f0$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$13d5f1c9525f246c extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v1 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v3 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()){
        super();
        this.isCubicBezierCurve3 = true;
        this.type = "CubicBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set($04ce9c8dcd7d39f0$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $04ce9c8dcd7d39f0$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y), $04ce9c8dcd7d39f0$var$CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$ab2e07e76531a47e extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v1 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v2 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()){
        super();
        this.isLineCurve = true;
        this.type = "LineCurve";
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    getTangent(t, optionalTarget = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$1fdfd9d9cf487600 extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v1 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()){
        super();
        this.isLineCurve3 = true;
        this.type = "LineCurve3";
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    getTangent(t, optionalTarget = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$5938c4ee491a43ad extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v1 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(), v2 = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()){
        super();
        this.isQuadraticBezierCurve = true;
        this.type = "QuadraticBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set($04ce9c8dcd7d39f0$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $04ce9c8dcd7d39f0$var$QuadraticBezier(t, v0.y, v1.y, v2.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$bf3f4c7e459f90fc extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v1 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), v2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()){
        super();
        this.isQuadraticBezierCurve3 = true;
        this.type = "QuadraticBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set($04ce9c8dcd7d39f0$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $04ce9c8dcd7d39f0$var$QuadraticBezier(t, v0.y, v1.y, v2.y), $04ce9c8dcd7d39f0$var$QuadraticBezier(t, v0.z, v1.z, v2.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$d3bdd77da77afc1b extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(points = []){
        super();
        this.isSplineCurve = true;
        this.type = "SplineCurve";
        this.points = points;
    }
    getPoint(t, optionalTarget = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const points = this.points;
        const p = (points.length - 1) * t;
        const intPoint = Math.floor(p);
        const weight = p - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set($04ce9c8dcd7d39f0$var$CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), $04ce9c8dcd7d39f0$var$CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i = 0, l = source.points.length; i < l; i++){
            const point = source.points[i];
            this.points.push(point.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i = 0, l = json.points.length; i < l; i++){
            const point = json.points[i];
            this.points.push(new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1().fromArray(point));
        }
        return this;
    }
}
var $04ce9c8dcd7d39f0$var$Curves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcCurve: $04ce9c8dcd7d39f0$export$b1eedc9aab6300e8,
    CatmullRomCurve3: $04ce9c8dcd7d39f0$export$b9146b27c24b744c,
    CubicBezierCurve: $04ce9c8dcd7d39f0$export$e36650d36468bb39,
    CubicBezierCurve3: $04ce9c8dcd7d39f0$export$13d5f1c9525f246c,
    EllipseCurve: $04ce9c8dcd7d39f0$export$3f87a931616cde04,
    LineCurve: $04ce9c8dcd7d39f0$export$ab2e07e76531a47e,
    LineCurve3: $04ce9c8dcd7d39f0$export$1fdfd9d9cf487600,
    QuadraticBezierCurve: $04ce9c8dcd7d39f0$export$5938c4ee491a43ad,
    QuadraticBezierCurve3: $04ce9c8dcd7d39f0$export$bf3f4c7e459f90fc,
    SplineCurve: $04ce9c8dcd7d39f0$export$d3bdd77da77afc1b
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/ class $04ce9c8dcd7d39f0$export$4aaf9b66af1bbf2c extends $04ce9c8dcd7d39f0$export$b0e83c3ef8d2db1 {
    constructor(){
        super();
        this.type = "CurvePath";
        this.curves = [];
        this.autoClose = false; // Automatically closes the path
    }
    add(curve) {
        this.curves.push(curve);
    }
    closePath() {
        // Add a line curve if start and end of lines are not connected
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) this.curves.push(new $04ce9c8dcd7d39f0$export$ab2e07e76531a47e(endPoint, startPoint));
    }
    // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')
    getPoint(t, optionalTarget) {
        const d = t * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i = 0;
        // To think about boundaries points.
        while(i < curveLengths.length){
            if (curveLengths[i] >= d) {
                const diff = curveLengths[i] - d;
                const curve = this.curves[i];
                const segmentLength = curve.getLength();
                const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                return curve.getPointAt(u, optionalTarget);
            }
            i++;
        }
        return null;
    // loop where sum != 0, sum > d , sum+1 <d
    }
    // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength
    getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
    }
    // cacheLengths must be recalculated.
    updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
    }
    // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.
    getCurveLengths() {
        // We use cache values if curves and cache array are same length
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        // Get length of sub-curve
        // Push sums into cached array
        const lengths = [];
        let sums = 0;
        for(let i = 0, l = this.curves.length; i < l; i++){
            sums += this.curves[i].getLength();
            lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
    }
    getSpacedPoints(divisions = 40) {
        const points = [];
        for(let i = 0; i <= divisions; i++)points.push(this.getPoint(i / divisions));
        if (this.autoClose) points.push(points[0]);
        return points;
    }
    getPoints(divisions = 12) {
        const points = [];
        let last;
        for(let i = 0, curves = this.curves; i < curves.length; i++){
            const curve = curves[i];
            const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
            const pts = curve.getPoints(resolution);
            for(let j = 0; j < pts.length; j++){
                const point = pts[j];
                if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
                points.push(point);
                last = point;
            }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) points.push(points[0]);
        return points;
    }
    copy(source) {
        super.copy(source);
        this.curves = [];
        for(let i = 0, l = source.curves.length; i < l; i++){
            const curve = source.curves[i];
            this.curves.push(curve.clone());
        }
        this.autoClose = source.autoClose;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for(let i = 0, l = this.curves.length; i < l; i++){
            const curve = this.curves[i];
            data.curves.push(curve.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.autoClose = json.autoClose;
        this.curves = [];
        for(let i = 0, l = json.curves.length; i < l; i++){
            const curve = json.curves[i];
            this.curves.push(new $04ce9c8dcd7d39f0$var$Curves[curve.type]().fromJSON(curve));
        }
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9 extends $04ce9c8dcd7d39f0$export$4aaf9b66af1bbf2c {
    constructor(points){
        super();
        this.type = "Path";
        this.currentPoint = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        if (points) this.setFromPoints(points);
    }
    setFromPoints(points) {
        this.moveTo(points[0].x, points[0].y);
        for(let i = 1, l = points.length; i < l; i++)this.lineTo(points[i].x, points[i].y);
        return this;
    }
    moveTo(x, y) {
        this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
        return this;
    }
    lineTo(x, y) {
        const curve = new $04ce9c8dcd7d39f0$export$ab2e07e76531a47e(this.currentPoint.clone(), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(x, y));
        this.curves.push(curve);
        this.currentPoint.set(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        const curve = new $04ce9c8dcd7d39f0$export$5938c4ee491a43ad(this.currentPoint.clone(), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(aCPx, aCPy), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        const curve = new $04ce9c8dcd7d39f0$export$e36650d36468bb39(this.currentPoint.clone(), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(aCP1x, aCP1y), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(aCP2x, aCP2y), new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    splineThru(pts /*Array of Vector*/ ) {
        const npts = [
            this.currentPoint.clone()
        ].concat(pts);
        const curve = new $04ce9c8dcd7d39f0$export$d3bdd77da77afc1b(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
    }
    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        return this;
    }
    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const curve = new $04ce9c8dcd7d39f0$export$3f87a931616cde04(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        if (this.curves.length > 0) {
            // if a previous curve is present, attempt to join
            const firstPoint = curve.getPoint(0);
            if (!firstPoint.equals(this.currentPoint)) this.lineTo(firstPoint.x, firstPoint.y);
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
    }
    copy(source) {
        super.copy(source);
        this.currentPoint.copy(source.currentPoint);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.currentPoint.fromArray(json.currentPoint);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$6d839803fcd1882c extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(points = [
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0, -0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, 0),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0, 0.5)
    ], segments = 12, phiStart = 0, phiLength = Math.PI * 2){
        super();
        this.type = "LatheGeometry";
        this.parameters = {
            points: points,
            segments: segments,
            phiStart: phiStart,
            phiLength: phiLength
        };
        segments = Math.floor(segments);
        // clamp phiLength so it's in range of [ 0, 2PI ]
        phiLength = $04ce9c8dcd7d39f0$var$clamp(phiLength, 0, Math.PI * 2);
        // buffers
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        // helper variables
        const inverseSegments = 1.0 / segments;
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const uv = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const curNormal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const prevNormal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        let dx = 0;
        let dy = 0;
        // pre-compute normals for initial "meridian"
        for(let j = 0; j <= points.length - 1; j++)switch(j){
            case 0:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1.0;
                normal.y = -dx;
                normal.z = dy * 0.0;
                prevNormal.copy(normal);
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                break;
            case points.length - 1:
                initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
                break;
            default:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1.0;
                normal.y = -dx;
                normal.z = dy * 0.0;
                curNormal.copy(normal);
                normal.x += prevNormal.x;
                normal.y += prevNormal.y;
                normal.z += prevNormal.z;
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                prevNormal.copy(curNormal);
        }
        // generate vertices, uvs and normals
        for(let i = 0; i <= segments; i++){
            const phi = phiStart + i * inverseSegments * phiLength;
            const sin = Math.sin(phi);
            const cos = Math.cos(phi);
            for(let j = 0; j <= points.length - 1; j++){
                // vertex
                vertex.x = points[j].x * sin;
                vertex.y = points[j].y;
                vertex.z = points[j].x * cos;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // uv
                uv.x = i / segments;
                uv.y = j / (points.length - 1);
                uvs.push(uv.x, uv.y);
                // normal
                const x = initNormals[3 * j + 0] * sin;
                const y = initNormals[3 * j + 1];
                const z = initNormals[3 * j + 0] * cos;
                normals.push(x, y, z);
            }
        }
        // indices
        for(let i = 0; i < segments; i++)for(let j = 0; j < points.length - 1; j++){
            const base = j + i * points.length;
            const a = base;
            const b = base + points.length;
            const c = base + points.length + 1;
            const d = base + 1;
            // faces
            indices.push(a, b, d);
            indices.push(c, d, b);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$6d839803fcd1882c(data.points, data.segments, data.phiStart, data.phiLength);
    }
}
class $04ce9c8dcd7d39f0$export$41680e8551036033 extends $04ce9c8dcd7d39f0$export$6d839803fcd1882c {
    constructor(radius = 1, length = 1, capSegments = 4, radialSegments = 8){
        const path = new $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9();
        path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);
        path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);
        super(path.getPoints(capSegments), radialSegments);
        this.type = "CapsuleGeometry";
        this.parameters = {
            radius: radius,
            length: length,
            capSegments: capSegments,
            radialSegments: radialSegments
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$41680e8551036033(data.radius, data.length, data.capSegments, data.radialSegments);
    }
}
class $04ce9c8dcd7d39f0$export$d5c0e8d607467193 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "CircleGeometry";
        this.parameters = {
            radius: radius,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        segments = Math.max(3, segments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const uv = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        // center point
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for(let s = 0, i = 3; s <= segments; s++, i += 3){
            const segment = thetaStart + s / segments * thetaLength;
            // vertex
            vertex.x = radius * Math.cos(segment);
            vertex.y = radius * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            normals.push(0, 0, 1);
            // uvs
            uv.x = (vertices[i] / radius + 1) / 2;
            uv.y = (vertices[i + 1] / radius + 1) / 2;
            uvs.push(uv.x, uv.y);
        }
        // indices
        for(let i = 1; i <= segments; i++)indices.push(i, i + 1, 0);
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$d5c0e8d607467193(data.radius, data.segments, data.thetaStart, data.thetaLength);
    }
}
class $04ce9c8dcd7d39f0$export$68f745719dbe5198 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "CylinderGeometry";
        this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let index = 0;
        const indexArray = [];
        const halfHeight = height / 2;
        let groupStart = 0;
        // generate geometry
        generateTorso();
        if (openEnded === false) {
            if (radiusTop > 0) generateCap(true);
            if (radiusBottom > 0) generateCap(false);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        function generateTorso() {
            const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            let groupCount = 0;
            // this will be used to calculate the normal
            const slope = (radiusBottom - radiusTop) / height;
            // generate vertices, normals and uvs
            for(let y = 0; y <= heightSegments; y++){
                const indexRow = [];
                const v = y / heightSegments;
                // calculate the radius of the current row
                const radius = v * (radiusBottom - radiusTop) + radiusTop;
                for(let x = 0; x <= radialSegments; x++){
                    const u = x / radialSegments;
                    const theta = u * thetaLength + thetaStart;
                    const sinTheta = Math.sin(theta);
                    const cosTheta = Math.cos(theta);
                    // vertex
                    vertex.x = radius * sinTheta;
                    vertex.y = -v * height + halfHeight;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    // normal
                    normal.set(sinTheta, slope, cosTheta).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    // uv
                    uvs.push(u, 1 - v);
                    // save index of vertex in respective row
                    indexRow.push(index++);
                }
                // now save vertices of the row in our index array
                indexArray.push(indexRow);
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++)for(let y = 0; y < heightSegments; y++){
                // we use the index array to access the correct indices
                const a = indexArray[y][x];
                const b = indexArray[y + 1][x];
                const c = indexArray[y + 1][x + 1];
                const d = indexArray[y][x + 1];
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // update group counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, 0);
            // calculate new start value for groups
            groupStart += groupCount;
        }
        function generateCap(top) {
            // save the index of the first center vertex
            const centerIndexStart = index;
            const uv = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
            const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            let groupCount = 0;
            const radius = top === true ? radiusTop : radiusBottom;
            const sign = top === true ? 1 : -1;
            // first we generate the center vertex data of the cap.
            // because the geometry needs one set of uvs per face,
            // we must generate a center vertex per face/segment
            for(let x = 1; x <= radialSegments; x++){
                // vertex
                vertices.push(0, halfHeight * sign, 0);
                // normal
                normals.push(0, sign, 0);
                // uv
                uvs.push(0.5, 0.5);
                // increase index
                index++;
            }
            // save the index of the last center vertex
            const centerIndexEnd = index;
            // now we generate the surrounding vertices, normals and uvs
            for(let x = 0; x <= radialSegments; x++){
                const u = x / radialSegments;
                const theta = u * thetaLength + thetaStart;
                const cosTheta = Math.cos(theta);
                const sinTheta = Math.sin(theta);
                // vertex
                vertex.x = radius * sinTheta;
                vertex.y = halfHeight * sign;
                vertex.z = radius * cosTheta;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, sign, 0);
                // uv
                uv.x = cosTheta * 0.5 + 0.5;
                uv.y = sinTheta * 0.5 * sign + 0.5;
                uvs.push(uv.x, uv.y);
                // increase index
                index++;
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++){
                const c = centerIndexStart + x;
                const i = centerIndexEnd + x;
                if (top === true) // face top
                indices.push(i, i + 1, c);
                else // face bottom
                indices.push(i + 1, i, c);
                groupCount += 3;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            // calculate new start value for groups
            groupStart += groupCount;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$68f745719dbe5198(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class $04ce9c8dcd7d39f0$export$a7a48974f285c9b3 extends $04ce9c8dcd7d39f0$export$68f745719dbe5198 {
    constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        this.type = "ConeGeometry";
        this.parameters = {
            radius: radius,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$a7a48974f285c9b3(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(vertices = [], indices = [], radius = 1, detail = 0){
        super();
        this.type = "PolyhedronGeometry";
        this.parameters = {
            vertices: vertices,
            indices: indices,
            radius: radius,
            detail: detail
        };
        // default buffer data
        const vertexBuffer = [];
        const uvBuffer = [];
        // the subdivision creates the vertex buffer data
        subdivide(detail);
        // all vertices should lie on a conceptual sphere with a given radius
        applyRadius(radius);
        // finally, create the uv data
        generateUVs();
        // build non-indexed geometry
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertexBuffer, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertexBuffer.slice(), 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvBuffer, 2));
        if (detail === 0) this.computeVertexNormals(); // flat normals
        else this.normalizeNormals(); // smooth normals
        // helper functions
        function subdivide(detail) {
            const a = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const b = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const c = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            // iterate over all faces and apply a subdivision with the given detail value
            for(let i = 0; i < indices.length; i += 3){
                // get the vertices of the face
                getVertexByIndex(indices[i + 0], a);
                getVertexByIndex(indices[i + 1], b);
                getVertexByIndex(indices[i + 2], c);
                // perform subdivision
                subdivideFace(a, b, c, detail);
            }
        }
        function subdivideFace(a, b, c, detail) {
            const cols = detail + 1;
            // we use this multidimensional array as a data structure for creating the subdivision
            const v = [];
            // construct all of the vertices for this subdivision
            for(let i = 0; i <= cols; i++){
                v[i] = [];
                const aj = a.clone().lerp(c, i / cols);
                const bj = b.clone().lerp(c, i / cols);
                const rows = cols - i;
                for(let j = 0; j <= rows; j++)if (j === 0 && i === cols) v[i][j] = aj;
                else v[i][j] = aj.clone().lerp(bj, j / rows);
            }
            // construct all of the faces
            for(let i = 0; i < cols; i++)for(let j = 0; j < 2 * (cols - i) - 1; j++){
                const k = Math.floor(j / 2);
                if (j % 2 === 0) {
                    pushVertex(v[i][k + 1]);
                    pushVertex(v[i + 1][k]);
                    pushVertex(v[i][k]);
                } else {
                    pushVertex(v[i][k + 1]);
                    pushVertex(v[i + 1][k + 1]);
                    pushVertex(v[i + 1][k]);
                }
            }
        }
        function applyRadius(radius) {
            const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            // iterate over the entire buffer and apply the radius to each vertex
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                vertex.normalize().multiplyScalar(radius);
                vertexBuffer[i + 0] = vertex.x;
                vertexBuffer[i + 1] = vertex.y;
                vertexBuffer[i + 2] = vertex.z;
            }
        }
        function generateUVs() {
            const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                const u = azimuth(vertex) / 2 / Math.PI + 0.5;
                const v = inclination(vertex) / Math.PI + 0.5;
                uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
        }
        function correctSeam() {
            // handle case when face straddles the seam, see #3269
            for(let i = 0; i < uvBuffer.length; i += 6){
                // uv data of a single face
                const x0 = uvBuffer[i + 0];
                const x1 = uvBuffer[i + 2];
                const x2 = uvBuffer[i + 4];
                const max = Math.max(x0, x1, x2);
                const min = Math.min(x0, x1, x2);
                // 0.9 is somewhat arbitrary
                if (max > 0.9 && min < 0.1) {
                    if (x0 < 0.2) uvBuffer[i + 0] += 1;
                    if (x1 < 0.2) uvBuffer[i + 2] += 1;
                    if (x2 < 0.2) uvBuffer[i + 4] += 1;
                }
            }
        }
        function pushVertex(vertex) {
            vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        }
        function getVertexByIndex(index, vertex) {
            const stride = index * 3;
            vertex.x = vertices[stride + 0];
            vertex.y = vertices[stride + 1];
            vertex.z = vertices[stride + 2];
        }
        function correctUVs() {
            const a = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const b = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const c = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const centroid = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const uvA = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
            const uvB = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
            const uvC = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
            for(let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6){
                a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
                uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                centroid.copy(a).add(b).add(c).divideScalar(3);
                const azi = azimuth(centroid);
                correctUV(uvA, j + 0, a, azi);
                correctUV(uvB, j + 2, b, azi);
                correctUV(uvC, j + 4, c, azi);
            }
        }
        function correctUV(uv, stride, vector, azimuth) {
            if (azimuth < 0 && uv.x === 1) uvBuffer[stride] = uv.x - 1;
            if (vector.x === 0 && vector.z === 0) uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
        }
        // Angle around the Y axis, counter-clockwise when looking from above.
        function azimuth(vector) {
            return Math.atan2(vector.z, -vector.x);
        }
        // Angle above the XZ plane.
        function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65(data.vertices, data.indices, data.radius, data.details);
    }
}
class $04ce9c8dcd7d39f0$export$c0babfeb8708fc9c extends $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65 {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
        ];
        const indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(vertices, indices, radius, detail);
        this.type = "DodecahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$c0babfeb8708fc9c(data.radius, data.detail);
    }
}
const $04ce9c8dcd7d39f0$var$_v0 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v1$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_normal = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_triangle = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$5a465592bfe74b48();
class $04ce9c8dcd7d39f0$export$4730b1542707547f extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(geometry = null, thresholdAngle = 1){
        super();
        this.type = "EdgesGeometry";
        this.parameters = {
            geometry: geometry,
            thresholdAngle: thresholdAngle
        };
        if (geometry !== null) {
            const precisionPoints = 4;
            const precision = Math.pow(10, precisionPoints);
            const thresholdDot = Math.cos($04ce9c8dcd7d39f0$var$DEG2RAD * thresholdAngle);
            const indexAttr = geometry.getIndex();
            const positionAttr = geometry.getAttribute("position");
            const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            const indexArr = [
                0,
                0,
                0
            ];
            const vertKeys = [
                "a",
                "b",
                "c"
            ];
            const hashes = new Array(3);
            const edgeData = {};
            const vertices = [];
            for(let i = 0; i < indexCount; i += 3){
                if (indexAttr) {
                    indexArr[0] = indexAttr.getX(i);
                    indexArr[1] = indexAttr.getX(i + 1);
                    indexArr[2] = indexAttr.getX(i + 2);
                } else {
                    indexArr[0] = i;
                    indexArr[1] = i + 1;
                    indexArr[2] = i + 2;
                }
                const { a: a, b: b, c: c } = $04ce9c8dcd7d39f0$var$_triangle;
                a.fromBufferAttribute(positionAttr, indexArr[0]);
                b.fromBufferAttribute(positionAttr, indexArr[1]);
                c.fromBufferAttribute(positionAttr, indexArr[2]);
                $04ce9c8dcd7d39f0$var$_triangle.getNormal($04ce9c8dcd7d39f0$var$_normal);
                // create hashes for the edge from the vertices
                hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
                hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
                hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
                // skip degenerate triangles
                if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) continue;
                // iterate over every edge
                for(let j = 0; j < 3; j++){
                    // get the first and next vertex making up the edge
                    const jNext = (j + 1) % 3;
                    const vecHash0 = hashes[j];
                    const vecHash1 = hashes[jNext];
                    const v0 = $04ce9c8dcd7d39f0$var$_triangle[vertKeys[j]];
                    const v1 = $04ce9c8dcd7d39f0$var$_triangle[vertKeys[jNext]];
                    const hash = `${vecHash0}_${vecHash1}`;
                    const reverseHash = `${vecHash1}_${vecHash0}`;
                    if (reverseHash in edgeData && edgeData[reverseHash]) {
                        // if we found a sibling edge add it into the vertex array if
                        // it meets the angle threshold and delete the edge from the map.
                        if ($04ce9c8dcd7d39f0$var$_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                            vertices.push(v0.x, v0.y, v0.z);
                            vertices.push(v1.x, v1.y, v1.z);
                        }
                        edgeData[reverseHash] = null;
                    } else if (!(hash in edgeData)) // if we've already got an edge here then skip adding a new one
                    edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: $04ce9c8dcd7d39f0$var$_normal.clone()
                    };
                }
            }
            // iterate over all remaining, unmatched edges and add them to the vertex array
            for(const key in edgeData)if (edgeData[key]) {
                const { index0: index0, index1: index1 } = edgeData[key];
                $04ce9c8dcd7d39f0$var$_v0.fromBufferAttribute(positionAttr, index0);
                $04ce9c8dcd7d39f0$var$_v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push($04ce9c8dcd7d39f0$var$_v0.x, $04ce9c8dcd7d39f0$var$_v0.y, $04ce9c8dcd7d39f0$var$_v0.z);
                vertices.push($04ce9c8dcd7d39f0$var$_v1$1.x, $04ce9c8dcd7d39f0$var$_v1$1.y, $04ce9c8dcd7d39f0$var$_v1$1.z);
            }
            this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa extends $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9 {
    constructor(points){
        super(points);
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        this.type = "Shape";
        this.holes = [];
    }
    getPointsHoles(divisions) {
        const holesPts = [];
        for(let i = 0, l = this.holes.length; i < l; i++)holesPts[i] = this.holes[i].getPoints(divisions);
        return holesPts;
    }
    // get points of shape and holes (keypoints based on segments parameter)
    extractPoints(divisions) {
        return {
            shape: this.getPoints(divisions),
            holes: this.getPointsHoles(divisions)
        };
    }
    copy(source) {
        super.copy(source);
        this.holes = [];
        for(let i = 0, l = source.holes.length; i < l; i++){
            const hole = source.holes[i];
            this.holes.push(hole.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for(let i = 0, l = this.holes.length; i < l; i++){
            const hole = this.holes[i];
            data.holes.push(hole.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.uuid = json.uuid;
        this.holes = [];
        for(let i = 0, l = json.holes.length; i < l; i++){
            const hole = json.holes[i];
            this.holes.push(new $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9().fromJSON(hole));
        }
        return this;
    }
}
/**
 * Port from https://github.com/mapbox/earcut (v2.2.4)
 */ const $04ce9c8dcd7d39f0$var$Earcut = {
    triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = $04ce9c8dcd7d39f0$var$linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = $04ce9c8dcd7d39f0$var$eliminateHoles(data, holeIndices, outerNode, dim);
        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for(let i = dim; i < outerLen; i += dim){
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }
            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        $04ce9c8dcd7d39f0$var$earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
    }
};
// create a circular doubly linked list from polygon points in the specified winding order
function $04ce9c8dcd7d39f0$var$linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === $04ce9c8dcd7d39f0$var$signedArea(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = $04ce9c8dcd7d39f0$var$insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = $04ce9c8dcd7d39f0$var$insertNode(i, data[i], data[i + 1], last);
    if (last && $04ce9c8dcd7d39f0$var$equals(last, last.next)) {
        $04ce9c8dcd7d39f0$var$removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function $04ce9c8dcd7d39f0$var$filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    let p = start, again;
    do {
        again = false;
        if (!p.steiner && ($04ce9c8dcd7d39f0$var$equals(p, p.next) || $04ce9c8dcd7d39f0$var$area(p.prev, p, p.next) === 0)) {
            $04ce9c8dcd7d39f0$var$removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end);
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function $04ce9c8dcd7d39f0$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) $04ce9c8dcd7d39f0$var$indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? $04ce9c8dcd7d39f0$var$isEarHashed(ear, minX, minY, invSize) : $04ce9c8dcd7d39f0$var$isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            $04ce9c8dcd7d39f0$var$removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) $04ce9c8dcd7d39f0$var$earcutLinked($04ce9c8dcd7d39f0$var$filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = $04ce9c8dcd7d39f0$var$cureLocalIntersections($04ce9c8dcd7d39f0$var$filterPoints(ear), triangles, dim);
                $04ce9c8dcd7d39f0$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) $04ce9c8dcd7d39f0$var$splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function $04ce9c8dcd7d39f0$var$isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if ($04ce9c8dcd7d39f0$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    let p = c.next;
    while(p !== a){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && $04ce9c8dcd7d39f0$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function $04ce9c8dcd7d39f0$var$isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if ($04ce9c8dcd7d39f0$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    // z-order range for the current triangle bbox;
    const minZ = $04ce9c8dcd7d39f0$var$zOrder(x0, y0, minX, minY, invSize), maxZ = $04ce9c8dcd7d39f0$var$zOrder(x1, y1, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && $04ce9c8dcd7d39f0$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && $04ce9c8dcd7d39f0$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && $04ce9c8dcd7d39f0$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && $04ce9c8dcd7d39f0$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function $04ce9c8dcd7d39f0$var$cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev, b = p.next.next;
        if (!$04ce9c8dcd7d39f0$var$equals(a, b) && $04ce9c8dcd7d39f0$var$intersects(a, p, p.next, b) && $04ce9c8dcd7d39f0$var$locallyInside(a, b) && $04ce9c8dcd7d39f0$var$locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            // remove two nodes involved
            $04ce9c8dcd7d39f0$var$removeNode(p);
            $04ce9c8dcd7d39f0$var$removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start);
    return $04ce9c8dcd7d39f0$var$filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function $04ce9c8dcd7d39f0$var$splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    let a = start;
    do {
        let b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && $04ce9c8dcd7d39f0$var$isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                let c = $04ce9c8dcd7d39f0$var$splitPolygon(a, b);
                // filter colinear points around the cuts
                a = $04ce9c8dcd7d39f0$var$filterPoints(a, a.next);
                c = $04ce9c8dcd7d39f0$var$filterPoints(c, c.next);
                // run earcut on each half
                $04ce9c8dcd7d39f0$var$earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                $04ce9c8dcd7d39f0$var$earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start);
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function $04ce9c8dcd7d39f0$var$eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i, len, start, end, list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = $04ce9c8dcd7d39f0$var$linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push($04ce9c8dcd7d39f0$var$getLeftmost(list));
    }
    queue.sort($04ce9c8dcd7d39f0$var$compareX);
    // process holes from left to right
    for(i = 0; i < queue.length; i++)outerNode = $04ce9c8dcd7d39f0$var$eliminateHole(queue[i], outerNode);
    return outerNode;
}
function $04ce9c8dcd7d39f0$var$compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and link it
function $04ce9c8dcd7d39f0$var$eliminateHole(hole, outerNode) {
    const bridge = $04ce9c8dcd7d39f0$var$findHoleBridge(hole, outerNode);
    if (!bridge) return outerNode;
    const bridgeReverse = $04ce9c8dcd7d39f0$var$splitPolygon(bridge, hole);
    // filter collinear points around the cuts
    $04ce9c8dcd7d39f0$var$filterPoints(bridgeReverse, bridgeReverse.next);
    return $04ce9c8dcd7d39f0$var$filterPoints(bridge, bridge.next);
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function $04ce9c8dcd7d39f0$var$findHoleBridge(hole, outerNode) {
    let p = outerNode, qx = -Infinity, m;
    const hx = hole.x, hy = hole.y;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    }while (p !== outerNode);
    if (!m) return null;
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && $04ce9c8dcd7d39f0$var$pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if ($04ce9c8dcd7d39f0$var$locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && $04ce9c8dcd7d39f0$var$sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop);
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function $04ce9c8dcd7d39f0$var$sectorContainsSector(m, p) {
    return $04ce9c8dcd7d39f0$var$area(m.prev, m, p.prev) < 0 && $04ce9c8dcd7d39f0$var$area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function $04ce9c8dcd7d39f0$var$indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === 0) p.z = $04ce9c8dcd7d39f0$var$zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    $04ce9c8dcd7d39f0$var$sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function $04ce9c8dcd7d39f0$var$sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1);
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function $04ce9c8dcd7d39f0$var$zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function $04ce9c8dcd7d39f0$var$getLeftmost(start) {
    let p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start);
    return leftmost;
}
// check if a point lies within a convex triangle
function $04ce9c8dcd7d39f0$var$pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function $04ce9c8dcd7d39f0$var$isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !$04ce9c8dcd7d39f0$var$intersectsPolygon(a, b) && // dones't intersect other edges
    ($04ce9c8dcd7d39f0$var$locallyInside(a, b) && $04ce9c8dcd7d39f0$var$locallyInside(b, a) && $04ce9c8dcd7d39f0$var$middleInside(a, b) && // locally visible
    ($04ce9c8dcd7d39f0$var$area(a.prev, a, b.prev) || $04ce9c8dcd7d39f0$var$area(a, b.prev, b)) || // does not create opposite-facing sectors
    $04ce9c8dcd7d39f0$var$equals(a, b) && $04ce9c8dcd7d39f0$var$area(a.prev, a, a.next) > 0 && $04ce9c8dcd7d39f0$var$area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function $04ce9c8dcd7d39f0$var$area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function $04ce9c8dcd7d39f0$var$equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function $04ce9c8dcd7d39f0$var$intersects(p1, q1, p2, q2) {
    const o1 = $04ce9c8dcd7d39f0$var$sign($04ce9c8dcd7d39f0$var$area(p1, q1, p2));
    const o2 = $04ce9c8dcd7d39f0$var$sign($04ce9c8dcd7d39f0$var$area(p1, q1, q2));
    const o3 = $04ce9c8dcd7d39f0$var$sign($04ce9c8dcd7d39f0$var$area(p2, q2, p1));
    const o4 = $04ce9c8dcd7d39f0$var$sign($04ce9c8dcd7d39f0$var$area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && $04ce9c8dcd7d39f0$var$onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && $04ce9c8dcd7d39f0$var$onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && $04ce9c8dcd7d39f0$var$onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && $04ce9c8dcd7d39f0$var$onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function $04ce9c8dcd7d39f0$var$onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function $04ce9c8dcd7d39f0$var$sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function $04ce9c8dcd7d39f0$var$intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && $04ce9c8dcd7d39f0$var$intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a);
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function $04ce9c8dcd7d39f0$var$locallyInside(a, b) {
    return $04ce9c8dcd7d39f0$var$area(a.prev, a, a.next) < 0 ? $04ce9c8dcd7d39f0$var$area(a, b, a.next) >= 0 && $04ce9c8dcd7d39f0$var$area(a, a.prev, b) >= 0 : $04ce9c8dcd7d39f0$var$area(a, b, a.prev) < 0 || $04ce9c8dcd7d39f0$var$area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function $04ce9c8dcd7d39f0$var$middleInside(a, b) {
    let p = a, inside = false;
    const px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a);
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function $04ce9c8dcd7d39f0$var$splitPolygon(a, b) {
    const a2 = new $04ce9c8dcd7d39f0$var$Node(a.i, a.x, a.y), b2 = new $04ce9c8dcd7d39f0$var$Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function $04ce9c8dcd7d39f0$var$insertNode(i, x, y, last) {
    const p = new $04ce9c8dcd7d39f0$var$Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function $04ce9c8dcd7d39f0$var$removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function $04ce9c8dcd7d39f0$var$Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = 0;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
function $04ce9c8dcd7d39f0$var$signedArea(data, start, end, dim) {
    let sum = 0;
    for(let i = start, j = end - dim; i < end; i += dim){
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
class $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8 {
    // calculate area of the contour polygon
    static area(contour) {
        const n = contour.length;
        let a = 0.0;
        for(let p = n - 1, q = 0; q < n; p = q++)a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
        return a * 0.5;
    }
    static isClockWise(pts) {
        return $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.area(pts) < 0;
    }
    static triangulateShape(contour, holes) {
        const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
        const holeIndices = []; // array of hole indices
        const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
        $04ce9c8dcd7d39f0$var$removeDupEndPts(contour);
        $04ce9c8dcd7d39f0$var$addContour(vertices, contour);
        //
        let holeIndex = contour.length;
        holes.forEach($04ce9c8dcd7d39f0$var$removeDupEndPts);
        for(let i = 0; i < holes.length; i++){
            holeIndices.push(holeIndex);
            holeIndex += holes[i].length;
            $04ce9c8dcd7d39f0$var$addContour(vertices, holes[i]);
        }
        //
        const triangles = $04ce9c8dcd7d39f0$var$Earcut.triangulate(vertices, holeIndices);
        //
        for(let i = 0; i < triangles.length; i += 3)faces.push(triangles.slice(i, i + 3));
        return faces;
    }
}
function $04ce9c8dcd7d39f0$var$removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) points.pop();
}
function $04ce9c8dcd7d39f0$var$addContour(vertices, contour) {
    for(let i = 0; i < contour.length; i++){
        vertices.push(contour[i].x);
        vertices.push(contour[i].y);
    }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ class $04ce9c8dcd7d39f0$export$598697a1efa63ca7 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(shapes = new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa([
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, 0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(-0.5, 0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(-0.5, -0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, -0.5)
    ]), options = {}){
        super();
        this.type = "ExtrudeGeometry";
        this.parameters = {
            shapes: shapes,
            options: options
        };
        shapes = Array.isArray(shapes) ? shapes : [
            shapes
        ];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for(let i = 0, l = shapes.length; i < l; i++){
            const shape = shapes[i];
            addShape(shape);
        }
        // build geometry
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(verticesArray, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvArray, 2));
        this.computeVertexNormals();
        // functions
        function addShape(shape) {
            const placeholder = [];
            // options
            const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
            const steps = options.steps !== undefined ? options.steps : 1;
            const depth = options.depth !== undefined ? options.depth : 1;
            let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
            let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
            let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
            let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
            let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
            const extrudePath = options.extrudePath;
            const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : $04ce9c8dcd7d39f0$var$WorldUVGenerator;
            //
            let extrudePts, extrudeByPath = false;
            let splineTube, binormal, normal, position2;
            if (extrudePath) {
                extrudePts = extrudePath.getSpacedPoints(steps);
                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion
                // SETUP TNB variables
                // TODO1 - have a .isClosed in spline?
                splineTube = extrudePath.computeFrenetFrames(steps, false);
                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                binormal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
                normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
                position2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            }
            // Safeguards if bevels are not enabled
            if (!bevelEnabled) {
                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;
                bevelOffset = 0;
            }
            // Variables initialization
            const shapePoints = shape.extractPoints(curveSegments);
            let vertices = shapePoints.shape;
            const holes = shapePoints.holes;
            const reverse = !$04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.isClockWise(vertices);
            if (reverse) {
                vertices = vertices.reverse();
                // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    if ($04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.isClockWise(ahole)) holes[h] = ahole.reverse();
                }
            }
            const faces = $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.triangulateShape(vertices, holes);
            /* Vertices */ const contour = vertices; // vertices has all points but contour has only points of circumference
            for(let h = 0, hl = holes.length; h < hl; h++){
                const ahole = holes[h];
                vertices = vertices.concat(ahole);
            }
            function scalePt2(pt, vec, size) {
                if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
                return pt.clone().addScaledVector(vec, size);
            }
            const vlen = vertices.length, flen = faces.length;
            // Find directions for point movement
            function getBevelVec(inPt, inPrev, inNext) {
                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.
                let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html
                const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
                const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
                const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                // check for collinear edges
                const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                if (Math.abs(collinear0) > Number.EPSILON) {
                    // not collinear
                    // length of vectors for normalizing
                    const v_prev_len = Math.sqrt(v_prev_lensq);
                    const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                    // shift adjacent points by unit vectors to the left
                    const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                    const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                    const ptNextShift_x = inNext.x - v_next_y / v_next_len;
                    const ptNextShift_y = inNext.y + v_next_x / v_next_len;
                    // scaling factor for v_prev to intersection point
                    const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                    // vector from inPt to intersection point
                    v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                    v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                    if (v_trans_lensq <= 2) return new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(v_trans_x, v_trans_y);
                    else shrink_by = Math.sqrt(v_trans_lensq / 2);
                } else {
                    // handle special case of collinear edges
                    let direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {
                        if (v_next_x > Number.EPSILON) direction_eq = true;
                    } else {
                        if (v_prev_x < -Number.EPSILON) {
                            if (v_next_x < -Number.EPSILON) direction_eq = true;
                        } else if (Math.sign(v_prev_y) === Math.sign(v_next_y)) direction_eq = true;
                    }
                    if (direction_eq) {
                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);
                    } else {
                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);
                    }
                }
                return new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            const contourMovements = [];
            for(let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                if (j === il) j = 0;
                if (k === il) k = 0;
                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)
                contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
            }
            const holesMovements = [];
            let oneHoleMovements, verticesMovements = contourMovements.concat();
            for(let h = 0, hl = holes.length; h < hl; h++){
                const ahole = holes[h];
                oneHoleMovements = [];
                for(let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                    if (j === il) j = 0;
                    if (k === il) k = 0;
                    //  (j)---(i)---(k)
                    oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
                }
                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            // Loop bevelSegments, 1 for the front, 1 for the back
            for(let b = 0; b < bevelSegments; b++){
                //for ( b = bevelSegments; b > 0; b -- ) {
                const t = b / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour.length; i < il; i++){
                    const vert = scalePt2(contour[i], contourMovements[i], bs);
                    v(vert.x, vert.y, -z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        v(vert.x, vert.y, -z);
                    }
                }
            }
            const bs = bevelSize + bevelOffset;
            // Back facing vertices
            for(let i = 0; i < vlen; i++){
                const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                if (!extrudeByPath) v(vert.x, vert.y, 0);
                else {
                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                    normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[0]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add stepped vertices...
            // Including front facing vertices
            for(let s = 1; s <= steps; s++)for(let i = 0; i < vlen; i++){
                const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                if (!extrudeByPath) v(vert.x, vert.y, depth / steps * s);
                else {
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                    normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[s]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add bevel segments planes
            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for(let b = bevelSegments - 1; b >= 0; b--){
                const t = b / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour.length; i < il; i++){
                    const vert = scalePt2(contour[i], contourMovements[i], bs);
                    v(vert.x, vert.y, depth + z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        if (!extrudeByPath) v(vert.x, vert.y, depth + z);
                        else v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                    }
                }
            }
            /* Faces */ // Top and bottom faces
            buildLidFaces();
            // Sides faces
            buildSideFaces();
            /////  Internal functions
            function buildLidFaces() {
                const start = verticesArray.length / 3;
                if (bevelEnabled) {
                    let layer = 0; // steps + 1
                    let offset = vlen * layer;
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);
                    }
                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;
                    // Top faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[0] + offset, face[1] + offset, face[2] + offset);
                    }
                } else {
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2], face[1], face[0]);
                    }
                    // Top faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
                    }
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            // Create faces for the z-sides of the shape
            function buildSideFaces() {
                const start = verticesArray.length / 3;
                let layeroffset = 0;
                sidewalls(contour, layeroffset);
                layeroffset += contour.length;
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    sidewalls(ahole, layeroffset);
                    //, true
                    layeroffset += ahole.length;
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour, layeroffset) {
                let i = contour.length;
                while(--i >= 0){
                    const j = i;
                    let k = i - 1;
                    if (k < 0) k = contour.length - 1;
                    //console.log('b', i,j, i-1, k,vertices.length);
                    for(let s = 0, sl = steps + bevelSegments * 2; s < sl; s++){
                        const slen1 = vlen * s;
                        const slen2 = vlen * (s + 1);
                        const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                        f4(a, b, c, d);
                    }
                }
            }
            function v(x, y, z) {
                placeholder.push(x);
                placeholder.push(y);
                placeholder.push(z);
            }
            function f3(a, b, c) {
                addVertex(a);
                addVertex(b);
                addVertex(c);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
                addVertex(a);
                addVertex(b);
                addVertex(d);
                addVertex(b);
                addVertex(c);
                addVertex(d);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[3]);
                addUV(uvs[1]);
                addUV(uvs[2]);
                addUV(uvs[3]);
            }
            function addVertex(index) {
                verticesArray.push(placeholder[index * 3 + 0]);
                verticesArray.push(placeholder[index * 3 + 1]);
                verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
                uvArray.push(vector2.x);
                uvArray.push(vector2.y);
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return $04ce9c8dcd7d39f0$var$toJSON$1(shapes, options, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        const extrudePath = data.options.extrudePath;
        if (extrudePath !== undefined) data.options.extrudePath = new $04ce9c8dcd7d39f0$var$Curves[extrudePath.type]().fromJSON(extrudePath);
        return new $04ce9c8dcd7d39f0$export$598697a1efa63ca7(geometryShapes, data.options);
    }
}
const $04ce9c8dcd7d39f0$var$WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(a_x, a_y),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(b_x, b_y),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(c_x, c_y)
        ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) return [
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(a_x, 1 - a_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(b_x, 1 - b_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(c_x, 1 - c_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(d_x, 1 - d_z)
        ];
        else return [
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(a_y, 1 - a_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(b_y, 1 - b_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(c_y, 1 - c_z),
            new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(d_y, 1 - d_z)
        ];
    }
};
function $04ce9c8dcd7d39f0$var$toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    data.options = Object.assign({}, options);
    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
    return data;
}
class $04ce9c8dcd7d39f0$export$9567cc828c9535da extends $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65 {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
        ];
        const indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = "IcosahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$9567cc828c9535da(data.radius, data.detail);
    }
}
class $04ce9c8dcd7d39f0$export$1954e2b809fe361e extends $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65 {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ];
        const indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(vertices, indices, radius, detail);
        this.type = "OctahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$1954e2b809fe361e(data.radius, data.detail);
    }
}
class $04ce9c8dcd7d39f0$export$68cb731f50f614af extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = "RingGeometry";
        this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // some helper variables
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const uv = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        // generate vertices, normals and uvs
        for(let j = 0; j <= phiSegments; j++){
            for(let i = 0; i <= thetaSegments; i++){
                // values are generate from the inside of the ring to the outside
                const segment = thetaStart + i / thetaSegments * thetaLength;
                // vertex
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, 0, 1);
                // uv
                uv.x = (vertex.x / outerRadius + 1) / 2;
                uv.y = (vertex.y / outerRadius + 1) / 2;
                uvs.push(uv.x, uv.y);
            }
            // increase the radius for next row of vertices
            radius += radiusStep;
        }
        // indices
        for(let j = 0; j < phiSegments; j++){
            const thetaSegmentLevel = j * (thetaSegments + 1);
            for(let i = 0; i < thetaSegments; i++){
                const segment = i + thetaSegmentLevel;
                const a = segment;
                const b = segment + thetaSegments + 1;
                const c = segment + thetaSegments + 2;
                const d = segment + 1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$68cb731f50f614af(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
    }
}
class $04ce9c8dcd7d39f0$export$57a29a1c803e9065 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(shapes = new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa([
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0, 0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(-0.5, -0.5),
        new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(0.5, -0.5)
    ]), curveSegments = 12){
        super();
        this.type = "ShapeGeometry";
        this.parameters = {
            shapes: shapes,
            curveSegments: curveSegments
        };
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let groupStart = 0;
        let groupCount = 0;
        // allow single and array values for "shapes" parameter
        if (Array.isArray(shapes) === false) addShape(shapes);
        else for(let i = 0; i < shapes.length; i++){
            addShape(shapes[i]);
            this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support
            groupStart += groupCount;
            groupCount = 0;
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        // helper functions
        function addShape(shape) {
            const indexOffset = vertices.length / 3;
            const points = shape.extractPoints(curveSegments);
            let shapeVertices = points.shape;
            const shapeHoles = points.holes;
            // check direction of vertices
            if ($04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.isClockWise(shapeVertices) === false) shapeVertices = shapeVertices.reverse();
            for(let i = 0, l = shapeHoles.length; i < l; i++){
                const shapeHole = shapeHoles[i];
                if ($04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.isClockWise(shapeHole) === true) shapeHoles[i] = shapeHole.reverse();
            }
            const faces = $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.triangulateShape(shapeVertices, shapeHoles);
            // join vertices of inner and outer paths to a single array
            for(let i = 0, l = shapeHoles.length; i < l; i++){
                const shapeHole = shapeHoles[i];
                shapeVertices = shapeVertices.concat(shapeHole);
            }
            // vertices, normals, uvs
            for(let i = 0, l = shapeVertices.length; i < l; i++){
                const vertex = shapeVertices[i];
                vertices.push(vertex.x, vertex.y, 0);
                normals.push(0, 0, 1);
                uvs.push(vertex.x, vertex.y); // world uvs
            }
            // indices
            for(let i = 0, l = faces.length; i < l; i++){
                const face = faces[i];
                const a = face[0] + indexOffset;
                const b = face[1] + indexOffset;
                const c = face[2] + indexOffset;
                indices.push(a, b, c);
                groupCount += 3;
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return $04ce9c8dcd7d39f0$var$toJSON(shapes, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        return new $04ce9c8dcd7d39f0$export$57a29a1c803e9065(geometryShapes, data.curveSegments);
    }
}
function $04ce9c8dcd7d39f0$var$toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    return data;
}
class $04ce9c8dcd7d39f0$export$1b417fc3b307a251 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI){
        super();
        this.type = "SphereGeometry";
        this.parameters = {
            radius: radius,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            phiStart: phiStart,
            phiLength: phiLength,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        let index = 0;
        const grid = [];
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // generate vertices, normals and uvs
        for(let iy = 0; iy <= heightSegments; iy++){
            const verticesRow = [];
            const v = iy / heightSegments;
            // special case for the poles
            let uOffset = 0;
            if (iy === 0 && thetaStart === 0) uOffset = 0.5 / widthSegments;
            else if (iy === heightSegments && thetaEnd === Math.PI) uOffset = -0.5 / widthSegments;
            for(let ix = 0; ix <= widthSegments; ix++){
                const u = ix / widthSegments;
                // vertex
                vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normal.copy(vertex).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u + uOffset, 1 - v);
                verticesRow.push(index++);
            }
            grid.push(verticesRow);
        }
        // indices
        for(let iy = 0; iy < heightSegments; iy++)for(let ix = 0; ix < widthSegments; ix++){
            const a = grid[iy][ix + 1];
            const b = grid[iy][ix];
            const c = grid[iy + 1][ix];
            const d = grid[iy + 1][ix + 1];
            if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
            if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$1b417fc3b307a251(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
}
class $04ce9c8dcd7d39f0$export$fb3f7adc68bd6e02 extends $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65 {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ];
        const indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = "TetrahedronGeometry";
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$fb3f7adc68bd6e02(data.radius, data.detail);
    }
}
class $04ce9c8dcd7d39f0$export$a2312a2a1fa56495 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2){
        super();
        this.type = "TorusGeometry";
        this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            arc: arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const center = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(let j = 0; j <= radialSegments; j++)for(let i = 0; i <= tubularSegments; i++){
            const u = i / tubularSegments * arc;
            const v = j / radialSegments * Math.PI * 2;
            // vertex
            vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
            vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
            vertex.z = tube * Math.sin(v);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            // uv
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
        }
        // generate indices
        for(let j = 1; j <= radialSegments; j++)for(let i = 1; i <= tubularSegments; i++){
            // indices
            const a = (tubularSegments + 1) * j + i - 1;
            const b = (tubularSegments + 1) * (j - 1) + i - 1;
            const c = (tubularSegments + 1) * (j - 1) + i;
            const d = (tubularSegments + 1) * j + i;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$a2312a2a1fa56495(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
    }
}
class $04ce9c8dcd7d39f0$export$77e9bfadfb9ab8c8 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3){
        super();
        this.type = "TorusKnotGeometry";
        this.parameters = {
            radius: radius,
            tube: tube,
            tubularSegments: tubularSegments,
            radialSegments: radialSegments,
            p: p,
            q: q
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const P1 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const P2 = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const B = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const T = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const N = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(let i = 0; i <= tubularSegments; ++i){
            // the radian "u" is used to calculate the position on the torus curve of the current tubular segment
            const u = i / tubularSegments * p * Math.PI * 2;
            // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
            // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
            calculatePositionOnCurve(u, p, q, radius, P1);
            calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
            // calculate orthonormal basis
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            // normalize B, N. T can be ignored, we don't use it
            B.normalize();
            N.normalize();
            for(let j = 0; j <= radialSegments; ++j){
                // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                const v = j / radialSegments * Math.PI * 2;
                const cx = -tube * Math.cos(v);
                const cy = tube * Math.sin(v);
                // now calculate the final vertex position.
                // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
                vertex.x = P1.x + (cx * N.x + cy * B.x);
                vertex.y = P1.y + (cx * N.y + cy * B.y);
                vertex.z = P1.z + (cx * N.z + cy * B.z);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                normal.subVectors(vertex, P1).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(i / tubularSegments);
                uvs.push(j / radialSegments);
            }
        }
        // generate indices
        for(let j = 1; j <= tubularSegments; j++)for(let i = 1; i <= radialSegments; i++){
            // indices
            const a = (radialSegments + 1) * (j - 1) + (i - 1);
            const b = (radialSegments + 1) * j + (i - 1);
            const c = (radialSegments + 1) * j + i;
            const d = (radialSegments + 1) * (j - 1) + i;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        // this function calculates the current position on the torus curve
        function calculatePositionOnCurve(u, p, q, radius, position) {
            const cu = Math.cos(u);
            const su = Math.sin(u);
            const quOverP = q / p * u;
            const cs = Math.cos(quOverP);
            position.x = radius * (2 + cs) * 0.5 * cu;
            position.y = radius * (2 + cs) * su * 0.5;
            position.z = radius * Math.sin(quOverP) * 0.5;
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    static fromJSON(data) {
        return new $04ce9c8dcd7d39f0$export$77e9bfadfb9ab8c8(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
    }
}
class $04ce9c8dcd7d39f0$export$7897d9d48904490c extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(path = new $04ce9c8dcd7d39f0$export$bf3f4c7e459f90fc(new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-1, -1, 0), new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-1, 1, 0), new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false){
        super();
        this.type = "TubeGeometry";
        this.parameters = {
            path: path,
            tubularSegments: tubularSegments,
            radius: radius,
            radialSegments: radialSegments,
            closed: closed
        };
        const frames = path.computeFrenetFrames(tubularSegments, closed);
        // expose internals
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        // helper variables
        const vertex = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const normal = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        const uv = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
        let P = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
        // buffer
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        // create buffer data
        generateBufferData();
        // build geometry
        this.setIndex(indices);
        this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute("normal", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute("uv", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(uvs, 2));
        // functions
        function generateBufferData() {
            for(let i = 0; i < tubularSegments; i++)generateSegment(i);
            // if the geometry is not closed, generate the last row of vertices and normals
            // at the regular position on the given path
            //
            // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
            generateSegment(closed === false ? tubularSegments : 0);
            // uvs are generated in a separate function.
            // this makes it easy compute correct values for closed geometries
            generateUVs();
            // finally create faces
            generateIndices();
        }
        function generateSegment(i) {
            // we use getPointAt to sample evenly distributed points from the given path
            P = path.getPointAt(i / tubularSegments, P);
            // retrieve corresponding normal and binormal
            const N = frames.normals[i];
            const B = frames.binormals[i];
            // generate normals and vertices for the current segment
            for(let j = 0; j <= radialSegments; j++){
                const v = j / radialSegments * Math.PI * 2;
                const sin = Math.sin(v);
                const cos = -Math.cos(v);
                // normal
                normal.x = cos * N.x + sin * B.x;
                normal.y = cos * N.y + sin * B.y;
                normal.z = cos * N.z + sin * B.z;
                normal.normalize();
                normals.push(normal.x, normal.y, normal.z);
                // vertex
                vertex.x = P.x + radius * normal.x;
                vertex.y = P.y + radius * normal.y;
                vertex.z = P.z + radius * normal.z;
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
        }
        function generateIndices() {
            for(let j = 1; j <= tubularSegments; j++)for(let i = 1; i <= radialSegments; i++){
                const a = (radialSegments + 1) * (j - 1) + (i - 1);
                const b = (radialSegments + 1) * j + (i - 1);
                const c = (radialSegments + 1) * j + i;
                const d = (radialSegments + 1) * (j - 1) + i;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        function generateUVs() {
            for(let i = 0; i <= tubularSegments; i++)for(let j = 0; j <= radialSegments; j++){
                uv.x = i / tubularSegments;
                uv.y = j / radialSegments;
                uvs.push(uv.x, uv.y);
            }
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
    }
    static fromJSON(data) {
        // This only works for built-in curves (e.g. CatmullRomCurve3).
        // User defined curves or instances of CurvePath will not be deserialized.
        return new $04ce9c8dcd7d39f0$export$7897d9d48904490c(new $04ce9c8dcd7d39f0$var$Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
    }
}
class $04ce9c8dcd7d39f0$export$4b739da06d24892b extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(geometry = null){
        super();
        this.type = "WireframeGeometry";
        this.parameters = {
            geometry: geometry
        };
        if (geometry !== null) {
            // buffer
            const vertices = [];
            const edges = new Set();
            // helper variables
            const start = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            const end = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            if (geometry.index !== null) {
                // indexed BufferGeometry
                const position = geometry.attributes.position;
                const indices = geometry.index;
                let groups = geometry.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.count,
                        materialIndex: 0
                    }
                ];
                // create a data structure that contains all edges without duplicates
                for(let o = 0, ol = groups.length; o < ol; ++o){
                    const group = groups[o];
                    const groupStart = group.start;
                    const groupCount = group.count;
                    for(let i = groupStart, l = groupStart + groupCount; i < l; i += 3)for(let j = 0; j < 3; j++){
                        const index1 = indices.getX(i + j);
                        const index2 = indices.getX(i + (j + 1) % 3);
                        start.fromBufferAttribute(position, index1);
                        end.fromBufferAttribute(position, index2);
                        if ($04ce9c8dcd7d39f0$var$isUniqueEdge(start, end, edges) === true) {
                            vertices.push(start.x, start.y, start.z);
                            vertices.push(end.x, end.y, end.z);
                        }
                    }
                }
            } else {
                // non-indexed BufferGeometry
                const position = geometry.attributes.position;
                for(let i = 0, l = position.count / 3; i < l; i++)for(let j = 0; j < 3; j++){
                    // three edges per triangle, an edge is represented as (index1, index2)
                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                    const index1 = 3 * i + j;
                    const index2 = 3 * i + (j + 1) % 3;
                    start.fromBufferAttribute(position, index1);
                    end.fromBufferAttribute(position, index2);
                    if ($04ce9c8dcd7d39f0$var$isUniqueEdge(start, end, edges) === true) {
                        vertices.push(start.x, start.y, start.z);
                        vertices.push(end.x, end.y, end.z);
                    }
                }
            }
            // build geometry
            this.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        }
    }
    copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
    }
}
function $04ce9c8dcd7d39f0$var$isUniqueEdge(start, end, edges) {
    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
    if (edges.has(hash1) === true || edges.has(hash2) === true) return false;
    else {
        edges.add(hash1);
        edges.add(hash2);
        return true;
    }
}
var $04ce9c8dcd7d39f0$var$Geometries = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BoxGeometry: $04ce9c8dcd7d39f0$export$33e43285f7406bd5,
    CapsuleGeometry: $04ce9c8dcd7d39f0$export$41680e8551036033,
    CircleGeometry: $04ce9c8dcd7d39f0$export$d5c0e8d607467193,
    ConeGeometry: $04ce9c8dcd7d39f0$export$a7a48974f285c9b3,
    CylinderGeometry: $04ce9c8dcd7d39f0$export$68f745719dbe5198,
    DodecahedronGeometry: $04ce9c8dcd7d39f0$export$c0babfeb8708fc9c,
    EdgesGeometry: $04ce9c8dcd7d39f0$export$4730b1542707547f,
    ExtrudeGeometry: $04ce9c8dcd7d39f0$export$598697a1efa63ca7,
    IcosahedronGeometry: $04ce9c8dcd7d39f0$export$9567cc828c9535da,
    LatheGeometry: $04ce9c8dcd7d39f0$export$6d839803fcd1882c,
    OctahedronGeometry: $04ce9c8dcd7d39f0$export$1954e2b809fe361e,
    PlaneGeometry: $04ce9c8dcd7d39f0$export$967d831af31f69ce,
    PolyhedronGeometry: $04ce9c8dcd7d39f0$export$60e57a7d3f20ff65,
    RingGeometry: $04ce9c8dcd7d39f0$export$68cb731f50f614af,
    ShapeGeometry: $04ce9c8dcd7d39f0$export$57a29a1c803e9065,
    SphereGeometry: $04ce9c8dcd7d39f0$export$1b417fc3b307a251,
    TetrahedronGeometry: $04ce9c8dcd7d39f0$export$fb3f7adc68bd6e02,
    TorusGeometry: $04ce9c8dcd7d39f0$export$a2312a2a1fa56495,
    TorusKnotGeometry: $04ce9c8dcd7d39f0$export$77e9bfadfb9ab8c8,
    TubeGeometry: $04ce9c8dcd7d39f0$export$7897d9d48904490c,
    WireframeGeometry: $04ce9c8dcd7d39f0$export$4b739da06d24892b
});
class $04ce9c8dcd7d39f0$export$e8564da406055a3 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isShadowMaterial = true;
        this.type = "ShadowMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$21c421a2e1df9d22 extends $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d {
    constructor(parameters){
        super(parameters);
        this.isRawShaderMaterial = true;
        this.type = "RawShaderMaterial";
    }
}
class $04ce9c8dcd7d39f0$export$f2980790215acccd extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshStandardMaterial = true;
        this.defines = {
            "STANDARD": ""
        };
        this.type = "MeshStandardMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff); // diffuse
        this.roughness = 1.0;
        this.metalness = 0.0;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.roughnessMap = null;
        this.metalnessMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapIntensity = 1.0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "STANDARD": ""
        };
        this.color.copy(source.color);
        this.roughness = source.roughness;
        this.metalness = source.metalness;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.roughnessMap = source.roughnessMap;
        this.metalnessMap = source.metalnessMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapIntensity = source.envMapIntensity;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$28d04986c4269c9f extends $04ce9c8dcd7d39f0$export$f2980790215acccd {
    constructor(parameters){
        super();
        this.isMeshPhysicalMaterial = true;
        this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
        };
        this.type = "MeshPhysicalMaterial";
        this.anisotropyRotation = 0;
        this.anisotropyMap = null;
        this.clearcoatMap = null;
        this.clearcoatRoughness = 0.0;
        this.clearcoatRoughnessMap = null;
        this.clearcoatNormalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.clearcoatNormalMap = null;
        this.ior = 1.5;
        Object.defineProperty(this, "reflectivity", {
            get: function() {
                return $04ce9c8dcd7d39f0$var$clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(reflectivity) {
                this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
        });
        this.iridescenceMap = null;
        this.iridescenceIOR = 1.3;
        this.iridescenceThicknessRange = [
            100,
            400
        ];
        this.iridescenceThicknessMap = null;
        this.sheenColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.sheenColorMap = null;
        this.sheenRoughness = 1.0;
        this.sheenRoughnessMap = null;
        this.transmissionMap = null;
        this.thickness = 0;
        this.thicknessMap = null;
        this.attenuationDistance = Infinity;
        this.attenuationColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(1, 1, 1);
        this.specularIntensity = 1.0;
        this.specularIntensityMap = null;
        this.specularColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(1, 1, 1);
        this.specularColorMap = null;
        this._anisotropy = 0;
        this._clearcoat = 0;
        this._iridescence = 0;
        this._sheen = 0.0;
        this._transmission = 0;
        this.setValues(parameters);
    }
    get anisotropy() {
        return this._anisotropy;
    }
    set anisotropy(value) {
        if (this._anisotropy > 0 !== value > 0) this.version++;
        this._anisotropy = value;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(value) {
        if (this._clearcoat > 0 !== value > 0) this.version++;
        this._clearcoat = value;
    }
    get iridescence() {
        return this._iridescence;
    }
    set iridescence(value) {
        if (this._iridescence > 0 !== value > 0) this.version++;
        this._iridescence = value;
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(value) {
        if (this._sheen > 0 !== value > 0) this.version++;
        this._sheen = value;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(value) {
        if (this._transmission > 0 !== value > 0) this.version++;
        this._transmission = value;
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
        };
        this.anisotropy = source.anisotropy;
        this.anisotropyRotation = source.anisotropyRotation;
        this.anisotropyMap = source.anisotropyMap;
        this.clearcoat = source.clearcoat;
        this.clearcoatMap = source.clearcoatMap;
        this.clearcoatRoughness = source.clearcoatRoughness;
        this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
        this.clearcoatNormalMap = source.clearcoatNormalMap;
        this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
        this.ior = source.ior;
        this.iridescence = source.iridescence;
        this.iridescenceMap = source.iridescenceMap;
        this.iridescenceIOR = source.iridescenceIOR;
        this.iridescenceThicknessRange = [
            ...source.iridescenceThicknessRange
        ];
        this.iridescenceThicknessMap = source.iridescenceThicknessMap;
        this.sheen = source.sheen;
        this.sheenColor.copy(source.sheenColor);
        this.sheenColorMap = source.sheenColorMap;
        this.sheenRoughness = source.sheenRoughness;
        this.sheenRoughnessMap = source.sheenRoughnessMap;
        this.transmission = source.transmission;
        this.transmissionMap = source.transmissionMap;
        this.thickness = source.thickness;
        this.thicknessMap = source.thicknessMap;
        this.attenuationDistance = source.attenuationDistance;
        this.attenuationColor.copy(source.attenuationColor);
        this.specularIntensity = source.specularIntensity;
        this.specularIntensityMap = source.specularIntensityMap;
        this.specularColor.copy(source.specularColor);
        this.specularColorMap = source.specularColorMap;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$24c72f71cbaf0678 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshPhongMaterial = true;
        this.type = "MeshPhongMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff); // diffuse
        this.specular = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x111111);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $04ce9c8dcd7d39f0$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.specular.copy(source.specular);
        this.shininess = source.shininess;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$df893cf97e765622 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshToonMaterial = true;
        this.defines = {
            "TOON": ""
        };
        this.type = "MeshToonMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff);
        this.map = null;
        this.gradientMap = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.gradientMap = source.gradientMap;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$bfe8c0a091f41ae7 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshNormalMaterial = true;
        this.type = "MeshNormalMaterial";
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.flatShading = source.flatShading;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$5023a9a8114806b8 extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshLambertMaterial = true;
        this.type = "MeshLambertMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff); // diffuse
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1.0;
        this.aoMap = null;
        this.aoMapIntensity = 1.0;
        this.emissive = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x000000);
        this.emissiveIntensity = 1.0;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $04ce9c8dcd7d39f0$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$6f5fef6235ec12ee extends $04ce9c8dcd7d39f0$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.isMeshMatcapMaterial = true;
        this.defines = {
            "MATCAP": ""
        };
        this.type = "MeshMatcapMaterial";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff); // diffuse
        this.matcap = null;
        this.map = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $04ce9c8dcd7d39f0$export$2852a58ebdac27b8;
        this.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            "MATCAP": ""
        };
        this.color.copy(source.color);
        this.matcap = source.matcap;
        this.map = source.map;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$327886a3efaeaebe extends $04ce9c8dcd7d39f0$export$fbaaa33907730a0c {
    constructor(parameters){
        super();
        this.isLineDashedMaterial = true;
        this.type = "LineDashedMaterial";
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.scale = source.scale;
        this.dashSize = source.dashSize;
        this.gapSize = source.gapSize;
        return this;
    }
}
// same as Array.prototype.slice, but also works on typed arrays
function $04ce9c8dcd7d39f0$var$arraySlice(array, from, to) {
    if ($04ce9c8dcd7d39f0$var$isTypedArray(array)) // in ios9 array.subarray(from, undefined) will return empty array
    // but array.subarray(from) or array.subarray(from, len) is correct
    return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
    return array.slice(from, to);
}
// converts an array to a specific type
function $04ce9c8dcd7d39f0$var$convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type) return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") return new type(array); // create typed array
    return Array.prototype.slice.call(array); // create Array
}
function $04ce9c8dcd7d39f0$var$isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
}
// returns an array by which times and values can be sorted
function $04ce9c8dcd7d39f0$var$getKeyframeOrder(times) {
    function compareTime(i, j) {
        return times[i] - times[j];
    }
    const n = times.length;
    const result = new Array(n);
    for(let i = 0; i !== n; ++i)result[i] = i;
    result.sort(compareTime);
    return result;
}
// uses the array previously returned by 'getKeyframeOrder' to sort data
function $04ce9c8dcd7d39f0$var$sortedArray(values, stride, order) {
    const nValues = values.length;
    const result = new values.constructor(nValues);
    for(let i = 0, dstOffset = 0; dstOffset !== nValues; ++i){
        const srcOffset = order[i] * stride;
        for(let j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
    }
    return result;
}
// function for parsing AOS keyframe formats
function $04ce9c8dcd7d39f0$var$flattenJSON(jsonKeys, times, values, valuePropertyName) {
    let i = 1, key = jsonKeys[0];
    while(key !== undefined && key[valuePropertyName] === undefined)key = jsonKeys[i++];
    if (key === undefined) return; // no data
    let value = key[valuePropertyName];
    if (value === undefined) return; // no data
    if (Array.isArray(value)) do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            values.push.apply(values, value); // push all elements
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
    else if (value.toArray !== undefined) // ...assume THREE.Math-ish
    do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            value.toArray(values, values.length);
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
    else // otherwise push as-is
    do {
        value = key[valuePropertyName];
        if (value !== undefined) {
            times.push(key.time);
            values.push(value);
        }
        key = jsonKeys[i++];
    }while (key !== undefined);
}
function $04ce9c8dcd7d39f0$var$subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
    const clip = sourceClip.clone();
    clip.name = name;
    const tracks = [];
    for(let i = 0; i < clip.tracks.length; ++i){
        const track = clip.tracks[i];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for(let j = 0; j < track.times.length; ++j){
            const frame = track.times[j] * fps;
            if (frame < startFrame || frame >= endFrame) continue;
            times.push(track.times[j]);
            for(let k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
        }
        if (times.length === 0) continue;
        track.times = $04ce9c8dcd7d39f0$var$convertArray(times, track.times.constructor);
        track.values = $04ce9c8dcd7d39f0$var$convertArray(values, track.values.constructor);
        tracks.push(track);
    }
    clip.tracks = tracks;
    // find minimum .times value across all tracks in the trimmed clip
    let minStartTime = Infinity;
    for(let i = 0; i < clip.tracks.length; ++i)if (minStartTime > clip.tracks[i].times[0]) minStartTime = clip.tracks[i].times[0];
    // shift all tracks such that clip begins at t=0
    for(let i = 0; i < clip.tracks.length; ++i)clip.tracks[i].shift(-1 * minStartTime);
    clip.resetDuration();
    return clip;
}
function $04ce9c8dcd7d39f0$var$makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
    if (fps <= 0) fps = 30;
    const numTracks = referenceClip.tracks.length;
    const referenceTime = referenceFrame / fps;
    // Make each track's values relative to the values at the reference frame
    for(let i = 0; i < numTracks; ++i){
        const referenceTrack = referenceClip.tracks[i];
        const referenceTrackType = referenceTrack.ValueTypeName;
        // Skip this track if it's non-numeric
        if (referenceTrackType === "bool" || referenceTrackType === "string") continue;
        // Find the track in the target clip whose name and type matches the reference track
        const targetTrack = targetClip.tracks.find(function(track) {
            return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === undefined) continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset = referenceValueSize / 3;
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset = targetValueSize / 3;
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        // Find the value to subtract out of the track
        if (referenceTime <= referenceTrack.times[0]) {
            // Reference frame is earlier than the first keyframe, so just use the first keyframe
            const startIndex = referenceOffset;
            const endIndex = referenceValueSize - referenceOffset;
            referenceValue = $04ce9c8dcd7d39f0$var$arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
            // Reference frame is after the last keyframe, so just use the last keyframe
            const startIndex = lastIndex * referenceValueSize + referenceOffset;
            const endIndex = startIndex + referenceValueSize - referenceOffset;
            referenceValue = $04ce9c8dcd7d39f0$var$arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
            // Interpolate to the reference value
            const interpolant = referenceTrack.createInterpolant();
            const startIndex = referenceOffset;
            const endIndex = referenceValueSize - referenceOffset;
            interpolant.evaluate(referenceTime);
            referenceValue = $04ce9c8dcd7d39f0$var$arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        // Conjugate the quaternion
        if (referenceTrackType === "quaternion") {
            const referenceQuat = new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3().fromArray(referenceValue).normalize().conjugate();
            referenceQuat.toArray(referenceValue);
        }
        // Subtract the reference value from all of the track values
        const numTimes = targetTrack.times.length;
        for(let j = 0; j < numTimes; ++j){
            const valueStart = j * targetValueSize + targetOffset;
            if (referenceTrackType === "quaternion") // Multiply the conjugate for quaternion track types
            $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
            else {
                const valueEnd = targetValueSize - targetOffset * 2;
                // Subtract each value for all other numeric track types
                for(let k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
            }
        }
    }
    targetClip.blendMode = $04ce9c8dcd7d39f0$export$d875e029ef558d3;
    return targetClip;
}
const $04ce9c8dcd7d39f0$export$7ee8caa573e71ad1 = {
    arraySlice: $04ce9c8dcd7d39f0$var$arraySlice,
    convertArray: $04ce9c8dcd7d39f0$var$convertArray,
    isTypedArray: $04ce9c8dcd7d39f0$var$isTypedArray,
    getKeyframeOrder: $04ce9c8dcd7d39f0$var$getKeyframeOrder,
    sortedArray: $04ce9c8dcd7d39f0$var$sortedArray,
    flattenJSON: $04ce9c8dcd7d39f0$var$flattenJSON,
    subclip: $04ce9c8dcd7d39f0$var$subclip,
    makeClipAdditive: $04ce9c8dcd7d39f0$var$makeClipAdditive
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */ class $04ce9c8dcd7d39f0$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {};
    }
    evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
            seek: {
                let right;
                linear_scan: {
                    //- See http://jsperf.com/comparison-to-undefined/3
                    //- slower code:
                    //-
                    //- 				if ( t >= t1 || t1 === undefined ) {
                    forward_scan: if (!(t < t1)) {
                        for(let giveUpAt = i1 + 2;;){
                            if (t1 === undefined) {
                                if (t < t0) break forward_scan;
                                // after end
                                i1 = pp.length;
                                this._cachedIndex = i1;
                                return this.copySampleValue_(i1 - 1);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t0 = t1;
                            t1 = pp[++i1];
                            if (t < t1) break seek;
                        }
                        // prepare binary search on the right side of the index
                        right = pp.length;
                        break linear_scan;
                    }
                    //- slower code:
                    //-					if ( t < t0 || t0 === undefined ) {
                    if (!(t >= t0)) {
                        // looping?
                        const t1global = pp[1];
                        if (t < t1global) {
                            i1 = 2; // + 1, using the scan for the details
                            t0 = t1global;
                        }
                        // linear reverse scan
                        for(let giveUpAt = i1 - 2;;){
                            if (t0 === undefined) {
                                // before start
                                this._cachedIndex = 0;
                                return this.copySampleValue_(0);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t1 = t0;
                            t0 = pp[--i1 - 1];
                            if (t >= t0) break seek;
                        }
                        // prepare binary search on the left side of the index
                        right = i1;
                        i1 = 0;
                        break linear_scan;
                    }
                    break validate_interval;
                } // linear scan
                // binary search
                while(i1 < right){
                    const mid = i1 + right >>> 1;
                    if (t < pp[mid]) right = mid;
                    else i1 = mid + 1;
                }
                t1 = pp[i1];
                t0 = pp[i1 - 1];
                // check boundary cases, again
                if (t0 === undefined) {
                    this._cachedIndex = 0;
                    return this.copySampleValue_(0);
                }
                if (t1 === undefined) {
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.copySampleValue_(i1 - 1);
                }
            } // seek
            this._cachedIndex = i1;
            this.intervalChanged_(i1, t0, t1);
        } // validate_interval
        return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
        // copies a sample value to the result buffer
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset + i];
        return result;
    }
    // Template methods for derived classes:
    interpolate_() {
        throw new Error("call to abstract method");
    // implementations shall return this.resultBuffer
    }
    intervalChanged_() {
    // empty
    }
}
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */ class $04ce9c8dcd7d39f0$export$3646682e7a3959 extends $04ce9c8dcd7d39f0$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
            endingStart: $04ce9c8dcd7d39f0$export$7f795934b84ab523,
            endingEnd: $04ce9c8dcd7d39f0$export$7f795934b84ab523
        };
    }
    intervalChanged_(i1, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === undefined) switch(this.getSettings_().endingStart){
            case $04ce9c8dcd7d39f0$export$24a4ccb5099273b5:
                // f'(t0) = 0
                iPrev = i1;
                tPrev = 2 * t0 - t1;
                break;
            case $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee:
                // use the other end of the curve
                iPrev = pp.length - 2;
                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                break;
            default:
                // f''(t0) = 0 a.k.a. Natural Spline
                iPrev = i1;
                tPrev = t1;
        }
        if (tNext === undefined) switch(this.getSettings_().endingEnd){
            case $04ce9c8dcd7d39f0$export$24a4ccb5099273b5:
                // f'(tN) = 0
                iNext = i1;
                tNext = 2 * t1 - t0;
                break;
            case $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee:
                // use the other end of the curve
                iNext = 1;
                tNext = t1 + pp[1] - pp[0];
                break;
            default:
                // f''(tN) = 0, a.k.a. Natural Spline
                iNext = i1 - 1;
                tNext = t0;
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
        // evaluate polynomials
        const sP = -wP * ppp + 2 * wP * pp - wP * p;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
        const sN = wN * ppp - wN * pp;
        // combine data linearly
        for(let i = 0; i !== stride; ++i)result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
        return result;
    }
}
class $04ce9c8dcd7d39f0$export$a8e6009059f51e1a extends $04ce9c8dcd7d39f0$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
        return result;
    }
}
/**
 *
 * Interpolant that evaluates to the sample value at the position preceding
 * the parameter.
 */ class $04ce9c8dcd7d39f0$export$fb9758ef7ef8d5cc extends $04ce9c8dcd7d39f0$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1 /*, t0, t, t1 */ ) {
        return this.copySampleValue_(i1 - 1);
    }
}
class $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
    constructor(name, times, values, interpolation){
        if (name === undefined) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (times === undefined || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
        this.name = name;
        this.times = $04ce9c8dcd7d39f0$var$convertArray(times, this.TimeBufferType);
        this.values = $04ce9c8dcd7d39f0$var$convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
        const trackType = track.constructor;
        let json;
        // derived classes can define a static toJSON method
        if (trackType.toJSON !== this.toJSON) json = trackType.toJSON(track);
        else {
            // by default, we assume the data can be serialized as-is
            json = {
                "name": track.name,
                "times": $04ce9c8dcd7d39f0$var$convertArray(track.times, Array),
                "values": $04ce9c8dcd7d39f0$var$convertArray(track.values, Array)
            };
            const interpolation = track.getInterpolation();
            if (interpolation !== track.DefaultInterpolation) json.interpolation = interpolation;
        }
        json.type = track.ValueTypeName; // mandatory
        return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
        return new $04ce9c8dcd7d39f0$export$fb9758ef7ef8d5cc(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
        return new $04ce9c8dcd7d39f0$export$a8e6009059f51e1a(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
        return new $04ce9c8dcd7d39f0$export$3646682e7a3959(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
        let factoryMethod;
        switch(interpolation){
            case $04ce9c8dcd7d39f0$export$995b32462a65e855:
                factoryMethod = this.InterpolantFactoryMethodDiscrete;
                break;
            case $04ce9c8dcd7d39f0$export$30fac1aace31cf4d:
                factoryMethod = this.InterpolantFactoryMethodLinear;
                break;
            case $04ce9c8dcd7d39f0$export$198b11ff4c72bb30:
                factoryMethod = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (factoryMethod === undefined) {
            const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === undefined) {
                // fall back to default, unless the default itself is messed up
                if (interpolation !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                else throw new Error(message); // fatal, in this case
            }
            console.warn("THREE.KeyframeTrack:", message);
            return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return $04ce9c8dcd7d39f0$export$995b32462a65e855;
            case this.InterpolantFactoryMethodLinear:
                return $04ce9c8dcd7d39f0$export$30fac1aace31cf4d;
            case this.InterpolantFactoryMethodSmooth:
                return $04ce9c8dcd7d39f0$export$198b11ff4c72bb30;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
        if (timeOffset !== 0.0) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] += timeOffset;
        }
        return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
        if (timeScale !== 1.0) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] *= timeScale;
        }
        return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while(from !== nKeys && times[from] < startTime)++from;
        while(to !== -1 && times[to] > endTime)--to;
        ++to; // inclusive -> exclusive bound
        if (from !== 0 || to !== nKeys) {
            // empty tracks are forbidden, so keep at least one keyframe
            if (from >= to) {
                to = Math.max(to, 1);
                from = to - 1;
            }
            const stride = this.getValueSize();
            this.times = $04ce9c8dcd7d39f0$var$arraySlice(times, from, to);
            this.values = $04ce9c8dcd7d39f0$var$arraySlice(this.values, from * stride, to * stride);
        }
        return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
            console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
            valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
            console.error("THREE.KeyframeTrack: Track is empty.", this);
            valid = false;
        }
        let prevTime = null;
        for(let i = 0; i !== nKeys; i++){
            const currTime = times[i];
            if (typeof currTime === "number" && isNaN(currTime)) {
                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
                valid = false;
                break;
            }
            if (prevTime !== null && prevTime > currTime) {
                console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
                valid = false;
                break;
            }
            prevTime = currTime;
        }
        if (values !== undefined) {
            if ($04ce9c8dcd7d39f0$var$isTypedArray(values)) for(let i = 0, n = values.length; i !== n; ++i){
                const value = values[i];
                if (isNaN(value)) {
                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
        // times or values may be shared with other tracks, so overwriting is unsafe
        const times = $04ce9c8dcd7d39f0$var$arraySlice(this.times), values = $04ce9c8dcd7d39f0$var$arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === $04ce9c8dcd7d39f0$export$198b11ff4c72bb30, lastIndex = times.length - 1;
        let writeIndex = 1;
        for(let i = 1; i < lastIndex; ++i){
            let keep = false;
            const time = times[i];
            const timeNext = times[i + 1];
            // remove adjacent keyframes scheduled at the same time
            if (time !== timeNext && (i !== 1 || time !== times[0])) {
                if (!smoothInterpolation) {
                    // remove unnecessary keyframes same as their neighbors
                    const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
                    for(let j = 0; j !== stride; ++j){
                        const value = values[offset + j];
                        if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                            keep = true;
                            break;
                        }
                    }
                } else keep = true;
            }
            // in-place compaction
            if (keep) {
                if (i !== writeIndex) {
                    times[writeIndex] = times[i];
                    const readOffset = i * stride, writeOffset = writeIndex * stride;
                    for(let j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
                }
                ++writeIndex;
            }
        }
        // flush last keyframe (compaction looks ahead)
        if (lastIndex > 0) {
            times[writeIndex] = times[lastIndex];
            for(let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
            ++writeIndex;
        }
        if (writeIndex !== times.length) {
            this.times = $04ce9c8dcd7d39f0$var$arraySlice(times, 0, writeIndex);
            this.values = $04ce9c8dcd7d39f0$var$arraySlice(values, 0, writeIndex * stride);
        } else {
            this.times = times;
            this.values = values;
        }
        return this;
    }
    clone() {
        const times = $04ce9c8dcd7d39f0$var$arraySlice(this.times, 0);
        const values = $04ce9c8dcd7d39f0$var$arraySlice(this.values, 0);
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        // Interpolant argument to constructor is not saved, so copy the factory method directly.
        track.createInterpolant = this.createInterpolant;
        return track;
    }
}
$04ce9c8dcd7d39f0$export$b0e479f45b7006d6.prototype.TimeBufferType = Float32Array;
$04ce9c8dcd7d39f0$export$b0e479f45b7006d6.prototype.ValueBufferType = Float32Array;
$04ce9c8dcd7d39f0$export$b0e479f45b7006d6.prototype.DefaultInterpolation = $04ce9c8dcd7d39f0$export$30fac1aace31cf4d;
/**
 * A Track of Boolean keyframe values.
 */ class $04ce9c8dcd7d39f0$export$d3a344b98cf0b775 extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
}
$04ce9c8dcd7d39f0$export$d3a344b98cf0b775.prototype.ValueTypeName = "bool";
$04ce9c8dcd7d39f0$export$d3a344b98cf0b775.prototype.ValueBufferType = Array;
$04ce9c8dcd7d39f0$export$d3a344b98cf0b775.prototype.DefaultInterpolation = $04ce9c8dcd7d39f0$export$995b32462a65e855;
$04ce9c8dcd7d39f0$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodLinear = undefined;
$04ce9c8dcd7d39f0$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */ class $04ce9c8dcd7d39f0$export$83444c5d885347d8 extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
}
$04ce9c8dcd7d39f0$export$83444c5d885347d8.prototype.ValueTypeName = "color";
/**
 * A Track of numeric keyframe values.
 */ class $04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314 extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
}
$04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314.prototype.ValueTypeName = "number";
/**
 * Spherical linear unit quaternion interpolant.
 */ class $04ce9c8dcd7d39f0$export$2db1cfb7923d931e extends $04ce9c8dcd7d39f0$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
        let offset = i1 * stride;
        for(let end = offset + stride; offset !== end; offset += 4)$04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        return result;
    }
}
/**
 * A Track of quaternion keyframe values.
 */ class $04ce9c8dcd7d39f0$export$b8043f12b5aafbd7 extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
    InterpolantFactoryMethodLinear(result) {
        return new $04ce9c8dcd7d39f0$export$2db1cfb7923d931e(this.times, this.values, this.getValueSize(), result);
    }
}
$04ce9c8dcd7d39f0$export$b8043f12b5aafbd7.prototype.ValueTypeName = "quaternion";
// ValueBufferType is inherited
$04ce9c8dcd7d39f0$export$b8043f12b5aafbd7.prototype.DefaultInterpolation = $04ce9c8dcd7d39f0$export$30fac1aace31cf4d;
$04ce9c8dcd7d39f0$export$b8043f12b5aafbd7.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */ class $04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
}
$04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd.prototype.ValueTypeName = "string";
$04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd.prototype.ValueBufferType = Array;
$04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd.prototype.DefaultInterpolation = $04ce9c8dcd7d39f0$export$995b32462a65e855;
$04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodLinear = undefined;
$04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */ class $04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff extends $04ce9c8dcd7d39f0$export$b0e479f45b7006d6 {
}
$04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff.prototype.ValueTypeName = "vector";
class $04ce9c8dcd7d39f0$export$d942c706bf23829c {
    constructor(name, duration = -1, tracks, blendMode = $04ce9c8dcd7d39f0$export$bcfbbdcf8de7f8cd){
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        // this means it should figure out its duration by scanning the tracks
        if (this.duration < 0) this.resetDuration();
    }
    static parse(json) {
        const tracks = [], jsonTracks = json.tracks, frameTime = 1.0 / (json.fps || 1.0);
        for(let i = 0, n = jsonTracks.length; i !== n; ++i)tracks.push($04ce9c8dcd7d39f0$var$parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
        const clip = new this(json.name, json.duration, tracks, json.blendMode);
        clip.uuid = json.uuid;
        return clip;
    }
    static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
            "name": clip.name,
            "duration": clip.duration,
            "tracks": tracks,
            "uuid": clip.uuid,
            "blendMode": clip.blendMode
        };
        for(let i = 0, n = clipTracks.length; i !== n; ++i)tracks.push($04ce9c8dcd7d39f0$export$b0e479f45b7006d6.toJSON(clipTracks[i]));
        return json;
    }
    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for(let i = 0; i < numMorphTargets; i++){
            let times = [];
            let values = [];
            times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
            values.push(0, 1, 0);
            const order = $04ce9c8dcd7d39f0$var$getKeyframeOrder(times);
            times = $04ce9c8dcd7d39f0$var$sortedArray(times, 1, order);
            values = $04ce9c8dcd7d39f0$var$sortedArray(values, 1, order);
            // if there is a key at the first frame, duplicate it as the
            // last frame as well for perfect loop.
            if (!noLoop && times[0] === 0) {
                times.push(numMorphTargets);
                values.push(values[0]);
            }
            tracks.push(new $04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1.0 / fps));
        }
        return new this(name, -1, tracks);
    }
    static findByName(objectOrClipArray, name) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
            const o = objectOrClipArray;
            clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for(let i = 0; i < clipArray.length; i++){
            if (clipArray[i].name === name) return clipArray[i];
        }
        return null;
    }
    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
        const animationToMorphTargets = {};
        // tested with https://regex101.com/ on trick sequences
        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
        const pattern = /^([\w-]*?)([\d]+)$/;
        // sort morph target names into animation groups based
        // patterns like Walk_001, Walk_002, Run_001, Run_002
        for(let i = 0, il = morphTargets.length; i < il; i++){
            const morphTarget = morphTargets[i];
            const parts = morphTarget.name.match(pattern);
            if (parts && parts.length > 1) {
                const name = parts[1];
                let animationMorphTargets = animationToMorphTargets[name];
                if (!animationMorphTargets) animationToMorphTargets[name] = animationMorphTargets = [];
                animationMorphTargets.push(morphTarget);
            }
        }
        const clips = [];
        for(const name in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
        return clips;
    }
    // parse the animation.hierarchy format
    static parseAnimation(animation, bones) {
        if (!animation) {
            console.error("THREE.AnimationClip: No animation in JSONLoader data.");
            return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
            // only return track if there are actually keys.
            if (animationKeys.length !== 0) {
                const times = [];
                const values = [];
                $04ce9c8dcd7d39f0$var$flattenJSON(animationKeys, times, values, propertyName);
                // empty keys are filtered out, so check again
                if (times.length !== 0) destTracks.push(new trackType(trackName, times, values));
            }
        };
        const tracks = [];
        const clipName = animation.name || "default";
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        // automatic length determination in AnimationClip.
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for(let h = 0; h < hierarchyTracks.length; h++){
            const animationKeys = hierarchyTracks[h].keys;
            // skip empty tracks
            if (!animationKeys || animationKeys.length === 0) continue;
            // process morph targets
            if (animationKeys[0].morphTargets) {
                // figure out all morph targets used in this track
                const morphTargetNames = {};
                let k;
                for(k = 0; k < animationKeys.length; k++){
                    if (animationKeys[k].morphTargets) for(let m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
                // create a track for each morph target with all zero
                // morphTargetInfluences except for the keys in which
                // the morphTarget is named.
                for(const morphTargetName in morphTargetNames){
                    const times = [];
                    const values = [];
                    for(let m = 0; m !== animationKeys[k].morphTargets.length; ++m){
                        const animationKey = animationKeys[k];
                        times.push(animationKey.time);
                        values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                    }
                    tracks.push(new $04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314(".morphTargetInfluence[" + morphTargetName + "]", times, values));
                }
                duration = morphTargetNames.length * fps;
            } else {
                // ...assume skeletal animation
                const boneName = ".bones[" + bones[h].name + "]";
                addNonemptyTrack($04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff, boneName + ".position", animationKeys, "pos", tracks);
                addNonemptyTrack($04ce9c8dcd7d39f0$export$b8043f12b5aafbd7, boneName + ".quaternion", animationKeys, "rot", tracks);
                addNonemptyTrack($04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff, boneName + ".scale", animationKeys, "scl", tracks);
            }
        }
        if (tracks.length === 0) return null;
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
    }
    resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for(let i = 0, n = tracks.length; i !== n; ++i){
            const track = this.tracks[i];
            duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
    }
    trim() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].trim(0, this.duration);
        return this;
    }
    validate() {
        let valid = true;
        for(let i = 0; i < this.tracks.length; i++)valid = valid && this.tracks[i].validate();
        return valid;
    }
    optimize() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].optimize();
        return this;
    }
    clone() {
        const tracks = [];
        for(let i = 0; i < this.tracks.length; i++)tracks.push(this.tracks[i].clone());
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
}
function $04ce9c8dcd7d39f0$var$getTrackTypeForValueTypeName(typeName) {
    switch(typeName.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return $04ce9c8dcd7d39f0$export$d45f0d1a4d9a9314;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return $04ce9c8dcd7d39f0$export$5ce2dcb4cc9f2bff;
        case "color":
            return $04ce9c8dcd7d39f0$export$83444c5d885347d8;
        case "quaternion":
            return $04ce9c8dcd7d39f0$export$b8043f12b5aafbd7;
        case "bool":
        case "boolean":
            return $04ce9c8dcd7d39f0$export$d3a344b98cf0b775;
        case "string":
            return $04ce9c8dcd7d39f0$export$6ce41d4f3a8df9cd;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function $04ce9c8dcd7d39f0$var$parseKeyframeTrack(json) {
    if (json.type === undefined) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    const trackType = $04ce9c8dcd7d39f0$var$getTrackTypeForValueTypeName(json.type);
    if (json.times === undefined) {
        const times = [], values = [];
        $04ce9c8dcd7d39f0$var$flattenJSON(json.keys, times, values, "value");
        json.times = times;
        json.values = values;
    }
    // derived classes can define a static parse method
    if (trackType.parse !== undefined) return trackType.parse(json);
    else // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
}
const $04ce9c8dcd7d39f0$export$94affb487e701bf2 = {
    enabled: false,
    files: {},
    add: function(key, file) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Adding key:', key );
        this.files[key] = file;
    },
    get: function(key) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Checking key:', key );
        return this.files[key];
    },
    remove: function(key) {
        delete this.files[key];
    },
    clear: function() {
        this.files = {};
    }
};
class $04ce9c8dcd7d39f0$export$99cc795e99919eed {
    constructor(onLoad, onProgress, onError){
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = undefined;
        const handlers = [];
        // Refer to #5689 for the reason why we don't set .onStart
        // in the constructor
        this.onStart = undefined;
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
        this.itemStart = function(url) {
            itemsTotal++;
            if (isLoading === false) {
                if (scope.onStart !== undefined) scope.onStart(url, itemsLoaded, itemsTotal);
            }
            isLoading = true;
        };
        this.itemEnd = function(url) {
            itemsLoaded++;
            if (scope.onProgress !== undefined) scope.onProgress(url, itemsLoaded, itemsTotal);
            if (itemsLoaded === itemsTotal) {
                isLoading = false;
                if (scope.onLoad !== undefined) scope.onLoad();
            }
        };
        this.itemError = function(url) {
            if (scope.onError !== undefined) scope.onError(url);
        };
        this.resolveURL = function(url) {
            if (urlModifier) return urlModifier(url);
            return url;
        };
        this.setURLModifier = function(transform) {
            urlModifier = transform;
            return this;
        };
        this.addHandler = function(regex, loader) {
            handlers.push(regex, loader);
            return this;
        };
        this.removeHandler = function(regex) {
            const index = handlers.indexOf(regex);
            if (index !== -1) handlers.splice(index, 2);
            return this;
        };
        this.getHandler = function(file) {
            for(let i = 0, l = handlers.length; i < l; i += 2){
                const regex = handlers[i];
                const loader = handlers[i + 1];
                if (regex.global) regex.lastIndex = 0; // see #17920
                if (regex.test(file)) return loader;
            }
            return null;
        };
    }
}
const $04ce9c8dcd7d39f0$export$b033c3f9a95c6a16 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$99cc795e99919eed();
class $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        this.manager = manager !== undefined ? manager : $04ce9c8dcd7d39f0$export$b033c3f9a95c6a16;
        this.crossOrigin = "anonymous";
        this.withCredentials = false;
        this.path = "";
        this.resourcePath = "";
        this.requestHeader = {};
    }
    load() {}
    loadAsync(url, onProgress) {
        const scope = this;
        return new Promise(function(resolve, reject) {
            scope.load(url, resolve, onProgress, reject);
        });
    }
    parse() {}
    setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
    }
    setWithCredentials(value) {
        this.withCredentials = value;
        return this;
    }
    setPath(path) {
        this.path = path;
        return this;
    }
    setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
    }
    setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
    }
}
$04ce9c8dcd7d39f0$export$3b0d6d7590275603.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const $04ce9c8dcd7d39f0$var$loading = {};
class $04ce9c8dcd7d39f0$var$HttpError extends Error {
    constructor(message, response){
        super(message);
        this.response = response;
    }
}
class $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = "";
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const cached = $04ce9c8dcd7d39f0$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            this.manager.itemStart(url);
            setTimeout(()=>{
                if (onLoad) onLoad(cached);
                this.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        // Check if request is duplicate
        if ($04ce9c8dcd7d39f0$var$loading[url] !== undefined) {
            $04ce9c8dcd7d39f0$var$loading[url].push({
                onLoad: onLoad,
                onProgress: onProgress,
                onError: onError
            });
            return;
        }
        // Initialise array for duplicate requests
        $04ce9c8dcd7d39f0$var$loading[url] = [];
        $04ce9c8dcd7d39f0$var$loading[url].push({
            onLoad: onLoad,
            onProgress: onProgress,
            onError: onError
        });
        // create request
        const req = new Request(url, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
        });
        // record states ( avoid data race )
        const mimeType = this.mimeType;
        const responseType = this.responseType;
        // start the fetch
        fetch(req).then((response)=>{
            if (response.status === 200 || response.status === 0) {
                // Some browsers return HTTP Status 0 when using non-http protocol
                // e.g. 'file://' or 'data://'. Handle as success.
                if (response.status === 0) console.warn("THREE.FileLoader: HTTP Status 0 received.");
                // Workaround: Checking if response.body === undefined for Alipay browser #23548
                if (typeof ReadableStream === "undefined" || response.body === undefined || response.body.getReader === undefined) return response;
                const callbacks = $04ce9c8dcd7d39f0$var$loading[url];
                const reader = response.body.getReader();
                // Nginx needs X-File-Size check
                // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
                const contentLength = response.headers.get("Content-Length") || response.headers.get("X-File-Size");
                const total = contentLength ? parseInt(contentLength) : 0;
                const lengthComputable = total !== 0;
                let loaded = 0;
                // periodically read data into the new stream tracking while download progress
                const stream = new ReadableStream({
                    start (controller) {
                        readData();
                        function readData() {
                            reader.read().then(({ done: done, value: value })=>{
                                if (done) controller.close();
                                else {
                                    loaded += value.byteLength;
                                    const event = new ProgressEvent("progress", {
                                        lengthComputable: lengthComputable,
                                        loaded: loaded,
                                        total: total
                                    });
                                    for(let i = 0, il = callbacks.length; i < il; i++){
                                        const callback = callbacks[i];
                                        if (callback.onProgress) callback.onProgress(event);
                                    }
                                    controller.enqueue(value);
                                    readData();
                                }
                            });
                        }
                    }
                });
                return new Response(stream);
            } else throw new $04ce9c8dcd7d39f0$var$HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
        }).then((response)=>{
            switch(responseType){
                case "arraybuffer":
                    return response.arrayBuffer();
                case "blob":
                    return response.blob();
                case "document":
                    return response.text().then((text)=>{
                        const parser = new DOMParser();
                        return parser.parseFromString(text, mimeType);
                    });
                case "json":
                    return response.json();
                default:
                    if (mimeType === undefined) return response.text();
                    else {
                        // sniff encoding
                        const re = /charset="?([^;"\s]*)"?/i;
                        const exec = re.exec(mimeType);
                        const label = exec && exec[1] ? exec[1].toLowerCase() : undefined;
                        const decoder = new TextDecoder(label);
                        return response.arrayBuffer().then((ab)=>decoder.decode(ab));
                    }
            }
        }).then((data)=>{
            // Add to cache only on HTTP success, so that we do not cache
            // error response bodies as proper responses to requests.
            $04ce9c8dcd7d39f0$export$94affb487e701bf2.add(url, data);
            const callbacks = $04ce9c8dcd7d39f0$var$loading[url];
            delete $04ce9c8dcd7d39f0$var$loading[url];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onLoad) callback.onLoad(data);
            }
        }).catch((err)=>{
            // Abort errors and other errors are handled the same
            const callbacks = $04ce9c8dcd7d39f0$var$loading[url];
            if (callbacks === undefined) {
                // When onLoad was called and url was deleted in `loading`
                this.manager.itemError(url);
                throw err;
            }
            delete $04ce9c8dcd7d39f0$var$loading[url];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onError) callback.onError(err);
            }
            this.manager.itemError(url);
        }).finally(()=>{
            this.manager.itemEnd(url);
        });
        this.manager.itemStart(url);
    }
    setResponseType(value) {
        this.responseType = value;
        return this;
    }
    setMimeType(value) {
        this.mimeType = value;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$29711c7e14f61db extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const animations = [];
        for(let i = 0; i < json.length; i++){
            const clip = $04ce9c8dcd7d39f0$export$d942c706bf23829c.parse(json[i]);
            animations.push(clip);
        }
        return animations;
    }
}
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class $04ce9c8dcd7d39f0$export$bd73ce947a280350 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const images = [];
        const texture = new $04ce9c8dcd7d39f0$export$3466bac9141a5cc4();
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(url[i], function(buffer) {
                const texDatas = scope.parse(buffer, true);
                images[i] = {
                    width: texDatas.width,
                    height: texDatas.height,
                    format: texDatas.format,
                    mipmaps: texDatas.mipmaps
                };
                loaded += 1;
                if (loaded === 6) {
                    if (texDatas.mipmapCount === 1) texture.minFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
                    texture.image = images;
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, onProgress, onError);
        }
        if (Array.isArray(url)) for(let i = 0, il = url.length; i < il; ++i)loadTexture(i);
        else // compressed cubemap texture stored in a single DDS file
        loader.load(url, function(buffer) {
            const texDatas = scope.parse(buffer, true);
            if (texDatas.isCubemap) {
                const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                for(let f = 0; f < faces; f++){
                    images[f] = {
                        mipmaps: []
                    };
                    for(let i = 0; i < texDatas.mipmapCount; i++){
                        images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                        images[f].format = texDatas.format;
                        images[f].width = texDatas.width;
                        images[f].height = texDatas.height;
                    }
                }
                texture.image = images;
            } else {
                texture.image.width = texDatas.width;
                texture.image.height = texDatas.height;
                texture.mipmaps = texDatas.mipmaps;
            }
            if (texDatas.mipmapCount === 1) texture.minFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = $04ce9c8dcd7d39f0$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const image = $04ce9c8dcd7d39f0$var$createElementNS("img");
        function onImageLoad() {
            removeEventListeners();
            $04ce9c8dcd7d39f0$export$94affb487e701bf2.add(url, this);
            if (onLoad) onLoad(this);
            scope.manager.itemEnd(url);
        }
        function onImageError(event) {
            removeEventListeners();
            if (onError) onError(event);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        }
        function removeEventListeners() {
            image.removeEventListener("load", onImageLoad, false);
            image.removeEventListener("error", onImageError, false);
        }
        image.addEventListener("load", onImageLoad, false);
        image.addEventListener("error", onImageError, false);
        if (url.slice(0, 5) !== "data:") {
            if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url);
        image.src = url;
        return image;
    }
}
class $04ce9c8dcd7d39f0$export$2ec114afc2cf6308 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(urls, onLoad, onProgress, onError) {
        const texture = new $04ce9c8dcd7d39f0$export$ee2e5a18258a4049();
        texture.colorSpace = $04ce9c8dcd7d39f0$export$561f394b24edfcaa;
        const loader = new $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(urls[i], function(image) {
                texture.images[i] = image;
                loaded++;
                if (loaded === 6) {
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, undefined, onError);
        }
        for(let i = 0; i < urls.length; ++i)loadTexture(i);
        return texture;
    }
}
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class $04ce9c8dcd7d39f0$export$792d8a18f2c55855 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const texture = new $04ce9c8dcd7d39f0$export$b691f601014eabe1();
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setPath(this.path);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
            let texData;
            try {
                texData = scope.parse(buffer);
            } catch (error) {
                if (onError !== undefined) onError(error);
                else {
                    console.error(error);
                    return;
                }
            }
            if (!texData) return onError(); // TODO: Remove this when all loaders properly throw errors
            if (texData.image !== undefined) texture.image = texData.image;
            else if (texData.data !== undefined) {
                texture.image.width = texData.width;
                texture.image.height = texData.height;
                texture.image.data = texData.data;
            }
            texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : $04ce9c8dcd7d39f0$export$9d9334239a5a5e06;
            texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : $04ce9c8dcd7d39f0$export$9d9334239a5a5e06;
            texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
            texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
            texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
            if (texData.colorSpace !== undefined) texture.colorSpace = texData.colorSpace;
            else if (texData.encoding !== undefined) texture.encoding = texData.encoding;
            if (texData.flipY !== undefined) texture.flipY = texData.flipY;
            if (texData.format !== undefined) texture.format = texData.format;
            if (texData.type !== undefined) texture.type = texData.type;
            if (texData.mipmaps !== undefined) {
                texture.mipmaps = texData.mipmaps;
                texture.minFilter = $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b; // presumably...
            }
            if (texData.mipmapCount === 1) texture.minFilter = $04ce9c8dcd7d39f0$export$8a72f490b25c56c8;
            if (texData.generateMipmaps !== undefined) texture.generateMipmaps = texData.generateMipmaps;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture, texData);
        }, onProgress, onError);
        return texture;
    }
}
class $04ce9c8dcd7d39f0$export$fd1bfc71f64c538c extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const texture = new $04ce9c8dcd7d39f0$export$5431306cf43de24a();
        const loader = new $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url, function(image) {
            texture.image = image;
            texture.needsUpdate = true;
            if (onLoad !== undefined) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(color, intensity = 1){
        super();
        this.isLight = true;
        this.type = "Light";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color);
        this.intensity = intensity;
    }
    dispose() {
    // Empty here in base class; some subclasses override.
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.color.copy(source.color);
        this.intensity = source.intensity;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== undefined) data.object.distance = this.distance;
        if (this.angle !== undefined) data.object.angle = this.angle;
        if (this.decay !== undefined) data.object.decay = this.decay;
        if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
        if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$8d474f55edbb9624 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(skyColor, groundColor, intensity){
        super(skyColor, intensity);
        this.isHemisphereLight = true;
        this.type = "HemisphereLight";
        this.position.copy($04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_UP);
        this.updateMatrix();
        this.groundColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(groundColor);
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.groundColor.copy(source.groundColor);
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_projScreenMatrix$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_lightPositionWorld$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_lookTarget$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$var$LightShadow {
    constructor(camera){
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new $04ce9c8dcd7d39f0$export$35efe6f4c85463d2();
        this._frameExtents = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(1, 1);
        this._viewportCount = 1;
        this._viewports = [
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        $04ce9c8dcd7d39f0$var$_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy($04ce9c8dcd7d39f0$var$_lightPositionWorld$1);
        $04ce9c8dcd7d39f0$var$_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt($04ce9c8dcd7d39f0$var$_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        $04ce9c8dcd7d39f0$var$_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix($04ce9c8dcd7d39f0$var$_projScreenMatrix$1);
        shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
        shadowMatrix.multiply($04ce9c8dcd7d39f0$var$_projScreenMatrix$1);
    }
    getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        if (this.map) this.map.dispose();
        if (this.mapPass) this.mapPass.dispose();
    }
    copy(source) {
        this.camera = source.camera.clone();
        this.bias = source.bias;
        this.radius = source.radius;
        this.mapSize.copy(source.mapSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const object = {};
        if (this.bias !== 0) object.bias = this.bias;
        if (this.normalBias !== 0) object.normalBias = this.normalBias;
        if (this.radius !== 1) object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
    }
}
class $04ce9c8dcd7d39f0$var$SpotLightShadow extends $04ce9c8dcd7d39f0$var$LightShadow {
    constructor(){
        super(new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7(50, 1, 0.5, 500));
        this.isSpotLightShadow = true;
        this.focus = 1;
    }
    updateMatrices(light) {
        const camera = this.camera;
        const fov = $04ce9c8dcd7d39f0$var$RAD2DEG * 2 * light.angle * this.focus;
        const aspect = this.mapSize.width / this.mapSize.height;
        const far = light.distance || camera.far;
        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
            camera.fov = fov;
            camera.aspect = aspect;
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        super.updateMatrices(light);
    }
    copy(source) {
        super.copy(source);
        this.focus = source.focus;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$81495cbb73897362 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2){
        super(color, intensity);
        this.isSpotLight = true;
        this.type = "SpotLight";
        this.position.copy($04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_UP);
        this.updateMatrix();
        this.target = new $04ce9c8dcd7d39f0$export$e4dd07dff30cc924();
        this.distance = distance;
        this.angle = angle;
        this.penumbra = penumbra;
        this.decay = decay;
        this.map = null;
        this.shadow = new $04ce9c8dcd7d39f0$var$SpotLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
        return this.intensity * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.angle = source.angle;
        this.penumbra = source.penumbra;
        this.decay = source.decay;
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_projScreenMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_lightPositionWorld = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_lookTarget = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$var$PointLightShadow extends $04ce9c8dcd7d39f0$var$LightShadow {
    constructor(){
        super(new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7(90, 1, 0.5, 500));
        this.isPointLightShadow = true;
        this._frameExtents = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(4, 2);
        this._viewportCount = 6;
        this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(2, 1, 1, 1),
            // negative X
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(0, 1, 1, 1),
            // positive Z
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(3, 1, 1, 1),
            // negative Z
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(1, 1, 1, 1),
            // positive Y
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(3, 0, 1, 1),
            // negative Y
            new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3(1, 0, 1, 1)
        ];
        this._cubeDirections = [
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(1, 0, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(-1, 0, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 1),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, -1),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, -1, 0)
        ];
        this._cubeUps = [
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 1, 0),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 1),
            new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, -1)
        ];
    }
    updateMatrices(light, viewportIndex = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light.distance || camera.far;
        if (far !== camera.far) {
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        $04ce9c8dcd7d39f0$var$_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
        camera.position.copy($04ce9c8dcd7d39f0$var$_lightPositionWorld);
        $04ce9c8dcd7d39f0$var$_lookTarget.copy(camera.position);
        $04ce9c8dcd7d39f0$var$_lookTarget.add(this._cubeDirections[viewportIndex]);
        camera.up.copy(this._cubeUps[viewportIndex]);
        camera.lookAt($04ce9c8dcd7d39f0$var$_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-$04ce9c8dcd7d39f0$var$_lightPositionWorld.x, -$04ce9c8dcd7d39f0$var$_lightPositionWorld.y, -$04ce9c8dcd7d39f0$var$_lightPositionWorld.z);
        $04ce9c8dcd7d39f0$var$_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix($04ce9c8dcd7d39f0$var$_projScreenMatrix);
    }
}
class $04ce9c8dcd7d39f0$export$4c9c1cb3f0b6f455 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(color, intensity, distance = 0, decay = 2){
        super(color, intensity);
        this.isPointLight = true;
        this.type = "PointLight";
        this.distance = distance;
        this.decay = decay;
        this.shadow = new $04ce9c8dcd7d39f0$var$PointLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
        return this.intensity * 4 * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.decay = source.decay;
        this.shadow = source.shadow.clone();
        return this;
    }
}
class $04ce9c8dcd7d39f0$var$DirectionalLightShadow extends $04ce9c8dcd7d39f0$var$LightShadow {
    constructor(){
        super(new $04ce9c8dcd7d39f0$export$9ebf355ee4ed261b(-5, 5, 5, -5, 0.5, 500));
        this.isDirectionalLightShadow = true;
    }
}
class $04ce9c8dcd7d39f0$export$3fea33cc9972c868 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(color, intensity){
        super(color, intensity);
        this.isDirectionalLight = true;
        this.type = "DirectionalLight";
        this.position.copy($04ce9c8dcd7d39f0$export$e4dd07dff30cc924.DEFAULT_UP);
        this.updateMatrix();
        this.target = new $04ce9c8dcd7d39f0$export$e4dd07dff30cc924();
        this.shadow = new $04ce9c8dcd7d39f0$var$DirectionalLightShadow();
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source) {
        super.copy(source);
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$af279bfef9ec2c96 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(color, intensity){
        super(color, intensity);
        this.isAmbientLight = true;
        this.type = "AmbientLight";
    }
}
class $04ce9c8dcd7d39f0$export$61db2d908bbd2429 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(color, intensity, width = 10, height = 10){
        super(color, intensity);
        this.isRectAreaLight = true;
        this.type = "RectAreaLight";
        this.width = width;
        this.height = height;
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in nits)
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in nits) from the desired luminous power (in lumens)
        this.intensity = power / (this.width * this.height * Math.PI);
    }
    copy(source) {
        super.copy(source);
        this.width = source.width;
        this.height = source.height;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.width = this.width;
        data.object.height = this.height;
        return data;
    }
}
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
class $04ce9c8dcd7d39f0$export$ba61ce607e1f405a {
    constructor(){
        this.isSphericalHarmonics3 = true;
        this.coefficients = [];
        for(let i = 0; i < 9; i++)this.coefficients.push(new $04ce9c8dcd7d39f0$export$64b5c384219d3699());
    }
    set(coefficients) {
        for(let i = 0; i < 9; i++)this.coefficients[i].copy(coefficients[i]);
        return this;
    }
    zero() {
        for(let i = 0; i < 9; i++)this.coefficients[i].set(0, 0, 0);
        return this;
    }
    // get the radiance in the direction of the normal
    // target is a Vector3
    getAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.282095);
        // band 1
        target.addScaledVector(coeff[1], 0.488603 * y);
        target.addScaledVector(coeff[2], 0.488603 * z);
        target.addScaledVector(coeff[3], 0.488603 * x);
        // band 2
        target.addScaledVector(coeff[4], 1.092548 * (x * y));
        target.addScaledVector(coeff[5], 1.092548 * (y * z));
        target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
        target.addScaledVector(coeff[7], 1.092548 * (x * z));
        target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
        return target;
    }
    // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    // target is a Vector3
    // https://graphics.stanford.edu/papers/envmap/envmap.pdf
    getIrradianceAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
        // band 1
        target.addScaledVector(coeff[1], 1.023328 * y); // ( 2 * π / 3 ) * 0.488603
        target.addScaledVector(coeff[2], 1.023328 * z);
        target.addScaledVector(coeff[3], 1.023328 * x);
        // band 2
        target.addScaledVector(coeff[4], 0.858086 * x * y); // ( π / 4 ) * 1.092548
        target.addScaledVector(coeff[5], 0.858086 * y * z);
        target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
        target.addScaledVector(coeff[7], 0.858086 * x * z);
        target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
        return target;
    }
    add(sh) {
        for(let i = 0; i < 9; i++)this.coefficients[i].add(sh.coefficients[i]);
        return this;
    }
    addScaledSH(sh, s) {
        for(let i = 0; i < 9; i++)this.coefficients[i].addScaledVector(sh.coefficients[i], s);
        return this;
    }
    scale(s) {
        for(let i = 0; i < 9; i++)this.coefficients[i].multiplyScalar(s);
        return this;
    }
    lerp(sh, alpha) {
        for(let i = 0; i < 9; i++)this.coefficients[i].lerp(sh.coefficients[i], alpha);
        return this;
    }
    equals(sh) {
        for(let i = 0; i < 9; i++){
            if (!this.coefficients[i].equals(sh.coefficients[i])) return false;
        }
        return true;
    }
    copy(sh) {
        return this.set(sh.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].fromArray(array, offset + i * 3);
        return this;
    }
    toArray(array = [], offset = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].toArray(array, offset + i * 3);
        return array;
    }
    // evaluate the basis functions
    // shBasis is an Array[ 9 ]
    static getBasisAt(normal, shBasis) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        // band 0
        shBasis[0] = 0.282095;
        // band 1
        shBasis[1] = 0.488603 * y;
        shBasis[2] = 0.488603 * z;
        shBasis[3] = 0.488603 * x;
        // band 2
        shBasis[4] = 1.092548 * x * y;
        shBasis[5] = 1.092548 * y * z;
        shBasis[6] = 0.315392 * (3 * z * z - 1);
        shBasis[7] = 1.092548 * x * z;
        shBasis[8] = 0.546274 * (x * x - y * y);
    }
}
class $04ce9c8dcd7d39f0$export$e7ef036e309b38d2 extends $04ce9c8dcd7d39f0$export$6ecadb6ed240d696 {
    constructor(sh = new $04ce9c8dcd7d39f0$export$ba61ce607e1f405a(), intensity = 1){
        super(undefined, intensity);
        this.isLightProbe = true;
        this.sh = sh;
    }
    copy(source) {
        super.copy(source);
        this.sh.copy(source.sh);
        return this;
    }
    fromJSON(json) {
        this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
        this.sh.fromArray(json.sh);
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.sh = this.sh.toArray();
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$3bd6d323353dcf96 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
        this.textures = {};
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const textures = this.textures;
        function getTexture(name) {
            if (textures[name] === undefined) console.warn("THREE.MaterialLoader: Undefined texture", name);
            return textures[name];
        }
        const material = $04ce9c8dcd7d39f0$export$3bd6d323353dcf96.createMaterialFromType(json.type);
        if (json.uuid !== undefined) material.uuid = json.uuid;
        if (json.name !== undefined) material.name = json.name;
        if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
        if (json.roughness !== undefined) material.roughness = json.roughness;
        if (json.metalness !== undefined) material.metalness = json.metalness;
        if (json.sheen !== undefined) material.sheen = json.sheen;
        if (json.sheenColor !== undefined) material.sheenColor = new $04ce9c8dcd7d39f0$export$892596cec99bc70e().setHex(json.sheenColor);
        if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
        if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
        if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
        if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
        if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
        if (json.shininess !== undefined) material.shininess = json.shininess;
        if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
        if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
        if (json.iridescence !== undefined) material.iridescence = json.iridescence;
        if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;
        if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;
        if (json.transmission !== undefined) material.transmission = json.transmission;
        if (json.thickness !== undefined) material.thickness = json.thickness;
        if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
        if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
        if (json.anisotropy !== undefined) material.anisotropy = json.anisotropy;
        if (json.anisotropyRotation !== undefined) material.anisotropyRotation = json.anisotropyRotation;
        if (json.fog !== undefined) material.fog = json.fog;
        if (json.flatShading !== undefined) material.flatShading = json.flatShading;
        if (json.blending !== undefined) material.blending = json.blending;
        if (json.combine !== undefined) material.combine = json.combine;
        if (json.side !== undefined) material.side = json.side;
        if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
        if (json.opacity !== undefined) material.opacity = json.opacity;
        if (json.transparent !== undefined) material.transparent = json.transparent;
        if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
        if (json.alphaHash !== undefined) material.alphaHash = json.alphaHash;
        if (json.depthTest !== undefined) material.depthTest = json.depthTest;
        if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
        if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
        if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
        if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
        if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
        if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
        if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
        if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
        if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
        if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
        if (json.wireframe !== undefined) material.wireframe = json.wireframe;
        if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
        if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
        if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
        if (json.rotation !== undefined) material.rotation = json.rotation;
        if (json.linewidth !== 1) material.linewidth = json.linewidth;
        if (json.dashSize !== undefined) material.dashSize = json.dashSize;
        if (json.gapSize !== undefined) material.gapSize = json.gapSize;
        if (json.scale !== undefined) material.scale = json.scale;
        if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
        if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
        if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
        if (json.dithering !== undefined) material.dithering = json.dithering;
        if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
        if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
        if (json.forceSinglePass !== undefined) material.forceSinglePass = json.forceSinglePass;
        if (json.visible !== undefined) material.visible = json.visible;
        if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
        if (json.userData !== undefined) material.userData = json.userData;
        if (json.vertexColors !== undefined) {
            if (typeof json.vertexColors === "number") material.vertexColors = json.vertexColors > 0 ? true : false;
            else material.vertexColors = json.vertexColors;
        }
        // Shader Material
        if (json.uniforms !== undefined) for(const name in json.uniforms){
            const uniform = json.uniforms[name];
            material.uniforms[name] = {};
            switch(uniform.type){
                case "t":
                    material.uniforms[name].value = getTexture(uniform.value);
                    break;
                case "c":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$892596cec99bc70e().setHex(uniform.value);
                    break;
                case "v2":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1().fromArray(uniform.value);
                    break;
                case "v3":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$64b5c384219d3699().fromArray(uniform.value);
                    break;
                case "v4":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$fa7daccca11cdbe3().fromArray(uniform.value);
                    break;
                case "m3":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$8ff26dafa08918().fromArray(uniform.value);
                    break;
                case "m4":
                    material.uniforms[name].value = new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5().fromArray(uniform.value);
                    break;
                default:
                    material.uniforms[name].value = uniform.value;
            }
        }
        if (json.defines !== undefined) material.defines = json.defines;
        if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
        if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
        if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;
        if (json.extensions !== undefined) for(const key in json.extensions)material.extensions[key] = json.extensions[key];
        if (json.lights !== undefined) material.lights = json.lights;
        if (json.clipping !== undefined) material.clipping = json.clipping;
        // for PointsMaterial
        if (json.size !== undefined) material.size = json.size;
        if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
        // maps
        if (json.map !== undefined) material.map = getTexture(json.map);
        if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
        if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
        if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
        if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
        if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
        if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
        if (json.normalScale !== undefined) {
            let normalScale = json.normalScale;
            if (Array.isArray(normalScale) === false) // Blender exporter used to export a scalar. See #7459
            normalScale = [
                normalScale,
                normalScale
            ];
            material.normalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1().fromArray(normalScale);
        }
        if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
        if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
        if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
        if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
        if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
        if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
        if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
        if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
        if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
        if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
        if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
        if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
        if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
        if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
        if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
        if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
        if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
        if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
        if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
        if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
        if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
        if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
        if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1().fromArray(json.clearcoatNormalScale);
        if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);
        if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);
        if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
        if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
        if (json.anisotropyMap !== undefined) material.anisotropyMap = getTexture(json.anisotropyMap);
        if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
        if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
        return material;
    }
    setTextures(value) {
        this.textures = value;
        return this;
    }
    static createMaterialFromType(type) {
        const materialLib = {
            ShadowMaterial: $04ce9c8dcd7d39f0$export$e8564da406055a3,
            SpriteMaterial: $04ce9c8dcd7d39f0$export$5ec7dd1c6994bf8e,
            RawShaderMaterial: $04ce9c8dcd7d39f0$export$21c421a2e1df9d22,
            ShaderMaterial: $04ce9c8dcd7d39f0$export$83c7d75d550a8b0d,
            PointsMaterial: $04ce9c8dcd7d39f0$export$a178c45366ce5d6b,
            MeshPhysicalMaterial: $04ce9c8dcd7d39f0$export$28d04986c4269c9f,
            MeshStandardMaterial: $04ce9c8dcd7d39f0$export$f2980790215acccd,
            MeshPhongMaterial: $04ce9c8dcd7d39f0$export$24c72f71cbaf0678,
            MeshToonMaterial: $04ce9c8dcd7d39f0$export$df893cf97e765622,
            MeshNormalMaterial: $04ce9c8dcd7d39f0$export$bfe8c0a091f41ae7,
            MeshLambertMaterial: $04ce9c8dcd7d39f0$export$5023a9a8114806b8,
            MeshDepthMaterial: $04ce9c8dcd7d39f0$export$2698c22ec13825db,
            MeshDistanceMaterial: $04ce9c8dcd7d39f0$export$33e187ed002f2a19,
            MeshBasicMaterial: $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5,
            MeshMatcapMaterial: $04ce9c8dcd7d39f0$export$6f5fef6235ec12ee,
            LineDashedMaterial: $04ce9c8dcd7d39f0$export$327886a3efaeaebe,
            LineBasicMaterial: $04ce9c8dcd7d39f0$export$fbaaa33907730a0c,
            Material: $04ce9c8dcd7d39f0$export$a2d8b23205c25948
        };
        return new materialLib[type]();
    }
}
class $04ce9c8dcd7d39f0$export$b5d2dc08d867e41a {
    static decodeText(array) {
        if (typeof TextDecoder !== "undefined") return new TextDecoder().decode(array);
        // Avoid the String.fromCharCode.apply(null, array) shortcut, which
        // throws a "maximum call stack size exceeded" error for large arrays.
        let s = "";
        for(let i = 0, il = array.length; i < il; i++)// Implicitly assumes little-endian.
        s += String.fromCharCode(array[i]);
        try {
            // merges multi-byte utf-8 characters.
            return decodeURIComponent(escape(s));
        } catch (e) {
            return s;
        }
    }
    static extractUrlBase(url) {
        const index = url.lastIndexOf("/");
        if (index === -1) return "./";
        return url.slice(0, index + 1);
    }
    static resolveURL(url, path) {
        // Invalid URL
        if (typeof url !== "string" || url === "") return "";
        // Host Relative URL
        if (/^https?:\/\//i.test(path) && /^\//.test(url)) path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
        // Absolute URL http://,https://,//
        if (/^(https?:)?\/\//i.test(url)) return url;
        // Data URI
        if (/^data:.*,.*$/i.test(url)) return url;
        // Blob URL
        if (/^blob:.*$/i.test(url)) return url;
        // Relative URL
        return path + url;
    }
}
class $04ce9c8dcd7d39f0$export$231f009cbe414146 extends $04ce9c8dcd7d39f0$export$b7be63a67df8959 {
    constructor(){
        super();
        this.isInstancedBufferGeometry = true;
        this.type = "InstancedBufferGeometry";
        this.instanceCount = Infinity;
    }
    copy(source) {
        super.copy(source);
        this.instanceCount = source.instanceCount;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.instanceCount = this.instanceCount;
        data.isInstancedBufferGeometry = true;
        return data;
    }
}
class $04ce9c8dcd7d39f0$export$dc275bb96327833a extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const interleavedBufferMap = {};
        const arrayBufferMap = {};
        function getInterleavedBuffer(json, uuid) {
            if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
            const interleavedBuffers = json.interleavedBuffers;
            const interleavedBuffer = interleavedBuffers[uuid];
            const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
            const array = $04ce9c8dcd7d39f0$var$getTypedArray(interleavedBuffer.type, buffer);
            const ib = new $04ce9c8dcd7d39f0$export$3d5cd879f108f53f(array, interleavedBuffer.stride);
            ib.uuid = interleavedBuffer.uuid;
            interleavedBufferMap[uuid] = ib;
            return ib;
        }
        function getArrayBuffer(json, uuid) {
            if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
            const arrayBuffers = json.arrayBuffers;
            const arrayBuffer = arrayBuffers[uuid];
            const ab = new Uint32Array(arrayBuffer).buffer;
            arrayBufferMap[uuid] = ab;
            return ab;
        }
        const geometry = json.isInstancedBufferGeometry ? new $04ce9c8dcd7d39f0$export$231f009cbe414146() : new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        const index = json.data.index;
        if (index !== undefined) {
            const typedArray = $04ce9c8dcd7d39f0$var$getTypedArray(index.type, index.array);
            geometry.setIndex(new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(typedArray, 1));
        }
        const attributes = json.data.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
                const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                bufferAttribute = new $04ce9c8dcd7d39f0$export$920b6d07334599c7(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
                const typedArray = $04ce9c8dcd7d39f0$var$getTypedArray(attribute.type, attribute.array);
                const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? $04ce9c8dcd7d39f0$export$32ea87a8b54d744a : $04ce9c8dcd7d39f0$export$8dea267bd6bde117;
                bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
            if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
            if (attribute.updateRange !== undefined) {
                bufferAttribute.updateRange.offset = attribute.updateRange.offset;
                bufferAttribute.updateRange.count = attribute.updateRange.count;
            }
            geometry.setAttribute(key, bufferAttribute);
        }
        const morphAttributes = json.data.morphAttributes;
        if (morphAttributes) for(const key in morphAttributes){
            const attributeArray = morphAttributes[key];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                let bufferAttribute;
                if (attribute.isInterleavedBufferAttribute) {
                    const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                    bufferAttribute = new $04ce9c8dcd7d39f0$export$920b6d07334599c7(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                    const typedArray = $04ce9c8dcd7d39f0$var$getTypedArray(attribute.type, attribute.array);
                    bufferAttribute = new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(typedArray, attribute.itemSize, attribute.normalized);
                }
                if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
                array.push(bufferAttribute);
            }
            geometry.morphAttributes[key] = array;
        }
        const morphTargetsRelative = json.data.morphTargetsRelative;
        if (morphTargetsRelative) geometry.morphTargetsRelative = true;
        const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
        if (groups !== undefined) for(let i = 0, n = groups.length; i !== n; ++i){
            const group = groups[i];
            geometry.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingSphere = json.data.boundingSphere;
        if (boundingSphere !== undefined) {
            const center = new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
            if (boundingSphere.center !== undefined) center.fromArray(boundingSphere.center);
            geometry.boundingSphere = new $04ce9c8dcd7d39f0$export$805e8b72413ccaba(center, boundingSphere.radius);
        }
        if (json.name) geometry.name = json.name;
        if (json.userData) geometry.userData = json.userData;
        return geometry;
    }
}
class $04ce9c8dcd7d39f0$export$40110c8505c5ad19 extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = this.path === "" ? $04ce9c8dcd7d39f0$export$b5d2dc08d867e41a.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            let json = null;
            try {
                json = JSON.parse(text);
            } catch (error) {
                if (onError !== undefined) onError(error);
                console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
                return;
            }
            const metadata = json.metadata;
            if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") {
                if (onError !== undefined) onError(new Error("THREE.ObjectLoader: Can't load " + url));
                console.error("THREE.ObjectLoader: Can't load " + url);
                return;
            }
            scope.parse(json, onLoad);
        }, onProgress, onError);
    }
    async loadAsync(url, onProgress) {
        const scope = this;
        const path = this.path === "" ? $04ce9c8dcd7d39f0$export$b5d2dc08d867e41a.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        const text = await loader.loadAsync(url, onProgress);
        const json = JSON.parse(text);
        const metadata = json.metadata;
        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + url);
        return await scope.parseAsync(json);
    }
    parse(json, onLoad) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = this.parseImages(json.images, function() {
            if (onLoad !== undefined) onLoad(object);
        });
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        //
        if (onLoad !== undefined) {
            let hasImages = false;
            for(const uuid in images)if (images[uuid].data instanceof HTMLImageElement) {
                hasImages = true;
                break;
            }
            if (hasImages === false) onLoad(object);
        }
        return object;
    }
    async parseAsync(json) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = await this.parseImagesAsync(json.images);
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        return object;
    }
    parseShapes(json) {
        const shapes = {};
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const shape = new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa().fromJSON(json[i]);
            shapes[shape.uuid] = shape;
        }
        return shapes;
    }
    parseSkeletons(json, object) {
        const skeletons = {};
        const bones = {};
        // generate bone lookup table
        object.traverse(function(child) {
            if (child.isBone) bones[child.uuid] = child;
        });
        // create skeletons
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const skeleton = new $04ce9c8dcd7d39f0$export$8f31e4c4a37b8e9c().fromJSON(json[i], bones);
            skeletons[skeleton.uuid] = skeleton;
        }
        return skeletons;
    }
    parseGeometries(json, shapes) {
        const geometries = {};
        if (json !== undefined) {
            const bufferGeometryLoader = new $04ce9c8dcd7d39f0$export$dc275bb96327833a();
            for(let i = 0, l = json.length; i < l; i++){
                let geometry;
                const data = json[i];
                switch(data.type){
                    case "BufferGeometry":
                    case "InstancedBufferGeometry":
                        geometry = bufferGeometryLoader.parse(data);
                        break;
                    default:
                        if (data.type in $04ce9c8dcd7d39f0$var$Geometries) geometry = $04ce9c8dcd7d39f0$var$Geometries[data.type].fromJSON(data, shapes);
                        else console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                }
                geometry.uuid = data.uuid;
                if (data.name !== undefined) geometry.name = data.name;
                if (data.userData !== undefined) geometry.userData = data.userData;
                geometries[data.uuid] = geometry;
            }
        }
        return geometries;
    }
    parseMaterials(json, textures) {
        const cache = {}; // MultiMaterial
        const materials = {};
        if (json !== undefined) {
            const loader = new $04ce9c8dcd7d39f0$export$3bd6d323353dcf96();
            loader.setTextures(textures);
            for(let i = 0, l = json.length; i < l; i++){
                const data = json[i];
                if (cache[data.uuid] === undefined) cache[data.uuid] = loader.parse(data);
                materials[data.uuid] = cache[data.uuid];
            }
        }
        return materials;
    }
    parseAnimations(json) {
        const animations = {};
        if (json !== undefined) for(let i = 0; i < json.length; i++){
            const data = json[i];
            const clip = $04ce9c8dcd7d39f0$export$d942c706bf23829c.parse(data);
            animations[clip.uuid] = clip;
        }
        return animations;
    }
    parseImages(json, onLoad) {
        const scope = this;
        const images = {};
        let loader;
        function loadImage(url) {
            scope.manager.itemStart(url);
            return loader.load(url, function() {
                scope.manager.itemEnd(url);
            }, undefined, function() {
                scope.manager.itemError(url);
                scope.manager.itemEnd(url);
            });
        }
        function deserializeImage(image) {
            if (typeof image === "string") {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return loadImage(path);
            } else {
                if (image.data) return {
                    data: $04ce9c8dcd7d39f0$var$getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            const manager = new $04ce9c8dcd7d39f0$export$99cc795e99919eed(onLoad);
            loader = new $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1(manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json.length; i < il; i++){
                const image = json[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    const imageArray = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) imageArray.push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            imageArray.push(new $04ce9c8dcd7d39f0$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                    images[image.uuid] = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(imageArray);
                } else {
                    // load single image
                    const deserializedImage = deserializeImage(image.url);
                    images[image.uuid] = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(deserializedImage);
                }
            }
        }
        return images;
    }
    async parseImagesAsync(json) {
        const scope = this;
        const images = {};
        let loader;
        async function deserializeImage(image) {
            if (typeof image === "string") {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return await loader.loadAsync(path);
            } else {
                if (image.data) return {
                    data: $04ce9c8dcd7d39f0$var$getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            loader = new $04ce9c8dcd7d39f0$export$8905ce1c7a2464a1(this.manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json.length; i < il; i++){
                const image = json[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    const imageArray = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = await deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) imageArray.push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            imageArray.push(new $04ce9c8dcd7d39f0$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                    images[image.uuid] = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(imageArray);
                } else {
                    // load single image
                    const deserializedImage = await deserializeImage(image.url);
                    images[image.uuid] = new $04ce9c8dcd7d39f0$export$1d2df86270c81ecb(deserializedImage);
                }
            }
        }
        return images;
    }
    parseTextures(json, images) {
        function parseConstant(value, type) {
            if (typeof value === "number") return value;
            console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
            return type[value];
        }
        const textures = {};
        if (json !== undefined) for(let i = 0, l = json.length; i < l; i++){
            const data = json[i];
            if (data.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
            if (images[data.image] === undefined) console.warn("THREE.ObjectLoader: Undefined image", data.image);
            const source = images[data.image];
            const image = source.data;
            let texture;
            if (Array.isArray(image)) {
                texture = new $04ce9c8dcd7d39f0$export$ee2e5a18258a4049();
                if (image.length === 6) texture.needsUpdate = true;
            } else {
                if (image && image.data) texture = new $04ce9c8dcd7d39f0$export$b691f601014eabe1();
                else texture = new $04ce9c8dcd7d39f0$export$5431306cf43de24a();
                if (image) texture.needsUpdate = true; // textures can have undefined image data
            }
            texture.source = source;
            texture.uuid = data.uuid;
            if (data.name !== undefined) texture.name = data.name;
            if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, $04ce9c8dcd7d39f0$var$TEXTURE_MAPPING);
            if (data.channel !== undefined) texture.channel = data.channel;
            if (data.offset !== undefined) texture.offset.fromArray(data.offset);
            if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
            if (data.center !== undefined) texture.center.fromArray(data.center);
            if (data.rotation !== undefined) texture.rotation = data.rotation;
            if (data.wrap !== undefined) {
                texture.wrapS = parseConstant(data.wrap[0], $04ce9c8dcd7d39f0$var$TEXTURE_WRAPPING);
                texture.wrapT = parseConstant(data.wrap[1], $04ce9c8dcd7d39f0$var$TEXTURE_WRAPPING);
            }
            if (data.format !== undefined) texture.format = data.format;
            if (data.internalFormat !== undefined) texture.internalFormat = data.internalFormat;
            if (data.type !== undefined) texture.type = data.type;
            if (data.colorSpace !== undefined) texture.colorSpace = data.colorSpace;
            if (data.encoding !== undefined) texture.encoding = data.encoding; // @deprecated, r152
            if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, $04ce9c8dcd7d39f0$var$TEXTURE_FILTER);
            if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, $04ce9c8dcd7d39f0$var$TEXTURE_FILTER);
            if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
            if (data.flipY !== undefined) texture.flipY = data.flipY;
            if (data.generateMipmaps !== undefined) texture.generateMipmaps = data.generateMipmaps;
            if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
            if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
            if (data.compareFunction !== undefined) texture.compareFunction = data.compareFunction;
            if (data.userData !== undefined) texture.userData = data.userData;
            textures[data.uuid] = texture;
        }
        return textures;
    }
    parseObject(data, geometries, materials, textures, animations) {
        let object;
        function getGeometry(name) {
            if (geometries[name] === undefined) console.warn("THREE.ObjectLoader: Undefined geometry", name);
            return geometries[name];
        }
        function getMaterial(name) {
            if (name === undefined) return undefined;
            if (Array.isArray(name)) {
                const array = [];
                for(let i = 0, l = name.length; i < l; i++){
                    const uuid = name[i];
                    if (materials[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined material", uuid);
                    array.push(materials[uuid]);
                }
                return array;
            }
            if (materials[name] === undefined) console.warn("THREE.ObjectLoader: Undefined material", name);
            return materials[name];
        }
        function getTexture(uuid) {
            if (textures[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined texture", uuid);
            return textures[uuid];
        }
        let geometry, material;
        switch(data.type){
            case "Scene":
                object = new $04ce9c8dcd7d39f0$export$38af1803e3442a7f();
                if (data.background !== undefined) {
                    if (Number.isInteger(data.background)) object.background = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(data.background);
                    else object.background = getTexture(data.background);
                }
                if (data.environment !== undefined) object.environment = getTexture(data.environment);
                if (data.fog !== undefined) {
                    if (data.fog.type === "Fog") object.fog = new $04ce9c8dcd7d39f0$export$3c890837b09508d4(data.fog.color, data.fog.near, data.fog.far);
                    else if (data.fog.type === "FogExp2") object.fog = new $04ce9c8dcd7d39f0$export$6f1519f023b8d0f6(data.fog.color, data.fog.density);
                }
                if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;
                if (data.backgroundIntensity !== undefined) object.backgroundIntensity = data.backgroundIntensity;
                break;
            case "PerspectiveCamera":
                object = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7(data.fov, data.aspect, data.near, data.far);
                if (data.focus !== undefined) object.focus = data.focus;
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                if (data.view !== undefined) object.view = Object.assign({}, data.view);
                break;
            case "OrthographicCamera":
                object = new $04ce9c8dcd7d39f0$export$9ebf355ee4ed261b(data.left, data.right, data.top, data.bottom, data.near, data.far);
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.view !== undefined) object.view = Object.assign({}, data.view);
                break;
            case "AmbientLight":
                object = new $04ce9c8dcd7d39f0$export$af279bfef9ec2c96(data.color, data.intensity);
                break;
            case "DirectionalLight":
                object = new $04ce9c8dcd7d39f0$export$3fea33cc9972c868(data.color, data.intensity);
                break;
            case "PointLight":
                object = new $04ce9c8dcd7d39f0$export$4c9c1cb3f0b6f455(data.color, data.intensity, data.distance, data.decay);
                break;
            case "RectAreaLight":
                object = new $04ce9c8dcd7d39f0$export$61db2d908bbd2429(data.color, data.intensity, data.width, data.height);
                break;
            case "SpotLight":
                object = new $04ce9c8dcd7d39f0$export$81495cbb73897362(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                break;
            case "HemisphereLight":
                object = new $04ce9c8dcd7d39f0$export$8d474f55edbb9624(data.color, data.groundColor, data.intensity);
                break;
            case "LightProbe":
                object = new $04ce9c8dcd7d39f0$export$e7ef036e309b38d2().fromJSON(data);
                break;
            case "SkinnedMesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new $04ce9c8dcd7d39f0$export$b303577035157ecf(geometry, material);
                if (data.bindMode !== undefined) object.bindMode = data.bindMode;
                if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
                if (data.skeleton !== undefined) object.skeleton = data.skeleton;
                break;
            case "Mesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new $04ce9c8dcd7d39f0$export$e176487c05830cc5(geometry, material);
                break;
            case "InstancedMesh":
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                const count = data.count;
                const instanceMatrix = data.instanceMatrix;
                const instanceColor = data.instanceColor;
                object = new $04ce9c8dcd7d39f0$export$f3c979c331175ad7(geometry, material, count);
                object.instanceMatrix = new $04ce9c8dcd7d39f0$export$32ea87a8b54d744a(new Float32Array(instanceMatrix.array), 16);
                if (instanceColor !== undefined) object.instanceColor = new $04ce9c8dcd7d39f0$export$32ea87a8b54d744a(new Float32Array(instanceColor.array), instanceColor.itemSize);
                break;
            case "LOD":
                object = new $04ce9c8dcd7d39f0$export$112e7237be0c5f30();
                break;
            case "Line":
                object = new $04ce9c8dcd7d39f0$export$17d680238e50603e(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "LineLoop":
                object = new $04ce9c8dcd7d39f0$export$f85a24d745e4f17d(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "LineSegments":
                object = new $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "PointCloud":
            case "Points":
                object = new $04ce9c8dcd7d39f0$export$1c787534cb11aa3e(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case "Sprite":
                object = new $04ce9c8dcd7d39f0$export$3075603db8e6204c(getMaterial(data.material));
                break;
            case "Group":
                object = new $04ce9c8dcd7d39f0$export$eb2fcfdbd7ba97d4();
                break;
            case "Bone":
                object = new $04ce9c8dcd7d39f0$export$b127726e56765aa4();
                break;
            default:
                object = new $04ce9c8dcd7d39f0$export$e4dd07dff30cc924();
        }
        object.uuid = data.uuid;
        if (data.name !== undefined) object.name = data.name;
        if (data.matrix !== undefined) {
            object.matrix.fromArray(data.matrix);
            if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
            if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
        } else {
            if (data.position !== undefined) object.position.fromArray(data.position);
            if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
            if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
            if (data.scale !== undefined) object.scale.fromArray(data.scale);
        }
        if (data.up !== undefined) object.up.fromArray(data.up);
        if (data.castShadow !== undefined) object.castShadow = data.castShadow;
        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
        if (data.shadow) {
            if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
            if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
            if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
            if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
            if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
        }
        if (data.visible !== undefined) object.visible = data.visible;
        if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
        if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
        if (data.userData !== undefined) object.userData = data.userData;
        if (data.layers !== undefined) object.layers.mask = data.layers;
        if (data.children !== undefined) {
            const children = data.children;
            for(let i = 0; i < children.length; i++)object.add(this.parseObject(children[i], geometries, materials, textures, animations));
        }
        if (data.animations !== undefined) {
            const objectAnimations = data.animations;
            for(let i = 0; i < objectAnimations.length; i++){
                const uuid = objectAnimations[i];
                object.animations.push(animations[uuid]);
            }
        }
        if (data.type === "LOD") {
            if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
            const levels = data.levels;
            for(let l = 0; l < levels.length; l++){
                const level = levels[l];
                const child = object.getObjectByProperty("uuid", level.object);
                if (child !== undefined) object.addLevel(child, level.distance, level.hysteresis);
            }
        }
        return object;
    }
    bindSkeletons(object, skeletons) {
        if (Object.keys(skeletons).length === 0) return;
        object.traverse(function(child) {
            if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
                const skeleton = skeletons[child.skeleton];
                if (skeleton === undefined) console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
                else child.bind(skeleton, child.bindMatrix);
            }
        });
    }
}
const $04ce9c8dcd7d39f0$var$TEXTURE_MAPPING = {
    UVMapping: $04ce9c8dcd7d39f0$export$1beec6768cbb3d2d,
    CubeReflectionMapping: $04ce9c8dcd7d39f0$export$8759762a6477f2c4,
    CubeRefractionMapping: $04ce9c8dcd7d39f0$export$dc59f8aed047f61d,
    EquirectangularReflectionMapping: $04ce9c8dcd7d39f0$export$d64030b316d3b087,
    EquirectangularRefractionMapping: $04ce9c8dcd7d39f0$export$ee99d97d46898098,
    CubeUVReflectionMapping: $04ce9c8dcd7d39f0$export$dbf3e70ff37af79
};
const $04ce9c8dcd7d39f0$var$TEXTURE_WRAPPING = {
    RepeatWrapping: $04ce9c8dcd7d39f0$export$533346c8e8dac0f5,
    ClampToEdgeWrapping: $04ce9c8dcd7d39f0$export$9d9334239a5a5e06,
    MirroredRepeatWrapping: $04ce9c8dcd7d39f0$export$c7e7c00b14f51a4f
};
const $04ce9c8dcd7d39f0$var$TEXTURE_FILTER = {
    NearestFilter: $04ce9c8dcd7d39f0$export$727aa5ec3fe39bf0,
    NearestMipmapNearestFilter: $04ce9c8dcd7d39f0$export$d129e38cf6feaa8c,
    NearestMipmapLinearFilter: $04ce9c8dcd7d39f0$export$d2327c1afe5bfdf2,
    LinearFilter: $04ce9c8dcd7d39f0$export$8a72f490b25c56c8,
    LinearMipmapNearestFilter: $04ce9c8dcd7d39f0$export$19a719f377145a13,
    LinearMipmapLinearFilter: $04ce9c8dcd7d39f0$export$5d8599b6a933fb1b
};
class $04ce9c8dcd7d39f0$export$52286b55c4a9b51f extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
        this.isImageBitmapLoader = true;
        if (typeof createImageBitmap === "undefined") console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
        if (typeof fetch === "undefined") console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
        this.options = {
            premultiplyAlpha: "none"
        };
    }
    setOptions(options) {
        this.options = options;
        return this;
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = "";
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = $04ce9c8dcd7d39f0$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const fetchOptions = {};
        fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
        fetchOptions.headers = this.requestHeader;
        fetch(url, fetchOptions).then(function(res) {
            return res.blob();
        }).then(function(blob) {
            return createImageBitmap(blob, Object.assign(scope.options, {
                colorSpaceConversion: "none"
            }));
        }).then(function(imageBitmap) {
            $04ce9c8dcd7d39f0$export$94affb487e701bf2.add(url, imageBitmap);
            if (onLoad) onLoad(imageBitmap);
            scope.manager.itemEnd(url);
        }).catch(function(e) {
            if (onError) onError(e);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        });
        scope.manager.itemStart(url);
    }
}
let $04ce9c8dcd7d39f0$var$_context;
class $04ce9c8dcd7d39f0$export$fcbc63750ec2a81f {
    static getContext() {
        if ($04ce9c8dcd7d39f0$var$_context === undefined) $04ce9c8dcd7d39f0$var$_context = new (window.AudioContext || window.webkitAudioContext)();
        return $04ce9c8dcd7d39f0$var$_context;
    }
    static setContext(value) {
        $04ce9c8dcd7d39f0$var$_context = value;
    }
}
class $04ce9c8dcd7d39f0$export$d8d5fccfbf47714e extends $04ce9c8dcd7d39f0$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $04ce9c8dcd7d39f0$export$98435a25b5cf7b2b(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(buffer) {
            try {
                // Create a copy of the buffer. The `decodeAudioData` method
                // detaches the buffer when complete, preventing reuse.
                const bufferCopy = buffer.slice(0);
                const context = $04ce9c8dcd7d39f0$export$fcbc63750ec2a81f.getContext();
                context.decodeAudioData(bufferCopy, function(audioBuffer) {
                    onLoad(audioBuffer);
                }, handleError);
            } catch (e) {
                handleError(e);
            }
        }, onProgress, onError);
        function handleError(e) {
            if (onError) onError(e);
            else console.error(e);
            scope.manager.itemError(url);
        }
    }
}
class $04ce9c8dcd7d39f0$export$2f22dadc8bc42820 extends $04ce9c8dcd7d39f0$export$e7ef036e309b38d2 {
    constructor(skyColor, groundColor, intensity = 1){
        super(undefined, intensity);
        this.isHemisphereLightProbe = true;
        const color1 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e().set(skyColor);
        const color2 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e().set(groundColor);
        const sky = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(color1.r, color1.g, color1.b);
        const ground = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(color2.r, color2.g, color2.b);
        // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
        const c0 = Math.sqrt(Math.PI);
        const c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
    }
}
class $04ce9c8dcd7d39f0$export$afe310a21c86023d extends $04ce9c8dcd7d39f0$export$e7ef036e309b38d2 {
    constructor(color, intensity = 1){
        super(undefined, intensity);
        this.isAmbientLightProbe = true;
        const color1 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e().set(color);
        // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
}
const $04ce9c8dcd7d39f0$var$_eyeRight = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_eyeLeft = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_projectionMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
class $04ce9c8dcd7d39f0$export$bc7f73a1065bee0c {
    constructor(){
        this.type = "StereoCamera";
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new $04ce9c8dcd7d39f0$export$74e4ae24825f68d7();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(camera) {
        const cache = this._cache;
        const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
        if (needsUpdate) {
            cache.focus = camera.focus;
            cache.fov = camera.fov;
            cache.aspect = camera.aspect * this.aspect;
            cache.near = camera.near;
            cache.far = camera.far;
            cache.zoom = camera.zoom;
            cache.eyeSep = this.eyeSep;
            // Off-axis stereoscopic effect based on
            // http://paulbourke.net/stereographics/stereorender/
            $04ce9c8dcd7d39f0$var$_projectionMatrix.copy(camera.projectionMatrix);
            const eyeSepHalf = cache.eyeSep / 2;
            const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
            const ymax = cache.near * Math.tan($04ce9c8dcd7d39f0$var$DEG2RAD * cache.fov * 0.5) / cache.zoom;
            let xmin, xmax;
            // translate xOffset
            $04ce9c8dcd7d39f0$var$_eyeLeft.elements[12] = -eyeSepHalf;
            $04ce9c8dcd7d39f0$var$_eyeRight.elements[12] = eyeSepHalf;
            // for left eye
            xmin = -ymax * cache.aspect + eyeSepOnProjection;
            xmax = ymax * cache.aspect + eyeSepOnProjection;
            $04ce9c8dcd7d39f0$var$_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            $04ce9c8dcd7d39f0$var$_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraL.projectionMatrix.copy($04ce9c8dcd7d39f0$var$_projectionMatrix);
            // for right eye
            xmin = -ymax * cache.aspect - eyeSepOnProjection;
            xmax = ymax * cache.aspect - eyeSepOnProjection;
            $04ce9c8dcd7d39f0$var$_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            $04ce9c8dcd7d39f0$var$_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraR.projectionMatrix.copy($04ce9c8dcd7d39f0$var$_projectionMatrix);
        }
        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply($04ce9c8dcd7d39f0$var$_eyeLeft);
        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply($04ce9c8dcd7d39f0$var$_eyeRight);
    }
}
class $04ce9c8dcd7d39f0$export$9735c82c4bae3302 {
    constructor(autoStart = true){
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
    }
    start() {
        this.startTime = $04ce9c8dcd7d39f0$var$now();
        this.oldTime = this.startTime;
        this.elapsedTime = 0;
        this.running = true;
    }
    stop() {
        this.getElapsedTime();
        this.running = false;
        this.autoStart = false;
    }
    getElapsedTime() {
        this.getDelta();
        return this.elapsedTime;
    }
    getDelta() {
        let diff = 0;
        if (this.autoStart && !this.running) {
            this.start();
            return 0;
        }
        if (this.running) {
            const newTime = $04ce9c8dcd7d39f0$var$now();
            diff = (newTime - this.oldTime) / 1000;
            this.oldTime = newTime;
            this.elapsedTime += diff;
        }
        return diff;
    }
}
function $04ce9c8dcd7d39f0$var$now() {
    return (typeof performance === "undefined" ? Date : performance).now(); // see #10732
}
const $04ce9c8dcd7d39f0$var$_position$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_quaternion$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
const $04ce9c8dcd7d39f0$var$_scale$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_orientation$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$8a1b810c6fde8951 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = "AudioListener";
        this.context = $04ce9c8dcd7d39f0$export$fcbc63750ec2a81f.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
        // private
        this._clock = new $04ce9c8dcd7d39f0$export$9735c82c4bae3302();
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
            this.gain.connect(this.context.destination);
            this.filter = null;
        }
        return this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(value) {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
        } else this.gain.disconnect(this.context.destination);
        this.filter = value;
        this.gain.connect(this.filter);
        this.filter.connect(this.context.destination);
        return this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        const listener = this.context.listener;
        const up = this.up;
        this.timeDelta = this._clock.getDelta();
        this.matrixWorld.decompose($04ce9c8dcd7d39f0$var$_position$1, $04ce9c8dcd7d39f0$var$_quaternion$1, $04ce9c8dcd7d39f0$var$_scale$1);
        $04ce9c8dcd7d39f0$var$_orientation$1.set(0, 0, -1).applyQuaternion($04ce9c8dcd7d39f0$var$_quaternion$1);
        if (listener.positionX) {
            // code path for Chrome (see #14393)
            const endTime = this.context.currentTime + this.timeDelta;
            listener.positionX.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position$1.x, endTime);
            listener.positionY.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position$1.y, endTime);
            listener.positionZ.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position$1.z, endTime);
            listener.forwardX.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation$1.x, endTime);
            listener.forwardY.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation$1.y, endTime);
            listener.forwardZ.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation$1.z, endTime);
            listener.upX.linearRampToValueAtTime(up.x, endTime);
            listener.upY.linearRampToValueAtTime(up.y, endTime);
            listener.upZ.linearRampToValueAtTime(up.z, endTime);
        } else {
            listener.setPosition($04ce9c8dcd7d39f0$var$_position$1.x, $04ce9c8dcd7d39f0$var$_position$1.y, $04ce9c8dcd7d39f0$var$_position$1.z);
            listener.setOrientation($04ce9c8dcd7d39f0$var$_orientation$1.x, $04ce9c8dcd7d39f0$var$_orientation$1.y, $04ce9c8dcd7d39f0$var$_orientation$1.z, up.x, up.y, up.z);
        }
    }
}
class $04ce9c8dcd7d39f0$export$153755f98d9861de extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(listener){
        super();
        this.type = "Audio";
        this.listener = listener;
        this.context = listener.context;
        this.gain = this.context.createGain();
        this.gain.connect(listener.getInput());
        this.autoplay = false;
        this.buffer = null;
        this.detune = 0;
        this.loop = false;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.offset = 0;
        this.duration = undefined;
        this.playbackRate = 1;
        this.isPlaying = false;
        this.hasPlaybackControl = true;
        this.source = null;
        this.sourceType = "empty";
        this._startedAt = 0;
        this._progress = 0;
        this._connected = false;
        this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(audioNode) {
        this.hasPlaybackControl = false;
        this.sourceType = "audioNode";
        this.source = audioNode;
        this.connect();
        return this;
    }
    setMediaElementSource(mediaElement) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaNode";
        this.source = this.context.createMediaElementSource(mediaElement);
        this.connect();
        return this;
    }
    setMediaStreamSource(mediaStream) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaStreamNode";
        this.source = this.context.createMediaStreamSource(mediaStream);
        this.connect();
        return this;
    }
    setBuffer(audioBuffer) {
        this.buffer = audioBuffer;
        this.sourceType = "buffer";
        if (this.autoplay) this.play();
        return this;
    }
    play(delay = 0) {
        if (this.isPlaying === true) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
        }
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._startedAt = this.context.currentTime + delay;
        const source = this.context.createBufferSource();
        source.buffer = this.buffer;
        source.loop = this.loop;
        source.loopStart = this.loopStart;
        source.loopEnd = this.loopEnd;
        source.onended = this.onEnded.bind(this);
        source.start(this._startedAt, this._progress + this.offset, this.duration);
        this.isPlaying = true;
        this.source = source;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        if (this.isPlaying === true) {
            // update current progress
            this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
            if (this.loop === true) // ensure _progress does not exceed duration with looped audios
            this._progress = this._progress % (this.duration || this.buffer.duration);
            this.source.stop();
            this.source.onended = null;
            this.isPlaying = false;
        }
        return this;
    }
    stop() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._progress = 0;
        if (this.source !== null) {
            this.source.stop();
            this.source.onended = null;
        }
        this.isPlaying = false;
        return this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].connect(this.filters[i]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        this._connected = true;
        return this;
    }
    disconnect() {
        if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].disconnect(this.filters[i]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else this.source.disconnect(this.getOutput());
        this._connected = false;
        return this;
    }
    getFilters() {
        return this.filters;
    }
    setFilters(value) {
        if (!value) value = [];
        if (this._connected === true) {
            this.disconnect();
            this.filters = value.slice();
            this.connect();
        } else this.filters = value.slice();
        return this;
    }
    setDetune(value) {
        this.detune = value;
        if (this.source.detune === undefined) return; // only set detune when available
        if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
        return this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(filter) {
        return this.setFilters(filter ? [
            filter
        ] : []);
    }
    setPlaybackRate(value) {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this.playbackRate = value;
        if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
        return this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = false;
    }
    getLoop() {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return false;
        }
        return this.loop;
    }
    setLoop(value) {
        if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this.loop = value;
        if (this.isPlaying === true) this.source.loop = this.loop;
        return this;
    }
    setLoopStart(value) {
        this.loopStart = value;
        return this;
    }
    setLoopEnd(value) {
        this.loopEnd = value;
        return this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_position = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_quaternion = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3();
const $04ce9c8dcd7d39f0$var$_scale = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_orientation = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$4b3e397ef1832507 extends $04ce9c8dcd7d39f0$export$153755f98d9861de {
    constructor(listener){
        super(listener);
        this.panner = this.context.createPanner();
        this.panner.panningModel = "HRTF";
        this.panner.connect(this.gain);
    }
    connect() {
        super.connect();
        this.panner.connect(this.gain);
    }
    disconnect() {
        super.disconnect();
        this.panner.disconnect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(value) {
        this.panner.refDistance = value;
        return this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(value) {
        this.panner.rolloffFactor = value;
        return this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(value) {
        this.panner.distanceModel = value;
        return this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(value) {
        this.panner.maxDistance = value;
        return this;
    }
    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
        this.panner.coneInnerAngle = coneInnerAngle;
        this.panner.coneOuterAngle = coneOuterAngle;
        this.panner.coneOuterGain = coneOuterGain;
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.hasPlaybackControl === true && this.isPlaying === false) return;
        this.matrixWorld.decompose($04ce9c8dcd7d39f0$var$_position, $04ce9c8dcd7d39f0$var$_quaternion, $04ce9c8dcd7d39f0$var$_scale);
        $04ce9c8dcd7d39f0$var$_orientation.set(0, 0, 1).applyQuaternion($04ce9c8dcd7d39f0$var$_quaternion);
        const panner = this.panner;
        if (panner.positionX) {
            // code path for Chrome and Firefox (see #14393)
            const endTime = this.context.currentTime + this.listener.timeDelta;
            panner.positionX.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position.x, endTime);
            panner.positionY.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position.y, endTime);
            panner.positionZ.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_position.z, endTime);
            panner.orientationX.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation.x, endTime);
            panner.orientationY.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation.y, endTime);
            panner.orientationZ.linearRampToValueAtTime($04ce9c8dcd7d39f0$var$_orientation.z, endTime);
        } else {
            panner.setPosition($04ce9c8dcd7d39f0$var$_position.x, $04ce9c8dcd7d39f0$var$_position.y, $04ce9c8dcd7d39f0$var$_position.z);
            panner.setOrientation($04ce9c8dcd7d39f0$var$_orientation.x, $04ce9c8dcd7d39f0$var$_orientation.y, $04ce9c8dcd7d39f0$var$_orientation.z);
        }
    }
}
class $04ce9c8dcd7d39f0$export$d47da1ef3d382827 {
    constructor(audio, fftSize = 2048){
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        this.analyser.getByteFrequencyData(this.data);
        return this.data;
    }
    getAverageFrequency() {
        let value = 0;
        const data = this.getFrequencyData();
        for(let i = 0; i < data.length; i++)value += data[i];
        return value / data.length;
    }
}
class $04ce9c8dcd7d39f0$export$dfe0af1ca1acb78a {
    constructor(binding, typeName, valueSize){
        this.binding = binding;
        this.valueSize = valueSize;
        let mixFunction, mixFunctionAdditive, setIdentity;
        // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
        //
        // interpolators can use .buffer as their .result
        // the data then goes to 'incoming'
        //
        // 'accu0' and 'accu1' are used frame-interleaved for
        // the cumulative result and are compared to detect
        // changes
        //
        // 'orig' stores the original state of the property
        //
        // 'add' is used for additive cumulative results
        //
        // 'work' is optional and is only present for quaternion types. It is used
        // to store intermediate quaternion multiplication results
        switch(typeName){
            case "quaternion":
                mixFunction = this._slerp;
                mixFunctionAdditive = this._slerpAdditive;
                setIdentity = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(valueSize * 6);
                this._workIndex = 5;
                break;
            case "string":
            case "bool":
                mixFunction = this._select;
                // Use the regular mix function and for additive on these types,
                // additive is not relevant for non-numeric types
                mixFunctionAdditive = this._select;
                setIdentity = this._setAdditiveIdentityOther;
                this.buffer = new Array(valueSize * 5);
                break;
            default:
                mixFunction = this._lerp;
                mixFunctionAdditive = this._lerpAdditive;
                setIdentity = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
    }
    // accumulate data in the 'incoming' region into 'accu<i>'
    accumulate(accuIndex, weight) {
        // note: happily accumulating nothing when weight = 0, the caller knows
        // the weight and shouldn't have made the call in the first place
        const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
        let currentWeight = this.cumulativeWeight;
        if (currentWeight === 0) {
            // accuN := incoming * weight
            for(let i = 0; i !== stride; ++i)buffer[offset + i] = buffer[i];
            currentWeight = weight;
        } else {
            // accuN := accuN + incoming * weight
            currentWeight += weight;
            const mix = weight / currentWeight;
            this._mixBufferRegion(buffer, offset, 0, mix, stride);
        }
        this.cumulativeWeight = currentWeight;
    }
    // accumulate data in the 'incoming' region into 'add'
    accumulateAdditive(weight) {
        const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
        if (this.cumulativeWeightAdditive === 0) // add = identity
        this._setIdentity();
        // add := add + incoming * weight
        this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
        this.cumulativeWeightAdditive += weight;
    }
    // apply the state of 'accu<i>' to the binding when accus differ
    apply(accuIndex) {
        const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        if (weight < 1) {
            // accuN := accuN + original * ( 1 - cumulativeWeight )
            const originalValueOffset = stride * this._origIndex;
            this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
        }
        if (weightAdditive > 0) // accuN := accuN + additive accuN
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
        for(let i = stride, e = stride + stride; i !== e; ++i)if (buffer[i] !== buffer[i + stride]) {
            // value has changed -> update scene graph
            binding.setValue(buffer, offset);
            break;
        }
    }
    // remember the state of the bound property and copy it to both accus
    saveOriginalState() {
        const binding = this.binding;
        const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
        binding.getValue(buffer, originalValueOffset);
        // accu[0..1] := orig -- initially detect changes against the original
        for(let i = stride, e = originalValueOffset; i !== e; ++i)buffer[i] = buffer[originalValueOffset + i % stride];
        // Add to identity for additive
        this._setIdentity();
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
    }
    // apply the state previously taken via 'saveOriginalState' to the binding
    restoreOriginalState() {
        const originalValueOffset = this.valueSize * 3;
        this.binding.setValue(this.buffer, originalValueOffset);
    }
    _setAdditiveIdentityNumeric() {
        const startIndex = this._addIndex * this.valueSize;
        const endIndex = startIndex + this.valueSize;
        for(let i = startIndex; i < endIndex; i++)this.buffer[i] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric();
        this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        const startIndex = this._origIndex * this.valueSize;
        const targetIndex = this._addIndex * this.valueSize;
        for(let i = 0; i < this.valueSize; i++)this.buffer[targetIndex + i] = this.buffer[startIndex + i];
    }
    // mix functions
    _select(buffer, dstOffset, srcOffset, t, stride) {
        if (t >= 0.5) for(let i = 0; i !== stride; ++i)buffer[dstOffset + i] = buffer[srcOffset + i];
    }
    _slerp(buffer, dstOffset, srcOffset, t) {
        $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    }
    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        const workOffset = this._workIndex * stride;
        // Store result in intermediate buffer offset
        $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
        // Slerp to the intermediate result
        $04ce9c8dcd7d39f0$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    }
    _lerp(buffer, dstOffset, srcOffset, t, stride) {
        const s = 1 - t;
        for(let i = 0; i !== stride; ++i){
            const j = dstOffset + i;
            buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
        }
    }
    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        for(let i = 0; i !== stride; ++i){
            const j = dstOffset + i;
            buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
        }
    }
}
// Characters [].:/ are reserved for track binding syntax.
const $04ce9c8dcd7d39f0$var$_RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
const $04ce9c8dcd7d39f0$var$_reservedRe = new RegExp("[" + $04ce9c8dcd7d39f0$var$_RESERVED_CHARS_RE + "]", "g");
// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const $04ce9c8dcd7d39f0$var$_wordChar = "[^" + $04ce9c8dcd7d39f0$var$_RESERVED_CHARS_RE + "]";
const $04ce9c8dcd7d39f0$var$_wordCharOrDot = "[^" + $04ce9c8dcd7d39f0$var$_RESERVED_CHARS_RE.replace("\\.", "") + "]";
// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const $04ce9c8dcd7d39f0$var$_directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace("WC", $04ce9c8dcd7d39f0$var$_wordChar);
// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const $04ce9c8dcd7d39f0$var$_nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace("WCOD", $04ce9c8dcd7d39f0$var$_wordCharOrDot);
// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const $04ce9c8dcd7d39f0$var$_objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", $04ce9c8dcd7d39f0$var$_wordChar);
// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const $04ce9c8dcd7d39f0$var$_propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", $04ce9c8dcd7d39f0$var$_wordChar);
const $04ce9c8dcd7d39f0$var$_trackRe = new RegExp("^" + $04ce9c8dcd7d39f0$var$_directoryRe + $04ce9c8dcd7d39f0$var$_nodeRe + $04ce9c8dcd7d39f0$var$_objectRe + $04ce9c8dcd7d39f0$var$_propertyRe + "$");
const $04ce9c8dcd7d39f0$var$_supportedObjectNames = [
    "material",
    "materials",
    "bones",
    "map"
];
class $04ce9c8dcd7d39f0$var$Composite {
    constructor(targetGroup, path, optionalParsedPath){
        const parsedPath = optionalParsedPath || $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
        this.bind(); // bind all binding
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        // and only call .getValue on the first
        if (binding !== undefined) binding.getValue(array, offset);
    }
    setValue(array, offset) {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].setValue(array, offset);
    }
    bind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].bind();
    }
    unbind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].unbind();
    }
}
// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class $04ce9c8dcd7d39f0$export$7bf70fcf9f891893 {
    constructor(rootNode, path, parsedPath){
        this.path = path;
        this.parsedPath = parsedPath || $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.parseTrackName(path);
        this.node = $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.findNode(rootNode, this.parsedPath.nodeName);
        this.rootNode = rootNode;
        // initial state of these methods that calls 'bind'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
        if (!(root && root.isAnimationObjectGroup)) return new $04ce9c8dcd7d39f0$export$7bf70fcf9f891893(root, path, parsedPath);
        else return new $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.Composite(root, path, parsedPath);
    }
    /**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */ static sanitizeNodeName(name) {
        return name.replace(/\s/g, "_").replace($04ce9c8dcd7d39f0$var$_reservedRe, "");
    }
    static parseTrackName(trackName) {
        const matches = $04ce9c8dcd7d39f0$var$_trackRe.exec(trackName);
        if (matches === null) throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
        const results = {
            // directoryName: matches[ 1 ], // (tschw) currently unused
            nodeName: matches[2],
            objectName: matches[3],
            objectIndex: matches[4],
            propertyName: matches[5],
            propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
        if (lastDot !== undefined && lastDot !== -1) {
            const objectName = results.nodeName.substring(lastDot + 1);
            // Object names must be checked against an allowlist. Otherwise, there
            // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
            // 'bar' could be the objectName, or part of a nodeName (which can
            // include '.' characters).
            if ($04ce9c8dcd7d39f0$var$_supportedObjectNames.indexOf(objectName) !== -1) {
                results.nodeName = results.nodeName.substring(0, lastDot);
                results.objectName = objectName;
            }
        }
        if (results.propertyName === null || results.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
        return results;
    }
    static findNode(root, nodeName) {
        if (nodeName === undefined || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) return root;
        // search into skeleton bones.
        if (root.skeleton) {
            const bone = root.skeleton.getBoneByName(nodeName);
            if (bone !== undefined) return bone;
        }
        // search into node subtree.
        if (root.children) {
            const searchNodeSubtree = function(children) {
                for(let i = 0; i < children.length; i++){
                    const childNode = children[i];
                    if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                    const result = searchNodeSubtree(childNode.children);
                    if (result) return result;
                }
                return null;
            };
            const subTreeNode = searchNodeSubtree(root.children);
            if (subTreeNode) return subTreeNode;
        }
        return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {}
    _setValue_unavailable() {}
    // Getters
    _getValue_direct(buffer, offset) {
        buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for(let i = 0, n = source.length; i !== n; ++i)buffer[offset++] = source[i];
    }
    _getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
        this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
        this.bind();
        this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
        this.bind();
        this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
            targetObject = $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.findNode(this.rootNode, parsedPath.nodeName);
            this.node = targetObject;
        }
        // set fail state so we can just 'return' on error
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        // ensure there is a value node
        if (!targetObject) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
        }
        if (objectName) {
            let objectIndex = parsedPath.objectIndex;
            // special cases were we need to reach deeper into the hierarchy to get the face materials....
            switch(objectName){
                case "materials":
                    if (!targetObject.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!targetObject.material.materials) {
                        console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        return;
                    }
                    targetObject = targetObject.material.materials;
                    break;
                case "bones":
                    if (!targetObject.skeleton) {
                        console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        return;
                    }
                    // potential future optimization: skip this if propertyIndex is already an integer
                    // and convert the integer string to a true integer.
                    targetObject = targetObject.skeleton.bones;
                    // support resolving morphTarget names into indices.
                    for(let i = 0; i < targetObject.length; i++)if (targetObject[i].name === objectIndex) {
                        objectIndex = i;
                        break;
                    }
                    break;
                case "map":
                    if ("map" in targetObject) {
                        targetObject = targetObject.map;
                        break;
                    }
                    if (!targetObject.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!targetObject.material.map) {
                        console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                        return;
                    }
                    targetObject = targetObject.material.map;
                    break;
                default:
                    if (targetObject[objectName] === undefined) {
                        console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        return;
                    }
                    targetObject = targetObject[objectName];
            }
            if (objectIndex !== undefined) {
                if (targetObject[objectIndex] === undefined) {
                    console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
                    return;
                }
                targetObject = targetObject[objectIndex];
            }
        }
        // resolve property
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === undefined) {
            const nodeName = parsedPath.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
            return;
        }
        // determine versioning scheme
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== undefined) versioning = this.Versioning.NeedsUpdate;
        else if (targetObject.matrixWorldNeedsUpdate !== undefined) versioning = this.Versioning.MatrixWorldNeedsUpdate;
        // determine how the property gets bound
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== undefined) {
            // access a sub element of the property array (only primitives are supported right now)
            if (propertyName === "morphTargetInfluences") {
                // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                // support resolving morphTarget names into indices.
                if (!targetObject.geometry) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                    return;
                }
                if (!targetObject.geometry.morphAttributes) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                    return;
                }
                if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
            bindingType = this.BindingType.ArrayElement;
            this.resolvedProperty = nodeProperty;
            this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
            // must use copy for Object3D.Euler/Quaternion
            bindingType = this.BindingType.HasFromToArray;
            this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
            bindingType = this.BindingType.EntireArray;
            this.resolvedProperty = nodeProperty;
        } else this.propertyName = propertyName;
        // select getter / setter
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
        this.node = null;
        // back to the prototype version of getValue / setValue
        // note: avoiding to mutate the shape of 'this' via 'delete'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
}
$04ce9c8dcd7d39f0$export$7bf70fcf9f891893.Composite = $04ce9c8dcd7d39f0$var$Composite;
$04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
$04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
$04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype.GetterByBindingType = [
    $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._getValue_direct,
    $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._getValue_array,
    $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._getValue_arrayElement,
    $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._getValue_toArray
];
$04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype.SetterByBindingTypeAndVersioning = [
    [
        // Direct
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_direct,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_direct_setNeedsUpdate,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        // EntireArray
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_array,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_array_setNeedsUpdate,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        // ArrayElement
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_arrayElement,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setNeedsUpdate,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        // HasToFromArray
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_fromArray,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_fromArray_setNeedsUpdate,
        $04ce9c8dcd7d39f0$export$7bf70fcf9f891893.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */ class $04ce9c8dcd7d39f0$export$30619c2afd3f34db {
    constructor(){
        this.isAnimationObjectGroup = true;
        this.uuid = $04ce9c8dcd7d39f0$var$generateUUID();
        // cached objects followed by the active ones
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0; // threshold
        // note: read by PropertyBinding.Composite
        const indices = {};
        this._indicesByUUID = indices; // for bookkeeping
        for(let i = 0, n = arguments.length; i !== n; ++i)indices[arguments[i].uuid] = i;
        this._paths = []; // inside: string
        this._parsedPaths = []; // inside: { we don't care, here }
        this._bindings = []; // inside: Array< PropertyBinding >
        this._bindingsIndicesByPath = {}; // inside: indices in these arrays
        const scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    add() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
        let knownObject = undefined, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid;
            let index = indicesByUUID[uuid];
            if (index === undefined) {
                // unknown object -> add it to the ACTIVE region
                index = nObjects++;
                indicesByUUID[uuid] = index;
                objects.push(object);
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j)bindings[j].push(new $04ce9c8dcd7d39f0$export$7bf70fcf9f891893(object, paths[j], parsedPaths[j]));
            } else if (index < nCachedObjects) {
                knownObject = objects[index];
                // move existing object to the ACTIVE region
                const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                indicesByUUID[lastCachedObject.uuid] = index;
                objects[index] = lastCachedObject;
                indicesByUUID[uuid] = firstActiveIndex;
                objects[firstActiveIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
                    let binding = bindingsForPath[index];
                    bindingsForPath[index] = lastCached;
                    if (binding === undefined) // since we do not bother to create new bindings
                    // for objects that are cached, the binding may
                    // or may not exist
                    binding = new $04ce9c8dcd7d39f0$export$7bf70fcf9f891893(object, paths[j], parsedPaths[j]);
                    bindingsForPath[firstActiveIndex] = binding;
                }
            } else if (objects[index] !== knownObject) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
             // else the object is already where we want it to be
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    remove() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined && index >= nCachedObjects) {
                // move existing object into the CACHED region
                const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                indicesByUUID[firstActiveObject.uuid] = index;
                objects[index] = firstActiveObject;
                indicesByUUID[uuid] = lastCachedIndex;
                objects[lastCachedIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                    bindingsForPath[index] = firstActive;
                    bindingsForPath[lastCachedIndex] = binding;
                }
            }
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // remove & forget
    uncache() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined) {
                delete indicesByUUID[uuid];
                if (index < nCachedObjects) {
                    // object is cached, shrink the CACHED region
                    const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                    // last cached object takes this object's place
                    indicesByUUID[lastCachedObject.uuid] = index;
                    objects[index] = lastCachedObject;
                    // last object goes to the activated slot and pop
                    indicesByUUID[lastObject.uuid] = firstActiveIndex;
                    objects[firstActiveIndex] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                        bindingsForPath[index] = lastCached;
                        bindingsForPath[firstActiveIndex] = last;
                        bindingsForPath.pop();
                    }
                } else {
                    // object is active, just swap with the last and pop
                    const lastIndex = --nObjects, lastObject = objects[lastIndex];
                    if (lastIndex > 0) indicesByUUID[lastObject.uuid] = index;
                    objects[index] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j];
                        bindingsForPath[index] = bindingsForPath[lastIndex];
                        bindingsForPath.pop();
                    }
                } // cached or active
            } // if object is known
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // Internal interface used by befriended PropertyBinding.Composite:
    subscribe_(path, parsedPath) {
        // returns an array of bindings for the given path that is changed
        // according to the contained objects in the group
        const indicesByPath = this._bindingsIndicesByPath;
        let index = indicesByPath[path];
        const bindings = this._bindings;
        if (index !== undefined) return bindings[index];
        const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
        index = bindings.length;
        indicesByPath[path] = index;
        paths.push(path);
        parsedPaths.push(parsedPath);
        bindings.push(bindingsForPath);
        for(let i = nCachedObjects, n = objects.length; i !== n; ++i){
            const object = objects[i];
            bindingsForPath[i] = new $04ce9c8dcd7d39f0$export$7bf70fcf9f891893(object, path, parsedPath);
        }
        return bindingsForPath;
    }
    unsubscribe_(path) {
        // tells the group to forget about a property path and no longer
        // update the array previously obtained with 'subscribe_'
        const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
        if (index !== undefined) {
            const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
            indicesByPath[lastBindingsPath] = index;
            bindings[index] = lastBindings;
            bindings.pop();
            parsedPaths[index] = parsedPaths[lastBindingsIndex];
            parsedPaths.pop();
            paths[index] = paths[lastBindingsIndex];
            paths.pop();
        }
    }
}
class $04ce9c8dcd7d39f0$export$6946940a69e799e {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode){
        this._mixer = mixer;
        this._clip = clip;
        this._localRoot = localRoot;
        this.blendMode = blendMode;
        const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        const interpolantSettings = {
            endingStart: $04ce9c8dcd7d39f0$export$7f795934b84ab523,
            endingEnd: $04ce9c8dcd7d39f0$export$7f795934b84ab523
        };
        for(let i = 0; i !== nTracks; ++i){
            const interpolant = tracks[i].createInterpolant(null);
            interpolants[i] = interpolant;
            interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants; // bound by the mixer
        // inside: PropertyMixer (managed by the mixer)
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null; // for the memory manager
        this._byClipCacheIndex = null; // for the memory manager
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = $04ce9c8dcd7d39f0$export$dfaf4422ce096e29;
        this._loopCount = -1;
        // global mixer time when the action is to be started
        // it's set back to 'null' upon start of the action
        this._startTime = null;
        // scaled local time of the action
        // gets clamped or wrapped to 0..clip.duration according to loop
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity; // no. of repetitions when looping
        this.paused = false; // true -> zero effective time scale
        this.enabled = true; // false -> zero effective weight
        this.clampWhenFinished = false; // keep feeding the last frame?
        this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
        this.zeroSlopeAtEnd = true; // clips for start, loop and end
    }
    // State & Scheduling
    play() {
        this._mixer._activateAction(this);
        return this;
    }
    stop() {
        this._mixer._deactivateAction(this);
        return this.reset();
    }
    reset() {
        this.paused = false;
        this.enabled = true;
        this.time = 0; // restart clip
        this._loopCount = -1; // forget previous loops
        this._startTime = null; // forget scheduling
        return this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    // return true when play has been called
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(time) {
        this._startTime = time;
        return this;
    }
    setLoop(mode, repetitions) {
        this.loop = mode;
        this.repetitions = repetitions;
        return this;
    }
    // Weight
    // set the weight stopping any scheduled fading
    // although .enabled = false yields an effective weight of zero, this
    // method does *not* change .enabled, because it would be confusing
    setEffectiveWeight(weight) {
        this.weight = weight;
        // note: same logic as when updated at runtime
        this._effectiveWeight = this.enabled ? weight : 0;
        return this.stopFading();
    }
    // return the weight considering fading and .enabled
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(duration) {
        return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
        return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
        fadeOutAction.fadeOut(duration);
        this.fadeIn(duration);
        if (warp) {
            const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
            fadeOutAction.warp(1.0, startEndRatio, duration);
            this.warp(endStartRatio, 1.0, duration);
        }
        return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
        return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
        const weightInterpolant = this._weightInterpolant;
        if (weightInterpolant !== null) {
            this._weightInterpolant = null;
            this._mixer._takeBackControlInterpolant(weightInterpolant);
        }
        return this;
    }
    // Time Scale Control
    // set the time scale stopping any scheduled warping
    // although .paused = true yields an effective time scale of zero, this
    // method does *not* change .paused, because it would be confusing
    setEffectiveTimeScale(timeScale) {
        this.timeScale = timeScale;
        this._effectiveTimeScale = this.paused ? 0 : timeScale;
        return this.stopWarping();
    }
    // return the time scale considering warping and .paused
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(duration) {
        this.timeScale = this._clip.duration / duration;
        return this.stopWarping();
    }
    syncWith(action) {
        this.time = action.time;
        this.timeScale = action.timeScale;
        return this.stopWarping();
    }
    halt(duration) {
        return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
        const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
        let interpolant = this._timeScaleInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._timeScaleInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        times[1] = now + duration;
        values[0] = startTimeScale / timeScale;
        values[1] = endTimeScale / timeScale;
        return this;
    }
    stopWarping() {
        const timeScaleInterpolant = this._timeScaleInterpolant;
        if (timeScaleInterpolant !== null) {
            this._timeScaleInterpolant = null;
            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
        }
        return this;
    }
    // Object Accessors
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    // Interna
    _update(time, deltaTime, timeDirection, accuIndex) {
        // called by the mixer
        if (!this.enabled) {
            // call ._updateWeight() to update ._effectiveWeight
            this._updateWeight(time);
            return;
        }
        const startTime = this._startTime;
        if (startTime !== null) {
            // check for scheduled start of action
            const timeRunning = (time - startTime) * timeDirection;
            if (timeRunning < 0 || timeDirection === 0) deltaTime = 0;
            else {
                this._startTime = null; // unschedule
                deltaTime = timeDirection * timeRunning;
            }
        }
        // apply time scale and advance time
        deltaTime *= this._updateTimeScale(time);
        const clipTime = this._updateTime(deltaTime);
        // note: _updateTime may disable the action resulting in
        // an effective weight of 0
        const weight = this._updateWeight(time);
        if (weight > 0) {
            const interpolants = this._interpolants;
            const propertyMixers = this._propertyBindings;
            switch(this.blendMode){
                case $04ce9c8dcd7d39f0$export$d875e029ef558d3:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulateAdditive(weight);
                    }
                    break;
                case $04ce9c8dcd7d39f0$export$bcfbbdcf8de7f8cd:
                default:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulate(accuIndex, weight);
                    }
            }
        }
    }
    _updateWeight(time) {
        let weight = 0;
        if (this.enabled) {
            weight = this.weight;
            const interpolant = this._weightInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                weight *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopFading();
                    if (interpolantValue === 0) // faded out, disable
                    this.enabled = false;
                }
            }
        }
        this._effectiveWeight = weight;
        return weight;
    }
    _updateTimeScale(time) {
        let timeScale = 0;
        if (!this.paused) {
            timeScale = this.timeScale;
            const interpolant = this._timeScaleInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                timeScale *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopWarping();
                    if (timeScale === 0) // motion has halted, pause
                    this.paused = true;
                    else // warp done - apply final time scale
                    this.timeScale = timeScale;
                }
            }
        }
        this._effectiveTimeScale = timeScale;
        return timeScale;
    }
    _updateTime(deltaTime) {
        const duration = this._clip.duration;
        const loop = this.loop;
        let time = this.time + deltaTime;
        let loopCount = this._loopCount;
        const pingPong = loop === $04ce9c8dcd7d39f0$export$f8f6f2041b78e210;
        if (deltaTime === 0) {
            if (loopCount === -1) return time;
            return pingPong && (loopCount & 1) === 1 ? duration - time : time;
        }
        if (loop === $04ce9c8dcd7d39f0$export$d62fdc9d1b1cccad) {
            if (loopCount === -1) {
                // just started
                this._loopCount = 0;
                this._setEndings(true, true, false);
            }
            handle_stop: {
                if (time >= duration) time = duration;
                else if (time < 0) time = 0;
                else {
                    this.time = time;
                    break handle_stop;
                }
                if (this.clampWhenFinished) this.paused = true;
                else this.enabled = false;
                this.time = time;
                this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: deltaTime < 0 ? -1 : 1
                });
            }
        } else {
            if (loopCount === -1) {
                // just started
                if (deltaTime >= 0) {
                    loopCount = 0;
                    this._setEndings(true, this.repetitions === 0, pingPong);
                } else // when looping in reverse direction, the initial
                // transition through zero counts as a repetition,
                // so leave loopCount at -1
                this._setEndings(this.repetitions === 0, true, pingPong);
            }
            if (time >= duration || time < 0) {
                // wrap around
                const loopDelta = Math.floor(time / duration); // signed
                time -= duration * loopDelta;
                loopCount += Math.abs(loopDelta);
                const pending = this.repetitions - loopCount;
                if (pending <= 0) {
                    // have to stop (switch state, clamp time, fire event)
                    if (this.clampWhenFinished) this.paused = true;
                    else this.enabled = false;
                    time = deltaTime > 0 ? duration : 0;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: deltaTime > 0 ? 1 : -1
                    });
                } else {
                    // keep running
                    if (pending === 1) {
                        // entering the last round
                        const atStart = deltaTime < 0;
                        this._setEndings(atStart, !atStart, pingPong);
                    } else this._setEndings(false, false, pingPong);
                    this._loopCount = loopCount;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: loopDelta
                    });
                }
            } else this.time = time;
            if (pingPong && (loopCount & 1) === 1) // invert time for the "pong round"
            return duration - time;
        }
        return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
        const settings = this._interpolantSettings;
        if (pingPong) {
            settings.endingStart = $04ce9c8dcd7d39f0$export$24a4ccb5099273b5;
            settings.endingEnd = $04ce9c8dcd7d39f0$export$24a4ccb5099273b5;
        } else {
            // assuming for LoopOnce atStart == atEnd == true
            if (atStart) settings.endingStart = this.zeroSlopeAtStart ? $04ce9c8dcd7d39f0$export$24a4ccb5099273b5 : $04ce9c8dcd7d39f0$export$7f795934b84ab523;
            else settings.endingStart = $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee;
            if (atEnd) settings.endingEnd = this.zeroSlopeAtEnd ? $04ce9c8dcd7d39f0$export$24a4ccb5099273b5 : $04ce9c8dcd7d39f0$export$7f795934b84ab523;
            else settings.endingEnd = $04ce9c8dcd7d39f0$export$8e8c3ecdcd8e1fee;
        }
    }
    _scheduleFading(duration, weightNow, weightThen) {
        const mixer = this._mixer, now = mixer.time;
        let interpolant = this._weightInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._weightInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        values[0] = weightNow;
        times[1] = now + duration;
        values[1] = weightThen;
        return this;
    }
}
const $04ce9c8dcd7d39f0$var$_controlInterpolantsResultBuffer = new Float32Array(1);
class $04ce9c8dcd7d39f0$export$fbd77e5aefaa0102 extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(root){
        super();
        this._root = root;
        this._initMemoryManager();
        this._accuIndex = 0;
        this.time = 0;
        this.timeScale = 1.0;
    }
    _bindAction(action, prototypeAction) {
        const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
        let bindingsByName = bindingsByRoot[rootUuid];
        if (bindingsByName === undefined) {
            bindingsByName = {};
            bindingsByRoot[rootUuid] = bindingsByName;
        }
        for(let i = 0; i !== nTracks; ++i){
            const track = tracks[i], trackName = track.name;
            let binding = bindingsByName[trackName];
            if (binding !== undefined) {
                ++binding.referenceCount;
                bindings[i] = binding;
            } else {
                binding = bindings[i];
                if (binding !== undefined) {
                    // existing binding, make sure the cache knows
                    if (binding._cacheIndex === null) {
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                    }
                    continue;
                }
                const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                binding = new $04ce9c8dcd7d39f0$export$dfe0af1ca1acb78a($04ce9c8dcd7d39f0$export$7bf70fcf9f891893.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                ++binding.referenceCount;
                this._addInactiveBinding(binding, rootUuid, trackName);
                bindings[i] = binding;
            }
            interpolants[i].resultBuffer = binding.buffer;
        }
    }
    _activateAction(action) {
        if (!this._isActiveAction(action)) {
            if (action._cacheIndex === null) {
                // this action has been forgotten by the cache, but the user
                // appears to be still using it -> rebind
                const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
                this._addInactiveAction(action, clipUuid, rootUuid);
            }
            const bindings = action._propertyBindings;
            // increment reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if (binding.useCount++ === 0) {
                    this._lendBinding(binding);
                    binding.saveOriginalState();
                }
            }
            this._lendAction(action);
        }
    }
    _deactivateAction(action) {
        if (this._isActiveAction(action)) {
            const bindings = action._propertyBindings;
            // decrement reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if (--binding.useCount === 0) {
                    binding.restoreOriginalState();
                    this._takeBackBinding(binding);
                }
            }
            this._takeBackAction(action);
        }
    }
    // Memory manager
    _initMemoryManager() {
        this._actions = []; // 'nActiveActions' followed by inactive ones
        this._nActiveActions = 0;
        this._actionsByClip = {};
        // inside:
        // {
        // 	knownActions: Array< AnimationAction > - used as prototypes
        // 	actionByRoot: AnimationAction - lookup
        // }
        this._bindings = []; // 'nActiveBindings' followed by inactive ones
        this._nActiveBindings = 0;
        this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
        this._controlInterpolants = []; // same game as above
        this._nActiveControlInterpolants = 0;
        const scope = this;
        this.stats = {
            actions: {
                get total () {
                    return scope._actions.length;
                },
                get inUse () {
                    return scope._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return scope._bindings.length;
                },
                get inUse () {
                    return scope._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return scope._controlInterpolants.length;
                },
                get inUse () {
                    return scope._nActiveControlInterpolants;
                }
            }
        };
    }
    // Memory management for AnimationAction objects
    _isActiveAction(action) {
        const index = action._cacheIndex;
        return index !== null && index < this._nActiveActions;
    }
    _addInactiveAction(action, clipUuid, rootUuid) {
        const actions = this._actions, actionsByClip = this._actionsByClip;
        let actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip === undefined) {
            actionsForClip = {
                knownActions: [
                    action
                ],
                actionByRoot: {}
            };
            action._byClipCacheIndex = 0;
            actionsByClip[clipUuid] = actionsForClip;
        } else {
            const knownActions = actionsForClip.knownActions;
            action._byClipCacheIndex = knownActions.length;
            knownActions.push(action);
        }
        action._cacheIndex = actions.length;
        actions.push(action);
        actionsForClip.actionByRoot[rootUuid] = action;
    }
    _removeInactiveAction(action) {
        const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        action._cacheIndex = null;
        const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
        lastKnownAction._byClipCacheIndex = byClipCacheIndex;
        knownActionsForClip[byClipCacheIndex] = lastKnownAction;
        knownActionsForClip.pop();
        action._byClipCacheIndex = null;
        const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
        delete actionByRoot[rootUuid];
        if (knownActionsForClip.length === 0) delete actionsByClip[clipUuid];
        this._removeInactiveBindingsForAction(action);
    }
    _removeInactiveBindingsForAction(action) {
        const bindings = action._propertyBindings;
        for(let i = 0, n = bindings.length; i !== n; ++i){
            const binding = bindings[i];
            if (--binding.referenceCount === 0) this._removeInactiveBinding(binding);
        }
    }
    _lendAction(action) {
        // [ active actions |  inactive actions  ]
        // [  active actions >| inactive actions ]
        //                 s        a
        //                  <-swap->
        //                 a        s
        const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
        action._cacheIndex = lastActiveIndex;
        actions[lastActiveIndex] = action;
        firstInactiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = firstInactiveAction;
    }
    _takeBackAction(action) {
        // [  active actions  | inactive actions ]
        // [ active actions |< inactive actions  ]
        //        a        s
        //         <-swap->
        //        s        a
        const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
        action._cacheIndex = firstInactiveIndex;
        actions[firstInactiveIndex] = action;
        lastActiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = lastActiveAction;
    }
    // Memory management for PropertyMixer objects
    _addInactiveBinding(binding, rootUuid, trackName) {
        const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
        let bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName === undefined) {
            bindingByName = {};
            bindingsByRoot[rootUuid] = bindingByName;
        }
        bindingByName[trackName] = binding;
        binding._cacheIndex = bindings.length;
        bindings.push(binding);
    }
    _removeInactiveBinding(binding) {
        const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
        lastInactiveBinding._cacheIndex = cacheIndex;
        bindings[cacheIndex] = lastInactiveBinding;
        bindings.pop();
        delete bindingByName[trackName];
        if (Object.keys(bindingByName).length === 0) delete bindingsByRoot[rootUuid];
    }
    _lendBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
        binding._cacheIndex = lastActiveIndex;
        bindings[lastActiveIndex] = binding;
        firstInactiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = firstInactiveBinding;
    }
    _takeBackBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
        binding._cacheIndex = firstInactiveIndex;
        bindings[firstInactiveIndex] = binding;
        lastActiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = lastActiveBinding;
    }
    // Memory management of Interpolants for weight and time scale
    _lendControlInterpolant() {
        const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
        let interpolant = interpolants[lastActiveIndex];
        if (interpolant === undefined) {
            interpolant = new $04ce9c8dcd7d39f0$export$a8e6009059f51e1a(new Float32Array(2), new Float32Array(2), 1, $04ce9c8dcd7d39f0$var$_controlInterpolantsResultBuffer);
            interpolant.__cacheIndex = lastActiveIndex;
            interpolants[lastActiveIndex] = interpolant;
        }
        return interpolant;
    }
    _takeBackControlInterpolant(interpolant) {
        const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
        interpolant.__cacheIndex = firstInactiveIndex;
        interpolants[firstInactiveIndex] = interpolant;
        lastActiveInterpolant.__cacheIndex = prevIndex;
        interpolants[prevIndex] = lastActiveInterpolant;
    }
    // return an action for a clip optionally using a custom root target
    // object (this method allocates a lot of dynamic memory in case a
    // previously unknown clip/root combination is specified)
    clipAction(clip, optionalRoot, blendMode) {
        const root = optionalRoot || this._root, rootUuid = root.uuid;
        let clipObject = typeof clip === "string" ? $04ce9c8dcd7d39f0$export$d942c706bf23829c.findByName(root, clip) : clip;
        const clipUuid = clipObject !== null ? clipObject.uuid : clip;
        const actionsForClip = this._actionsByClip[clipUuid];
        let prototypeAction = null;
        if (blendMode === undefined) {
            if (clipObject !== null) blendMode = clipObject.blendMode;
            else blendMode = $04ce9c8dcd7d39f0$export$bcfbbdcf8de7f8cd;
        }
        if (actionsForClip !== undefined) {
            const existingAction = actionsForClip.actionByRoot[rootUuid];
            if (existingAction !== undefined && existingAction.blendMode === blendMode) return existingAction;
            // we know the clip, so we don't have to parse all
            // the bindings again but can just copy
            prototypeAction = actionsForClip.knownActions[0];
            // also, take the clip from the prototype action
            if (clipObject === null) clipObject = prototypeAction._clip;
        }
        // clip must be known when specified via string
        if (clipObject === null) return null;
        // allocate all resources required to run it
        const newAction = new $04ce9c8dcd7d39f0$export$6946940a69e799e(this, clipObject, optionalRoot, blendMode);
        this._bindAction(newAction, prototypeAction);
        // and make the action known to the memory manager
        this._addInactiveAction(newAction, clipUuid, rootUuid);
        return newAction;
    }
    // get an existing action
    existingAction(clip, optionalRoot) {
        const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? $04ce9c8dcd7d39f0$export$d942c706bf23829c.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
        if (actionsForClip !== undefined) return actionsForClip.actionByRoot[rootUuid] || null;
        return null;
    }
    // deactivates all previously scheduled actions
    stopAllAction() {
        const actions = this._actions, nActions = this._nActiveActions;
        for(let i = nActions - 1; i >= 0; --i)actions[i].stop();
        return this;
    }
    // advance the time and update apply the animation
    update(deltaTime) {
        deltaTime *= this.timeScale;
        const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
        // run active actions
        for(let i = 0; i !== nActions; ++i){
            const action = actions[i];
            action._update(time, deltaTime, timeDirection, accuIndex);
        }
        // update scene graph
        const bindings = this._bindings, nBindings = this._nActiveBindings;
        for(let i = 0; i !== nBindings; ++i)bindings[i].apply(accuIndex);
        return this;
    }
    // Allows you to seek to a specific time in an animation.
    setTime(timeInSeconds) {
        this.time = 0; // Zero out time attribute for AnimationMixer object;
        for(let i = 0; i < this._actions.length; i++)this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
        return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
    }
    // return this mixer's root target object
    getRoot() {
        return this._root;
    }
    // free all resources specific to a particular clip
    uncacheClip(clip) {
        const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip !== undefined) {
            // note: just calling _removeInactiveAction would mess up the
            // iteration state and also require updating the state we can
            // just throw away
            const actionsToRemove = actionsForClip.knownActions;
            for(let i = 0, n = actionsToRemove.length; i !== n; ++i){
                const action = actionsToRemove[i];
                this._deactivateAction(action);
                const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                action._cacheIndex = null;
                action._byClipCacheIndex = null;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                this._removeInactiveBindingsForAction(action);
            }
            delete actionsByClip[clipUuid];
        }
    }
    // free all resources specific to a particular root target object
    uncacheRoot(root) {
        const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
        for(const clipUuid in actionsByClip){
            const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
            if (action !== undefined) {
                this._deactivateAction(action);
                this._removeInactiveAction(action);
            }
        }
        const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName !== undefined) for(const trackName in bindingByName){
            const binding = bindingByName[trackName];
            binding.restoreOriginalState();
            this._removeInactiveBinding(binding);
        }
    }
    // remove a targeted clip from the cache
    uncacheAction(clip, optionalRoot) {
        const action = this.existingAction(clip, optionalRoot);
        if (action !== null) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
        }
    }
}
class $04ce9c8dcd7d39f0$export$2947cebfe91c02f8 {
    constructor(value){
        this.value = value;
    }
    clone() {
        return new $04ce9c8dcd7d39f0$export$2947cebfe91c02f8(this.value.clone === undefined ? this.value : this.value.clone());
    }
}
let $04ce9c8dcd7d39f0$var$id = 0;
class $04ce9c8dcd7d39f0$export$c412d5ffe1f79209 extends $04ce9c8dcd7d39f0$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        this.isUniformsGroup = true;
        Object.defineProperty(this, "id", {
            value: $04ce9c8dcd7d39f0$var$id++
        });
        this.name = "";
        this.usage = $04ce9c8dcd7d39f0$export$763e8360f4d7f77d;
        this.uniforms = [];
    }
    add(uniform) {
        this.uniforms.push(uniform);
        return this;
    }
    remove(uniform) {
        const index = this.uniforms.indexOf(uniform);
        if (index !== -1) this.uniforms.splice(index, 1);
        return this;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
        return this;
    }
    copy(source) {
        this.name = source.name;
        this.usage = source.usage;
        const uniformsSource = source.uniforms;
        this.uniforms.length = 0;
        for(let i = 0, l = uniformsSource.length; i < l; i++)this.uniforms.push(uniformsSource[i].clone());
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class $04ce9c8dcd7d39f0$export$25ec0e1af1389358 extends $04ce9c8dcd7d39f0$export$3d5cd879f108f53f {
    constructor(array, stride, meshPerAttribute = 1){
        super(array, stride);
        this.isInstancedInterleavedBuffer = true;
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    clone(data) {
        const ib = super.clone(data);
        ib.meshPerAttribute = this.meshPerAttribute;
        return ib;
    }
    toJSON(data) {
        const json = super.toJSON(data);
        json.isInstancedInterleavedBuffer = true;
        json.meshPerAttribute = this.meshPerAttribute;
        return json;
    }
}
class $04ce9c8dcd7d39f0$export$6b7339ae8dbddf73 {
    constructor(buffer, type, itemSize, elementSize, count){
        this.isGLBufferAttribute = true;
        this.name = "";
        this.buffer = buffer;
        this.type = type;
        this.itemSize = itemSize;
        this.elementSize = elementSize;
        this.count = count;
        this.version = 0;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setBuffer(buffer) {
        this.buffer = buffer;
        return this;
    }
    setType(type, elementSize) {
        this.type = type;
        this.elementSize = elementSize;
        return this;
    }
    setItemSize(itemSize) {
        this.itemSize = itemSize;
        return this;
    }
    setCount(count) {
        this.count = count;
        return this;
    }
}
class $04ce9c8dcd7d39f0$export$8b7aaceff00bd2f {
    constructor(origin, direction, near = 0, far = Infinity){
        this.ray = new $04ce9c8dcd7d39f0$export$a186db52eed6d40e(origin, direction);
        // direction is assumed to be normalized (for accurate distance calculations)
        this.near = near;
        this.far = far;
        this.camera = null;
        this.layers = new $04ce9c8dcd7d39f0$export$89312ce47c0ca777();
        this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    set(origin, direction) {
        // direction is assumed to be normalized (for accurate distance calculations)
        this.ray.set(origin, direction);
    }
    setFromCamera(coords, camera) {
        if (camera.isPerspectiveCamera) {
            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
            this.camera = camera;
        } else if (camera.isOrthographicCamera) {
            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
            this.camera = camera;
        } else console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
    }
    intersectObject(object, recursive = true, intersects = []) {
        $04ce9c8dcd7d39f0$var$intersectObject(object, this, intersects, recursive);
        intersects.sort($04ce9c8dcd7d39f0$var$ascSort);
        return intersects;
    }
    intersectObjects(objects, recursive = true, intersects = []) {
        for(let i = 0, l = objects.length; i < l; i++)$04ce9c8dcd7d39f0$var$intersectObject(objects[i], this, intersects, recursive);
        intersects.sort($04ce9c8dcd7d39f0$var$ascSort);
        return intersects;
    }
}
function $04ce9c8dcd7d39f0$var$ascSort(a, b) {
    return a.distance - b.distance;
}
function $04ce9c8dcd7d39f0$var$intersectObject(object, raycaster, intersects, recursive) {
    if (object.layers.test(raycaster.layers)) object.raycast(raycaster, intersects);
    if (recursive === true) {
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)$04ce9c8dcd7d39f0$var$intersectObject(children[i], raycaster, intersects, true);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */ class $04ce9c8dcd7d39f0$export$d712cd887b4a00f7 {
    constructor(radius = 1, phi = 0, theta = 0){
        this.radius = radius;
        this.phi = phi; // polar angle
        this.theta = theta; // azimuthal angle
        return this;
    }
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this;
    }
    // restrict phi to be between EPS and PI-EPS
    makeSafe() {
        const EPS = 0.000001;
        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + y * y + z * z);
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        } else {
            this.theta = Math.atan2(x, z);
            this.phi = Math.acos($04ce9c8dcd7d39f0$var$clamp(y / this.radius, -1, 1));
        }
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */ class $04ce9c8dcd7d39f0$export$287165bb2177f4fd {
    constructor(radius = 1, theta = 0, y = 0){
        this.radius = radius; // distance from the origin to a point in the x-z plane
        this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
        this.y = y; // height above the x-z plane
        return this;
    }
    set(radius, theta, y) {
        this.radius = radius;
        this.theta = theta;
        this.y = y;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.theta = other.theta;
        this.y = other.y;
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + z * z);
        this.theta = Math.atan2(x, z);
        this.y = y;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $04ce9c8dcd7d39f0$var$_vector$4 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1();
class $04ce9c8dcd7d39f0$export$60f553fa130f08b0 {
    constructor(min = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(Infinity, Infinity), max = new $04ce9c8dcd7d39f0$export$c977b3e384af9ae1(-Infinity, -Infinity)){
        this.isBox2 = true;
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = $04ce9c8dcd7d39f0$var$_vector$4.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
        // using 4 splitting planes to rule out intersections
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        return this.clampPoint(point, $04ce9c8dcd7d39f0$var$_vector$4).distanceTo(point);
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
const $04ce9c8dcd7d39f0$var$_startP = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_startEnd = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$e0ba6359f1954fd3 {
    constructor(start = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(), end = new $04ce9c8dcd7d39f0$export$64b5c384219d3699()){
        this.start = start;
        this.end = end;
    }
    set(start, end) {
        this.start.copy(start);
        this.end.copy(end);
        return this;
    }
    copy(line) {
        this.start.copy(line.start);
        this.end.copy(line.end);
        return this;
    }
    getCenter(target) {
        return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
        return target.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(t, target) {
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
        $04ce9c8dcd7d39f0$var$_startP.subVectors(point, this.start);
        $04ce9c8dcd7d39f0$var$_startEnd.subVectors(this.end, this.start);
        const startEnd2 = $04ce9c8dcd7d39f0$var$_startEnd.dot($04ce9c8dcd7d39f0$var$_startEnd);
        const startEnd_startP = $04ce9c8dcd7d39f0$var$_startEnd.dot($04ce9c8dcd7d39f0$var$_startP);
        let t = startEnd_startP / startEnd2;
        if (clampToLine) t = $04ce9c8dcd7d39f0$var$clamp(t, 0, 1);
        return t;
    }
    closestPointToPoint(point, clampToLine, target) {
        const t = this.closestPointToPointParameter(point, clampToLine);
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
        this.start.applyMatrix4(matrix);
        this.end.applyMatrix4(matrix);
        return this;
    }
    equals(line) {
        return line.start.equals(this.start) && line.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $04ce9c8dcd7d39f0$var$_vector$3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$4b14638ffdd81e68 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(light, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "SpotLightHelper";
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        const positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let i = 0, j = 1, l = 32; i < l; i++, j++){
            const p1 = i / l * Math.PI * 2;
            const p2 = j / l * Math.PI * 2;
            positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
        }
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(positions, 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        this.cone = new $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604(geometry, material);
        this.add(this.cone);
        this.update();
    }
    dispose() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        const coneLength = this.light.distance ? this.light.distance : 1000;
        const coneWidth = coneLength * Math.tan(this.light.angle);
        this.cone.scale.set(coneWidth, coneWidth, coneLength);
        $04ce9c8dcd7d39f0$var$_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt($04ce9c8dcd7d39f0$var$_vector$3);
        if (this.color !== undefined) this.cone.material.color.set(this.color);
        else this.cone.material.color.copy(this.light.color);
    }
}
const $04ce9c8dcd7d39f0$var$_vector$2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_boneMatrix = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
const $04ce9c8dcd7d39f0$var$_matrixWorldInv = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$2ae72fc923e5eb5();
class $04ce9c8dcd7d39f0$export$5277df3c9e732259 extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(object){
        const bones = $04ce9c8dcd7d39f0$var$getBoneList(object);
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        const vertices = [];
        const colors = [];
        const color1 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0, 0, 1);
        const color2 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0, 1, 0);
        for(let i = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                vertices.push(0, 0, 0);
                vertices.push(0, 0, 0);
                colors.push(color1.r, color1.g, color1.b);
                colors.push(color2.r, color2.g, color2.b);
            }
        }
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(colors, 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            vertexColors: true,
            depthTest: false,
            depthWrite: false,
            toneMapped: false,
            transparent: true
        });
        super(geometry, material);
        this.isSkeletonHelper = true;
        this.type = "SkeletonHelper";
        this.root = object;
        this.bones = bones;
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
        const bones = this.bones;
        const geometry = this.geometry;
        const position = geometry.getAttribute("position");
        $04ce9c8dcd7d39f0$var$_matrixWorldInv.copy(this.root.matrixWorld).invert();
        for(let i = 0, j = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                $04ce9c8dcd7d39f0$var$_boneMatrix.multiplyMatrices($04ce9c8dcd7d39f0$var$_matrixWorldInv, bone.matrixWorld);
                $04ce9c8dcd7d39f0$var$_vector$2.setFromMatrixPosition($04ce9c8dcd7d39f0$var$_boneMatrix);
                position.setXYZ(j, $04ce9c8dcd7d39f0$var$_vector$2.x, $04ce9c8dcd7d39f0$var$_vector$2.y, $04ce9c8dcd7d39f0$var$_vector$2.z);
                $04ce9c8dcd7d39f0$var$_boneMatrix.multiplyMatrices($04ce9c8dcd7d39f0$var$_matrixWorldInv, bone.parent.matrixWorld);
                $04ce9c8dcd7d39f0$var$_vector$2.setFromMatrixPosition($04ce9c8dcd7d39f0$var$_boneMatrix);
                position.setXYZ(j + 1, $04ce9c8dcd7d39f0$var$_vector$2.x, $04ce9c8dcd7d39f0$var$_vector$2.y, $04ce9c8dcd7d39f0$var$_vector$2.z);
                j += 2;
            }
        }
        geometry.getAttribute("position").needsUpdate = true;
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function $04ce9c8dcd7d39f0$var$getBoneList(object) {
    const boneList = [];
    if (object.isBone === true) boneList.push(object);
    for(let i = 0; i < object.children.length; i++)boneList.push.apply(boneList, $04ce9c8dcd7d39f0$var$getBoneList(object.children[i]));
    return boneList;
}
class $04ce9c8dcd7d39f0$export$9a9291685b9e4023 extends $04ce9c8dcd7d39f0$export$e176487c05830cc5 {
    constructor(light, sphereSize, color){
        const geometry = new $04ce9c8dcd7d39f0$export$1b417fc3b307a251(sphereSize, 4, 2);
        const material = new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        super(geometry, material);
        this.light = light;
        this.color = color;
        this.type = "PointLightHelper";
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.update();
    /*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/ }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        if (this.color !== undefined) this.material.color.set(this.color);
        else this.material.color.copy(this.light.color);
    /*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/ }
}
const $04ce9c8dcd7d39f0$var$_vector$1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_color1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
const $04ce9c8dcd7d39f0$var$_color2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
class $04ce9c8dcd7d39f0$export$8dca15f13f4f8172 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(light, size, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "HemisphereLightHelper";
        const geometry = new $04ce9c8dcd7d39f0$export$1954e2b809fe361e(size);
        geometry.rotateY(Math.PI * 0.5);
        this.material = new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        if (this.color === undefined) this.material.vertexColors = true;
        const position = geometry.getAttribute("position");
        const colors = new Float32Array(position.count * 3);
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(colors, 3));
        this.add(new $04ce9c8dcd7d39f0$export$e176487c05830cc5(geometry, this.material));
        this.update();
    }
    dispose() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
    update() {
        const mesh = this.children[0];
        if (this.color !== undefined) this.material.color.set(this.color);
        else {
            const colors = mesh.geometry.getAttribute("color");
            $04ce9c8dcd7d39f0$var$_color1.copy(this.light.color);
            $04ce9c8dcd7d39f0$var$_color2.copy(this.light.groundColor);
            for(let i = 0, l = colors.count; i < l; i++){
                const color = i < l / 2 ? $04ce9c8dcd7d39f0$var$_color1 : $04ce9c8dcd7d39f0$var$_color2;
                colors.setXYZ(i, color.r, color.g, color.b);
            }
            colors.needsUpdate = true;
        }
        this.light.updateWorldMatrix(true, false);
        mesh.lookAt($04ce9c8dcd7d39f0$var$_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}
class $04ce9c8dcd7d39f0$export$3875d39926561055 extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888){
        color1 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color1);
        color2 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color2);
        const center = divisions / 2;
        const step = size / divisions;
        const halfSize = size / 2;
        const vertices = [], colors = [];
        for(let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step){
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i === center ? color1 : color2;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(colors, 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "GridHelper";
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class $04ce9c8dcd7d39f0$export$361430a10f533cd3 extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888){
        color1 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color1);
        color2 = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(color2);
        const vertices = [];
        const colors = [];
        // create the sectors
        if (sectors > 1) for(let i = 0; i < sectors; i++){
            const v = i / sectors * (Math.PI * 2);
            const x = Math.sin(v) * radius;
            const z = Math.cos(v) * radius;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            const color = i & 1 ? color1 : color2;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
        }
        // create the rings
        for(let i = 0; i < rings; i++){
            const color = i & 1 ? color1 : color2;
            const r = radius - radius / rings * i;
            for(let j = 0; j < divisions; j++){
                // first vertex
                let v = j / divisions * (Math.PI * 2);
                let x = Math.sin(v) * r;
                let z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
                // second vertex
                v = (j + 1) / divisions * (Math.PI * 2);
                x = Math.sin(v) * r;
                z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
            }
        }
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(colors, 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "PolarGridHelper";
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
const $04ce9c8dcd7d39f0$var$_v1 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v2 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_v3 = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
class $04ce9c8dcd7d39f0$export$f8e434dc14203e7d extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    constructor(light, size, color){
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "DirectionalLightHelper";
        if (size === undefined) size = 1;
        let geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd([
            -size,
            size,
            0,
            size,
            size,
            0,
            size,
            -size,
            0,
            -size,
            -size,
            0,
            -size,
            size,
            0
        ], 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        this.lightPlane = new $04ce9c8dcd7d39f0$export$17d680238e50603e(geometry, material);
        this.add(this.lightPlane);
        geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        this.targetLine = new $04ce9c8dcd7d39f0$export$17d680238e50603e(geometry, material);
        this.add(this.targetLine);
        this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        $04ce9c8dcd7d39f0$var$_v1.setFromMatrixPosition(this.light.matrixWorld);
        $04ce9c8dcd7d39f0$var$_v2.setFromMatrixPosition(this.light.target.matrixWorld);
        $04ce9c8dcd7d39f0$var$_v3.subVectors($04ce9c8dcd7d39f0$var$_v2, $04ce9c8dcd7d39f0$var$_v1);
        this.lightPlane.lookAt($04ce9c8dcd7d39f0$var$_v2);
        if (this.color !== undefined) {
            this.lightPlane.material.color.set(this.color);
            this.targetLine.material.color.set(this.color);
        } else {
            this.lightPlane.material.color.copy(this.light.color);
            this.targetLine.material.color.copy(this.light.color);
        }
        this.targetLine.lookAt($04ce9c8dcd7d39f0$var$_v2);
        this.targetLine.scale.z = $04ce9c8dcd7d39f0$var$_v3.length();
    }
}
const $04ce9c8dcd7d39f0$var$_vector = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
const $04ce9c8dcd7d39f0$var$_camera = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$79f141de891a5fed();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */ class $04ce9c8dcd7d39f0$export$ed8e93f853cd795 extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(camera){
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            color: 0xffffff,
            vertexColors: true,
            toneMapped: false
        });
        const vertices = [];
        const colors = [];
        const pointMap = {};
        // near
        addLine("n1", "n2");
        addLine("n2", "n4");
        addLine("n4", "n3");
        addLine("n3", "n1");
        // far
        addLine("f1", "f2");
        addLine("f2", "f4");
        addLine("f4", "f3");
        addLine("f3", "f1");
        // sides
        addLine("n1", "f1");
        addLine("n2", "f2");
        addLine("n3", "f3");
        addLine("n4", "f4");
        // cone
        addLine("p", "n1");
        addLine("p", "n2");
        addLine("p", "n3");
        addLine("p", "n4");
        // up
        addLine("u1", "u2");
        addLine("u2", "u3");
        addLine("u3", "u1");
        // target
        addLine("c", "t");
        addLine("p", "c");
        // cross
        addLine("cn1", "cn2");
        addLine("cn3", "cn4");
        addLine("cf1", "cf2");
        addLine("cf3", "cf4");
        function addLine(a, b) {
            addPoint(a);
            addPoint(b);
        }
        function addPoint(id) {
            vertices.push(0, 0, 0);
            colors.push(0, 0, 0);
            if (pointMap[id] === undefined) pointMap[id] = [];
            pointMap[id].push(vertices.length / 3 - 1);
        }
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(colors, 3));
        super(geometry, material);
        this.type = "CameraHelper";
        this.camera = camera;
        if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
        this.matrix = camera.matrixWorld;
        this.matrixAutoUpdate = false;
        this.pointMap = pointMap;
        this.update();
        // colors
        const colorFrustum = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffaa00);
        const colorCone = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xff0000);
        const colorUp = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x00aaff);
        const colorTarget = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0xffffff);
        const colorCross = new $04ce9c8dcd7d39f0$export$892596cec99bc70e(0x333333);
        this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
    }
    setColors(frustum, cone, up, target, cross) {
        const geometry = this.geometry;
        const colorAttribute = geometry.getAttribute("color");
        // near
        colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2
        colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4
        colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3
        colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1
        // far
        colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2
        colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4
        colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3
        colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1
        // sides
        colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1
        colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2
        colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3
        colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4
        // cone
        colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1
        colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2
        colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3
        colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4
        // up
        colorAttribute.setXYZ(32, up.r, up.g, up.b);
        colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2
        colorAttribute.setXYZ(34, up.r, up.g, up.b);
        colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3
        colorAttribute.setXYZ(36, up.r, up.g, up.b);
        colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1
        // target
        colorAttribute.setXYZ(38, target.r, target.g, target.b);
        colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t
        colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c
        // cross
        colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2
        colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4
        colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2
        colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4
        colorAttribute.needsUpdate = true;
    }
    update() {
        const geometry = this.geometry;
        const pointMap = this.pointMap;
        const w = 1, h = 1;
        // we need just camera projection matrix inverse
        // world matrix must be identity
        $04ce9c8dcd7d39f0$var$_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
        // center / target
        $04ce9c8dcd7d39f0$var$setPoint("c", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, 0, -1);
        $04ce9c8dcd7d39f0$var$setPoint("t", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, 0, 1);
        // near
        $04ce9c8dcd7d39f0$var$setPoint("n1", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, -h, -1);
        $04ce9c8dcd7d39f0$var$setPoint("n2", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, -h, -1);
        $04ce9c8dcd7d39f0$var$setPoint("n3", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, h, -1);
        $04ce9c8dcd7d39f0$var$setPoint("n4", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, h, -1);
        // far
        $04ce9c8dcd7d39f0$var$setPoint("f1", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, -h, 1);
        $04ce9c8dcd7d39f0$var$setPoint("f2", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, -h, 1);
        $04ce9c8dcd7d39f0$var$setPoint("f3", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, h, 1);
        $04ce9c8dcd7d39f0$var$setPoint("f4", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, h, 1);
        // up
        $04ce9c8dcd7d39f0$var$setPoint("u1", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w * 0.7, h * 1.1, -1);
        $04ce9c8dcd7d39f0$var$setPoint("u2", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w * 0.7, h * 1.1, -1);
        $04ce9c8dcd7d39f0$var$setPoint("u3", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, h * 2, -1);
        // cross
        $04ce9c8dcd7d39f0$var$setPoint("cf1", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, 0, 1);
        $04ce9c8dcd7d39f0$var$setPoint("cf2", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, 0, 1);
        $04ce9c8dcd7d39f0$var$setPoint("cf3", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, -h, 1);
        $04ce9c8dcd7d39f0$var$setPoint("cf4", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, h, 1);
        $04ce9c8dcd7d39f0$var$setPoint("cn1", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, -w, 0, -1);
        $04ce9c8dcd7d39f0$var$setPoint("cn2", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, w, 0, -1);
        $04ce9c8dcd7d39f0$var$setPoint("cn3", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, -h, -1);
        $04ce9c8dcd7d39f0$var$setPoint("cn4", pointMap, geometry, $04ce9c8dcd7d39f0$var$_camera, 0, h, -1);
        geometry.getAttribute("position").needsUpdate = true;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function $04ce9c8dcd7d39f0$var$setPoint(point, pointMap, geometry, camera, x, y, z) {
    $04ce9c8dcd7d39f0$var$_vector.set(x, y, z).unproject(camera);
    const points = pointMap[point];
    if (points !== undefined) {
        const position = geometry.getAttribute("position");
        for(let i = 0, l = points.length; i < l; i++)position.setXYZ(points[i], $04ce9c8dcd7d39f0$var$_vector.x, $04ce9c8dcd7d39f0$var$_vector.y, $04ce9c8dcd7d39f0$var$_vector.z);
    }
}
const $04ce9c8dcd7d39f0$var$_box = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$6f7d5a9418ab2aa3();
class $04ce9c8dcd7d39f0$export$38a664cc862a6a9d extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(object, color = 0xffff00){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = new Float32Array(24);
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setIndex(new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(positions, 3));
        super(geometry, new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.object = object;
        this.type = "BoxHelper";
        this.matrixAutoUpdate = false;
        this.update();
    }
    update(object) {
        if (object !== undefined) console.warn("THREE.BoxHelper: .update() has no longer arguments.");
        if (this.object !== undefined) $04ce9c8dcd7d39f0$var$_box.setFromObject(this.object);
        if ($04ce9c8dcd7d39f0$var$_box.isEmpty()) return;
        const min = $04ce9c8dcd7d39f0$var$_box.min;
        const max = $04ce9c8dcd7d39f0$var$_box.max;
        /*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/ const position = this.geometry.attributes.position;
        const array = position.array;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        this.geometry.computeBoundingSphere();
    }
    setFromObject(object) {
        this.object = object;
        this.update();
        return this;
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.object = source.object;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class $04ce9c8dcd7d39f0$export$ce39f4bb96c9a290 extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(box, color = 0xffff00){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ];
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setIndex(new $04ce9c8dcd7d39f0$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(positions, 3));
        super(geometry, new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.box = box;
        this.type = "Box3Helper";
        this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(force) {
        const box = this.box;
        if (box.isEmpty()) return;
        box.getCenter(this.position);
        box.getSize(this.scale);
        this.scale.multiplyScalar(0.5);
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class $04ce9c8dcd7d39f0$export$a34fe8156c66e5d7 extends $04ce9c8dcd7d39f0$export$17d680238e50603e {
    constructor(plane, size = 1, hex = 0xffff00){
        const color = hex;
        const positions = [
            1,
            -1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0
        ];
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(positions, 3));
        geometry.computeBoundingSphere();
        super(geometry, new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.type = "PlaneHelper";
        this.plane = plane;
        this.size = size;
        const positions2 = [
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0
        ];
        const geometry2 = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry2.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(positions2, 3));
        geometry2.computeBoundingSphere();
        this.add(new $04ce9c8dcd7d39f0$export$e176487c05830cc5(geometry2, new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5({
            color: color,
            opacity: 0.2,
            transparent: true,
            depthWrite: false,
            toneMapped: false
        })));
    }
    updateMatrixWorld(force) {
        this.position.set(0, 0, 0);
        this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
        this.lookAt(this.plane.normal);
        this.translateZ(-this.plane.constant);
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
}
const $04ce9c8dcd7d39f0$var$_axis = /*@__PURE__*/ new $04ce9c8dcd7d39f0$export$64b5c384219d3699();
let $04ce9c8dcd7d39f0$var$_lineGeometry, $04ce9c8dcd7d39f0$var$_coneGeometry;
class $04ce9c8dcd7d39f0$export$a3008e7bd8d2cbe7 extends $04ce9c8dcd7d39f0$export$e4dd07dff30cc924 {
    // dir is assumed to be normalized
    constructor(dir = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 1), origin = new $04ce9c8dcd7d39f0$export$64b5c384219d3699(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2){
        super();
        this.type = "ArrowHelper";
        if ($04ce9c8dcd7d39f0$var$_lineGeometry === undefined) {
            $04ce9c8dcd7d39f0$var$_lineGeometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
            $04ce9c8dcd7d39f0$var$_lineGeometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3));
            $04ce9c8dcd7d39f0$var$_coneGeometry = new $04ce9c8dcd7d39f0$export$68f745719dbe5198(0, 0.5, 1, 5, 1);
            $04ce9c8dcd7d39f0$var$_coneGeometry.translate(0, -0.5, 0);
        }
        this.position.copy(origin);
        this.line = new $04ce9c8dcd7d39f0$export$17d680238e50603e($04ce9c8dcd7d39f0$var$_lineGeometry, new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.line.matrixAutoUpdate = false;
        this.add(this.line);
        this.cone = new $04ce9c8dcd7d39f0$export$e176487c05830cc5($04ce9c8dcd7d39f0$var$_coneGeometry, new $04ce9c8dcd7d39f0$export$55cbcc9b622fe1f5({
            color: color,
            toneMapped: false
        }));
        this.cone.matrixAutoUpdate = false;
        this.add(this.cone);
        this.setDirection(dir);
        this.setLength(length, headLength, headWidth);
    }
    setDirection(dir) {
        // dir is assumed to be normalized
        if (dir.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
        else if (dir.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            $04ce9c8dcd7d39f0$var$_axis.set(dir.z, 0, -dir.x).normalize();
            const radians = Math.acos(dir.y);
            this.quaternion.setFromAxisAngle($04ce9c8dcd7d39f0$var$_axis, radians);
        }
    }
    setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
        this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
        this.line.updateMatrix();
        this.cone.scale.set(headWidth, headLength, headWidth);
        this.cone.position.y = length;
        this.cone.updateMatrix();
    }
    setColor(color) {
        this.line.material.color.set(color);
        this.cone.material.color.set(color);
    }
    copy(source) {
        super.copy(source, false);
        this.line.copy(source.line);
        this.cone.copy(source.cone);
        return this;
    }
    dispose() {
        this.line.geometry.dispose();
        this.line.material.dispose();
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
}
class $04ce9c8dcd7d39f0$export$6c8303f35b8578fd extends $04ce9c8dcd7d39f0$export$ff1ed10fedfdd604 {
    constructor(size = 1){
        const vertices = [
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size
        ];
        const colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
        ];
        const geometry = new $04ce9c8dcd7d39f0$export$b7be63a67df8959();
        geometry.setAttribute("position", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $04ce9c8dcd7d39f0$export$cbe7a62641830ebd(colors, 3));
        const material = new $04ce9c8dcd7d39f0$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = "AxesHelper";
    }
    setColors(xAxisColor, yAxisColor, zAxisColor) {
        const color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
        const array = this.geometry.attributes.color.array;
        color.set(xAxisColor);
        color.toArray(array, 0);
        color.toArray(array, 3);
        color.set(yAxisColor);
        color.toArray(array, 6);
        color.toArray(array, 9);
        color.set(zAxisColor);
        color.toArray(array, 12);
        color.toArray(array, 15);
        this.geometry.attributes.color.needsUpdate = true;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class $04ce9c8dcd7d39f0$export$148534a3c727230b {
    constructor(){
        this.type = "ShapePath";
        this.color = new $04ce9c8dcd7d39f0$export$892596cec99bc70e();
        this.subPaths = [];
        this.currentPath = null;
    }
    moveTo(x, y) {
        this.currentPath = new $04ce9c8dcd7d39f0$export$4b2950bdac9b6ee9();
        this.subPaths.push(this.currentPath);
        this.currentPath.moveTo(x, y);
        return this;
    }
    lineTo(x, y) {
        this.currentPath.lineTo(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
        return this;
    }
    splineThru(pts) {
        this.currentPath.splineThru(pts);
        return this;
    }
    toShapes(isCCW) {
        function toShapesNoHoles(inSubpaths) {
            const shapes = [];
            for(let i = 0, l = inSubpaths.length; i < l; i++){
                const tmpPath = inSubpaths[i];
                const tmpShape = new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa();
                tmpShape.curves = tmpPath.curves;
                shapes.push(tmpShape);
            }
            return shapes;
        }
        function isPointInsidePolygon(inPt, inPolygon) {
            const polyLen = inPolygon.length;
            // inPt on polygon contour => immediate success    or
            // toggling of inside/outside at every single! intersection point of an edge
            //  with the horizontal line through inPt, left of inPt
            //  not counting lowerY endpoints of edges and whole edges on that line
            let inside = false;
            for(let p = polyLen - 1, q = 0; q < polyLen; p = q++){
                let edgeLowPt = inPolygon[p];
                let edgeHighPt = inPolygon[q];
                let edgeDx = edgeHighPt.x - edgeLowPt.x;
                let edgeDy = edgeHighPt.y - edgeLowPt.y;
                if (Math.abs(edgeDy) > Number.EPSILON) {
                    // not parallel
                    if (edgeDy < 0) {
                        edgeLowPt = inPolygon[q];
                        edgeDx = -edgeDx;
                        edgeHighPt = inPolygon[p];
                        edgeDy = -edgeDy;
                    }
                    if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                    if (inPt.y === edgeLowPt.y) {
                        if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                    // continue;				// no intersection or edgeLowPt => doesn't count !!!
                    } else {
                        const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                        if (perpEdge === 0) return true; // inPt is on contour ?
                        if (perpEdge < 0) continue;
                        inside = !inside; // true intersection left of inPt
                    }
                } else {
                    // parallel or collinear
                    if (inPt.y !== edgeLowPt.y) continue; // parallel
                    // edge lies on the same horizontal line as inPt
                    if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
                // continue;
                }
            }
            return inside;
        }
        const isClockWise = $04ce9c8dcd7d39f0$export$96bdf6d9c66d7ba8.isClockWise;
        const subPaths = this.subPaths;
        if (subPaths.length === 0) return [];
        let solid, tmpPath, tmpShape;
        const shapes = [];
        if (subPaths.length === 1) {
            tmpPath = subPaths[0];
            tmpShape = new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa();
            tmpShape.curves = tmpPath.curves;
            shapes.push(tmpShape);
            return shapes;
        }
        let holesFirst = !isClockWise(subPaths[0].getPoints());
        holesFirst = isCCW ? !holesFirst : holesFirst;
        // console.log("Holes first", holesFirst);
        const betterShapeHoles = [];
        const newShapes = [];
        let newShapeHoles = [];
        let mainIdx = 0;
        let tmpPoints;
        newShapes[mainIdx] = undefined;
        newShapeHoles[mainIdx] = [];
        for(let i = 0, l = subPaths.length; i < l; i++){
            tmpPath = subPaths[i];
            tmpPoints = tmpPath.getPoints();
            solid = isClockWise(tmpPoints);
            solid = isCCW ? !solid : solid;
            if (solid) {
                if (!holesFirst && newShapes[mainIdx]) mainIdx++;
                newShapes[mainIdx] = {
                    s: new $04ce9c8dcd7d39f0$export$6428a7f2611ef1fa(),
                    p: tmpPoints
                };
                newShapes[mainIdx].s.curves = tmpPath.curves;
                if (holesFirst) mainIdx++;
                newShapeHoles[mainIdx] = [];
            //console.log('cw', i);
            } else newShapeHoles[mainIdx].push({
                h: tmpPath,
                p: tmpPoints[0]
            });
        }
        // only Holes? -> probably all Shapes with wrong orientation
        if (!newShapes[0]) return toShapesNoHoles(subPaths);
        if (newShapes.length > 1) {
            let ambiguous = false;
            let toChange = 0;
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++){
                const sho = newShapeHoles[sIdx];
                for(let hIdx = 0; hIdx < sho.length; hIdx++){
                    const ho = sho[hIdx];
                    let hole_unassigned = true;
                    for(let s2Idx = 0; s2Idx < newShapes.length; s2Idx++)if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                        if (sIdx !== s2Idx) toChange++;
                        if (hole_unassigned) {
                            hole_unassigned = false;
                            betterShapeHoles[s2Idx].push(ho);
                        } else ambiguous = true;
                    }
                    if (hole_unassigned) betterShapeHoles[sIdx].push(ho);
                }
            }
            if (toChange > 0 && ambiguous === false) newShapeHoles = betterShapeHoles;
        }
        let tmpHoles;
        for(let i = 0, il = newShapes.length; i < il; i++){
            tmpShape = newShapes[i].s;
            shapes.push(tmpShape);
            tmpHoles = newShapeHoles[i];
            for(let j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape.holes.push(tmpHoles[j].h);
        }
        //console.log("shape", shapes);
        return shapes;
    }
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: $04ce9c8dcd7d39f0$export$3545e07a80636437
    }
}));
if (typeof window !== "undefined") {
    if (window.__THREE__) console.warn("WARNING: Multiple instances of Three.js being imported.");
    else window.__THREE__ = $04ce9c8dcd7d39f0$export$3545e07a80636437;
}


var $d76f6d4dfc9a3307$exports = {};
"use strict";
var $d76f6d4dfc9a3307$var$__create = Object.create;
var $d76f6d4dfc9a3307$var$__defProp = Object.defineProperty;
var $d76f6d4dfc9a3307$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;
var $d76f6d4dfc9a3307$var$__getOwnPropNames = Object.getOwnPropertyNames;
var $d76f6d4dfc9a3307$var$__getProtoOf = Object.getPrototypeOf;
var $d76f6d4dfc9a3307$var$__hasOwnProp = Object.prototype.hasOwnProperty;
var $d76f6d4dfc9a3307$var$__commonJS = (cb, mod)=>function __require() {
        return mod || (0, cb[$d76f6d4dfc9a3307$var$__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
var $d76f6d4dfc9a3307$var$__export = (target, all)=>{
    for(var name2 in all)$d76f6d4dfc9a3307$var$__defProp(target, name2, {
        get: all[name2],
        enumerable: true
    });
};
var $d76f6d4dfc9a3307$var$__copyProps = (to, from3, except, desc)=>{
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
        for (let key of $d76f6d4dfc9a3307$var$__getOwnPropNames(from3))if (!$d76f6d4dfc9a3307$var$__hasOwnProp.call(to, key) && key !== except) $d76f6d4dfc9a3307$var$__defProp(to, key, {
            get: ()=>from3[key],
            enumerable: !(desc = $d76f6d4dfc9a3307$var$__getOwnPropDesc(from3, key)) || desc.enumerable
        });
    }
    return to;
};
var $d76f6d4dfc9a3307$var$__toESM = (mod, isNodeMode, target)=>(target = mod != null ? $d76f6d4dfc9a3307$var$__create($d76f6d4dfc9a3307$var$__getProtoOf(mod)) : {}, $d76f6d4dfc9a3307$var$__copyProps(isNodeMode || !mod || !mod.__esModule ? $d76f6d4dfc9a3307$var$__defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
var $d76f6d4dfc9a3307$var$__toCommonJS = (mod)=>$d76f6d4dfc9a3307$var$__copyProps($d76f6d4dfc9a3307$var$__defProp({}, "__esModule", {
        value: true
    }), mod);
// ../../node_modules/graphemer/lib/boundaries.js
var $d76f6d4dfc9a3307$var$require_boundaries = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/graphemer/lib/boundaries.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
        var CLUSTER_BREAK;
        (function(CLUSTER_BREAK2) {
            CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
            CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
            CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
            CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
            CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
            CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
            CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
            CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
            CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
            CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
            CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
            CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
        })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
        exports.EXTENDED_PICTOGRAPHIC = 101;
    }
});
// ../../node_modules/graphemer/lib/GraphemerHelper.js
var $d76f6d4dfc9a3307$var$require_GraphemerHelper = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/graphemer/lib/GraphemerHelper.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var boundaries_1 = $d76f6d4dfc9a3307$var$require_boundaries();
        var NotBreak = 0;
        var BreakStart = 1;
        var Break = 2;
        var BreakLastRegional = 3;
        var BreakPenultimateRegional = 4;
        var GraphemerHelper = class {
            static isSurrogate(str, pos) {
                return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
            }
            static codePointAt(str, idx) {
                if (idx === void 0) idx = 0;
                const code2 = str.charCodeAt(idx);
                if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
                    const hi = code2;
                    const low = str.charCodeAt(idx + 1);
                    if (56320 <= low && low <= 57343) return (hi - 55296) * 1024 + (low - 56320) + 65536;
                    return hi;
                }
                if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
                    const hi = str.charCodeAt(idx - 1);
                    const low = code2;
                    if (55296 <= hi && hi <= 56319) return (hi - 55296) * 1024 + (low - 56320) + 65536;
                    return low;
                }
                return code2;
            }
            static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
                const all = [
                    start
                ].concat(mid).concat([
                    end
                ]);
                const allEmoji = [
                    startEmoji
                ].concat(midEmoji).concat([
                    endEmoji
                ]);
                const previous = all[all.length - 2];
                const next = end;
                const nextEmoji = endEmoji;
                const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
                if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
                    return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                }) && [
                    boundaries_1.CLUSTER_BREAK.PREPEND,
                    boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
                ].indexOf(previous) === -1) {
                    if (all.filter(function(c) {
                        return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                    }).length % 2 === 1) return BreakLastRegional;
                    else return BreakPenultimateRegional;
                }
                if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) return NotBreak;
                else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) return BreakStart;
                else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) return BreakStart;
                else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) return NotBreak;
                else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) return NotBreak;
                else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) return NotBreak;
                else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) return NotBreak;
                else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) return NotBreak;
                else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) return NotBreak;
                const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
                if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {
                    return c === boundaries_1.CLUSTER_BREAK.EXTEND;
                }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) return NotBreak;
                if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) return Break;
                if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) return NotBreak;
                return BreakStart;
            }
        };
        exports.default = GraphemerHelper;
    }
});
// ../../node_modules/graphemer/lib/GraphemerIterator.js
var $d76f6d4dfc9a3307$var$require_GraphemerIterator = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/graphemer/lib/GraphemerIterator.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var GraphemerIterator = class {
            constructor(str, nextBreak){
                this._index = 0;
                this._str = str;
                this._nextBreak = nextBreak;
            }
            [Symbol.iterator]() {
                return this;
            }
            next() {
                let brk;
                if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
                    const value = this._str.slice(this._index, brk);
                    this._index = brk;
                    return {
                        value: value,
                        done: false
                    };
                }
                if (this._index < this._str.length) {
                    const value = this._str.slice(this._index);
                    this._index = this._str.length;
                    return {
                        value: value,
                        done: false
                    };
                }
                return {
                    value: void 0,
                    done: true
                };
            }
        };
        exports.default = GraphemerIterator;
    }
});
// ../../node_modules/graphemer/lib/Graphemer.js
var $d76f6d4dfc9a3307$var$require_Graphemer = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/graphemer/lib/Graphemer.js" (exports) {
        "use strict";
        var __importDefault = exports && exports.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                "default": mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var boundaries_1 = $d76f6d4dfc9a3307$var$require_boundaries();
        var GraphemerHelper_1 = __importDefault($d76f6d4dfc9a3307$var$require_GraphemerHelper());
        var GraphemerIterator_1 = __importDefault($d76f6d4dfc9a3307$var$require_GraphemerIterator());
        var Graphemer2 = class {
            static nextBreak(string3, index) {
                if (index === void 0) index = 0;
                if (index < 0) return 0;
                if (index >= string3.length - 1) return string3.length;
                const prevCP = GraphemerHelper_1.default.codePointAt(string3, index);
                const prev = Graphemer2.getGraphemeBreakProperty(prevCP);
                const prevEmoji = Graphemer2.getEmojiProperty(prevCP);
                const mid = [];
                const midEmoji = [];
                for(let i = index + 1; i < string3.length; i++){
                    if (GraphemerHelper_1.default.isSurrogate(string3, i - 1)) continue;
                    const nextCP = GraphemerHelper_1.default.codePointAt(string3, i);
                    const next = Graphemer2.getGraphemeBreakProperty(nextCP);
                    const nextEmoji = Graphemer2.getEmojiProperty(nextCP);
                    if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) return i;
                    mid.push(next);
                    midEmoji.push(nextEmoji);
                }
                return string3.length;
            }
            splitGraphemes(str) {
                const res = [];
                let index = 0;
                let brk;
                while((brk = Graphemer2.nextBreak(str, index)) < str.length){
                    res.push(str.slice(index, brk));
                    index = brk;
                }
                if (index < str.length) res.push(str.slice(index));
                return res;
            }
            iterateGraphemes(str) {
                return new GraphemerIterator_1.default(str, Graphemer2.nextBreak);
            }
            countGraphemes(str) {
                let count = 0;
                let index = 0;
                let brk;
                while((brk = Graphemer2.nextBreak(str, index)) < str.length){
                    index = brk;
                    count++;
                }
                if (index < str.length) count++;
                return count;
            }
            static getGraphemeBreakProperty(code2) {
                if (code2 < 48905) {
                    if (code2 < 44116) {
                        if (code2 < 4141) {
                            if (code2 < 2818) {
                                if (code2 < 2363) {
                                    if (code2 < 1759) {
                                        if (code2 < 1471) {
                                            if (code2 < 127) {
                                                if (code2 < 11) {
                                                    if (code2 < 10) {
                                                        if (0 <= code2 && code2 <= 9) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    } else {
                                                        if (10 === code2) return boundaries_1.CLUSTER_BREAK.LF;
                                                    }
                                                } else {
                                                    if (code2 < 13) {
                                                        if (11 <= code2 && code2 <= 12) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    } else if (code2 < 14) {
                                                        if (13 === code2) return boundaries_1.CLUSTER_BREAK.CR;
                                                    } else {
                                                        if (14 <= code2 && code2 <= 31) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    }
                                                }
                                            } else if (code2 < 768) {
                                                if (code2 < 173) {
                                                    if (127 <= code2 && code2 <= 159) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                } else {
                                                    if (173 === code2) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                }
                                            } else {
                                                if (code2 < 1155) {
                                                    if (768 <= code2 && code2 <= 879) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 1425) {
                                                    if (1155 <= code2 && code2 <= 1161) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (1425 <= code2 && code2 <= 1469) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else {
                                            if (code2 < 1552) {
                                                if (code2 < 1476) {
                                                    if (code2 < 1473) {
                                                        if (1471 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (1473 <= code2 && code2 <= 1474) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else {
                                                    if (code2 < 1479) {
                                                        if (1476 <= code2 && code2 <= 1477) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else if (code2 < 1536) {
                                                        if (1479 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (1536 <= code2 && code2 <= 1541) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                    }
                                                }
                                            } else if (code2 < 1648) {
                                                if (code2 < 1564) {
                                                    if (1552 <= code2 && code2 <= 1562) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 1611) {
                                                    if (1564 === code2) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                } else {
                                                    if (1611 <= code2 && code2 <= 1631) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 1750) {
                                                    if (1648 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 1757) {
                                                    if (1750 <= code2 && code2 <= 1756) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (1757 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                        }
                                    } else {
                                        if (code2 < 2075) {
                                            if (code2 < 1840) {
                                                if (code2 < 1770) {
                                                    if (code2 < 1767) {
                                                        if (1759 <= code2 && code2 <= 1764) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (1767 <= code2 && code2 <= 1768) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else if (code2 < 1807) {
                                                    if (1770 <= code2 && code2 <= 1773) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (1807 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                    if (1809 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else if (code2 < 2027) {
                                                if (code2 < 1958) {
                                                    if (1840 <= code2 && code2 <= 1866) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (1958 <= code2 && code2 <= 1968) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 2045) {
                                                    if (2027 <= code2 && code2 <= 2035) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2070) {
                                                    if (2045 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2070 <= code2 && code2 <= 2073) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 2200) {
                                            if (code2 < 2089) {
                                                if (code2 < 2085) {
                                                    if (2075 <= code2 && code2 <= 2083) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2085 <= code2 && code2 <= 2087) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 2137) {
                                                    if (2089 <= code2 && code2 <= 2093) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2192) {
                                                    if (2137 <= code2 && code2 <= 2139) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2192 <= code2 && code2 <= 2193) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                        } else {
                                            if (code2 < 2275) {
                                                if (code2 < 2250) {
                                                    if (2200 <= code2 && code2 <= 2207) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2274) {
                                                    if (2250 <= code2 && code2 <= 2273) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2274 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            } else if (code2 < 2307) {
                                                if (2275 <= code2 && code2 <= 2306) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (2307 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                if (2362 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    }
                                } else {
                                    if (code2 < 2561) {
                                        if (code2 < 2434) {
                                            if (code2 < 2381) {
                                                if (code2 < 2366) {
                                                    if (2363 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    if (2364 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (code2 < 2369) {
                                                        if (2366 <= code2 && code2 <= 2368) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else if (code2 < 2377) {
                                                        if (2369 <= code2 && code2 <= 2376) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (2377 <= code2 && code2 <= 2380) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            } else if (code2 < 2385) {
                                                if (code2 < 2382) {
                                                    if (2381 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2382 <= code2 && code2 <= 2383) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else {
                                                if (code2 < 2402) {
                                                    if (2385 <= code2 && code2 <= 2391) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2433) {
                                                    if (2402 <= code2 && code2 <= 2403) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2433 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else {
                                            if (code2 < 2503) {
                                                if (code2 < 2494) {
                                                    if (code2 < 2492) {
                                                        if (2434 <= code2 && code2 <= 2435) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else {
                                                        if (2492 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else {
                                                    if (code2 < 2495) {
                                                        if (2494 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else if (code2 < 2497) {
                                                        if (2495 <= code2 && code2 <= 2496) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else {
                                                        if (2497 <= code2 && code2 <= 2500) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            } else if (code2 < 2519) {
                                                if (code2 < 2507) {
                                                    if (2503 <= code2 && code2 <= 2504) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 2509) {
                                                    if (2507 <= code2 && code2 <= 2508) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (2509 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 2530) {
                                                    if (2519 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2558) {
                                                    if (2530 <= code2 && code2 <= 2531) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2558 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    } else if (code2 < 2691) {
                                        if (code2 < 2631) {
                                            if (code2 < 2620) {
                                                if (code2 < 2563) {
                                                    if (2561 <= code2 && code2 <= 2562) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2563 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else {
                                                if (code2 < 2622) {
                                                    if (2620 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2625) {
                                                    if (2622 <= code2 && code2 <= 2624) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (2625 <= code2 && code2 <= 2626) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 2672) {
                                            if (code2 < 2635) {
                                                if (2631 <= code2 && code2 <= 2632) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 2641) {
                                                if (2635 <= code2 && code2 <= 2637) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (2641 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 2677) {
                                                if (2672 <= code2 && code2 <= 2673) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 2689) {
                                                if (2677 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (2689 <= code2 && code2 <= 2690) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 2761) {
                                            if (code2 < 2750) {
                                                if (2691 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                if (2748 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (code2 < 2753) {
                                                    if (2750 <= code2 && code2 <= 2752) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 2759) {
                                                    if (2753 <= code2 && code2 <= 2757) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (2759 <= code2 && code2 <= 2760) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 2786) {
                                            if (code2 < 2763) {
                                                if (2761 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 2765) {
                                                if (2763 <= code2 && code2 <= 2764) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (2765 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 2810) {
                                                if (2786 <= code2 && code2 <= 2787) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 2817) {
                                                if (2810 <= code2 && code2 <= 2815) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (2817 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    }
                                }
                            } else if (code2 < 3315) {
                                if (code2 < 3076) {
                                    if (code2 < 2946) {
                                        if (code2 < 2887) {
                                            if (code2 < 2878) {
                                                if (code2 < 2876) {
                                                    if (2818 <= code2 && code2 <= 2819) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (2876 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 2880) {
                                                    if (2878 <= code2 && code2 <= 2879) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 2881) {
                                                    if (2880 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (2881 <= code2 && code2 <= 2884) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 2893) {
                                            if (code2 < 2891) {
                                                if (2887 <= code2 && code2 <= 2888) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (2891 <= code2 && code2 <= 2892) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 2901) {
                                                if (2893 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 2914) {
                                                if (2901 <= code2 && code2 <= 2903) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (2914 <= code2 && code2 <= 2915) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 3014) {
                                            if (code2 < 3007) {
                                                if (2946 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (3006 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (code2 < 3008) {
                                                    if (3007 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 3009) {
                                                    if (3008 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (3009 <= code2 && code2 <= 3010) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        } else if (code2 < 3031) {
                                            if (code2 < 3018) {
                                                if (3014 <= code2 && code2 <= 3016) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 3021) {
                                                if (3018 <= code2 && code2 <= 3020) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3021 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 3072) {
                                                if (3031 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3073) {
                                                if (3072 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (3073 <= code2 && code2 <= 3075) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    }
                                } else if (code2 < 3262) {
                                    if (code2 < 3146) {
                                        if (code2 < 3134) {
                                            if (3076 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (3132 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code2 < 3137) {
                                                if (3134 <= code2 && code2 <= 3136) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3142) {
                                                if (3137 <= code2 && code2 <= 3140) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3142 <= code2 && code2 <= 3144) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 3201) {
                                        if (code2 < 3157) {
                                            if (3146 <= code2 && code2 <= 3149) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 3170) {
                                            if (3157 <= code2 && code2 <= 3158) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (3170 <= code2 && code2 <= 3171) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 3202) {
                                            if (3201 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 3260) {
                                            if (3202 <= code2 && code2 <= 3203) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (3260 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 3270) {
                                        if (code2 < 3264) {
                                            if (3262 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (3263 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code2 < 3266) {
                                                if (3264 <= code2 && code2 <= 3265) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 3267) {
                                                if (3266 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (3267 <= code2 && code2 <= 3268) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code2 < 3276) {
                                        if (code2 < 3271) {
                                            if (3270 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 3274) {
                                            if (3271 <= code2 && code2 <= 3272) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (3274 <= code2 && code2 <= 3275) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 3285) {
                                            if (3276 <= code2 && code2 <= 3277) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 3298) {
                                            if (3285 <= code2 && code2 <= 3286) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (3298 <= code2 && code2 <= 3299) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 3551) {
                                    if (code2 < 3406) {
                                        if (code2 < 3391) {
                                            if (code2 < 3330) {
                                                if (code2 < 3328) {
                                                    if (3315 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (3328 <= code2 && code2 <= 3329) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 3387) {
                                                    if (3330 <= code2 && code2 <= 3331) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 3390) {
                                                    if (3387 <= code2 && code2 <= 3388) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (3390 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 3398) {
                                            if (code2 < 3393) {
                                                if (3391 <= code2 && code2 <= 3392) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3393 <= code2 && code2 <= 3396) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 3402) {
                                                if (3398 <= code2 && code2 <= 3400) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 3405) {
                                                if (3402 <= code2 && code2 <= 3404) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3405 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 3530) {
                                            if (code2 < 3426) {
                                                if (3406 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                if (3415 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (code2 < 3457) {
                                                    if (3426 <= code2 && code2 <= 3427) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 3458) {
                                                    if (3457 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (3458 <= code2 && code2 <= 3459) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        } else if (code2 < 3538) {
                                            if (code2 < 3535) {
                                                if (3530 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3536) {
                                                if (3535 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (3536 <= code2 && code2 <= 3537) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 3542) {
                                                if (3538 <= code2 && code2 <= 3540) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3544) {
                                                if (3542 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (3544 <= code2 && code2 <= 3550) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    }
                                } else if (code2 < 3893) {
                                    if (code2 < 3655) {
                                        if (code2 < 3633) {
                                            if (code2 < 3570) {
                                                if (3551 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (3570 <= code2 && code2 <= 3571) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 3635) {
                                                if (3633 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3636) {
                                                if (3635 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3636 <= code2 && code2 <= 3642) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 3764) {
                                        if (code2 < 3761) {
                                            if (3655 <= code2 && code2 <= 3662) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (3761 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (3763 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 3784) {
                                            if (3764 <= code2 && code2 <= 3772) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 3864) {
                                            if (3784 <= code2 && code2 <= 3790) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (3864 <= code2 && code2 <= 3865) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 3967) {
                                        if (code2 < 3897) {
                                            if (3893 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (3895 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code2 < 3902) {
                                                if (3897 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 3953) {
                                                if (3902 <= code2 && code2 <= 3903) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (3953 <= code2 && code2 <= 3966) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 3981) {
                                        if (code2 < 3968) {
                                            if (3967 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 3974) {
                                            if (3968 <= code2 && code2 <= 3972) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (3974 <= code2 && code2 <= 3975) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 3993) {
                                            if (3981 <= code2 && code2 <= 3991) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 4038) {
                                            if (3993 <= code2 && code2 <= 4028) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (4038 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            }
                        } else {
                            if (code2 < 7204) {
                                if (code2 < 6448) {
                                    if (code2 < 5938) {
                                        if (code2 < 4226) {
                                            if (code2 < 4157) {
                                                if (code2 < 4146) {
                                                    if (code2 < 4145) {
                                                        if (4141 <= code2 && code2 <= 4144) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (4145 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                } else {
                                                    if (code2 < 4153) {
                                                        if (4146 <= code2 && code2 <= 4151) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else if (code2 < 4155) {
                                                        if (4153 <= code2 && code2 <= 4154) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (4155 <= code2 && code2 <= 4156) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            } else if (code2 < 4184) {
                                                if (code2 < 4182) {
                                                    if (4157 <= code2 && code2 <= 4158) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (4182 <= code2 && code2 <= 4183) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else {
                                                if (code2 < 4190) {
                                                    if (4184 <= code2 && code2 <= 4185) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 4209) {
                                                    if (4190 <= code2 && code2 <= 4192) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (4209 <= code2 && code2 <= 4212) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else {
                                            if (code2 < 4352) {
                                                if (code2 < 4229) {
                                                    if (4226 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    if (4228 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 4237) {
                                                    if (4229 <= code2 && code2 <= 4230) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (4237 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    if (4253 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else if (code2 < 4957) {
                                                if (code2 < 4448) {
                                                    if (4352 <= code2 && code2 <= 4447) return boundaries_1.CLUSTER_BREAK.L;
                                                } else if (code2 < 4520) {
                                                    if (4448 <= code2 && code2 <= 4519) return boundaries_1.CLUSTER_BREAK.V;
                                                } else {
                                                    if (4520 <= code2 && code2 <= 4607) return boundaries_1.CLUSTER_BREAK.T;
                                                }
                                            } else {
                                                if (code2 < 5906) {
                                                    if (4957 <= code2 && code2 <= 4959) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 5909) {
                                                    if (5906 <= code2 && code2 <= 5908) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (5909 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                    } else if (code2 < 6089) {
                                        if (code2 < 6070) {
                                            if (code2 < 5970) {
                                                if (code2 < 5940) {
                                                    if (5938 <= code2 && code2 <= 5939) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (5940 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else {
                                                if (code2 < 6002) {
                                                    if (5970 <= code2 && code2 <= 5971) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 6068) {
                                                    if (6002 <= code2 && code2 <= 6003) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (6068 <= code2 && code2 <= 6069) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 6078) {
                                            if (code2 < 6071) {
                                                if (6070 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (6071 <= code2 && code2 <= 6077) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 6086) {
                                                if (6078 <= code2 && code2 <= 6085) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 6087) {
                                                if (6086 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (6087 <= code2 && code2 <= 6088) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else {
                                        if (code2 < 6277) {
                                            if (code2 < 6155) {
                                                if (code2 < 6109) {
                                                    if (6089 <= code2 && code2 <= 6099) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (6109 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else if (code2 < 6158) {
                                                if (6155 <= code2 && code2 <= 6157) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (6158 === code2) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                if (6159 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 6435) {
                                            if (code2 < 6313) {
                                                if (6277 <= code2 && code2 <= 6278) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 6432) {
                                                if (6313 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (6432 <= code2 && code2 <= 6434) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 6439) {
                                                if (6435 <= code2 && code2 <= 6438) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 6441) {
                                                if (6439 <= code2 && code2 <= 6440) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (6441 <= code2 && code2 <= 6443) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    }
                                } else {
                                    if (code2 < 6971) {
                                        if (code2 < 6744) {
                                            if (code2 < 6681) {
                                                if (code2 < 6451) {
                                                    if (code2 < 6450) {
                                                        if (6448 <= code2 && code2 <= 6449) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else {
                                                        if (6450 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else {
                                                    if (code2 < 6457) {
                                                        if (6451 <= code2 && code2 <= 6456) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else if (code2 < 6679) {
                                                        if (6457 <= code2 && code2 <= 6459) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (6679 <= code2 && code2 <= 6680) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            } else {
                                                if (code2 < 6741) {
                                                    if (code2 < 6683) {
                                                        if (6681 <= code2 && code2 <= 6682) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    } else {
                                                        if (6683 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else if (code2 < 6742) {
                                                    if (6741 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (6742 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    if (6743 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        } else {
                                            if (code2 < 6771) {
                                                if (code2 < 6754) {
                                                    if (code2 < 6752) {
                                                        if (6744 <= code2 && code2 <= 6750) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (6752 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                } else {
                                                    if (code2 < 6757) {
                                                        if (6754 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else if (code2 < 6765) {
                                                        if (6757 <= code2 && code2 <= 6764) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    } else {
                                                        if (6765 <= code2 && code2 <= 6770) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            } else if (code2 < 6912) {
                                                if (code2 < 6783) {
                                                    if (6771 <= code2 && code2 <= 6780) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 6832) {
                                                    if (6783 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (6832 <= code2 && code2 <= 6862) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 6916) {
                                                    if (6912 <= code2 && code2 <= 6915) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 6964) {
                                                    if (6916 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (6964 <= code2 && code2 <= 6970) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    } else if (code2 < 7080) {
                                        if (code2 < 7019) {
                                            if (code2 < 6973) {
                                                if (6971 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                if (6972 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (code2 < 6978) {
                                                    if (6973 <= code2 && code2 <= 6977) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 6979) {
                                                    if (6978 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (6979 <= code2 && code2 <= 6980) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        } else if (code2 < 7073) {
                                            if (code2 < 7040) {
                                                if (7019 <= code2 && code2 <= 7027) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 7042) {
                                                if (7040 <= code2 && code2 <= 7041) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (7042 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 7074) {
                                                if (7073 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 7078) {
                                                if (7074 <= code2 && code2 <= 7077) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (7078 <= code2 && code2 <= 7079) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else {
                                        if (code2 < 7144) {
                                            if (code2 < 7083) {
                                                if (code2 < 7082) {
                                                    if (7080 <= code2 && code2 <= 7081) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (7082 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else if (code2 < 7142) {
                                                if (7083 <= code2 && code2 <= 7085) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (7142 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (7143 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else if (code2 < 7150) {
                                            if (code2 < 7146) {
                                                if (7144 <= code2 && code2 <= 7145) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 7149) {
                                                if (7146 <= code2 && code2 <= 7148) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (7149 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 7151) {
                                                if (7150 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 7154) {
                                                if (7151 <= code2 && code2 <= 7153) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (7154 <= code2 && code2 <= 7155) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    }
                                }
                            } else if (code2 < 43346) {
                                if (code2 < 11647) {
                                    if (code2 < 7415) {
                                        if (code2 < 7380) {
                                            if (code2 < 7220) {
                                                if (code2 < 7212) {
                                                    if (7204 <= code2 && code2 <= 7211) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (7212 <= code2 && code2 <= 7219) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 7222) {
                                                    if (7220 <= code2 && code2 <= 7221) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 7376) {
                                                    if (7222 <= code2 && code2 <= 7223) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (7376 <= code2 && code2 <= 7378) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else {
                                            if (code2 < 7394) {
                                                if (code2 < 7393) {
                                                    if (7380 <= code2 && code2 <= 7392) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (7393 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else if (code2 < 7405) {
                                                if (7394 <= code2 && code2 <= 7400) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (7405 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (7412 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 8205) {
                                            if (code2 < 7616) {
                                                if (code2 < 7416) {
                                                    if (7415 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (7416 <= code2 && code2 <= 7417) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else if (code2 < 8203) {
                                                if (7616 <= code2 && code2 <= 7679) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (8203 === code2) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                if (8204 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 8288) {
                                            if (code2 < 8206) {
                                                if (8205 === code2) return boundaries_1.CLUSTER_BREAK.ZWJ;
                                            } else if (code2 < 8232) {
                                                if (8206 <= code2 && code2 <= 8207) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else {
                                                if (8232 <= code2 && code2 <= 8238) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            }
                                        } else {
                                            if (code2 < 8400) {
                                                if (8288 <= code2 && code2 <= 8303) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else if (code2 < 11503) {
                                                if (8400 <= code2 && code2 <= 8432) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (11503 <= code2 && code2 <= 11505) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    }
                                } else if (code2 < 43043) {
                                    if (code2 < 42612) {
                                        if (code2 < 12330) {
                                            if (code2 < 11744) {
                                                if (11647 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (11744 <= code2 && code2 <= 11775) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 12441) {
                                                if (12330 <= code2 && code2 <= 12335) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 42607) {
                                                if (12441 <= code2 && code2 <= 12442) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (42607 <= code2 && code2 <= 42610) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 43010) {
                                            if (code2 < 42654) {
                                                if (42612 <= code2 && code2 <= 42621) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 42736) {
                                                if (42654 <= code2 && code2 <= 42655) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (42736 <= code2 && code2 <= 42737) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 43014) {
                                            if (43010 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (43014 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (43019 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 43188) {
                                        if (code2 < 43047) {
                                            if (code2 < 43045) {
                                                if (43043 <= code2 && code2 <= 43044) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (43045 <= code2 && code2 <= 43046) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 43052) {
                                                if (43047 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 43136) {
                                                if (43052 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43136 <= code2 && code2 <= 43137) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code2 < 43263) {
                                        if (code2 < 43204) {
                                            if (43188 <= code2 && code2 <= 43203) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 43232) {
                                            if (43204 <= code2 && code2 <= 43205) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (43232 <= code2 && code2 <= 43249) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 43302) {
                                            if (43263 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 43335) {
                                            if (43302 <= code2 && code2 <= 43309) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (43335 <= code2 && code2 <= 43345) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 43698) {
                                    if (code2 < 43493) {
                                        if (code2 < 43444) {
                                            if (code2 < 43392) {
                                                if (code2 < 43360) {
                                                    if (43346 <= code2 && code2 <= 43347) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (43360 <= code2 && code2 <= 43388) return boundaries_1.CLUSTER_BREAK.L;
                                                }
                                            } else if (code2 < 43395) {
                                                if (43392 <= code2 && code2 <= 43394) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43395 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                if (43443 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 43450) {
                                            if (code2 < 43446) {
                                                if (43444 <= code2 && code2 <= 43445) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (43446 <= code2 && code2 <= 43449) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 43452) {
                                                if (43450 <= code2 && code2 <= 43451) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 43454) {
                                                if (43452 <= code2 && code2 <= 43453) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43454 <= code2 && code2 <= 43456) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code2 < 43573) {
                                        if (code2 < 43567) {
                                            if (code2 < 43561) {
                                                if (43493 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43561 <= code2 && code2 <= 43566) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 43569) {
                                                if (43567 <= code2 && code2 <= 43568) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 43571) {
                                                if (43569 <= code2 && code2 <= 43570) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43571 <= code2 && code2 <= 43572) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else {
                                        if (code2 < 43597) {
                                            if (code2 < 43587) {
                                                if (43573 <= code2 && code2 <= 43574) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43587 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (43596 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 43644) {
                                            if (43597 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (43644 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (43696 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 44006) {
                                    if (code2 < 43756) {
                                        if (code2 < 43710) {
                                            if (code2 < 43703) {
                                                if (43698 <= code2 && code2 <= 43700) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (43703 <= code2 && code2 <= 43704) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 43713) {
                                            if (43710 <= code2 && code2 <= 43711) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (43713 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (43755 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code2 < 43766) {
                                        if (code2 < 43758) {
                                            if (43756 <= code2 && code2 <= 43757) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 43765) {
                                            if (43758 <= code2 && code2 <= 43759) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (43765 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 44003) {
                                            if (43766 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 44005) {
                                            if (44003 <= code2 && code2 <= 44004) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (44005 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 44032) {
                                        if (code2 < 44009) {
                                            if (code2 < 44008) {
                                                if (44006 <= code2 && code2 <= 44007) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (44008 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 44012) {
                                            if (44009 <= code2 && code2 <= 44010) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (44012 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (44013 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else if (code2 < 44061) {
                                        if (code2 < 44033) {
                                            if (44032 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 44060) {
                                            if (44033 <= code2 && code2 <= 44059) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (44060 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 44088) {
                                            if (44061 <= code2 && code2 <= 44087) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 44089) {
                                            if (44088 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (44089 <= code2 && code2 <= 44115) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            }
                        }
                    } else if (code2 < 46497) {
                        if (code2 < 45293) {
                            if (code2 < 44704) {
                                if (code2 < 44397) {
                                    if (code2 < 44256) {
                                        if (code2 < 44173) {
                                            if (code2 < 44144) {
                                                if (code2 < 44117) {
                                                    if (44116 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (44117 <= code2 && code2 <= 44143) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 44145) {
                                                    if (44144 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 44172) {
                                                    if (44145 <= code2 && code2 <= 44171) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (44172 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 44201) {
                                            if (code2 < 44200) {
                                                if (44173 <= code2 && code2 <= 44199) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44200 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 44228) {
                                                if (44201 <= code2 && code2 <= 44227) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44229) {
                                                if (44228 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44229 <= code2 && code2 <= 44255) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 44313) {
                                            if (code2 < 44284) {
                                                if (code2 < 44257) {
                                                    if (44256 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (44257 <= code2 && code2 <= 44283) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 44285) {
                                                    if (44284 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 44312) {
                                                    if (44285 <= code2 && code2 <= 44311) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (44312 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 44368) {
                                            if (code2 < 44340) {
                                                if (44313 <= code2 && code2 <= 44339) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44341) {
                                                if (44340 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44341 <= code2 && code2 <= 44367) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 44369) {
                                                if (44368 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 44396) {
                                                if (44369 <= code2 && code2 <= 44395) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44396 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 44537) {
                                    if (code2 < 44480) {
                                        if (code2 < 44425) {
                                            if (code2 < 44424) {
                                                if (44397 <= code2 && code2 <= 44423) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44424 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 44452) {
                                                if (44425 <= code2 && code2 <= 44451) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44453) {
                                                if (44452 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44453 <= code2 && code2 <= 44479) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 44508) {
                                        if (code2 < 44481) {
                                            if (44480 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (44481 <= code2 && code2 <= 44507) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 44509) {
                                            if (44508 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 44536) {
                                            if (44509 <= code2 && code2 <= 44535) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (44536 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 44620) {
                                        if (code2 < 44565) {
                                            if (code2 < 44564) {
                                                if (44537 <= code2 && code2 <= 44563) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44564 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 44592) {
                                                if (44565 <= code2 && code2 <= 44591) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44593) {
                                                if (44592 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44593 <= code2 && code2 <= 44619) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 44649) {
                                        if (code2 < 44621) {
                                            if (44620 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 44648) {
                                            if (44621 <= code2 && code2 <= 44647) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (44648 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 44676) {
                                            if (44649 <= code2 && code2 <= 44675) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 44677) {
                                            if (44676 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (44677 <= code2 && code2 <= 44703) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 44985) {
                                    if (code2 < 44844) {
                                        if (code2 < 44761) {
                                            if (code2 < 44732) {
                                                if (code2 < 44705) {
                                                    if (44704 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (44705 <= code2 && code2 <= 44731) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 44733) {
                                                    if (44732 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 44760) {
                                                    if (44733 <= code2 && code2 <= 44759) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (44760 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 44789) {
                                            if (code2 < 44788) {
                                                if (44761 <= code2 && code2 <= 44787) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44788 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 44816) {
                                                if (44789 <= code2 && code2 <= 44815) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44817) {
                                                if (44816 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44817 <= code2 && code2 <= 44843) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 44901) {
                                            if (code2 < 44872) {
                                                if (code2 < 44845) {
                                                    if (44844 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (44845 <= code2 && code2 <= 44871) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 44873) {
                                                    if (44872 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 44900) {
                                                    if (44873 <= code2 && code2 <= 44899) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (44900 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 44956) {
                                            if (code2 < 44928) {
                                                if (44901 <= code2 && code2 <= 44927) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 44929) {
                                                if (44928 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (44929 <= code2 && code2 <= 44955) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 44957) {
                                                if (44956 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 44984) {
                                                if (44957 <= code2 && code2 <= 44983) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (44984 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 45152) {
                                    if (code2 < 45068) {
                                        if (code2 < 45013) {
                                            if (code2 < 45012) {
                                                if (44985 <= code2 && code2 <= 45011) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (45012 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 45040) {
                                                if (45013 <= code2 && code2 <= 45039) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 45041) {
                                                if (45040 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (45041 <= code2 && code2 <= 45067) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 45097) {
                                        if (code2 < 45069) {
                                            if (45068 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 45096) {
                                            if (45069 <= code2 && code2 <= 45095) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45096 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 45124) {
                                            if (45097 <= code2 && code2 <= 45123) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 45125) {
                                            if (45124 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45125 <= code2 && code2 <= 45151) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 45209) {
                                        if (code2 < 45180) {
                                            if (code2 < 45153) {
                                                if (45152 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (45153 <= code2 && code2 <= 45179) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 45181) {
                                                if (45180 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 45208) {
                                                if (45181 <= code2 && code2 <= 45207) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (45208 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 45264) {
                                        if (code2 < 45236) {
                                            if (45209 <= code2 && code2 <= 45235) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 45237) {
                                            if (45236 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45237 <= code2 && code2 <= 45263) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 45265) {
                                            if (45264 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 45292) {
                                            if (45265 <= code2 && code2 <= 45291) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45292 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            }
                        } else if (code2 < 45908) {
                            if (code2 < 45600) {
                                if (code2 < 45433) {
                                    if (code2 < 45376) {
                                        if (code2 < 45321) {
                                            if (code2 < 45320) {
                                                if (45293 <= code2 && code2 <= 45319) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (45320 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 45348) {
                                                if (45321 <= code2 && code2 <= 45347) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 45349) {
                                                if (45348 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (45349 <= code2 && code2 <= 45375) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 45404) {
                                        if (code2 < 45377) {
                                            if (45376 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45377 <= code2 && code2 <= 45403) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 45405) {
                                            if (45404 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 45432) {
                                            if (45405 <= code2 && code2 <= 45431) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45432 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 45516) {
                                        if (code2 < 45461) {
                                            if (code2 < 45460) {
                                                if (45433 <= code2 && code2 <= 45459) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (45460 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 45488) {
                                                if (45461 <= code2 && code2 <= 45487) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 45489) {
                                                if (45488 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (45489 <= code2 && code2 <= 45515) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 45545) {
                                        if (code2 < 45517) {
                                            if (45516 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 45544) {
                                            if (45517 <= code2 && code2 <= 45543) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45544 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 45572) {
                                            if (45545 <= code2 && code2 <= 45571) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 45573) {
                                            if (45572 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45573 <= code2 && code2 <= 45599) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code2 < 45741) {
                                if (code2 < 45657) {
                                    if (code2 < 45628) {
                                        if (code2 < 45601) {
                                            if (45600 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45601 <= code2 && code2 <= 45627) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 45629) {
                                            if (45628 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 45656) {
                                            if (45629 <= code2 && code2 <= 45655) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45656 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code2 < 45712) {
                                    if (code2 < 45684) {
                                        if (45657 <= code2 && code2 <= 45683) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 45685) {
                                        if (45684 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (45685 <= code2 && code2 <= 45711) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code2 < 45713) {
                                        if (45712 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 45740) {
                                        if (45713 <= code2 && code2 <= 45739) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (45740 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code2 < 45824) {
                                    if (code2 < 45769) {
                                        if (code2 < 45768) {
                                            if (45741 <= code2 && code2 <= 45767) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45768 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 45796) {
                                            if (45769 <= code2 && code2 <= 45795) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 45797) {
                                            if (45796 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (45797 <= code2 && code2 <= 45823) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code2 < 45853) {
                                    if (code2 < 45825) {
                                        if (45824 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 45852) {
                                        if (45825 <= code2 && code2 <= 45851) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (45852 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code2 < 45880) {
                                        if (45853 <= code2 && code2 <= 45879) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 45881) {
                                        if (45880 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (45881 <= code2 && code2 <= 45907) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        } else {
                            if (code2 < 46189) {
                                if (code2 < 46048) {
                                    if (code2 < 45965) {
                                        if (code2 < 45936) {
                                            if (code2 < 45909) {
                                                if (45908 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (45909 <= code2 && code2 <= 45935) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 45937) {
                                                if (45936 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 45964) {
                                                if (45937 <= code2 && code2 <= 45963) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (45964 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 45993) {
                                        if (code2 < 45992) {
                                            if (45965 <= code2 && code2 <= 45991) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (45992 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 46020) {
                                            if (45993 <= code2 && code2 <= 46019) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 46021) {
                                            if (46020 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (46021 <= code2 && code2 <= 46047) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 46105) {
                                        if (code2 < 46076) {
                                            if (code2 < 46049) {
                                                if (46048 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (46049 <= code2 && code2 <= 46075) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 46077) {
                                                if (46076 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 46104) {
                                                if (46077 <= code2 && code2 <= 46103) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (46104 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 46160) {
                                        if (code2 < 46132) {
                                            if (46105 <= code2 && code2 <= 46131) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 46133) {
                                            if (46132 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (46133 <= code2 && code2 <= 46159) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 46161) {
                                            if (46160 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 46188) {
                                            if (46161 <= code2 && code2 <= 46187) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (46188 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            } else if (code2 < 46356) {
                                if (code2 < 46272) {
                                    if (code2 < 46217) {
                                        if (code2 < 46216) {
                                            if (46189 <= code2 && code2 <= 46215) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (46216 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 46244) {
                                            if (46217 <= code2 && code2 <= 46243) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 46245) {
                                            if (46244 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (46245 <= code2 && code2 <= 46271) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code2 < 46301) {
                                    if (code2 < 46273) {
                                        if (46272 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 46300) {
                                        if (46273 <= code2 && code2 <= 46299) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (46300 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code2 < 46328) {
                                        if (46301 <= code2 && code2 <= 46327) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 46329) {
                                        if (46328 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (46329 <= code2 && code2 <= 46355) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code2 < 46413) {
                                    if (code2 < 46384) {
                                        if (code2 < 46357) {
                                            if (46356 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (46357 <= code2 && code2 <= 46383) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 46385) {
                                            if (46384 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 46412) {
                                            if (46385 <= code2 && code2 <= 46411) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (46412 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code2 < 46468) {
                                    if (code2 < 46440) {
                                        if (46413 <= code2 && code2 <= 46439) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 46441) {
                                        if (46440 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (46441 <= code2 && code2 <= 46467) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code2 < 46469) {
                                        if (46468 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 46496) {
                                        if (46469 <= code2 && code2 <= 46495) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (46496 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        }
                    } else {
                        if (code2 < 47701) {
                            if (code2 < 47112) {
                                if (code2 < 46804) {
                                    if (code2 < 46637) {
                                        if (code2 < 46580) {
                                            if (code2 < 46525) {
                                                if (code2 < 46524) {
                                                    if (46497 <= code2 && code2 <= 46523) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (46524 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 46552) {
                                                    if (46525 <= code2 && code2 <= 46551) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 46553) {
                                                    if (46552 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (46553 <= code2 && code2 <= 46579) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 46608) {
                                            if (code2 < 46581) {
                                                if (46580 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (46581 <= code2 && code2 <= 46607) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 46609) {
                                                if (46608 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 46636) {
                                                if (46609 <= code2 && code2 <= 46635) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (46636 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else {
                                        if (code2 < 46720) {
                                            if (code2 < 46665) {
                                                if (code2 < 46664) {
                                                    if (46637 <= code2 && code2 <= 46663) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (46664 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 46692) {
                                                    if (46665 <= code2 && code2 <= 46691) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 46693) {
                                                    if (46692 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (46693 <= code2 && code2 <= 46719) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 46749) {
                                            if (code2 < 46721) {
                                                if (46720 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 46748) {
                                                if (46721 <= code2 && code2 <= 46747) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (46748 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 46776) {
                                                if (46749 <= code2 && code2 <= 46775) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 46777) {
                                                if (46776 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (46777 <= code2 && code2 <= 46803) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    }
                                } else if (code2 < 46945) {
                                    if (code2 < 46861) {
                                        if (code2 < 46832) {
                                            if (code2 < 46805) {
                                                if (46804 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (46805 <= code2 && code2 <= 46831) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 46833) {
                                                if (46832 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 46860) {
                                                if (46833 <= code2 && code2 <= 46859) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (46860 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 46916) {
                                        if (code2 < 46888) {
                                            if (46861 <= code2 && code2 <= 46887) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 46889) {
                                            if (46888 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (46889 <= code2 && code2 <= 46915) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 46917) {
                                            if (46916 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 46944) {
                                            if (46917 <= code2 && code2 <= 46943) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (46944 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 47028) {
                                        if (code2 < 46973) {
                                            if (code2 < 46972) {
                                                if (46945 <= code2 && code2 <= 46971) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (46972 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 47e3) {
                                                if (46973 <= code2 && code2 <= 46999) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47001) {
                                                if (47e3 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47001 <= code2 && code2 <= 47027) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 47057) {
                                        if (code2 < 47029) {
                                            if (47028 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 47056) {
                                            if (47029 <= code2 && code2 <= 47055) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (47056 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 47084) {
                                            if (47057 <= code2 && code2 <= 47083) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 47085) {
                                            if (47084 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (47085 <= code2 && code2 <= 47111) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 47393) {
                                    if (code2 < 47252) {
                                        if (code2 < 47169) {
                                            if (code2 < 47140) {
                                                if (code2 < 47113) {
                                                    if (47112 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (47113 <= code2 && code2 <= 47139) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 47141) {
                                                    if (47140 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 47168) {
                                                    if (47141 <= code2 && code2 <= 47167) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (47168 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 47197) {
                                            if (code2 < 47196) {
                                                if (47169 <= code2 && code2 <= 47195) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47196 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 47224) {
                                                if (47197 <= code2 && code2 <= 47223) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47225) {
                                                if (47224 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47225 <= code2 && code2 <= 47251) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 47309) {
                                            if (code2 < 47280) {
                                                if (code2 < 47253) {
                                                    if (47252 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (47253 <= code2 && code2 <= 47279) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 47281) {
                                                    if (47280 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 47308) {
                                                    if (47281 <= code2 && code2 <= 47307) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (47308 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 47364) {
                                            if (code2 < 47336) {
                                                if (47309 <= code2 && code2 <= 47335) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47337) {
                                                if (47336 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47337 <= code2 && code2 <= 47363) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 47365) {
                                                if (47364 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 47392) {
                                                if (47365 <= code2 && code2 <= 47391) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47392 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 47560) {
                                    if (code2 < 47476) {
                                        if (code2 < 47421) {
                                            if (code2 < 47420) {
                                                if (47393 <= code2 && code2 <= 47419) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47420 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 47448) {
                                                if (47421 <= code2 && code2 <= 47447) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47449) {
                                                if (47448 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47449 <= code2 && code2 <= 47475) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 47505) {
                                        if (code2 < 47477) {
                                            if (47476 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 47504) {
                                            if (47477 <= code2 && code2 <= 47503) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (47504 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 47532) {
                                            if (47505 <= code2 && code2 <= 47531) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 47533) {
                                            if (47532 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (47533 <= code2 && code2 <= 47559) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 47617) {
                                        if (code2 < 47588) {
                                            if (code2 < 47561) {
                                                if (47560 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47561 <= code2 && code2 <= 47587) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 47589) {
                                                if (47588 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 47616) {
                                                if (47589 <= code2 && code2 <= 47615) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47616 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 47672) {
                                        if (code2 < 47644) {
                                            if (47617 <= code2 && code2 <= 47643) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 47645) {
                                            if (47644 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (47645 <= code2 && code2 <= 47671) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 47673) {
                                            if (47672 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 47700) {
                                            if (47673 <= code2 && code2 <= 47699) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (47700 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            }
                        } else if (code2 < 48316) {
                            if (code2 < 48008) {
                                if (code2 < 47841) {
                                    if (code2 < 47784) {
                                        if (code2 < 47729) {
                                            if (code2 < 47728) {
                                                if (47701 <= code2 && code2 <= 47727) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47728 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 47756) {
                                                if (47729 <= code2 && code2 <= 47755) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47757) {
                                                if (47756 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47757 <= code2 && code2 <= 47783) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 47812) {
                                        if (code2 < 47785) {
                                            if (47784 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (47785 <= code2 && code2 <= 47811) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 47813) {
                                            if (47812 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 47840) {
                                            if (47813 <= code2 && code2 <= 47839) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (47840 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 47924) {
                                        if (code2 < 47869) {
                                            if (code2 < 47868) {
                                                if (47841 <= code2 && code2 <= 47867) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (47868 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 47896) {
                                                if (47869 <= code2 && code2 <= 47895) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 47897) {
                                                if (47896 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (47897 <= code2 && code2 <= 47923) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 47953) {
                                        if (code2 < 47925) {
                                            if (47924 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 47952) {
                                            if (47925 <= code2 && code2 <= 47951) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (47952 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 47980) {
                                            if (47953 <= code2 && code2 <= 47979) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 47981) {
                                            if (47980 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (47981 <= code2 && code2 <= 48007) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code2 < 48149) {
                                if (code2 < 48065) {
                                    if (code2 < 48036) {
                                        if (code2 < 48009) {
                                            if (48008 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48009 <= code2 && code2 <= 48035) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 48037) {
                                            if (48036 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 48064) {
                                            if (48037 <= code2 && code2 <= 48063) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48064 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code2 < 48120) {
                                    if (code2 < 48092) {
                                        if (48065 <= code2 && code2 <= 48091) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 48093) {
                                        if (48092 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (48093 <= code2 && code2 <= 48119) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code2 < 48121) {
                                        if (48120 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 48148) {
                                        if (48121 <= code2 && code2 <= 48147) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (48148 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code2 < 48232) {
                                    if (code2 < 48177) {
                                        if (code2 < 48176) {
                                            if (48149 <= code2 && code2 <= 48175) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48176 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 48204) {
                                            if (48177 <= code2 && code2 <= 48203) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 48205) {
                                            if (48204 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48205 <= code2 && code2 <= 48231) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code2 < 48261) {
                                    if (code2 < 48233) {
                                        if (48232 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 48260) {
                                        if (48233 <= code2 && code2 <= 48259) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (48260 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code2 < 48288) {
                                        if (48261 <= code2 && code2 <= 48287) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 48289) {
                                        if (48288 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (48289 <= code2 && code2 <= 48315) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        } else {
                            if (code2 < 48597) {
                                if (code2 < 48456) {
                                    if (code2 < 48373) {
                                        if (code2 < 48344) {
                                            if (code2 < 48317) {
                                                if (48316 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (48317 <= code2 && code2 <= 48343) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 48345) {
                                                if (48344 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 48372) {
                                                if (48345 <= code2 && code2 <= 48371) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (48372 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 48401) {
                                        if (code2 < 48400) {
                                            if (48373 <= code2 && code2 <= 48399) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48400 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 48428) {
                                            if (48401 <= code2 && code2 <= 48427) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 48429) {
                                            if (48428 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48429 <= code2 && code2 <= 48455) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 48513) {
                                        if (code2 < 48484) {
                                            if (code2 < 48457) {
                                                if (48456 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (48457 <= code2 && code2 <= 48483) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 48485) {
                                                if (48484 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 48512) {
                                                if (48485 <= code2 && code2 <= 48511) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (48512 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 48568) {
                                        if (code2 < 48540) {
                                            if (48513 <= code2 && code2 <= 48539) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 48541) {
                                            if (48540 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48541 <= code2 && code2 <= 48567) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 48569) {
                                            if (48568 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 48596) {
                                            if (48569 <= code2 && code2 <= 48595) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48596 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            } else if (code2 < 48764) {
                                if (code2 < 48680) {
                                    if (code2 < 48625) {
                                        if (code2 < 48624) {
                                            if (48597 <= code2 && code2 <= 48623) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48624 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 48652) {
                                            if (48625 <= code2 && code2 <= 48651) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 48653) {
                                            if (48652 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48653 <= code2 && code2 <= 48679) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code2 < 48709) {
                                    if (code2 < 48681) {
                                        if (48680 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 48708) {
                                        if (48681 <= code2 && code2 <= 48707) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (48708 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code2 < 48736) {
                                        if (48709 <= code2 && code2 <= 48735) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 48737) {
                                        if (48736 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (48737 <= code2 && code2 <= 48763) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code2 < 48821) {
                                    if (code2 < 48792) {
                                        if (code2 < 48765) {
                                            if (48764 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (48765 <= code2 && code2 <= 48791) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 48793) {
                                            if (48792 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 48820) {
                                            if (48793 <= code2 && code2 <= 48819) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (48820 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code2 < 48876) {
                                    if (code2 < 48848) {
                                        if (48821 <= code2 && code2 <= 48847) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code2 < 48849) {
                                        if (48848 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        if (48849 <= code2 && code2 <= 48875) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code2 < 48877) {
                                        if (48876 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code2 < 48904) {
                                        if (48877 <= code2 && code2 <= 48903) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        if (48904 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (code2 < 53720) {
                        if (code2 < 51312) {
                            if (code2 < 50108) {
                                if (code2 < 49493) {
                                    if (code2 < 49212) {
                                        if (code2 < 49045) {
                                            if (code2 < 48988) {
                                                if (code2 < 48933) {
                                                    if (code2 < 48932) {
                                                        if (48905 <= code2 && code2 <= 48931) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (48932 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 48960) {
                                                        if (48933 <= code2 && code2 <= 48959) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 48961) {
                                                        if (48960 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (48961 <= code2 && code2 <= 48987) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 49016) {
                                                if (code2 < 48989) {
                                                    if (48988 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (48989 <= code2 && code2 <= 49015) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 49017) {
                                                    if (49016 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49044) {
                                                    if (49017 <= code2 && code2 <= 49043) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49044 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else {
                                            if (code2 < 49128) {
                                                if (code2 < 49073) {
                                                    if (code2 < 49072) {
                                                        if (49045 <= code2 && code2 <= 49071) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (49072 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 49100) {
                                                        if (49073 <= code2 && code2 <= 49099) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 49101) {
                                                        if (49100 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (49101 <= code2 && code2 <= 49127) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 49157) {
                                                if (code2 < 49129) {
                                                    if (49128 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49156) {
                                                    if (49129 <= code2 && code2 <= 49155) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49156 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 49184) {
                                                    if (49157 <= code2 && code2 <= 49183) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 49185) {
                                                    if (49184 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49185 <= code2 && code2 <= 49211) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                    } else if (code2 < 49352) {
                                        if (code2 < 49269) {
                                            if (code2 < 49240) {
                                                if (code2 < 49213) {
                                                    if (49212 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49213 <= code2 && code2 <= 49239) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 49241) {
                                                    if (49240 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49268) {
                                                    if (49241 <= code2 && code2 <= 49267) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49268 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 49297) {
                                            if (code2 < 49296) {
                                                if (49269 <= code2 && code2 <= 49295) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (49296 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 49324) {
                                                if (49297 <= code2 && code2 <= 49323) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 49325) {
                                                if (49324 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (49325 <= code2 && code2 <= 49351) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 49409) {
                                            if (code2 < 49380) {
                                                if (code2 < 49353) {
                                                    if (49352 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49353 <= code2 && code2 <= 49379) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 49381) {
                                                    if (49380 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49408) {
                                                    if (49381 <= code2 && code2 <= 49407) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49408 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 49464) {
                                            if (code2 < 49436) {
                                                if (49409 <= code2 && code2 <= 49435) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 49437) {
                                                if (49436 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (49437 <= code2 && code2 <= 49463) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 49465) {
                                                if (49464 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 49492) {
                                                if (49465 <= code2 && code2 <= 49491) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (49492 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else {
                                    if (code2 < 49800) {
                                        if (code2 < 49633) {
                                            if (code2 < 49576) {
                                                if (code2 < 49521) {
                                                    if (code2 < 49520) {
                                                        if (49493 <= code2 && code2 <= 49519) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (49520 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 49548) {
                                                        if (49521 <= code2 && code2 <= 49547) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 49549) {
                                                        if (49548 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (49549 <= code2 && code2 <= 49575) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 49604) {
                                                if (code2 < 49577) {
                                                    if (49576 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49577 <= code2 && code2 <= 49603) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 49605) {
                                                    if (49604 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49632) {
                                                    if (49605 <= code2 && code2 <= 49631) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49632 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else {
                                            if (code2 < 49716) {
                                                if (code2 < 49661) {
                                                    if (code2 < 49660) {
                                                        if (49633 <= code2 && code2 <= 49659) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (49660 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 49688) {
                                                        if (49661 <= code2 && code2 <= 49687) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 49689) {
                                                        if (49688 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (49689 <= code2 && code2 <= 49715) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 49745) {
                                                if (code2 < 49717) {
                                                    if (49716 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49744) {
                                                    if (49717 <= code2 && code2 <= 49743) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49744 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 49772) {
                                                    if (49745 <= code2 && code2 <= 49771) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 49773) {
                                                    if (49772 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49773 <= code2 && code2 <= 49799) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                    } else if (code2 < 49941) {
                                        if (code2 < 49857) {
                                            if (code2 < 49828) {
                                                if (code2 < 49801) {
                                                    if (49800 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49801 <= code2 && code2 <= 49827) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 49829) {
                                                    if (49828 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 49856) {
                                                    if (49829 <= code2 && code2 <= 49855) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49856 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 49912) {
                                            if (code2 < 49884) {
                                                if (49857 <= code2 && code2 <= 49883) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 49885) {
                                                if (49884 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (49885 <= code2 && code2 <= 49911) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 49913) {
                                                if (49912 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 49940) {
                                                if (49913 <= code2 && code2 <= 49939) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (49940 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else {
                                        if (code2 < 50024) {
                                            if (code2 < 49969) {
                                                if (code2 < 49968) {
                                                    if (49941 <= code2 && code2 <= 49967) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (49968 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 49996) {
                                                    if (49969 <= code2 && code2 <= 49995) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 49997) {
                                                    if (49996 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (49997 <= code2 && code2 <= 50023) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 50053) {
                                            if (code2 < 50025) {
                                                if (50024 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 50052) {
                                                if (50025 <= code2 && code2 <= 50051) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50052 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 50080) {
                                                if (50053 <= code2 && code2 <= 50079) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 50081) {
                                                if (50080 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50081 <= code2 && code2 <= 50107) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    }
                                }
                            } else if (code2 < 50697) {
                                if (code2 < 50389) {
                                    if (code2 < 50248) {
                                        if (code2 < 50165) {
                                            if (code2 < 50136) {
                                                if (code2 < 50109) {
                                                    if (50108 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (50109 <= code2 && code2 <= 50135) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 50137) {
                                                    if (50136 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 50164) {
                                                    if (50137 <= code2 && code2 <= 50163) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (50164 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 50193) {
                                            if (code2 < 50192) {
                                                if (50165 <= code2 && code2 <= 50191) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50192 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 50220) {
                                                if (50193 <= code2 && code2 <= 50219) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 50221) {
                                                if (50220 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50221 <= code2 && code2 <= 50247) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 50305) {
                                            if (code2 < 50276) {
                                                if (code2 < 50249) {
                                                    if (50248 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (50249 <= code2 && code2 <= 50275) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 50277) {
                                                    if (50276 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 50304) {
                                                    if (50277 <= code2 && code2 <= 50303) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (50304 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 50360) {
                                            if (code2 < 50332) {
                                                if (50305 <= code2 && code2 <= 50331) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 50333) {
                                                if (50332 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50333 <= code2 && code2 <= 50359) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 50361) {
                                                if (50360 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 50388) {
                                                if (50361 <= code2 && code2 <= 50387) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50388 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 50556) {
                                    if (code2 < 50472) {
                                        if (code2 < 50417) {
                                            if (code2 < 50416) {
                                                if (50389 <= code2 && code2 <= 50415) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50416 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 50444) {
                                                if (50417 <= code2 && code2 <= 50443) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 50445) {
                                                if (50444 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50445 <= code2 && code2 <= 50471) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 50501) {
                                        if (code2 < 50473) {
                                            if (50472 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 50500) {
                                            if (50473 <= code2 && code2 <= 50499) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (50500 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 50528) {
                                            if (50501 <= code2 && code2 <= 50527) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 50529) {
                                            if (50528 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (50529 <= code2 && code2 <= 50555) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 50613) {
                                        if (code2 < 50584) {
                                            if (code2 < 50557) {
                                                if (50556 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50557 <= code2 && code2 <= 50583) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 50585) {
                                                if (50584 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 50612) {
                                                if (50585 <= code2 && code2 <= 50611) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50612 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 50668) {
                                        if (code2 < 50640) {
                                            if (50613 <= code2 && code2 <= 50639) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 50641) {
                                            if (50640 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (50641 <= code2 && code2 <= 50667) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 50669) {
                                            if (50668 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 50696) {
                                            if (50669 <= code2 && code2 <= 50695) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (50696 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 51004) {
                                    if (code2 < 50837) {
                                        if (code2 < 50780) {
                                            if (code2 < 50725) {
                                                if (code2 < 50724) {
                                                    if (50697 <= code2 && code2 <= 50723) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (50724 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 50752) {
                                                    if (50725 <= code2 && code2 <= 50751) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 50753) {
                                                    if (50752 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (50753 <= code2 && code2 <= 50779) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 50808) {
                                            if (code2 < 50781) {
                                                if (50780 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50781 <= code2 && code2 <= 50807) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 50809) {
                                                if (50808 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 50836) {
                                                if (50809 <= code2 && code2 <= 50835) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50836 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else {
                                        if (code2 < 50920) {
                                            if (code2 < 50865) {
                                                if (code2 < 50864) {
                                                    if (50837 <= code2 && code2 <= 50863) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (50864 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 50892) {
                                                    if (50865 <= code2 && code2 <= 50891) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 50893) {
                                                    if (50892 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (50893 <= code2 && code2 <= 50919) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 50949) {
                                            if (code2 < 50921) {
                                                if (50920 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 50948) {
                                                if (50921 <= code2 && code2 <= 50947) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (50948 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 50976) {
                                                if (50949 <= code2 && code2 <= 50975) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 50977) {
                                                if (50976 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (50977 <= code2 && code2 <= 51003) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    }
                                } else if (code2 < 51145) {
                                    if (code2 < 51061) {
                                        if (code2 < 51032) {
                                            if (code2 < 51005) {
                                                if (51004 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (51005 <= code2 && code2 <= 51031) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 51033) {
                                                if (51032 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 51060) {
                                                if (51033 <= code2 && code2 <= 51059) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (51060 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 51116) {
                                        if (code2 < 51088) {
                                            if (51061 <= code2 && code2 <= 51087) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 51089) {
                                            if (51088 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (51089 <= code2 && code2 <= 51115) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 51117) {
                                            if (51116 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 51144) {
                                            if (51117 <= code2 && code2 <= 51143) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (51144 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 51228) {
                                        if (code2 < 51173) {
                                            if (code2 < 51172) {
                                                if (51145 <= code2 && code2 <= 51171) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (51172 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 51200) {
                                                if (51173 <= code2 && code2 <= 51199) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 51201) {
                                                if (51200 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (51201 <= code2 && code2 <= 51227) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 51257) {
                                        if (code2 < 51229) {
                                            if (51228 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 51256) {
                                            if (51229 <= code2 && code2 <= 51255) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (51256 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 51284) {
                                            if (51257 <= code2 && code2 <= 51283) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 51285) {
                                            if (51284 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (51285 <= code2 && code2 <= 51311) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            }
                        } else {
                            if (code2 < 52516) {
                                if (code2 < 51901) {
                                    if (code2 < 51593) {
                                        if (code2 < 51452) {
                                            if (code2 < 51369) {
                                                if (code2 < 51340) {
                                                    if (code2 < 51313) {
                                                        if (51312 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (51313 <= code2 && code2 <= 51339) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                } else {
                                                    if (code2 < 51341) {
                                                        if (51340 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else if (code2 < 51368) {
                                                        if (51341 <= code2 && code2 <= 51367) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (51368 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            } else if (code2 < 51397) {
                                                if (code2 < 51396) {
                                                    if (51369 <= code2 && code2 <= 51395) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (51396 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 51424) {
                                                    if (51397 <= code2 && code2 <= 51423) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 51425) {
                                                    if (51424 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (51425 <= code2 && code2 <= 51451) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else {
                                            if (code2 < 51509) {
                                                if (code2 < 51480) {
                                                    if (code2 < 51453) {
                                                        if (51452 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (51453 <= code2 && code2 <= 51479) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                } else {
                                                    if (code2 < 51481) {
                                                        if (51480 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else if (code2 < 51508) {
                                                        if (51481 <= code2 && code2 <= 51507) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (51508 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            } else if (code2 < 51564) {
                                                if (code2 < 51536) {
                                                    if (51509 <= code2 && code2 <= 51535) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 51537) {
                                                    if (51536 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (51537 <= code2 && code2 <= 51563) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 51565) {
                                                    if (51564 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 51592) {
                                                    if (51565 <= code2 && code2 <= 51591) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (51592 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                    } else if (code2 < 51760) {
                                        if (code2 < 51676) {
                                            if (code2 < 51621) {
                                                if (code2 < 51620) {
                                                    if (51593 <= code2 && code2 <= 51619) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (51620 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 51648) {
                                                    if (51621 <= code2 && code2 <= 51647) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 51649) {
                                                    if (51648 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (51649 <= code2 && code2 <= 51675) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 51705) {
                                            if (code2 < 51677) {
                                                if (51676 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 51704) {
                                                if (51677 <= code2 && code2 <= 51703) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (51704 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 51732) {
                                                if (51705 <= code2 && code2 <= 51731) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 51733) {
                                                if (51732 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (51733 <= code2 && code2 <= 51759) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 51817) {
                                            if (code2 < 51788) {
                                                if (code2 < 51761) {
                                                    if (51760 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (51761 <= code2 && code2 <= 51787) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 51789) {
                                                    if (51788 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 51816) {
                                                    if (51789 <= code2 && code2 <= 51815) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (51816 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 51872) {
                                            if (code2 < 51844) {
                                                if (51817 <= code2 && code2 <= 51843) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 51845) {
                                                if (51844 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (51845 <= code2 && code2 <= 51871) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 51873) {
                                                if (51872 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 51900) {
                                                if (51873 <= code2 && code2 <= 51899) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (51900 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else {
                                    if (code2 < 52208) {
                                        if (code2 < 52041) {
                                            if (code2 < 51984) {
                                                if (code2 < 51929) {
                                                    if (code2 < 51928) {
                                                        if (51901 <= code2 && code2 <= 51927) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (51928 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 51956) {
                                                        if (51929 <= code2 && code2 <= 51955) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 51957) {
                                                        if (51956 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (51957 <= code2 && code2 <= 51983) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 52012) {
                                                if (code2 < 51985) {
                                                    if (51984 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (51985 <= code2 && code2 <= 52011) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 52013) {
                                                    if (52012 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 52040) {
                                                    if (52013 <= code2 && code2 <= 52039) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52040 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else {
                                            if (code2 < 52124) {
                                                if (code2 < 52069) {
                                                    if (code2 < 52068) {
                                                        if (52041 <= code2 && code2 <= 52067) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else {
                                                        if (52068 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                } else {
                                                    if (code2 < 52096) {
                                                        if (52069 <= code2 && code2 <= 52095) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    } else if (code2 < 52097) {
                                                        if (52096 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                    } else {
                                                        if (52097 <= code2 && code2 <= 52123) return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            } else if (code2 < 52153) {
                                                if (code2 < 52125) {
                                                    if (52124 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 52152) {
                                                    if (52125 <= code2 && code2 <= 52151) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52152 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 52180) {
                                                    if (52153 <= code2 && code2 <= 52179) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 52181) {
                                                    if (52180 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (52181 <= code2 && code2 <= 52207) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                    } else if (code2 < 52349) {
                                        if (code2 < 52265) {
                                            if (code2 < 52236) {
                                                if (code2 < 52209) {
                                                    if (52208 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (52209 <= code2 && code2 <= 52235) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 52237) {
                                                    if (52236 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 52264) {
                                                    if (52237 <= code2 && code2 <= 52263) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52264 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 52320) {
                                            if (code2 < 52292) {
                                                if (52265 <= code2 && code2 <= 52291) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 52293) {
                                                if (52292 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52293 <= code2 && code2 <= 52319) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 52321) {
                                                if (52320 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 52348) {
                                                if (52321 <= code2 && code2 <= 52347) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (52348 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else {
                                        if (code2 < 52432) {
                                            if (code2 < 52377) {
                                                if (code2 < 52376) {
                                                    if (52349 <= code2 && code2 <= 52375) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52376 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 52404) {
                                                    if (52377 <= code2 && code2 <= 52403) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 52405) {
                                                    if (52404 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (52405 <= code2 && code2 <= 52431) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 52461) {
                                            if (code2 < 52433) {
                                                if (52432 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 52460) {
                                                if (52433 <= code2 && code2 <= 52459) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (52460 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 52488) {
                                                if (52461 <= code2 && code2 <= 52487) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 52489) {
                                                if (52488 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52489 <= code2 && code2 <= 52515) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    }
                                }
                            } else if (code2 < 53105) {
                                if (code2 < 52797) {
                                    if (code2 < 52656) {
                                        if (code2 < 52573) {
                                            if (code2 < 52544) {
                                                if (code2 < 52517) {
                                                    if (52516 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (52517 <= code2 && code2 <= 52543) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 52545) {
                                                    if (52544 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 52572) {
                                                    if (52545 <= code2 && code2 <= 52571) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52572 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 52601) {
                                            if (code2 < 52600) {
                                                if (52573 <= code2 && code2 <= 52599) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (52600 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 52628) {
                                                if (52601 <= code2 && code2 <= 52627) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 52629) {
                                                if (52628 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52629 <= code2 && code2 <= 52655) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 52713) {
                                            if (code2 < 52684) {
                                                if (code2 < 52657) {
                                                    if (52656 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (52657 <= code2 && code2 <= 52683) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 52685) {
                                                    if (52684 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 52712) {
                                                    if (52685 <= code2 && code2 <= 52711) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (52712 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 52768) {
                                            if (code2 < 52740) {
                                                if (52713 <= code2 && code2 <= 52739) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 52741) {
                                                if (52740 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52741 <= code2 && code2 <= 52767) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 52769) {
                                                if (52768 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 52796) {
                                                if (52769 <= code2 && code2 <= 52795) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (52796 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 52964) {
                                    if (code2 < 52880) {
                                        if (code2 < 52825) {
                                            if (code2 < 52824) {
                                                if (52797 <= code2 && code2 <= 52823) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (52824 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 52852) {
                                                if (52825 <= code2 && code2 <= 52851) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 52853) {
                                                if (52852 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52853 <= code2 && code2 <= 52879) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 52909) {
                                        if (code2 < 52881) {
                                            if (52880 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 52908) {
                                            if (52881 <= code2 && code2 <= 52907) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (52908 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 52936) {
                                            if (52909 <= code2 && code2 <= 52935) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 52937) {
                                            if (52936 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (52937 <= code2 && code2 <= 52963) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 53021) {
                                        if (code2 < 52992) {
                                            if (code2 < 52965) {
                                                if (52964 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (52965 <= code2 && code2 <= 52991) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 52993) {
                                                if (52992 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 53020) {
                                                if (52993 <= code2 && code2 <= 53019) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53020 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 53076) {
                                        if (code2 < 53048) {
                                            if (53021 <= code2 && code2 <= 53047) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 53049) {
                                            if (53048 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (53049 <= code2 && code2 <= 53075) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 53077) {
                                            if (53076 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 53104) {
                                            if (53077 <= code2 && code2 <= 53103) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (53104 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 53412) {
                                    if (code2 < 53245) {
                                        if (code2 < 53188) {
                                            if (code2 < 53133) {
                                                if (code2 < 53132) {
                                                    if (53105 <= code2 && code2 <= 53131) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (53132 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 53160) {
                                                    if (53133 <= code2 && code2 <= 53159) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 53161) {
                                                    if (53160 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (53161 <= code2 && code2 <= 53187) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 53216) {
                                            if (code2 < 53189) {
                                                if (53188 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53189 <= code2 && code2 <= 53215) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 53217) {
                                                if (53216 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 53244) {
                                                if (53217 <= code2 && code2 <= 53243) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53244 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else {
                                        if (code2 < 53328) {
                                            if (code2 < 53273) {
                                                if (code2 < 53272) {
                                                    if (53245 <= code2 && code2 <= 53271) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (53272 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            } else {
                                                if (code2 < 53300) {
                                                    if (53273 <= code2 && code2 <= 53299) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else if (code2 < 53301) {
                                                    if (53300 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (53301 <= code2 && code2 <= 53327) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        } else if (code2 < 53357) {
                                            if (code2 < 53329) {
                                                if (53328 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 53356) {
                                                if (53329 <= code2 && code2 <= 53355) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53356 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 53384) {
                                                if (53357 <= code2 && code2 <= 53383) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 53385) {
                                                if (53384 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53385 <= code2 && code2 <= 53411) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    }
                                } else if (code2 < 53553) {
                                    if (code2 < 53469) {
                                        if (code2 < 53440) {
                                            if (code2 < 53413) {
                                                if (53412 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53413 <= code2 && code2 <= 53439) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 53441) {
                                                if (53440 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 53468) {
                                                if (53441 <= code2 && code2 <= 53467) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53468 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 53524) {
                                        if (code2 < 53496) {
                                            if (53469 <= code2 && code2 <= 53495) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 53497) {
                                            if (53496 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (53497 <= code2 && code2 <= 53523) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 53525) {
                                            if (53524 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 53552) {
                                            if (53525 <= code2 && code2 <= 53551) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (53552 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 53636) {
                                        if (code2 < 53581) {
                                            if (code2 < 53580) {
                                                if (53553 <= code2 && code2 <= 53579) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53580 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 53608) {
                                                if (53581 <= code2 && code2 <= 53607) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 53609) {
                                                if (53608 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53609 <= code2 && code2 <= 53635) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 53665) {
                                        if (code2 < 53637) {
                                            if (53636 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 53664) {
                                            if (53637 <= code2 && code2 <= 53663) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (53664 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 53692) {
                                            if (53665 <= code2 && code2 <= 53691) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 53693) {
                                            if (53692 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (53693 <= code2 && code2 <= 53719) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            }
                        }
                    } else if (code2 < 70459) {
                        if (code2 < 54897) {
                            if (code2 < 54308) {
                                if (code2 < 54001) {
                                    if (code2 < 53860) {
                                        if (code2 < 53777) {
                                            if (code2 < 53748) {
                                                if (code2 < 53721) {
                                                    if (53720 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (53721 <= code2 && code2 <= 53747) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 53749) {
                                                    if (53748 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 53776) {
                                                    if (53749 <= code2 && code2 <= 53775) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (53776 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 53805) {
                                            if (code2 < 53804) {
                                                if (53777 <= code2 && code2 <= 53803) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (53804 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 53832) {
                                                if (53805 <= code2 && code2 <= 53831) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 53833) {
                                                if (53832 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53833 <= code2 && code2 <= 53859) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 53917) {
                                            if (code2 < 53888) {
                                                if (code2 < 53861) {
                                                    if (53860 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (53861 <= code2 && code2 <= 53887) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 53889) {
                                                    if (53888 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 53916) {
                                                    if (53889 <= code2 && code2 <= 53915) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (53916 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 53972) {
                                            if (code2 < 53944) {
                                                if (53917 <= code2 && code2 <= 53943) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 53945) {
                                                if (53944 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (53945 <= code2 && code2 <= 53971) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 53973) {
                                                if (53972 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 54e3) {
                                                if (53973 <= code2 && code2 <= 53999) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54e3 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 54141) {
                                    if (code2 < 54084) {
                                        if (code2 < 54029) {
                                            if (code2 < 54028) {
                                                if (54001 <= code2 && code2 <= 54027) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54028 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 54056) {
                                                if (54029 <= code2 && code2 <= 54055) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54057) {
                                                if (54056 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54057 <= code2 && code2 <= 54083) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 54112) {
                                        if (code2 < 54085) {
                                            if (54084 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (54085 <= code2 && code2 <= 54111) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 54113) {
                                            if (54112 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 54140) {
                                            if (54113 <= code2 && code2 <= 54139) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (54140 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 54224) {
                                        if (code2 < 54169) {
                                            if (code2 < 54168) {
                                                if (54141 <= code2 && code2 <= 54167) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54168 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 54196) {
                                                if (54169 <= code2 && code2 <= 54195) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54197) {
                                                if (54196 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54197 <= code2 && code2 <= 54223) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 54253) {
                                        if (code2 < 54225) {
                                            if (54224 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 54252) {
                                            if (54225 <= code2 && code2 <= 54251) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (54252 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 54280) {
                                            if (54253 <= code2 && code2 <= 54279) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 54281) {
                                            if (54280 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (54281 <= code2 && code2 <= 54307) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 54589) {
                                    if (code2 < 54448) {
                                        if (code2 < 54365) {
                                            if (code2 < 54336) {
                                                if (code2 < 54309) {
                                                    if (54308 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (54309 <= code2 && code2 <= 54335) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 54337) {
                                                    if (54336 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 54364) {
                                                    if (54337 <= code2 && code2 <= 54363) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (54364 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 54393) {
                                            if (code2 < 54392) {
                                                if (54365 <= code2 && code2 <= 54391) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54392 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 54420) {
                                                if (54393 <= code2 && code2 <= 54419) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54421) {
                                                if (54420 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54421 <= code2 && code2 <= 54447) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else {
                                        if (code2 < 54505) {
                                            if (code2 < 54476) {
                                                if (code2 < 54449) {
                                                    if (54448 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else {
                                                    if (54449 <= code2 && code2 <= 54475) return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            } else {
                                                if (code2 < 54477) {
                                                    if (54476 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                } else if (code2 < 54504) {
                                                    if (54477 <= code2 && code2 <= 54503) return boundaries_1.CLUSTER_BREAK.LVT;
                                                } else {
                                                    if (54504 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        } else if (code2 < 54560) {
                                            if (code2 < 54532) {
                                                if (54505 <= code2 && code2 <= 54531) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54533) {
                                                if (54532 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54533 <= code2 && code2 <= 54559) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 54561) {
                                                if (54560 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 54588) {
                                                if (54561 <= code2 && code2 <= 54587) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54588 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    }
                                } else if (code2 < 54756) {
                                    if (code2 < 54672) {
                                        if (code2 < 54617) {
                                            if (code2 < 54616) {
                                                if (54589 <= code2 && code2 <= 54615) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54616 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 54644) {
                                                if (54617 <= code2 && code2 <= 54643) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54645) {
                                                if (54644 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54645 <= code2 && code2 <= 54671) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 54701) {
                                        if (code2 < 54673) {
                                            if (54672 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 54700) {
                                            if (54673 <= code2 && code2 <= 54699) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (54700 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 54728) {
                                            if (54701 <= code2 && code2 <= 54727) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 54729) {
                                            if (54728 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (54729 <= code2 && code2 <= 54755) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code2 < 54813) {
                                        if (code2 < 54784) {
                                            if (code2 < 54757) {
                                                if (54756 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54757 <= code2 && code2 <= 54783) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code2 < 54785) {
                                                if (54784 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code2 < 54812) {
                                                if (54785 <= code2 && code2 <= 54811) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54812 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code2 < 54868) {
                                        if (code2 < 54840) {
                                            if (54813 <= code2 && code2 <= 54839) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 54841) {
                                            if (54840 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (54841 <= code2 && code2 <= 54867) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 54869) {
                                            if (54868 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 54896) {
                                            if (54869 <= code2 && code2 <= 54895) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (54896 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            }
                        } else if (code2 < 69632) {
                            if (code2 < 55216) {
                                if (code2 < 55037) {
                                    if (code2 < 54980) {
                                        if (code2 < 54925) {
                                            if (code2 < 54924) {
                                                if (54897 <= code2 && code2 <= 54923) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (54924 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 54952) {
                                                if (54925 <= code2 && code2 <= 54951) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 54953) {
                                                if (54952 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (54953 <= code2 && code2 <= 54979) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 55008) {
                                        if (code2 < 54981) {
                                            if (54980 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (54981 <= code2 && code2 <= 55007) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code2 < 55009) {
                                            if (55008 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 55036) {
                                            if (55009 <= code2 && code2 <= 55035) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (55036 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code2 < 55120) {
                                        if (code2 < 55065) {
                                            if (code2 < 55064) {
                                                if (55037 <= code2 && code2 <= 55063) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                if (55064 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code2 < 55092) {
                                                if (55065 <= code2 && code2 <= 55091) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code2 < 55093) {
                                                if (55092 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                if (55093 <= code2 && code2 <= 55119) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code2 < 55149) {
                                        if (code2 < 55121) {
                                            if (55120 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code2 < 55148) {
                                            if (55121 <= code2 && code2 <= 55147) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            if (55148 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code2 < 55176) {
                                            if (55149 <= code2 && code2 <= 55175) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code2 < 55177) {
                                            if (55176 === code2) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            if (55177 <= code2 && code2 <= 55203) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code2 < 68097) {
                                if (code2 < 65279) {
                                    if (code2 < 64286) {
                                        if (code2 < 55243) {
                                            if (55216 <= code2 && code2 <= 55238) return boundaries_1.CLUSTER_BREAK.V;
                                        } else {
                                            if (55243 <= code2 && code2 <= 55291) return boundaries_1.CLUSTER_BREAK.T;
                                        }
                                    } else {
                                        if (code2 < 65024) {
                                            if (64286 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 65056) {
                                            if (65024 <= code2 && code2 <= 65039) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (65056 <= code2 && code2 <= 65071) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 66045) {
                                    if (code2 < 65438) {
                                        if (65279 === code2) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else if (code2 < 65520) {
                                        if (65438 <= code2 && code2 <= 65439) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (65520 <= code2 && code2 <= 65531) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                } else {
                                    if (code2 < 66272) {
                                        if (66045 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 66422) {
                                        if (66272 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (66422 <= code2 && code2 <= 66426) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code2 < 68325) {
                                    if (code2 < 68108) {
                                        if (code2 < 68101) {
                                            if (68097 <= code2 && code2 <= 68099) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (68101 <= code2 && code2 <= 68102) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 68152) {
                                            if (68108 <= code2 && code2 <= 68111) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 68159) {
                                            if (68152 <= code2 && code2 <= 68154) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (68159 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 69373) {
                                    if (code2 < 68900) {
                                        if (68325 <= code2 && code2 <= 68326) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 69291) {
                                        if (68900 <= code2 && code2 <= 68903) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (69291 <= code2 && code2 <= 69292) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code2 < 69446) {
                                        if (69373 <= code2 && code2 <= 69375) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 69506) {
                                        if (69446 <= code2 && code2 <= 69456) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (69506 <= code2 && code2 <= 69509) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        } else {
                            if (code2 < 70016) {
                                if (code2 < 69815) {
                                    if (code2 < 69747) {
                                        if (code2 < 69634) {
                                            if (69632 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (69633 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code2 < 69688) {
                                                if (69634 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 69744) {
                                                if (69688 <= code2 && code2 <= 69702) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (69744 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 69762) {
                                        if (code2 < 69759) {
                                            if (69747 <= code2 && code2 <= 69748) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (69759 <= code2 && code2 <= 69761) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 69808) {
                                            if (69762 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 69811) {
                                            if (69808 <= code2 && code2 <= 69810) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (69811 <= code2 && code2 <= 69814) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 69888) {
                                        if (code2 < 69821) {
                                            if (code2 < 69817) {
                                                if (69815 <= code2 && code2 <= 69816) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (69817 <= code2 && code2 <= 69818) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 69826) {
                                            if (69821 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        } else {
                                            if (69826 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (69837 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        }
                                    } else if (code2 < 69933) {
                                        if (code2 < 69927) {
                                            if (69888 <= code2 && code2 <= 69890) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 69932) {
                                            if (69927 <= code2 && code2 <= 69931) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (69932 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 69957) {
                                            if (69933 <= code2 && code2 <= 69940) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 70003) {
                                            if (69957 <= code2 && code2 <= 69958) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (70003 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else if (code2 < 70194) {
                                if (code2 < 70082) {
                                    if (code2 < 70067) {
                                        if (code2 < 70018) {
                                            if (70016 <= code2 && code2 <= 70017) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (70018 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 70070) {
                                            if (70067 <= code2 && code2 <= 70069) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 70079) {
                                            if (70070 <= code2 && code2 <= 70078) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (70079 <= code2 && code2 <= 70080) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else if (code2 < 70095) {
                                    if (code2 < 70089) {
                                        if (70082 <= code2 && code2 <= 70083) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    } else if (code2 < 70094) {
                                        if (70089 <= code2 && code2 <= 70092) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (70094 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code2 < 70188) {
                                        if (70095 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 70191) {
                                        if (70188 <= code2 && code2 <= 70190) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        if (70191 <= code2 && code2 <= 70193) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code2 < 70209) {
                                    if (code2 < 70197) {
                                        if (code2 < 70196) {
                                            if (70194 <= code2 && code2 <= 70195) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (70196 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 70198) {
                                            if (70197 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 70206) {
                                            if (70198 <= code2 && code2 <= 70199) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (70206 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 70371) {
                                    if (code2 < 70367) {
                                        if (70209 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 70368) {
                                        if (70367 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (70368 <= code2 && code2 <= 70370) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code2 < 70400) {
                                        if (70371 <= code2 && code2 <= 70378) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 70402) {
                                        if (70400 <= code2 && code2 <= 70401) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (70402 <= code2 && code2 <= 70403) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            }
                        }
                    } else {
                        if (code2 < 72343) {
                            if (code2 < 71339) {
                                if (code2 < 70841) {
                                    if (code2 < 70512) {
                                        if (code2 < 70471) {
                                            if (code2 < 70463) {
                                                if (code2 < 70462) {
                                                    if (70459 <= code2 && code2 <= 70460) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (70462 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            } else {
                                                if (code2 < 70464) {
                                                    if (70463 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else if (code2 < 70465) {
                                                    if (70464 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (70465 <= code2 && code2 <= 70468) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        } else if (code2 < 70487) {
                                            if (code2 < 70475) {
                                                if (70471 <= code2 && code2 <= 70472) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (70475 <= code2 && code2 <= 70477) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 70498) {
                                                if (70487 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 70502) {
                                                if (70498 <= code2 && code2 <= 70499) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (70502 <= code2 && code2 <= 70508) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 70725) {
                                            if (code2 < 70712) {
                                                if (code2 < 70709) {
                                                    if (70512 <= code2 && code2 <= 70516) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else {
                                                    if (70709 <= code2 && code2 <= 70711) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            } else {
                                                if (code2 < 70720) {
                                                    if (70712 <= code2 && code2 <= 70719) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 70722) {
                                                    if (70720 <= code2 && code2 <= 70721) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (70722 <= code2 && code2 <= 70724) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 70832) {
                                            if (code2 < 70726) {
                                                if (70725 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (70726 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (70750 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 70833) {
                                                if (70832 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 70835) {
                                                if (70833 <= code2 && code2 <= 70834) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (70835 <= code2 && code2 <= 70840) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    }
                                } else if (code2 < 71096) {
                                    if (code2 < 70847) {
                                        if (code2 < 70843) {
                                            if (70841 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (70842 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 70845) {
                                            if (70843 <= code2 && code2 <= 70844) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (70845 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (70846 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code2 < 71087) {
                                        if (code2 < 70849) {
                                            if (70847 <= code2 && code2 <= 70848) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 70850) {
                                            if (70849 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (70850 <= code2 && code2 <= 70851) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 71088) {
                                            if (71087 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 71090) {
                                            if (71088 <= code2 && code2 <= 71089) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (71090 <= code2 && code2 <= 71093) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 71216) {
                                        if (code2 < 71102) {
                                            if (code2 < 71100) {
                                                if (71096 <= code2 && code2 <= 71099) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (71100 <= code2 && code2 <= 71101) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 71103) {
                                                if (71102 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 71132) {
                                                if (71103 <= code2 && code2 <= 71104) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (71132 <= code2 && code2 <= 71133) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 71229) {
                                        if (code2 < 71219) {
                                            if (71216 <= code2 && code2 <= 71218) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 71227) {
                                            if (71219 <= code2 && code2 <= 71226) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (71227 <= code2 && code2 <= 71228) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 71230) {
                                            if (71229 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 71231) {
                                            if (71230 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (71231 <= code2 && code2 <= 71232) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else {
                                if (code2 < 71999) {
                                    if (code2 < 71463) {
                                        if (code2 < 71350) {
                                            if (code2 < 71341) {
                                                if (71339 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                if (71340 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (code2 < 71342) {
                                                    if (71341 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                } else if (code2 < 71344) {
                                                    if (71342 <= code2 && code2 <= 71343) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                } else {
                                                    if (71344 <= code2 && code2 <= 71349) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        } else if (code2 < 71453) {
                                            if (71350 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (71351 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code2 < 71458) {
                                                if (71453 <= code2 && code2 <= 71455) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 71462) {
                                                if (71458 <= code2 && code2 <= 71461) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (71462 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code2 < 71984) {
                                        if (code2 < 71727) {
                                            if (code2 < 71724) {
                                                if (71463 <= code2 && code2 <= 71467) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (71724 <= code2 && code2 <= 71726) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 71736) {
                                                if (71727 <= code2 && code2 <= 71735) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 71737) {
                                                if (71736 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (71737 <= code2 && code2 <= 71738) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 71995) {
                                            if (code2 < 71985) {
                                                if (71984 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 71991) {
                                                if (71985 <= code2 && code2 <= 71989) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (71991 <= code2 && code2 <= 71992) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else if (code2 < 71997) {
                                            if (71995 <= code2 && code2 <= 71996) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (71997 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (71998 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 72193) {
                                    if (code2 < 72145) {
                                        if (code2 < 72001) {
                                            if (71999 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                            if (72e3 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code2 < 72002) {
                                            if (72001 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        } else {
                                            if (72002 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            if (72003 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 72156) {
                                            if (code2 < 72148) {
                                                if (72145 <= code2 && code2 <= 72147) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 72154) {
                                                if (72148 <= code2 && code2 <= 72151) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (72154 <= code2 && code2 <= 72155) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 72160) {
                                            if (72156 <= code2 && code2 <= 72159) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (72160 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (72164 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else {
                                    if (code2 < 72263) {
                                        if (code2 < 72249) {
                                            if (code2 < 72243) {
                                                if (72193 <= code2 && code2 <= 72202) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (72243 <= code2 && code2 <= 72248) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 72250) {
                                                if (72249 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 72251) {
                                                if (72250 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                            } else {
                                                if (72251 <= code2 && code2 <= 72254) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 72281) {
                                        if (code2 < 72273) {
                                            if (72263 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 72279) {
                                            if (72273 <= code2 && code2 <= 72278) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (72279 <= code2 && code2 <= 72280) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code2 < 72324) {
                                            if (72281 <= code2 && code2 <= 72283) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 72330) {
                                            if (72324 <= code2 && code2 <= 72329) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        } else {
                                            if (72330 <= code2 && code2 <= 72342) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            }
                        } else if (code2 < 94033) {
                            if (code2 < 73104) {
                                if (code2 < 72881) {
                                    if (code2 < 72766) {
                                        if (code2 < 72751) {
                                            if (code2 < 72344) {
                                                if (72343 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (72344 <= code2 && code2 <= 72345) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 72752) {
                                                if (72751 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 72760) {
                                                if (72752 <= code2 && code2 <= 72758) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (72760 <= code2 && code2 <= 72765) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 72850) {
                                        if (72766 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        if (72767 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (code2 < 72873) {
                                            if (72850 <= code2 && code2 <= 72871) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 72874) {
                                            if (72873 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            if (72874 <= code2 && code2 <= 72880) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code2 < 73018) {
                                        if (code2 < 72884) {
                                            if (code2 < 72882) {
                                                if (72881 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (72882 <= code2 && code2 <= 72883) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 72885) {
                                                if (72884 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code2 < 73009) {
                                                if (72885 <= code2 && code2 <= 72886) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (73009 <= code2 && code2 <= 73014) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 73030) {
                                        if (code2 < 73020) {
                                            if (73018 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 73023) {
                                            if (73020 <= code2 && code2 <= 73021) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (73023 <= code2 && code2 <= 73029) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 73031) {
                                            if (73030 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        } else if (code2 < 73098) {
                                            if (73031 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (73098 <= code2 && code2 <= 73102) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                }
                            } else if (code2 < 73526) {
                                if (code2 < 73459) {
                                    if (code2 < 73109) {
                                        if (code2 < 73107) {
                                            if (73104 <= code2 && code2 <= 73105) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (73107 <= code2 && code2 <= 73108) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code2 < 73110) {
                                        if (73109 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (73110 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        if (73111 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code2 < 73474) {
                                    if (code2 < 73461) {
                                        if (73459 <= code2 && code2 <= 73460) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 73472) {
                                        if (73461 <= code2 && code2 <= 73462) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        if (73472 <= code2 && code2 <= 73473) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code2 < 73475) {
                                        if (73474 === code2) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    } else if (code2 < 73524) {
                                        if (73475 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        if (73524 <= code2 && code2 <= 73525) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else {
                                if (code2 < 78896) {
                                    if (code2 < 73536) {
                                        if (code2 < 73534) {
                                            if (73526 <= code2 && code2 <= 73530) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (73534 <= code2 && code2 <= 73535) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code2 < 73537) {
                                        if (73536 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (73537 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        if (73538 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code2 < 92912) {
                                    if (code2 < 78912) {
                                        if (78896 <= code2 && code2 <= 78911) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else if (code2 < 78919) {
                                        if (78912 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (78919 <= code2 && code2 <= 78933) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code2 < 92976) {
                                        if (92912 <= code2 && code2 <= 92916) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 94031) {
                                        if (92976 <= code2 && code2 <= 92982) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (94031 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        } else {
                            if (code2 < 121476) {
                                if (code2 < 119143) {
                                    if (code2 < 113824) {
                                        if (code2 < 94180) {
                                            if (code2 < 94095) {
                                                if (94033 <= code2 && code2 <= 94087) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (94095 <= code2 && code2 <= 94098) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code2 < 94192) {
                                                if (94180 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 113821) {
                                                if (94192 <= code2 && code2 <= 94193) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                if (113821 <= code2 && code2 <= 113822) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code2 < 118576) {
                                            if (code2 < 118528) {
                                                if (113824 <= code2 && code2 <= 113827) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else {
                                                if (118528 <= code2 && code2 <= 118573) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code2 < 119141) {
                                            if (118576 <= code2 && code2 <= 118598) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (119141 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            if (119142 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else {
                                    if (code2 < 119173) {
                                        if (code2 < 119150) {
                                            if (code2 < 119149) {
                                                if (119143 <= code2 && code2 <= 119145) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                if (119149 === code2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code2 < 119155) {
                                                if (119150 <= code2 && code2 <= 119154) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code2 < 119163) {
                                                if (119155 <= code2 && code2 <= 119162) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else {
                                                if (119163 <= code2 && code2 <= 119170) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code2 < 121344) {
                                        if (code2 < 119210) {
                                            if (119173 <= code2 && code2 <= 119179) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 119362) {
                                            if (119210 <= code2 && code2 <= 119213) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (119362 <= code2 && code2 <= 119364) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 121403) {
                                            if (121344 <= code2 && code2 <= 121398) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 121461) {
                                            if (121403 <= code2 && code2 <= 121452) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (121461 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else if (code2 < 123628) {
                                if (code2 < 122907) {
                                    if (code2 < 121505) {
                                        if (code2 < 121499) {
                                            if (121476 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (121499 <= code2 && code2 <= 121503) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 122880) {
                                            if (121505 <= code2 && code2 <= 121519) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 122888) {
                                            if (122880 <= code2 && code2 <= 122886) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (122888 <= code2 && code2 <= 122904) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code2 < 123023) {
                                    if (code2 < 122915) {
                                        if (122907 <= code2 && code2 <= 122913) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 122918) {
                                        if (122915 <= code2 && code2 <= 122916) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (122918 <= code2 && code2 <= 122922) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code2 < 123184) {
                                        if (123023 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 123566) {
                                        if (123184 <= code2 && code2 <= 123190) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (123566 === code2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code2 < 127995) {
                                    if (code2 < 125136) {
                                        if (code2 < 124140) {
                                            if (123628 <= code2 && code2 <= 123631) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (124140 <= code2 && code2 <= 124143) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code2 < 125252) {
                                            if (125136 <= code2 && code2 <= 125142) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code2 < 127462) {
                                            if (125252 <= code2 && code2 <= 125258) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (127462 <= code2 && code2 <= 127487) return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                        }
                                    }
                                } else if (code2 < 917632) {
                                    if (code2 < 917504) {
                                        if (127995 <= code2 && code2 <= 127999) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code2 < 917536) {
                                        if (917504 <= code2 && code2 <= 917535) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else {
                                        if (917536 <= code2 && code2 <= 917631) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code2 < 917760) {
                                        if (917632 <= code2 && code2 <= 917759) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else if (code2 < 918e3) {
                                        if (917760 <= code2 && code2 <= 917999) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (918e3 <= code2 && code2 <= 921599) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                }
                            }
                        }
                    }
                }
                return boundaries_1.CLUSTER_BREAK.OTHER;
            }
            static getEmojiProperty(code2) {
                if (code2 < 10160) {
                    if (code2 < 9728) {
                        if (code2 < 9e3) {
                            if (code2 < 8482) {
                                if (code2 < 8252) {
                                    if (169 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (174 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (8252 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (8265 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else if (code2 < 8596) {
                                if (8482 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                if (8505 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (code2 < 8617) {
                                    if (8596 <= code2 && code2 <= 8601) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 8986) {
                                    if (8617 <= code2 && code2 <= 8618) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (8986 <= code2 && code2 <= 8987) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        } else {
                            if (code2 < 9410) {
                                if (code2 < 9167) {
                                    if (9e3 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (9096 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (code2 < 9193) {
                                        if (9167 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    } else if (code2 < 9208) {
                                        if (9193 <= code2 && code2 <= 9203) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    } else {
                                        if (9208 <= code2 && code2 <= 9210) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            } else if (code2 < 9654) {
                                if (code2 < 9642) {
                                    if (9410 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (9642 <= code2 && code2 <= 9643) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 9664) {
                                    if (9654 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 9723) {
                                    if (9664 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (9723 <= code2 && code2 <= 9726) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    } else if (code2 < 10035) {
                        if (code2 < 10004) {
                            if (code2 < 9748) {
                                if (code2 < 9735) {
                                    if (9728 <= code2 && code2 <= 9733) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (9735 <= code2 && code2 <= 9746) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 9872) {
                                    if (9748 <= code2 && code2 <= 9861) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 9992) {
                                    if (9872 <= code2 && code2 <= 9989) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (9992 <= code2 && code2 <= 10002) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        } else {
                            if (code2 < 10013) {
                                if (10004 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                if (10006 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code2 < 10017) {
                                if (10013 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (10017 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                if (10024 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    } else {
                        if (code2 < 10067) {
                            if (code2 < 10055) {
                                if (code2 < 10052) {
                                    if (10035 <= code2 && code2 <= 10036) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (10052 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else if (code2 < 10060) {
                                if (10055 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (10060 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                if (10062 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        } else if (code2 < 10083) {
                            if (code2 < 10071) {
                                if (10067 <= code2 && code2 <= 10069) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (10071 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        } else {
                            if (code2 < 10133) {
                                if (10083 <= code2 && code2 <= 10087) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code2 < 10145) {
                                if (10133 <= code2 && code2 <= 10135) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (10145 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    }
                } else {
                    if (code2 < 127489) {
                        if (code2 < 12951) {
                            if (code2 < 11035) {
                                if (code2 < 10548) {
                                    if (10160 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (10175 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 11013) {
                                    if (10548 <= code2 && code2 <= 10549) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (11013 <= code2 && code2 <= 11015) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 11093) {
                                    if (code2 < 11088) {
                                        if (11035 <= code2 && code2 <= 11036) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    } else {
                                        if (11088 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                } else if (code2 < 12336) {
                                    if (11093 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (12336 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (12349 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        } else {
                            if (code2 < 127340) {
                                if (code2 < 126976) {
                                    if (12951 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    if (12953 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (code2 < 127245) {
                                        if (126976 <= code2 && code2 <= 127231) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    } else if (code2 < 127279) {
                                        if (127245 <= code2 && code2 <= 127247) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    } else {
                                        if (127279 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            } else if (code2 < 127374) {
                                if (code2 < 127358) {
                                    if (127340 <= code2 && code2 <= 127345) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (127358 <= code2 && code2 <= 127359) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 127377) {
                                    if (127374 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 127405) {
                                    if (127377 <= code2 && code2 <= 127386) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (127405 <= code2 && code2 <= 127461) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    } else if (code2 < 128981) {
                        if (code2 < 127561) {
                            if (code2 < 127535) {
                                if (code2 < 127514) {
                                    if (127489 <= code2 && code2 <= 127503) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (127514 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 127538) {
                                    if (127535 === code2) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 127548) {
                                    if (127538 <= code2 && code2 <= 127546) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (127548 <= code2 && code2 <= 127551) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        } else if (code2 < 128326) {
                            if (code2 < 128e3) {
                                if (127561 <= code2 && code2 <= 127994) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (128e3 <= code2 && code2 <= 128317) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        } else {
                            if (code2 < 128640) {
                                if (128326 <= code2 && code2 <= 128591) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code2 < 128884) {
                                if (128640 <= code2 && code2 <= 128767) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (128884 <= code2 && code2 <= 128895) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    } else {
                        if (code2 < 129198) {
                            if (code2 < 129096) {
                                if (code2 < 129036) {
                                    if (128981 <= code2 && code2 <= 129023) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (129036 <= code2 && code2 <= 129039) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            } else {
                                if (code2 < 129114) {
                                    if (129096 <= code2 && code2 <= 129103) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else if (code2 < 129160) {
                                    if (129114 <= code2 && code2 <= 129119) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                } else {
                                    if (129160 <= code2 && code2 <= 129167) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        } else if (code2 < 129340) {
                            if (code2 < 129292) {
                                if (129198 <= code2 && code2 <= 129279) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (129292 <= code2 && code2 <= 129338) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        } else {
                            if (code2 < 129351) {
                                if (129340 <= code2 && code2 <= 129349) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code2 < 130048) {
                                if (129351 <= code2 && code2 <= 129791) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                if (130048 <= code2 && code2 <= 131069) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    }
                }
                return boundaries_1.CLUSTER_BREAK.OTHER;
            }
        };
        exports.default = Graphemer2;
    }
});
// ../../node_modules/graphemer/lib/index.js
var $d76f6d4dfc9a3307$var$require_lib = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/graphemer/lib/index.js" (exports) {
        "use strict";
        var __importDefault = exports && exports.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                "default": mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Graphemer_1 = __importDefault($d76f6d4dfc9a3307$var$require_Graphemer());
        exports.default = Graphemer_1.default;
    }
});
// ../../node_modules/iso-datestring-validator/dist/index.js
var $d76f6d4dfc9a3307$var$require_dist = $d76f6d4dfc9a3307$var$__commonJS({
    "../../node_modules/iso-datestring-validator/dist/index.js" (exports) {
        (()=>{
            "use strict";
            var e = {
                d: (t2, r2)=>{
                    for(var n2 in r2)e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, {
                        enumerable: true,
                        get: r2[n2]
                    });
                },
                o: (e2, t2)=>Object.prototype.hasOwnProperty.call(e2, t2),
                r: (e2)=>{
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, {
                        value: "Module"
                    }), Object.defineProperty(e2, "__esModule", {
                        value: true
                    });
                }
            }, t = {};
            function r(e2, t2) {
                return void 0 === t2 && (t2 = "-"), new RegExp("^(?!0{4}" + t2 + "0{2}" + t2 + "0{2})((?=[0-9]{4}" + t2 + "(((0[^2])|1[0-2])|02(?=" + t2 + "(([0-1][0-9])|2[0-8])))" + t2 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t2 + "02" + t2 + "29))([0-9]{4})" + t2 + "(?!((0[469])|11)" + t2 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t2 + "3)))" + t2 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e2);
            }
            function n(e2) {
                var t2 = /\D/.exec(e2);
                return t2 ? t2[0] : "";
            }
            function i(e2, t2, r2) {
                void 0 === t2 && (t2 = ":"), void 0 === r2 && (r2 = false);
                var i2 = new RegExp("^([0-1]|2(?=([0-3])|4" + t2 + "00))[0-9]" + t2 + "[0-5][0-9](" + t2 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
                if (!r2 || !/[Z+\-]/.test(e2)) return i2.test(e2);
                if (/Z$/.test(e2)) return i2.test(e2.replace("Z", ""));
                var o2 = e2.includes("+"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];
                return i2.test(u2) && function(e3, t3, r3) {
                    return void 0 === r3 && (r3 = ":"), new RegExp(t3 ? "^(0(?!(2" + r3 + "4)|0" + r3 + "3)|1(?=([0-1]|2(?=" + r3 + "[04])|[34](?=" + r3 + "0))))([03469](?=" + r3 + "[03])|[17](?=" + r3 + "0)|2(?=" + r3 + "[04])|5(?=" + r3 + "[034])|8(?=" + r3 + "[04]))" + r3 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r3 + "[03])|[0-24-8](?=" + r3 + "00))" + r3 + "[03]0$").test(e3);
                }(d2, o2, n(d2));
            }
            function o(e2) {
                var t2 = e2.split("T"), o2 = t2[0], a2 = t2[1], u2 = r(o2, n(o2));
                if (!a2) return false;
                var d2, s = (d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d2) ? d2[0] : "");
                return u2 && i(a2, s, true);
            }
            function a(e2, t2) {
                return void 0 === t2 && (t2 = "-"), new RegExp("^[0-9]{4}" + t2 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e2);
            }
            e.r(t), e.d(t, {
                isValidDate: ()=>r,
                isValidISODateString: ()=>o,
                isValidTime: ()=>i,
                isValidYearMonth: ()=>a
            });
            var u = exports;
            for(var d in t)u[d] = t[d];
            t.__esModule && Object.defineProperty(u, "__esModule", {
                value: true
            });
        })();
    }
});
// src/index.ts
var $d76f6d4dfc9a3307$var$src_exports4 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$src_exports4, {
    APP_BSKY_GRAPH: ()=>$d76f6d4dfc9a3307$var$APP_BSKY_GRAPH,
    ActorNS: ()=>$d76f6d4dfc9a3307$var$ActorNS,
    AdminNS: ()=>$d76f6d4dfc9a3307$var$AdminNS,
    AppBskyActorDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports5,
    AppBskyActorGetPreferences: ()=>$d76f6d4dfc9a3307$var$getPreferences_exports,
    AppBskyActorGetProfile: ()=>$d76f6d4dfc9a3307$var$getProfile_exports,
    AppBskyActorGetProfiles: ()=>$d76f6d4dfc9a3307$var$getProfiles_exports,
    AppBskyActorGetSuggestions: ()=>$d76f6d4dfc9a3307$var$getSuggestions_exports,
    AppBskyActorProfile: ()=>$d76f6d4dfc9a3307$var$profile_exports,
    AppBskyActorPutPreferences: ()=>$d76f6d4dfc9a3307$var$putPreferences_exports,
    AppBskyActorSearchActors: ()=>$d76f6d4dfc9a3307$var$searchActors_exports,
    AppBskyActorSearchActorsTypeahead: ()=>$d76f6d4dfc9a3307$var$searchActorsTypeahead_exports,
    AppBskyEmbedExternal: ()=>$d76f6d4dfc9a3307$var$external_exports,
    AppBskyEmbedImages: ()=>$d76f6d4dfc9a3307$var$images_exports,
    AppBskyEmbedRecord: ()=>$d76f6d4dfc9a3307$var$record_exports,
    AppBskyEmbedRecordWithMedia: ()=>$d76f6d4dfc9a3307$var$recordWithMedia_exports,
    AppBskyFeedDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports6,
    AppBskyFeedDescribeFeedGenerator: ()=>$d76f6d4dfc9a3307$var$describeFeedGenerator_exports,
    AppBskyFeedGenerator: ()=>$d76f6d4dfc9a3307$var$generator_exports,
    AppBskyFeedGetActorFeeds: ()=>$d76f6d4dfc9a3307$var$getActorFeeds_exports,
    AppBskyFeedGetActorLikes: ()=>$d76f6d4dfc9a3307$var$getActorLikes_exports,
    AppBskyFeedGetAuthorFeed: ()=>$d76f6d4dfc9a3307$var$getAuthorFeed_exports,
    AppBskyFeedGetFeed: ()=>$d76f6d4dfc9a3307$var$getFeed_exports,
    AppBskyFeedGetFeedGenerator: ()=>$d76f6d4dfc9a3307$var$getFeedGenerator_exports,
    AppBskyFeedGetFeedGenerators: ()=>$d76f6d4dfc9a3307$var$getFeedGenerators_exports,
    AppBskyFeedGetFeedSkeleton: ()=>$d76f6d4dfc9a3307$var$getFeedSkeleton_exports,
    AppBskyFeedGetLikes: ()=>$d76f6d4dfc9a3307$var$getLikes_exports,
    AppBskyFeedGetPostThread: ()=>$d76f6d4dfc9a3307$var$getPostThread_exports,
    AppBskyFeedGetPosts: ()=>$d76f6d4dfc9a3307$var$getPosts_exports,
    AppBskyFeedGetRepostedBy: ()=>$d76f6d4dfc9a3307$var$getRepostedBy_exports,
    AppBskyFeedGetTimeline: ()=>$d76f6d4dfc9a3307$var$getTimeline_exports,
    AppBskyFeedLike: ()=>$d76f6d4dfc9a3307$var$like_exports,
    AppBskyFeedPost: ()=>$d76f6d4dfc9a3307$var$post_exports,
    AppBskyFeedRepost: ()=>$d76f6d4dfc9a3307$var$repost_exports,
    AppBskyGraphBlock: ()=>$d76f6d4dfc9a3307$var$block_exports,
    AppBskyGraphDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports7,
    AppBskyGraphFollow: ()=>$d76f6d4dfc9a3307$var$follow_exports,
    AppBskyGraphGetBlocks: ()=>$d76f6d4dfc9a3307$var$getBlocks_exports2,
    AppBskyGraphGetFollowers: ()=>$d76f6d4dfc9a3307$var$getFollowers_exports,
    AppBskyGraphGetFollows: ()=>$d76f6d4dfc9a3307$var$getFollows_exports,
    AppBskyGraphGetList: ()=>$d76f6d4dfc9a3307$var$getList_exports,
    AppBskyGraphGetListMutes: ()=>$d76f6d4dfc9a3307$var$getListMutes_exports,
    AppBskyGraphGetLists: ()=>$d76f6d4dfc9a3307$var$getLists_exports,
    AppBskyGraphGetMutes: ()=>$d76f6d4dfc9a3307$var$getMutes_exports,
    AppBskyGraphList: ()=>$d76f6d4dfc9a3307$var$list_exports,
    AppBskyGraphListitem: ()=>$d76f6d4dfc9a3307$var$listitem_exports,
    AppBskyGraphMuteActor: ()=>$d76f6d4dfc9a3307$var$muteActor_exports,
    AppBskyGraphMuteActorList: ()=>$d76f6d4dfc9a3307$var$muteActorList_exports,
    AppBskyGraphUnmuteActor: ()=>$d76f6d4dfc9a3307$var$unmuteActor_exports,
    AppBskyGraphUnmuteActorList: ()=>$d76f6d4dfc9a3307$var$unmuteActorList_exports,
    AppBskyNotificationGetUnreadCount: ()=>$d76f6d4dfc9a3307$var$getUnreadCount_exports,
    AppBskyNotificationListNotifications: ()=>$d76f6d4dfc9a3307$var$listNotifications_exports,
    AppBskyNotificationRegisterPush: ()=>$d76f6d4dfc9a3307$var$registerPush_exports,
    AppBskyNotificationUpdateSeen: ()=>$d76f6d4dfc9a3307$var$updateSeen_exports,
    AppBskyRichtextFacet: ()=>$d76f6d4dfc9a3307$var$facet_exports,
    AppBskyUnspeccedApplyLabels: ()=>$d76f6d4dfc9a3307$var$applyLabels_exports,
    AppBskyUnspeccedGetPopular: ()=>$d76f6d4dfc9a3307$var$getPopular_exports,
    AppBskyUnspeccedGetPopularFeedGenerators: ()=>$d76f6d4dfc9a3307$var$getPopularFeedGenerators_exports,
    AppBskyUnspeccedGetTimelineSkeleton: ()=>$d76f6d4dfc9a3307$var$getTimelineSkeleton_exports,
    AppNS: ()=>$d76f6d4dfc9a3307$var$AppNS,
    AtUri: ()=>$d76f6d4dfc9a3307$var$AtUri,
    AtpAgent: ()=>$d76f6d4dfc9a3307$var$AtpAgent,
    AtpBaseClient: ()=>$d76f6d4dfc9a3307$var$AtpBaseClient,
    AtpServiceClient: ()=>$d76f6d4dfc9a3307$var$AtpServiceClient,
    AtprotoNS: ()=>$d76f6d4dfc9a3307$var$AtprotoNS,
    BlobRef: ()=>$d76f6d4dfc9a3307$var$BlobRef,
    BlockRecord: ()=>$d76f6d4dfc9a3307$var$BlockRecord,
    BskyAgent: ()=>$d76f6d4dfc9a3307$var$BskyAgent,
    BskyNS: ()=>$d76f6d4dfc9a3307$var$BskyNS,
    COM_ATPROTO_ADMIN: ()=>$d76f6d4dfc9a3307$var$COM_ATPROTO_ADMIN,
    COM_ATPROTO_MODERATION: ()=>$d76f6d4dfc9a3307$var$COM_ATPROTO_MODERATION,
    ComAtprotoAdminDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports,
    ComAtprotoAdminDisableAccountInvites: ()=>$d76f6d4dfc9a3307$var$disableAccountInvites_exports,
    ComAtprotoAdminDisableInviteCodes: ()=>$d76f6d4dfc9a3307$var$disableInviteCodes_exports,
    ComAtprotoAdminEnableAccountInvites: ()=>$d76f6d4dfc9a3307$var$enableAccountInvites_exports,
    ComAtprotoAdminGetInviteCodes: ()=>$d76f6d4dfc9a3307$var$getInviteCodes_exports,
    ComAtprotoAdminGetModerationAction: ()=>$d76f6d4dfc9a3307$var$getModerationAction_exports,
    ComAtprotoAdminGetModerationActions: ()=>$d76f6d4dfc9a3307$var$getModerationActions_exports,
    ComAtprotoAdminGetModerationReport: ()=>$d76f6d4dfc9a3307$var$getModerationReport_exports,
    ComAtprotoAdminGetModerationReports: ()=>$d76f6d4dfc9a3307$var$getModerationReports_exports,
    ComAtprotoAdminGetRecord: ()=>$d76f6d4dfc9a3307$var$getRecord_exports,
    ComAtprotoAdminGetRepo: ()=>$d76f6d4dfc9a3307$var$getRepo_exports,
    ComAtprotoAdminRebaseRepo: ()=>$d76f6d4dfc9a3307$var$rebaseRepo_exports,
    ComAtprotoAdminResolveModerationReports: ()=>$d76f6d4dfc9a3307$var$resolveModerationReports_exports,
    ComAtprotoAdminReverseModerationAction: ()=>$d76f6d4dfc9a3307$var$reverseModerationAction_exports,
    ComAtprotoAdminSearchRepos: ()=>$d76f6d4dfc9a3307$var$searchRepos_exports,
    ComAtprotoAdminSendEmail: ()=>$d76f6d4dfc9a3307$var$sendEmail_exports,
    ComAtprotoAdminTakeModerationAction: ()=>$d76f6d4dfc9a3307$var$takeModerationAction_exports,
    ComAtprotoAdminUpdateAccountEmail: ()=>$d76f6d4dfc9a3307$var$updateAccountEmail_exports,
    ComAtprotoAdminUpdateAccountHandle: ()=>$d76f6d4dfc9a3307$var$updateAccountHandle_exports,
    ComAtprotoIdentityResolveHandle: ()=>$d76f6d4dfc9a3307$var$resolveHandle_exports,
    ComAtprotoIdentityUpdateHandle: ()=>$d76f6d4dfc9a3307$var$updateHandle_exports,
    ComAtprotoLabelDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports2,
    ComAtprotoLabelQueryLabels: ()=>$d76f6d4dfc9a3307$var$queryLabels_exports,
    ComAtprotoLabelSubscribeLabels: ()=>$d76f6d4dfc9a3307$var$subscribeLabels_exports,
    ComAtprotoModerationCreateReport: ()=>$d76f6d4dfc9a3307$var$createReport_exports,
    ComAtprotoModerationDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports3,
    ComAtprotoRepoApplyWrites: ()=>$d76f6d4dfc9a3307$var$applyWrites_exports,
    ComAtprotoRepoCreateRecord: ()=>$d76f6d4dfc9a3307$var$createRecord_exports,
    ComAtprotoRepoDeleteRecord: ()=>$d76f6d4dfc9a3307$var$deleteRecord_exports,
    ComAtprotoRepoDescribeRepo: ()=>$d76f6d4dfc9a3307$var$describeRepo_exports,
    ComAtprotoRepoGetRecord: ()=>$d76f6d4dfc9a3307$var$getRecord_exports2,
    ComAtprotoRepoListRecords: ()=>$d76f6d4dfc9a3307$var$listRecords_exports,
    ComAtprotoRepoPutRecord: ()=>$d76f6d4dfc9a3307$var$putRecord_exports,
    ComAtprotoRepoRebaseRepo: ()=>$d76f6d4dfc9a3307$var$rebaseRepo_exports2,
    ComAtprotoRepoStrongRef: ()=>$d76f6d4dfc9a3307$var$strongRef_exports,
    ComAtprotoRepoUploadBlob: ()=>$d76f6d4dfc9a3307$var$uploadBlob_exports,
    ComAtprotoServerCreateAccount: ()=>$d76f6d4dfc9a3307$var$createAccount_exports,
    ComAtprotoServerCreateAppPassword: ()=>$d76f6d4dfc9a3307$var$createAppPassword_exports,
    ComAtprotoServerCreateInviteCode: ()=>$d76f6d4dfc9a3307$var$createInviteCode_exports,
    ComAtprotoServerCreateInviteCodes: ()=>$d76f6d4dfc9a3307$var$createInviteCodes_exports,
    ComAtprotoServerCreateSession: ()=>$d76f6d4dfc9a3307$var$createSession_exports,
    ComAtprotoServerDefs: ()=>$d76f6d4dfc9a3307$var$defs_exports4,
    ComAtprotoServerDeleteAccount: ()=>$d76f6d4dfc9a3307$var$deleteAccount_exports,
    ComAtprotoServerDeleteSession: ()=>$d76f6d4dfc9a3307$var$deleteSession_exports,
    ComAtprotoServerDescribeServer: ()=>$d76f6d4dfc9a3307$var$describeServer_exports,
    ComAtprotoServerGetAccountInviteCodes: ()=>$d76f6d4dfc9a3307$var$getAccountInviteCodes_exports,
    ComAtprotoServerGetSession: ()=>$d76f6d4dfc9a3307$var$getSession_exports,
    ComAtprotoServerListAppPasswords: ()=>$d76f6d4dfc9a3307$var$listAppPasswords_exports,
    ComAtprotoServerRefreshSession: ()=>$d76f6d4dfc9a3307$var$refreshSession_exports,
    ComAtprotoServerRequestAccountDelete: ()=>$d76f6d4dfc9a3307$var$requestAccountDelete_exports,
    ComAtprotoServerRequestPasswordReset: ()=>$d76f6d4dfc9a3307$var$requestPasswordReset_exports,
    ComAtprotoServerResetPassword: ()=>$d76f6d4dfc9a3307$var$resetPassword_exports,
    ComAtprotoServerRevokeAppPassword: ()=>$d76f6d4dfc9a3307$var$revokeAppPassword_exports,
    ComAtprotoSyncGetBlob: ()=>$d76f6d4dfc9a3307$var$getBlob_exports,
    ComAtprotoSyncGetBlocks: ()=>$d76f6d4dfc9a3307$var$getBlocks_exports,
    ComAtprotoSyncGetCheckout: ()=>$d76f6d4dfc9a3307$var$getCheckout_exports,
    ComAtprotoSyncGetCommitPath: ()=>$d76f6d4dfc9a3307$var$getCommitPath_exports,
    ComAtprotoSyncGetHead: ()=>$d76f6d4dfc9a3307$var$getHead_exports,
    ComAtprotoSyncGetRecord: ()=>$d76f6d4dfc9a3307$var$getRecord_exports3,
    ComAtprotoSyncGetRepo: ()=>$d76f6d4dfc9a3307$var$getRepo_exports2,
    ComAtprotoSyncListBlobs: ()=>$d76f6d4dfc9a3307$var$listBlobs_exports,
    ComAtprotoSyncListRepos: ()=>$d76f6d4dfc9a3307$var$listRepos_exports,
    ComAtprotoSyncNotifyOfUpdate: ()=>$d76f6d4dfc9a3307$var$notifyOfUpdate_exports,
    ComAtprotoSyncRequestCrawl: ()=>$d76f6d4dfc9a3307$var$requestCrawl_exports,
    ComAtprotoSyncSubscribeRepos: ()=>$d76f6d4dfc9a3307$var$subscribeRepos_exports,
    ComNS: ()=>$d76f6d4dfc9a3307$var$ComNS,
    EmbedNS: ()=>$d76f6d4dfc9a3307$var$EmbedNS,
    FeedNS: ()=>$d76f6d4dfc9a3307$var$FeedNS,
    FollowRecord: ()=>$d76f6d4dfc9a3307$var$FollowRecord,
    GeneratorRecord: ()=>$d76f6d4dfc9a3307$var$GeneratorRecord,
    GraphNS: ()=>$d76f6d4dfc9a3307$var$GraphNS,
    IdentityNS: ()=>$d76f6d4dfc9a3307$var$IdentityNS,
    LABELS: ()=>$d76f6d4dfc9a3307$var$LABELS,
    LABEL_GROUPS: ()=>$d76f6d4dfc9a3307$var$LABEL_GROUPS,
    LabelNS: ()=>$d76f6d4dfc9a3307$var$LabelNS,
    LikeRecord: ()=>$d76f6d4dfc9a3307$var$LikeRecord,
    ListRecord: ()=>$d76f6d4dfc9a3307$var$ListRecord,
    ListitemRecord: ()=>$d76f6d4dfc9a3307$var$ListitemRecord,
    ModerationDecision: ()=>$d76f6d4dfc9a3307$var$ModerationDecision,
    ModerationNS: ()=>$d76f6d4dfc9a3307$var$ModerationNS,
    NotificationNS: ()=>$d76f6d4dfc9a3307$var$NotificationNS,
    PostRecord: ()=>$d76f6d4dfc9a3307$var$PostRecord,
    ProfileRecord: ()=>$d76f6d4dfc9a3307$var$ProfileRecord,
    RepoNS: ()=>$d76f6d4dfc9a3307$var$RepoNS,
    RepostRecord: ()=>$d76f6d4dfc9a3307$var$RepostRecord,
    RichText: ()=>$d76f6d4dfc9a3307$var$RichText,
    RichTextSegment: ()=>$d76f6d4dfc9a3307$var$RichTextSegment,
    RichtextNS: ()=>$d76f6d4dfc9a3307$var$RichtextNS,
    ServerNS: ()=>$d76f6d4dfc9a3307$var$ServerNS,
    SyncNS: ()=>$d76f6d4dfc9a3307$var$SyncNS,
    UnicodeString: ()=>$d76f6d4dfc9a3307$var$UnicodeString,
    UnspeccedNS: ()=>$d76f6d4dfc9a3307$var$UnspeccedNS,
    default: ()=>$d76f6d4dfc9a3307$var$AtpAgent,
    jsonStringToLex: ()=>$d76f6d4dfc9a3307$var$jsonStringToLex,
    jsonToLex: ()=>$d76f6d4dfc9a3307$var$jsonToLex,
    lexToJson: ()=>$d76f6d4dfc9a3307$var$lexToJson,
    moderateFeedGenerator: ()=>$d76f6d4dfc9a3307$var$moderateFeedGenerator,
    moderatePost: ()=>$d76f6d4dfc9a3307$var$moderatePost,
    moderateProfile: ()=>$d76f6d4dfc9a3307$var$moderateProfile,
    moderateUserList: ()=>$d76f6d4dfc9a3307$var$moderateUserList,
    parseLanguage: ()=>$d76f6d4dfc9a3307$var$parseLanguage,
    sanitizeRichText: ()=>$d76f6d4dfc9a3307$var$sanitizeRichText,
    stringifyLex: ()=>$d76f6d4dfc9a3307$var$stringifyLex
});
$d76f6d4dfc9a3307$exports = $d76f6d4dfc9a3307$var$__toCommonJS($d76f6d4dfc9a3307$var$src_exports4);
// ../identifier/src/handle.ts
var $d76f6d4dfc9a3307$var$ensureValidHandle = (handle2)=>{
    if (!/^[a-zA-Z0-9.-]*$/.test(handle2)) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
    if (handle2.length > 253) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle is too long (253 chars max)");
    const labels = handle2.split(".");
    if (labels.length < 2) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle domain needs at least two parts");
    for(let i = 0; i < labels.length; i++){
        const l = labels[i];
        if (l.length < 1) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle parts can not be empty");
        if (l.length > 63) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle part too long (max 63 chars)");
        if (l.endsWith("-") || l.startsWith("-")) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle parts can not start or end with hyphens");
        if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) throw new $d76f6d4dfc9a3307$var$InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
    }
};
var $d76f6d4dfc9a3307$var$InvalidHandleError = class extends Error {
};
// ../identifier/src/did.ts
var $d76f6d4dfc9a3307$var$ensureValidDid = (did2)=>{
    if (!/^[a-zA-Z0-9._:%-]*$/.test(did2)) throw new $d76f6d4dfc9a3307$var$InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
    const parts = did2.split(":");
    if (parts.length < 3) throw new $d76f6d4dfc9a3307$var$InvalidDidError("DID requires prefix, method, and method-specific content");
    if (parts[0] != "did") throw new $d76f6d4dfc9a3307$var$InvalidDidError('DID requires "did:" prefix');
    if (!/^[a-z]+$/.test(parts[1])) throw new $d76f6d4dfc9a3307$var$InvalidDidError("DID method must be lower-case letters");
    if (did2.endsWith(":") || did2.endsWith("%")) throw new $d76f6d4dfc9a3307$var$InvalidDidError('DID can not end with ":" or "%"');
    if (did2.length > 2048) throw new $d76f6d4dfc9a3307$var$InvalidDidError("DID is too long (2048 chars max)");
};
var $d76f6d4dfc9a3307$var$InvalidDidError = class extends Error {
};
// ../nsid/src/index.ts
var $d76f6d4dfc9a3307$var$NSID = class {
    constructor(nsid2){
        this.segments = [];
        $d76f6d4dfc9a3307$var$ensureValidNsid(nsid2);
        this.segments = nsid2.split(".");
    }
    static parse(nsid2) {
        return new $d76f6d4dfc9a3307$var$NSID(nsid2);
    }
    static create(authority, name2) {
        const segments = [
            ...authority.split(".").reverse(),
            name2
        ].join(".");
        return new $d76f6d4dfc9a3307$var$NSID(segments);
    }
    static isValid(nsid2) {
        try {
            $d76f6d4dfc9a3307$var$NSID.parse(nsid2);
            return true;
        } catch (e) {
            return false;
        }
    }
    get authority() {
        return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
    }
    get name() {
        return this.segments.at(this.segments.length - 1);
    }
    toString() {
        return this.segments.join(".");
    }
};
var $d76f6d4dfc9a3307$var$ensureValidNsid = (nsid2)=>{
    const toCheck = nsid2;
    if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
    if (toCheck.length > 317) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID is too long (317 chars max)");
    const labels = toCheck.split(".");
    if (labels.length < 3) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID needs at least three parts");
    for(let i = 0; i < labels.length; i++){
        const l = labels[i];
        if (l.length < 1) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID parts can not be empty");
        if (l.length > 63) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID part too long (max 63 chars)");
        if (l.endsWith("-") || l.startsWith("-")) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID parts can not start or end with hyphen");
        if (/^[0-9]/.test(l) && i == 0) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID first part may not start with a digit");
        if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) throw new $d76f6d4dfc9a3307$var$InvalidNsidError("NSID name part must be only letters");
    }
};
var $d76f6d4dfc9a3307$var$InvalidNsidError = class extends Error {
};
// ../uri/src/validation.ts
var $d76f6d4dfc9a3307$var$ensureValidAtUri = (uri2)=>{
    const uriParts = uri2.split("#");
    if (uriParts.length > 2) throw new Error('ATURI can have at most one "#", separating fragment out');
    const fragmentPart = uriParts[1] || null;
    uri2 = uriParts[0];
    if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri2)) throw new Error("Disallowed characters in ATURI (ASCII)");
    const parts = uri2.split("/");
    if (parts.length >= 3 && (parts[0] != "at:" || parts[1].length != 0)) throw new Error('ATURI must start with "at://"');
    if (parts.length < 3) throw new Error("ATURI requires at least method and authority sections");
    try {
        $d76f6d4dfc9a3307$var$ensureValidHandle(parts[2]);
    } catch  {
        try {
            $d76f6d4dfc9a3307$var$ensureValidDid(parts[2]);
        } catch  {
            throw new Error("ATURI authority must be a valid handle or DID");
        }
    }
    if (parts.length >= 4) {
        if (parts[3].length == 0) throw new Error("ATURI can not have a slash after authority without a path segment");
        try {
            $d76f6d4dfc9a3307$var$ensureValidNsid(parts[3]);
        } catch  {
            throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
        }
    }
    if (parts.length >= 5) {
        if (parts[4].length == 0) throw new Error("ATURI can not have a slash after collection, unless record key is provided");
    }
    if (parts.length >= 6) throw new Error("ATURI path can have at most two parts, and no trailing slash");
    if (uriParts.length >= 2 && fragmentPart == null) throw new Error("ATURI fragment must be non-empty and start with slash");
    if (fragmentPart != null) {
        if (fragmentPart.length == 0 || fragmentPart[0] != "/") throw new Error("ATURI fragment must be non-empty and start with slash");
        if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) throw new Error("Disallowed characters in ATURI fragment (ASCII)");
    }
    if (uri2.length > 8192) throw new Error("ATURI is far too long");
};
// ../uri/src/index.ts
var $d76f6d4dfc9a3307$var$ATP_URI_REGEX = /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
var $d76f6d4dfc9a3307$var$RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
var $d76f6d4dfc9a3307$var$AtUri = class {
    constructor(uri2, base3){
        let parsed;
        if (base3) {
            parsed = $d76f6d4dfc9a3307$var$parse(base3);
            if (!parsed) throw new Error(`Invalid at uri: ${base3}`);
            const relativep = $d76f6d4dfc9a3307$var$parseRelative(uri2);
            if (!relativep) throw new Error(`Invalid path: ${uri2}`);
            Object.assign(parsed, relativep);
        } else {
            parsed = $d76f6d4dfc9a3307$var$parse(uri2);
            if (!parsed) throw new Error(`Invalid at uri: ${uri2}`);
        }
        this.hash = parsed.hash;
        this.host = parsed.host;
        this.pathname = parsed.pathname;
        this.searchParams = parsed.searchParams;
    }
    static make(handleOrDid, collection, rkey) {
        let str = handleOrDid;
        if (collection) str += "/" + collection;
        if (rkey) str += "/" + rkey;
        return new $d76f6d4dfc9a3307$var$AtUri(str);
    }
    get protocol() {
        return "at:";
    }
    get origin() {
        return `at://${this.host}`;
    }
    get hostname() {
        return this.host;
    }
    set hostname(v) {
        this.host = v;
    }
    get search() {
        return this.searchParams.toString();
    }
    set search(v) {
        this.searchParams = new URLSearchParams(v);
    }
    get collection() {
        return this.pathname.split("/").filter(Boolean)[0] || "";
    }
    set collection(v) {
        const parts = this.pathname.split("/").filter(Boolean);
        parts[0] = v;
        this.pathname = parts.join("/");
    }
    get rkey() {
        return this.pathname.split("/").filter(Boolean)[1] || "";
    }
    set rkey(v) {
        const parts = this.pathname.split("/").filter(Boolean);
        if (!parts[0]) parts[0] = "undefined";
        parts[1] = v;
        this.pathname = parts.join("/");
    }
    get href() {
        return this.toString();
    }
    toString() {
        let path = this.pathname || "/";
        if (!path.startsWith("/")) path = `/${path}`;
        let qs = this.searchParams.toString();
        if (qs && !qs.startsWith("?")) qs = `?${qs}`;
        let hash = this.hash;
        if (hash && !hash.startsWith("#")) hash = `#${hash}`;
        return `at://${this.host}${path}${qs}${hash}`;
    }
};
function $d76f6d4dfc9a3307$var$parse(str) {
    const match = $d76f6d4dfc9a3307$var$ATP_URI_REGEX.exec(str);
    if (match) return {
        hash: match[5] || "",
        host: match[2] || "",
        pathname: match[3] || "",
        searchParams: new URLSearchParams(match[4] || "")
    };
    return void 0;
}
function $d76f6d4dfc9a3307$var$parseRelative(str) {
    const match = $d76f6d4dfc9a3307$var$RELATIVE_REGEX.exec(str);
    if (match) return {
        hash: match[3] || "",
        pathname: match[1] || "",
        searchParams: new URLSearchParams(match[2] || "")
    };
    return void 0;
}
// ../../node_modules/zod/lib/index.mjs
var $d76f6d4dfc9a3307$var$util;
(function(util2) {
    util2.assertEqual = (val)=>val;
    function assertIs(_arg) {}
    util2.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items)obj[item] = item;
        return obj;
    };
    util2.getValidEnumValues = (obj)=>{
        const validKeys = util2.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys)filtered[k] = obj[k];
        return util2.objectValues(filtered);
    };
    util2.objectValues = (obj)=>{
        return util2.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj)=>Object.keys(obj) : (object2)=>{
        const keys = [];
        for(const key in object2)if (Object.prototype.hasOwnProperty.call(object2, key)) keys.push(key);
        return keys;
    };
    util2.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array2, separator = " | ") {
        return array2.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value)=>{
        if (typeof value === "bigint") return value.toString();
        return value;
    };
})($d76f6d4dfc9a3307$var$util || ($d76f6d4dfc9a3307$var$util = {}));
var $d76f6d4dfc9a3307$var$objectUtil;
(function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})($d76f6d4dfc9a3307$var$objectUtil || ($d76f6d4dfc9a3307$var$objectUtil = {}));
var $d76f6d4dfc9a3307$var$ZodParsedType = $d76f6d4dfc9a3307$var$util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
var $d76f6d4dfc9a3307$var$getParsedType = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return $d76f6d4dfc9a3307$var$ZodParsedType.undefined;
        case "string":
            return $d76f6d4dfc9a3307$var$ZodParsedType.string;
        case "number":
            return isNaN(data) ? $d76f6d4dfc9a3307$var$ZodParsedType.nan : $d76f6d4dfc9a3307$var$ZodParsedType.number;
        case "boolean":
            return $d76f6d4dfc9a3307$var$ZodParsedType.boolean;
        case "function":
            return $d76f6d4dfc9a3307$var$ZodParsedType.function;
        case "bigint":
            return $d76f6d4dfc9a3307$var$ZodParsedType.bigint;
        case "symbol":
            return $d76f6d4dfc9a3307$var$ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) return $d76f6d4dfc9a3307$var$ZodParsedType.array;
            if (data === null) return $d76f6d4dfc9a3307$var$ZodParsedType.null;
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") return $d76f6d4dfc9a3307$var$ZodParsedType.promise;
            if (typeof Map !== "undefined" && data instanceof Map) return $d76f6d4dfc9a3307$var$ZodParsedType.map;
            if (typeof Set !== "undefined" && data instanceof Set) return $d76f6d4dfc9a3307$var$ZodParsedType.set;
            if (typeof Date !== "undefined" && data instanceof Date) return $d76f6d4dfc9a3307$var$ZodParsedType.date;
            return $d76f6d4dfc9a3307$var$ZodParsedType.object;
        default:
            return $d76f6d4dfc9a3307$var$ZodParsedType.unknown;
    }
};
var $d76f6d4dfc9a3307$var$ZodIssueCode = $d76f6d4dfc9a3307$var$util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
]);
var $d76f6d4dfc9a3307$var$quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
var $d76f6d4dfc9a3307$var$ZodError = class extends Error {
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) Object.setPrototypeOf(this, actualProto);
        else this.__proto__ = actualProto;
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") issue.unionErrors.map(processError);
                else if (issue.code === "invalid_return_type") processError(issue.returnTypeError);
                else if (issue.code === "invalid_arguments") processError(issue.argumentsError);
                else if (issue.path.length === 0) fieldErrors._errors.push(mapper(issue));
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) curr[el] = curr[el] || {
                            _errors: []
                        };
                        else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, $d76f6d4dfc9a3307$var$util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues)if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
        } else formErrors.push(mapper(sub));
        return {
            formErrors: formErrors,
            fieldErrors: fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
};
$d76f6d4dfc9a3307$var$ZodError.create = (issues)=>{
    const error = new $d76f6d4dfc9a3307$var$ZodError(issues);
    return error;
};
var $d76f6d4dfc9a3307$var$errorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type:
            if (issue.received === $d76f6d4dfc9a3307$var$ZodParsedType.undefined) message = "Required";
            else message = `Expected ${issue.expected}, received ${issue.received}`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, $d76f6d4dfc9a3307$var$util.jsonStringifyReplacer)}`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${$d76f6d4dfc9a3307$var$util.joinValues(issue.keys, ", ")}`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${$d76f6d4dfc9a3307$var$util.joinValues(issue.options)}`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${$d76f6d4dfc9a3307$var$util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                } else if ("startsWith" in issue.validation) message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                else if ("endsWith" in issue.validation) message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                else $d76f6d4dfc9a3307$var$util.assertNever(issue.validation);
            } else if (issue.validation !== "regex") message = `Invalid ${issue.validation}`;
            else message = "Invalid";
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else message = "Invalid input";
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else message = "Invalid input";
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case $d76f6d4dfc9a3307$var$ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            $d76f6d4dfc9a3307$var$util.assertNever(issue);
    }
    return {
        message: message
    };
};
var $d76f6d4dfc9a3307$var$overrideErrorMap = $d76f6d4dfc9a3307$var$errorMap;
function $d76f6d4dfc9a3307$var$setErrorMap(map) {
    $d76f6d4dfc9a3307$var$overrideErrorMap = map;
}
function $d76f6d4dfc9a3307$var$getErrorMap() {
    return $d76f6d4dfc9a3307$var$overrideErrorMap;
}
var $d76f6d4dfc9a3307$var$makeIssue = (params2)=>{
    const { data: data, path: path, errorMaps: errorMaps, issueData: issueData } = params2;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps)errorMessage = map(fullIssue, {
        data: data,
        defaultError: errorMessage
    }).message;
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
var $d76f6d4dfc9a3307$var$EMPTY_PATH = [];
function $d76f6d4dfc9a3307$var$addIssueToContext(ctx, issueData) {
    const issue = $d76f6d4dfc9a3307$var$makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            $d76f6d4dfc9a3307$var$getErrorMap(),
            $d76f6d4dfc9a3307$var$errorMap
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
var $d76f6d4dfc9a3307$var$ParseStatus = class {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results){
            if (s.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
            if (s.status === "dirty") status.dirty();
            arrayValue.push(s.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs)syncPairs.push({
            key: await pair.key,
            value: await pair.value
        });
        return $d76f6d4dfc9a3307$var$ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key: key, value: value } = pair;
            if (key.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
            if (value.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) finalObject[key.value] = value.value;
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
};
var $d76f6d4dfc9a3307$var$INVALID = Object.freeze({
    status: "aborted"
});
var $d76f6d4dfc9a3307$var$DIRTY = (value)=>({
        status: "dirty",
        value: value
    });
var $d76f6d4dfc9a3307$var$OK = (value)=>({
        status: "valid",
        value: value
    });
var $d76f6d4dfc9a3307$var$isAborted = (x)=>x.status === "aborted";
var $d76f6d4dfc9a3307$var$isDirty = (x)=>x.status === "dirty";
var $d76f6d4dfc9a3307$var$isValid = (x)=>x.status === "valid";
var $d76f6d4dfc9a3307$var$isAsync = (x)=>typeof Promise !== "undefined" && x instanceof Promise;
var $d76f6d4dfc9a3307$var$errorUtil;
(function(errorUtil2) {
    errorUtil2.errToObj = (message)=>typeof message === "string" ? {
            message: message
        } : message || {};
    errorUtil2.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})($d76f6d4dfc9a3307$var$errorUtil || ($d76f6d4dfc9a3307$var$errorUtil = {}));
var $d76f6d4dfc9a3307$var$ParseInputLazyPath = class {
    constructor(parent, value, path, key){
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) this._cachedPath.push(...this._path, ...this._key);
            else this._cachedPath.push(...this._path, this._key);
        }
        return this._cachedPath;
    }
};
var $d76f6d4dfc9a3307$var$handleResult = (ctx, result)=>{
    if ($d76f6d4dfc9a3307$var$isValid(result)) return {
        success: true,
        data: result.value
    };
    else {
        if (!ctx.common.issues.length) throw new Error("Validation failed but no issues detected.");
        return {
            success: false,
            get error () {
                if (this._error) return this._error;
                const error = new $d76f6d4dfc9a3307$var$ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            }
        };
    }
};
function $d76f6d4dfc9a3307$var$processCreateParams(params2) {
    if (!params2) return {};
    const { errorMap: errorMap2, invalid_type_error: invalid_type_error, required_error: required_error, description: description } = params2;
    if (errorMap2 && (invalid_type_error || required_error)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    if (errorMap2) return {
        errorMap: errorMap2,
        description: description
    };
    const customMap = (iss, ctx)=>{
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        if (typeof ctx.data === "undefined") return {
            message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError
        };
        return {
            message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description: description
    };
}
var $d76f6d4dfc9a3307$var$ZodType = class {
    constructor(def2){
        this.spa = this.safeParseAsync;
        this._def = def2;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return $d76f6d4dfc9a3307$var$getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: $d76f6d4dfc9a3307$var$getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new $d76f6d4dfc9a3307$var$ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: $d76f6d4dfc9a3307$var$getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if ($d76f6d4dfc9a3307$var$isAsync(result)) throw new Error("Synchronous parse encountered promise.");
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params2) {
        const result = this.safeParse(data, params2);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params2) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params2 === null || params2 === void 0 ? void 0 : params2.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap
            },
            path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data: data,
            parsedType: $d76f6d4dfc9a3307$var$getParsedType(data)
        };
        const result = this._parseSync({
            data: data,
            path: ctx.path,
            parent: ctx
        });
        return $d76f6d4dfc9a3307$var$handleResult(ctx, result);
    }
    async parseAsync(data, params2) {
        const result = await this.safeParseAsync(data, params2);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params2) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap,
                async: true
            },
            path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data: data,
            parsedType: $d76f6d4dfc9a3307$var$getParsedType(data)
        };
        const maybeAsyncResult = this._parse({
            data: data,
            path: ctx.path,
            parent: ctx
        });
        const result = await ($d76f6d4dfc9a3307$var$isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return $d76f6d4dfc9a3307$var$handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") return {
                message: message
            };
            else if (typeof message === "function") return message(val);
            else return message;
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) return result.then((data)=>{
                if (!data) {
                    setError();
                    return false;
                } else return true;
            });
            if (!result) {
                setError();
                return false;
            } else return true;
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else return true;
        });
    }
    _refinement(refinement) {
        return new $d76f6d4dfc9a3307$var$ZodEffects({
            schema: this,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement: refinement
            }
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return $d76f6d4dfc9a3307$var$ZodOptional.create(this, this._def);
    }
    nullable() {
        return $d76f6d4dfc9a3307$var$ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return $d76f6d4dfc9a3307$var$ZodArray.create(this, this._def);
    }
    promise() {
        return $d76f6d4dfc9a3307$var$ZodPromise.create(this, this._def);
    }
    or(option) {
        return $d76f6d4dfc9a3307$var$ZodUnion.create([
            this,
            option
        ], this._def);
    }
    and(incoming) {
        return $d76f6d4dfc9a3307$var$ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new $d76f6d4dfc9a3307$var$ZodEffects({
            ...$d76f6d4dfc9a3307$var$processCreateParams(this._def),
            schema: this,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform: transform
            }
        });
    }
    default(def2) {
        const defaultValueFunc = typeof def2 === "function" ? def2 : ()=>def2;
        return new $d76f6d4dfc9a3307$var$ZodDefault({
            ...$d76f6d4dfc9a3307$var$processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new $d76f6d4dfc9a3307$var$ZodBranded({
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...$d76f6d4dfc9a3307$var$processCreateParams(this._def)
        });
    }
    catch(def2) {
        const catchValueFunc = typeof def2 === "function" ? def2 : ()=>def2;
        return new $d76f6d4dfc9a3307$var$ZodCatch({
            ...$d76f6d4dfc9a3307$var$processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodCatch
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description: description
        });
    }
    pipe(target) {
        return $d76f6d4dfc9a3307$var$ZodPipeline.create(this, target);
    }
    isOptional() {
        return this.safeParse(void 0).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
};
var $d76f6d4dfc9a3307$var$cuidRegex = /^c[^\s-]{8,}$/i;
var $d76f6d4dfc9a3307$var$cuid2Regex = /^[a-z][a-z0-9]*$/;
var $d76f6d4dfc9a3307$var$ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
var $d76f6d4dfc9a3307$var$uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var $d76f6d4dfc9a3307$var$emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
var $d76f6d4dfc9a3307$var$emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
var $d76f6d4dfc9a3307$var$ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
var $d76f6d4dfc9a3307$var$ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var $d76f6d4dfc9a3307$var$datetimeRegex = (args)=>{
    if (args.precision) {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    } else if (args.precision === 0) {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    } else {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
};
function $d76f6d4dfc9a3307$var$isValidIP(ip, version2) {
    if ((version2 === "v4" || !version2) && $d76f6d4dfc9a3307$var$ipv4Regex.test(ip)) return true;
    if ((version2 === "v6" || !version2) && $d76f6d4dfc9a3307$var$ipv6Regex.test(ip)) return true;
    return false;
}
var $d76f6d4dfc9a3307$var$ZodString = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this._regex = (regex, validation, message)=>this.refinement((data)=>regex.test(data), {
                validation: validation,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
            });
        this.nonempty = (message)=>this.min(1, $d76f6d4dfc9a3307$var$errorUtil.errToObj(message));
        this.trim = ()=>new $d76f6d4dfc9a3307$var$ZodString({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "trim"
                    }
                ]
            });
        this.toLowerCase = ()=>new $d76f6d4dfc9a3307$var$ZodString({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "toLowerCase"
                    }
                ]
            });
        this.toUpperCase = ()=>new $d76f6d4dfc9a3307$var$ZodString({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "toUpperCase"
                    }
                ]
            });
    }
    _parse(input) {
        if (this._def.coerce) input.data = String(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.string,
                received: ctx2.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const status = new $d76f6d4dfc9a3307$var$ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    else if (tooSmall) $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!$d76f6d4dfc9a3307$var$emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "email",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "emoji") {
                if (!$d76f6d4dfc9a3307$var$emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "emoji",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!$d76f6d4dfc9a3307$var$uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "uuid",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!$d76f6d4dfc9a3307$var$cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "cuid",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid2") {
                if (!$d76f6d4dfc9a3307$var$cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ulid") {
                if (!$d76f6d4dfc9a3307$var$ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "ulid",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") try {
                new URL(input.data);
            } catch (_a) {
                ctx = this._getOrReturnCtx(input, ctx);
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    validation: "url",
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                    message: check.message
                });
                status.dirty();
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "regex",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") input.data = input.data.trim();
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        validation: {
                            includes: check.value,
                            position: check.position
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "toLowerCase") input.data = input.data.toLowerCase();
            else if (check.kind === "toUpperCase") input.data = input.data.toUpperCase();
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "datetime") {
                const regex = $d76f6d4dfc9a3307$var$datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ip") {
                if (!$d76f6d4dfc9a3307$var$isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        validation: "ip",
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else $d76f6d4dfc9a3307$var$util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _addCheck(check) {
        return new $d76f6d4dfc9a3307$var$ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    emoji(message) {
        return this._addCheck({
            kind: "emoji",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    cuid2(message) {
        return this._addCheck({
            kind: "cuid2",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    ulid(message) {
        return this._addCheck({
            kind: "ulid",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    ip(options) {
        return this._addCheck({
            kind: "ip",
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(options)
        });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            message: options
        });
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...$d76f6d4dfc9a3307$var$errorUtil.errToObj(message)
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch)=>ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch)=>ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch)=>ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch)=>ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
};
$d76f6d4dfc9a3307$var$ZodString.create = (params2)=>{
    var _a;
    return new $d76f6d4dfc9a3307$var$ZodString({
        checks: [],
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
function $d76f6d4dfc9a3307$var$floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
var $d76f6d4dfc9a3307$var$ZodNumber = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) input.data = Number(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.number,
                received: ctx2.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        let ctx = void 0;
        const status = new $d76f6d4dfc9a3307$var$ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!$d76f6d4dfc9a3307$var$util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if ($d76f6d4dfc9a3307$var$floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.not_finite,
                        message: check.message
                    });
                    status.dirty();
                }
            } else $d76f6d4dfc9a3307$var$util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new $d76f6d4dfc9a3307$var$ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: kind,
                    value: value,
                    inclusive: inclusive,
                    message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new $d76f6d4dfc9a3307$var$ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int" || ch.kind === "multipleOf" && $d76f6d4dfc9a3307$var$util.isInteger(ch.value));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") return true;
            else if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            } else if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
};
$d76f6d4dfc9a3307$var$ZodNumber.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNumber({
        checks: [],
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodBigInt = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) input.data = BigInt(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.bigint) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.bigint,
                received: ctx2.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        let ctx = void 0;
        const status = new $d76f6d4dfc9a3307$var$ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else $d76f6d4dfc9a3307$var$util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, $d76f6d4dfc9a3307$var$errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new $d76f6d4dfc9a3307$var$ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: kind,
                    value: value,
                    inclusive: inclusive,
                    message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new $d76f6d4dfc9a3307$var$ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
};
$d76f6d4dfc9a3307$var$ZodBigInt.create = (params2)=>{
    var _a;
    return new $d76f6d4dfc9a3307$var$ZodBigInt({
        checks: [],
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodBoolean = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = Boolean(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.boolean,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodBoolean.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodBoolean({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodDate = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = new Date(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.date,
                received: ctx2.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_date
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const status = new $d76f6d4dfc9a3307$var$ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else $d76f6d4dfc9a3307$var$util.assertNever(check);
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new $d76f6d4dfc9a3307$var$ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
};
$d76f6d4dfc9a3307$var$ZodDate.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodDate({
        checks: [],
        coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodDate,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodSymbol = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.symbol,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodSymbol.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodSymbol({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodSymbol,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodUndefined = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.undefined,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodUndefined.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodUndefined({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodUndefined,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodNull = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.null,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodNull.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNull({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNull,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodAny = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this._any = true;
    }
    _parse(input) {
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodAny.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodAny({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodAny,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodUnknown = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this._unknown = true;
    }
    _parse(input) {
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodUnknown.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodUnknown({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodUnknown,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodNever = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
            code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
            expected: $d76f6d4dfc9a3307$var$ZodParsedType.never,
            received: ctx.parsedType
        });
        return $d76f6d4dfc9a3307$var$INVALID;
    }
};
$d76f6d4dfc9a3307$var$ZodNever.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNever({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNever,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodVoid = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.void,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
};
$d76f6d4dfc9a3307$var$ZodVoid.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodVoid({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodVoid,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodArray = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx, status: status } = this._processInputParams(input);
        const def2 = this._def;
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.array) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.array,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (def2.exactLength !== null) {
            const tooBig = ctx.data.length > def2.exactLength.value;
            const tooSmall = ctx.data.length < def2.exactLength.value;
            if (tooBig || tooSmall) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: tooBig ? $d76f6d4dfc9a3307$var$ZodIssueCode.too_big : $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                    minimum: tooSmall ? def2.exactLength.value : void 0,
                    maximum: tooBig ? def2.exactLength.value : void 0,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def2.exactLength.message
                });
                status.dirty();
            }
        }
        if (def2.minLength !== null) {
            if (ctx.data.length < def2.minLength.value) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                    minimum: def2.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def2.minLength.message
                });
                status.dirty();
            }
        }
        if (def2.maxLength !== null) {
            if (ctx.data.length > def2.maxLength.value) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                    maximum: def2.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def2.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) return Promise.all([
            ...ctx.data
        ].map((item, i)=>{
            return def2.type._parseAsync(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result2)=>{
            return $d76f6d4dfc9a3307$var$ParseStatus.mergeArray(status, result2);
        });
        const result = [
            ...ctx.data
        ].map((item, i)=>{
            return def2.type._parseSync(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return $d76f6d4dfc9a3307$var$ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new $d76f6d4dfc9a3307$var$ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new $d76f6d4dfc9a3307$var$ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
            }
        });
    }
    length(len, message) {
        return new $d76f6d4dfc9a3307$var$ZodArray({
            ...this._def,
            exactLength: {
                value: len,
                message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
            }
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
$d76f6d4dfc9a3307$var$ZodArray.create = (schema2, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodArray({
        type: schema2,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodArray,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
function $d76f6d4dfc9a3307$var$deepPartialify(schema2) {
    if (schema2 instanceof $d76f6d4dfc9a3307$var$ZodObject) {
        const newShape = {};
        for(const key in schema2.shape){
            const fieldSchema = schema2.shape[key];
            newShape[key] = $d76f6d4dfc9a3307$var$ZodOptional.create($d76f6d4dfc9a3307$var$deepPartialify(fieldSchema));
        }
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...schema2._def,
            shape: ()=>newShape
        });
    } else if (schema2 instanceof $d76f6d4dfc9a3307$var$ZodArray) return new $d76f6d4dfc9a3307$var$ZodArray({
        ...schema2._def,
        type: $d76f6d4dfc9a3307$var$deepPartialify(schema2.element)
    });
    else if (schema2 instanceof $d76f6d4dfc9a3307$var$ZodOptional) return $d76f6d4dfc9a3307$var$ZodOptional.create($d76f6d4dfc9a3307$var$deepPartialify(schema2.unwrap()));
    else if (schema2 instanceof $d76f6d4dfc9a3307$var$ZodNullable) return $d76f6d4dfc9a3307$var$ZodNullable.create($d76f6d4dfc9a3307$var$deepPartialify(schema2.unwrap()));
    else if (schema2 instanceof $d76f6d4dfc9a3307$var$ZodTuple) return $d76f6d4dfc9a3307$var$ZodTuple.create(schema2.items.map((item)=>$d76f6d4dfc9a3307$var$deepPartialify(item)));
    else return schema2;
}
var $d76f6d4dfc9a3307$var$ZodObject = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = $d76f6d4dfc9a3307$var$util.objectKeys(shape);
        return this._cached = {
            shape: shape,
            keys: keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx2, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.object,
                received: ctx2.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const { status: status, ctx: ctx } = this._processInputParams(input);
        const { shape: shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof $d76f6d4dfc9a3307$var$ZodNever && this._def.unknownKeys === "strip")) {
            for(const key in ctx.data)if (!shapeKeys.includes(key)) extraKeys.push(key);
        }
        const pairs = [];
        for (const key of shapeKeys){
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: keyValidator._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (this._def.catchall instanceof $d76f6d4dfc9a3307$var$ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") for (const key of extraKeys)pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: {
                    status: "valid",
                    value: ctx.data[key]
                }
            });
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                        code: $d76f6d4dfc9a3307$var$ZodIssueCode.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys){
                const value = ctx.data[key];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key
                    },
                    value: catchall._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, value, ctx.path, key)),
                    alwaysSet: key in ctx.data
                });
            }
        }
        if (ctx.common.async) return Promise.resolve().then(async ()=>{
            const syncPairs = [];
            for (const pair of pairs){
                const key = await pair.key;
                syncPairs.push({
                    key: key,
                    value: await pair.value,
                    alwaysSet: pair.alwaysSet
                });
            }
            return syncPairs;
        }).then((syncPairs)=>{
            return $d76f6d4dfc9a3307$var$ParseStatus.mergeObjectSync(status, syncPairs);
        });
        else return $d76f6d4dfc9a3307$var$ParseStatus.mergeObjectSync(status, pairs);
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        $d76f6d4dfc9a3307$var$errorUtil.errToObj;
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = $d76f6d4dfc9a3307$var$errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    extend(augmentation) {
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            shape: ()=>({
                    ...this._def.shape(),
                    ...augmentation
                })
        });
    }
    merge(merging) {
        const merged = new $d76f6d4dfc9a3307$var$ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>({
                    ...this._def.shape(),
                    ...merging._def.shape()
                }),
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    setKey(key, schema2) {
        return this.augment({
            [key]: schema2
        });
    }
    catchall(index) {
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        $d76f6d4dfc9a3307$var$util.objectKeys(mask).forEach((key)=>{
            if (mask[key] && this.shape[key]) shape[key] = this.shape[key];
        });
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        $d76f6d4dfc9a3307$var$util.objectKeys(this.shape).forEach((key)=>{
            if (!mask[key]) shape[key] = this.shape[key];
        });
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    deepPartial() {
        return $d76f6d4dfc9a3307$var$deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        $d76f6d4dfc9a3307$var$util.objectKeys(this.shape).forEach((key)=>{
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) newShape[key] = fieldSchema;
            else newShape[key] = fieldSchema.optional();
        });
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required(mask) {
        const newShape = {};
        $d76f6d4dfc9a3307$var$util.objectKeys(this.shape).forEach((key)=>{
            if (mask && !mask[key]) newShape[key] = this.shape[key];
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while(newField instanceof $d76f6d4dfc9a3307$var$ZodOptional)newField = newField._def.innerType;
                newShape[key] = newField;
            }
        });
        return new $d76f6d4dfc9a3307$var$ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return $d76f6d4dfc9a3307$var$createZodEnum($d76f6d4dfc9a3307$var$util.objectKeys(this.shape));
    }
};
$d76f6d4dfc9a3307$var$ZodObject.create = (shape, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: $d76f6d4dfc9a3307$var$ZodNever.create(),
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodObject,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
$d76f6d4dfc9a3307$var$ZodObject.strictCreate = (shape, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: $d76f6d4dfc9a3307$var$ZodNever.create(),
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodObject,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
$d76f6d4dfc9a3307$var$ZodObject.lazycreate = (shape, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodObject({
        shape: shape,
        unknownKeys: "strip",
        catchall: $d76f6d4dfc9a3307$var$ZodNever.create(),
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodObject,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodUnion = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            for (const result of results){
                if (result.result.status === "valid") return result.result;
            }
            for (const result of results)if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
            }
            const unionErrors = results.map((result)=>new $d76f6d4dfc9a3307$var$ZodError(result.ctx.common.issues));
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_union,
                unionErrors: unionErrors
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (ctx.common.async) return Promise.all(options.map(async (option)=>{
            const childCtx = {
                ...ctx,
                common: {
                    ...ctx.common,
                    issues: []
                },
                parent: null
            };
            return {
                result: await option._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                }),
                ctx: childCtx
            };
        })).then(handleResults);
        else {
            let dirty = void 0;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") return result;
                else if (result.status === "dirty" && !dirty) dirty = {
                    result: result,
                    ctx: childCtx
                };
                if (childCtx.common.issues.length) issues.push(childCtx.common.issues);
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues2)=>new $d76f6d4dfc9a3307$var$ZodError(issues2));
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_union,
                unionErrors: unionErrors
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
};
$d76f6d4dfc9a3307$var$ZodUnion.create = (types, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodUnion({
        options: types,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodUnion,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$getDiscriminator = (type)=>{
    if (type instanceof $d76f6d4dfc9a3307$var$ZodLazy) return $d76f6d4dfc9a3307$var$getDiscriminator(type.schema);
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodEffects) return $d76f6d4dfc9a3307$var$getDiscriminator(type.innerType());
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodLiteral) return [
        type.value
    ];
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodEnum) return type.options;
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodNativeEnum) return Object.keys(type.enum);
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodDefault) return $d76f6d4dfc9a3307$var$getDiscriminator(type._def.innerType);
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodUndefined) return [
        void 0
    ];
    else if (type instanceof $d76f6d4dfc9a3307$var$ZodNull) return [
        null
    ];
    else return null;
};
var $d76f6d4dfc9a3307$var$ZodDiscriminatedUnion = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.object) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.object,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [
                    discriminator
                ]
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (ctx.common.async) return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
        else return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    static create(discriminator, options, params2) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options){
            const discriminatorValues = $d76f6d4dfc9a3307$var$getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            for (const value of discriminatorValues){
                if (optionsMap.has(value)) throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                optionsMap.set(value, type);
            }
        }
        return new $d76f6d4dfc9a3307$var$ZodDiscriminatedUnion({
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator: discriminator,
            options: options,
            optionsMap: optionsMap,
            ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
        });
    }
};
function $d76f6d4dfc9a3307$var$mergeValues(a, b) {
    const aType = $d76f6d4dfc9a3307$var$getParsedType(a);
    const bType = $d76f6d4dfc9a3307$var$getParsedType(b);
    if (a === b) return {
        valid: true,
        data: a
    };
    else if (aType === $d76f6d4dfc9a3307$var$ZodParsedType.object && bType === $d76f6d4dfc9a3307$var$ZodParsedType.object) {
        const bKeys = $d76f6d4dfc9a3307$var$util.objectKeys(b);
        const sharedKeys = $d76f6d4dfc9a3307$var$util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = $d76f6d4dfc9a3307$var$mergeValues(a[key], b[key]);
            if (!sharedValue.valid) return {
                valid: false
            };
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === $d76f6d4dfc9a3307$var$ZodParsedType.array && bType === $d76f6d4dfc9a3307$var$ZodParsedType.array) {
        if (a.length !== b.length) return {
            valid: false
        };
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = $d76f6d4dfc9a3307$var$mergeValues(itemA, itemB);
            if (!sharedValue.valid) return {
                valid: false
            };
            newArray.push(sharedValue.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === $d76f6d4dfc9a3307$var$ZodParsedType.date && bType === $d76f6d4dfc9a3307$var$ZodParsedType.date && +a === +b) return {
        valid: true,
        data: a
    };
    else return {
        valid: false
    };
}
var $d76f6d4dfc9a3307$var$ZodIntersection = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if ($d76f6d4dfc9a3307$var$isAborted(parsedLeft) || $d76f6d4dfc9a3307$var$isAborted(parsedRight)) return $d76f6d4dfc9a3307$var$INVALID;
            const merged = $d76f6d4dfc9a3307$var$mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_intersection_types
                });
                return $d76f6d4dfc9a3307$var$INVALID;
            }
            if ($d76f6d4dfc9a3307$var$isDirty(parsedLeft) || $d76f6d4dfc9a3307$var$isDirty(parsedRight)) status.dirty();
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) return Promise.all([
            this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }),
            this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            })
        ]).then(([left, right])=>handleParsed(left, right));
        else return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }));
    }
};
$d76f6d4dfc9a3307$var$ZodIntersection.create = (left, right, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodIntersection({
        left: left,
        right: right,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodIntersection,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodTuple = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.array) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.array,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            status.dirty();
        }
        const items = [
            ...ctx.data
        ].map((item, itemIndex)=>{
            const schema2 = this._def.items[itemIndex] || this._def.rest;
            if (!schema2) return null;
            return schema2._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x);
        if (ctx.common.async) return Promise.all(items).then((results)=>{
            return $d76f6d4dfc9a3307$var$ParseStatus.mergeArray(status, results);
        });
        else return $d76f6d4dfc9a3307$var$ParseStatus.mergeArray(status, items);
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new $d76f6d4dfc9a3307$var$ZodTuple({
            ...this._def,
            rest: rest
        });
    }
};
$d76f6d4dfc9a3307$var$ZodTuple.create = (schemas2, params2)=>{
    if (!Array.isArray(schemas2)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new $d76f6d4dfc9a3307$var$ZodTuple({
        items: schemas2,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodRecord = class extends $d76f6d4dfc9a3307$var$ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.object) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.object,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data)pairs.push({
            key: keyType._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
        if (ctx.common.async) return $d76f6d4dfc9a3307$var$ParseStatus.mergeObjectAsync(status, pairs);
        else return $d76f6d4dfc9a3307$var$ParseStatus.mergeObjectSync(status, pairs);
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof $d76f6d4dfc9a3307$var$ZodType) return new $d76f6d4dfc9a3307$var$ZodRecord({
            keyType: first,
            valueType: second,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodRecord,
            ...$d76f6d4dfc9a3307$var$processCreateParams(third)
        });
        return new $d76f6d4dfc9a3307$var$ZodRecord({
            keyType: $d76f6d4dfc9a3307$var$ZodString.create(),
            valueType: first,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodRecord,
            ...$d76f6d4dfc9a3307$var$processCreateParams(second)
        });
    }
};
var $d76f6d4dfc9a3307$var$ZodMap = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.map) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.map,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                    if (key.status === "dirty" || value.status === "dirty") status.dirty();
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                if (key.status === "dirty" || value.status === "dirty") status.dirty();
                finalMap.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap
            };
        }
    }
};
$d76f6d4dfc9a3307$var$ZodMap.create = (keyType, valueType, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodMap({
        valueType: valueType,
        keyType: keyType,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodMap,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodSet = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.set) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.set,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const def2 = this._def;
        if (def2.minSize !== null) {
            if (ctx.data.size < def2.minSize.value) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_small,
                    minimum: def2.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def2.minSize.message
                });
                status.dirty();
            }
        }
        if (def2.maxSize !== null) {
            if (ctx.data.size > def2.maxSize.value) {
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.too_big,
                    maximum: def2.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def2.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2){
                if (element.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new $d76f6d4dfc9a3307$var$ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) return Promise.all(elements).then((elements2)=>finalizeSet(elements2));
        else return finalizeSet(elements);
    }
    min(minSize, message) {
        return new $d76f6d4dfc9a3307$var$ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new $d76f6d4dfc9a3307$var$ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: $d76f6d4dfc9a3307$var$errorUtil.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
$d76f6d4dfc9a3307$var$ZodSet.create = (valueType, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodSet({
        valueType: valueType,
        minSize: null,
        maxSize: null,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodSet,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodFunction = class extends $d76f6d4dfc9a3307$var$ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.function) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.function,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        function makeArgsIssue(args, error) {
            return $d76f6d4dfc9a3307$var$makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    $d76f6d4dfc9a3307$var$getErrorMap(),
                    $d76f6d4dfc9a3307$var$errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return $d76f6d4dfc9a3307$var$makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    $d76f6d4dfc9a3307$var$getErrorMap(),
                    $d76f6d4dfc9a3307$var$errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params2 = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof $d76f6d4dfc9a3307$var$ZodPromise) return $d76f6d4dfc9a3307$var$OK(async (...args)=>{
            const error = new $d76f6d4dfc9a3307$var$ZodError([]);
            const parsedArgs = await this._def.args.parseAsync(args, params2).catch((e)=>{
                error.addIssue(makeArgsIssue(args, e));
                throw error;
            });
            const result = await fn(...parsedArgs);
            const parsedReturns = await this._def.returns._def.type.parseAsync(result, params2).catch((e)=>{
                error.addIssue(makeReturnsIssue(result, e));
                throw error;
            });
            return parsedReturns;
        });
        else return $d76f6d4dfc9a3307$var$OK((...args)=>{
            const parsedArgs = this._def.args.safeParse(args, params2);
            if (!parsedArgs.success) throw new $d76f6d4dfc9a3307$var$ZodError([
                makeArgsIssue(args, parsedArgs.error)
            ]);
            const result = fn(...parsedArgs.data);
            const parsedReturns = this._def.returns.safeParse(result, params2);
            if (!parsedReturns.success) throw new $d76f6d4dfc9a3307$var$ZodError([
                makeReturnsIssue(result, parsedReturns.error)
            ]);
            return parsedReturns.data;
        });
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new $d76f6d4dfc9a3307$var$ZodFunction({
            ...this._def,
            args: $d76f6d4dfc9a3307$var$ZodTuple.create(items).rest($d76f6d4dfc9a3307$var$ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new $d76f6d4dfc9a3307$var$ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params2) {
        return new $d76f6d4dfc9a3307$var$ZodFunction({
            args: args ? args : $d76f6d4dfc9a3307$var$ZodTuple.create([]).rest($d76f6d4dfc9a3307$var$ZodUnknown.create()),
            returns: returns || $d76f6d4dfc9a3307$var$ZodUnknown.create(),
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodFunction,
            ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
        });
    }
};
var $d76f6d4dfc9a3307$var$ZodLazy = class extends $d76f6d4dfc9a3307$var$ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
};
$d76f6d4dfc9a3307$var$ZodLazy.create = (getter, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodLazy({
        getter: getter,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodLazy,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodLiteral = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                received: ctx.data,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_literal,
                expected: this._def.value
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
};
$d76f6d4dfc9a3307$var$ZodLiteral.create = (value, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodLiteral({
        value: value,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodLiteral,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
function $d76f6d4dfc9a3307$var$createZodEnum(values, params2) {
    return new $d76f6d4dfc9a3307$var$ZodEnum({
        values: values,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEnum,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
}
var $d76f6d4dfc9a3307$var$ZodEnum = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                expected: $d76f6d4dfc9a3307$var$util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                received: ctx.data,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    extract(values) {
        return $d76f6d4dfc9a3307$var$ZodEnum.create(values);
    }
    exclude(values) {
        return $d76f6d4dfc9a3307$var$ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)));
    }
};
$d76f6d4dfc9a3307$var$ZodEnum.create = $d76f6d4dfc9a3307$var$createZodEnum;
var $d76f6d4dfc9a3307$var$ZodNativeEnum = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const nativeEnumValues = $d76f6d4dfc9a3307$var$util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.string && ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.number) {
            const expectedValues = $d76f6d4dfc9a3307$var$util.objectValues(nativeEnumValues);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                expected: $d76f6d4dfc9a3307$var$util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = $d76f6d4dfc9a3307$var$util.objectValues(nativeEnumValues);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                received: ctx.data,
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return $d76f6d4dfc9a3307$var$OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
};
$d76f6d4dfc9a3307$var$ZodNativeEnum.create = (values, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNativeEnum({
        values: values,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNativeEnum,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodPromise = class extends $d76f6d4dfc9a3307$var$ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        if (ctx.parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.promise && ctx.common.async === false) {
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.promise,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        const promisified = ctx.parsedType === $d76f6d4dfc9a3307$var$ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return $d76f6d4dfc9a3307$var$OK(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
};
$d76f6d4dfc9a3307$var$ZodPromise.create = (schema2, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodPromise({
        type: schema2,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodPromise,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodEffects = class extends $d76f6d4dfc9a3307$var$ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) return Promise.resolve(processed).then((processed2)=>{
                return this._def.schema._parseAsync({
                    data: processed2,
                    path: ctx.path,
                    parent: ctx
                });
            });
            else return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
            });
        }
        const checkCtx = {
            addIssue: (arg)=>{
                $d76f6d4dfc9a3307$var$addIssueToContext(ctx, arg);
                if (arg.fatal) status.abort();
                else status.dirty();
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) return Promise.resolve(result);
                if (result instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                if (inner.status === "dirty") status.dirty();
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((inner)=>{
                if (inner.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                if (inner.status === "dirty") status.dirty();
                return executeRefinement(inner.value).then(()=>{
                    return {
                        status: status.value,
                        value: inner.value
                    };
                });
            });
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base3 = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!$d76f6d4dfc9a3307$var$isValid(base3)) return base3;
                const result = effect.transform(base3.value, checkCtx);
                if (result instanceof Promise) throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                return {
                    status: status.value,
                    value: result
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((base3)=>{
                if (!$d76f6d4dfc9a3307$var$isValid(base3)) return base3;
                return Promise.resolve(effect.transform(base3.value, checkCtx)).then((result)=>({
                        status: status.value,
                        value: result
                    }));
            });
        }
        $d76f6d4dfc9a3307$var$util.assertNever(effect);
    }
};
$d76f6d4dfc9a3307$var$ZodEffects.create = (schema2, effect, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodEffects({
        schema: schema2,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEffects,
        effect: effect,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
$d76f6d4dfc9a3307$var$ZodEffects.createWithPreprocess = (preprocess, schema2, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodEffects({
        schema: schema2,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodEffects,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodOptional = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === $d76f6d4dfc9a3307$var$ZodParsedType.undefined) return $d76f6d4dfc9a3307$var$OK(void 0);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
$d76f6d4dfc9a3307$var$ZodOptional.create = (type, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodOptional({
        innerType: type,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodOptional,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodNullable = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === $d76f6d4dfc9a3307$var$ZodParsedType.null) return $d76f6d4dfc9a3307$var$OK(null);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
$d76f6d4dfc9a3307$var$ZodNullable.create = (type, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNullable({
        innerType: type,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNullable,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodDefault = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === $d76f6d4dfc9a3307$var$ZodParsedType.undefined) data = this._def.defaultValue();
        return this._def.innerType._parse({
            data: data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
};
$d76f6d4dfc9a3307$var$ZodDefault.create = (type, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodDefault({
        innerType: type,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params2.default === "function" ? params2.default : ()=>params2.default,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodCatch = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: []
            }
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx
            }
        });
        if ($d76f6d4dfc9a3307$var$isAsync(result)) return result.then((result2)=>{
            return {
                status: "valid",
                value: result2.status === "valid" ? result2.value : this._def.catchValue({
                    get error () {
                        return new $d76f6d4dfc9a3307$var$ZodError(newCtx.common.issues);
                    },
                    input: newCtx.data
                })
            };
        });
        else return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
                get error () {
                    return new $d76f6d4dfc9a3307$var$ZodError(newCtx.common.issues);
                },
                input: newCtx.data
            })
        };
    }
    removeCatch() {
        return this._def.innerType;
    }
};
$d76f6d4dfc9a3307$var$ZodCatch.create = (type, params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodCatch({
        innerType: type,
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params2.catch === "function" ? params2.catch : ()=>params2.catch,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$ZodNaN = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== $d76f6d4dfc9a3307$var$ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            $d76f6d4dfc9a3307$var$addIssueToContext(ctx, {
                code: $d76f6d4dfc9a3307$var$ZodIssueCode.invalid_type,
                expected: $d76f6d4dfc9a3307$var$ZodParsedType.nan,
                received: ctx.parsedType
            });
            return $d76f6d4dfc9a3307$var$INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
};
$d76f6d4dfc9a3307$var$ZodNaN.create = (params2)=>{
    return new $d76f6d4dfc9a3307$var$ZodNaN({
        typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodNaN,
        ...$d76f6d4dfc9a3307$var$processCreateParams(params2)
    });
};
var $d76f6d4dfc9a3307$var$BRAND = Symbol("zod_brand");
var $d76f6d4dfc9a3307$var$ZodBranded = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { ctx: ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data: data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
};
var $d76f6d4dfc9a3307$var$ZodPipeline = class extends $d76f6d4dfc9a3307$var$ZodType {
    _parse(input) {
        const { status: status, ctx: ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async ()=>{
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inResult.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return $d76f6d4dfc9a3307$var$DIRTY(inResult.value);
                } else return this._def.out._parseAsync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                });
            };
            return handleAsync();
        } else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
            if (inResult.status === "aborted") return $d76f6d4dfc9a3307$var$INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value
                };
            } else return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    static create(a, b) {
        return new $d76f6d4dfc9a3307$var$ZodPipeline({
            in: a,
            out: b,
            typeName: $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind.ZodPipeline
        });
    }
};
var $d76f6d4dfc9a3307$var$custom = (check, params2 = {}, fatal)=>{
    if (check) return $d76f6d4dfc9a3307$var$ZodAny.create().superRefine((data, ctx)=>{
        var _a, _b;
        if (!check(data)) {
            const p = typeof params2 === "function" ? params2(data) : typeof params2 === "string" ? {
                message: params2
            } : params2;
            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            const p2 = typeof p === "string" ? {
                message: p
            } : p;
            ctx.addIssue({
                code: "custom",
                ...p2,
                fatal: _fatal
            });
        }
    });
    return $d76f6d4dfc9a3307$var$ZodAny.create();
};
var $d76f6d4dfc9a3307$var$late = {
    object: $d76f6d4dfc9a3307$var$ZodObject.lazycreate
};
var $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
})($d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind || ($d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind = {}));
var $d76f6d4dfc9a3307$var$instanceOfType = (cls, params2 = {
    message: `Input not instance of ${cls.name}`
})=>$d76f6d4dfc9a3307$var$custom((data)=>data instanceof cls, params2);
var $d76f6d4dfc9a3307$var$stringType = $d76f6d4dfc9a3307$var$ZodString.create;
var $d76f6d4dfc9a3307$var$numberType = $d76f6d4dfc9a3307$var$ZodNumber.create;
var $d76f6d4dfc9a3307$var$nanType = $d76f6d4dfc9a3307$var$ZodNaN.create;
var $d76f6d4dfc9a3307$var$bigIntType = $d76f6d4dfc9a3307$var$ZodBigInt.create;
var $d76f6d4dfc9a3307$var$booleanType = $d76f6d4dfc9a3307$var$ZodBoolean.create;
var $d76f6d4dfc9a3307$var$dateType = $d76f6d4dfc9a3307$var$ZodDate.create;
var $d76f6d4dfc9a3307$var$symbolType = $d76f6d4dfc9a3307$var$ZodSymbol.create;
var $d76f6d4dfc9a3307$var$undefinedType = $d76f6d4dfc9a3307$var$ZodUndefined.create;
var $d76f6d4dfc9a3307$var$nullType = $d76f6d4dfc9a3307$var$ZodNull.create;
var $d76f6d4dfc9a3307$var$anyType = $d76f6d4dfc9a3307$var$ZodAny.create;
var $d76f6d4dfc9a3307$var$unknownType = $d76f6d4dfc9a3307$var$ZodUnknown.create;
var $d76f6d4dfc9a3307$var$neverType = $d76f6d4dfc9a3307$var$ZodNever.create;
var $d76f6d4dfc9a3307$var$voidType = $d76f6d4dfc9a3307$var$ZodVoid.create;
var $d76f6d4dfc9a3307$var$arrayType = $d76f6d4dfc9a3307$var$ZodArray.create;
var $d76f6d4dfc9a3307$var$objectType = $d76f6d4dfc9a3307$var$ZodObject.create;
var $d76f6d4dfc9a3307$var$strictObjectType = $d76f6d4dfc9a3307$var$ZodObject.strictCreate;
var $d76f6d4dfc9a3307$var$unionType = $d76f6d4dfc9a3307$var$ZodUnion.create;
var $d76f6d4dfc9a3307$var$discriminatedUnionType = $d76f6d4dfc9a3307$var$ZodDiscriminatedUnion.create;
var $d76f6d4dfc9a3307$var$intersectionType = $d76f6d4dfc9a3307$var$ZodIntersection.create;
var $d76f6d4dfc9a3307$var$tupleType = $d76f6d4dfc9a3307$var$ZodTuple.create;
var $d76f6d4dfc9a3307$var$recordType = $d76f6d4dfc9a3307$var$ZodRecord.create;
var $d76f6d4dfc9a3307$var$mapType = $d76f6d4dfc9a3307$var$ZodMap.create;
var $d76f6d4dfc9a3307$var$setType = $d76f6d4dfc9a3307$var$ZodSet.create;
var $d76f6d4dfc9a3307$var$functionType = $d76f6d4dfc9a3307$var$ZodFunction.create;
var $d76f6d4dfc9a3307$var$lazyType = $d76f6d4dfc9a3307$var$ZodLazy.create;
var $d76f6d4dfc9a3307$var$literalType = $d76f6d4dfc9a3307$var$ZodLiteral.create;
var $d76f6d4dfc9a3307$var$enumType = $d76f6d4dfc9a3307$var$ZodEnum.create;
var $d76f6d4dfc9a3307$var$nativeEnumType = $d76f6d4dfc9a3307$var$ZodNativeEnum.create;
var $d76f6d4dfc9a3307$var$promiseType = $d76f6d4dfc9a3307$var$ZodPromise.create;
var $d76f6d4dfc9a3307$var$effectsType = $d76f6d4dfc9a3307$var$ZodEffects.create;
var $d76f6d4dfc9a3307$var$optionalType = $d76f6d4dfc9a3307$var$ZodOptional.create;
var $d76f6d4dfc9a3307$var$nullableType = $d76f6d4dfc9a3307$var$ZodNullable.create;
var $d76f6d4dfc9a3307$var$preprocessType = $d76f6d4dfc9a3307$var$ZodEffects.createWithPreprocess;
var $d76f6d4dfc9a3307$var$pipelineType = $d76f6d4dfc9a3307$var$ZodPipeline.create;
var $d76f6d4dfc9a3307$var$ostring = ()=>$d76f6d4dfc9a3307$var$stringType().optional();
var $d76f6d4dfc9a3307$var$onumber = ()=>$d76f6d4dfc9a3307$var$numberType().optional();
var $d76f6d4dfc9a3307$var$oboolean = ()=>$d76f6d4dfc9a3307$var$booleanType().optional();
var $d76f6d4dfc9a3307$var$coerce = {
    string: (arg)=>$d76f6d4dfc9a3307$var$ZodString.create({
            ...arg,
            coerce: true
        }),
    number: (arg)=>$d76f6d4dfc9a3307$var$ZodNumber.create({
            ...arg,
            coerce: true
        }),
    boolean: (arg)=>$d76f6d4dfc9a3307$var$ZodBoolean.create({
            ...arg,
            coerce: true
        }),
    bigint: (arg)=>$d76f6d4dfc9a3307$var$ZodBigInt.create({
            ...arg,
            coerce: true
        }),
    date: (arg)=>$d76f6d4dfc9a3307$var$ZodDate.create({
            ...arg,
            coerce: true
        })
};
var $d76f6d4dfc9a3307$var$NEVER = $d76f6d4dfc9a3307$var$INVALID;
var $d76f6d4dfc9a3307$var$z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: $d76f6d4dfc9a3307$var$errorMap,
    setErrorMap: $d76f6d4dfc9a3307$var$setErrorMap,
    getErrorMap: $d76f6d4dfc9a3307$var$getErrorMap,
    makeIssue: $d76f6d4dfc9a3307$var$makeIssue,
    EMPTY_PATH: $d76f6d4dfc9a3307$var$EMPTY_PATH,
    addIssueToContext: $d76f6d4dfc9a3307$var$addIssueToContext,
    ParseStatus: $d76f6d4dfc9a3307$var$ParseStatus,
    INVALID: $d76f6d4dfc9a3307$var$INVALID,
    DIRTY: $d76f6d4dfc9a3307$var$DIRTY,
    OK: $d76f6d4dfc9a3307$var$OK,
    isAborted: $d76f6d4dfc9a3307$var$isAborted,
    isDirty: $d76f6d4dfc9a3307$var$isDirty,
    isValid: $d76f6d4dfc9a3307$var$isValid,
    isAsync: $d76f6d4dfc9a3307$var$isAsync,
    get util () {
        return $d76f6d4dfc9a3307$var$util;
    },
    get objectUtil () {
        return $d76f6d4dfc9a3307$var$objectUtil;
    },
    ZodParsedType: $d76f6d4dfc9a3307$var$ZodParsedType,
    getParsedType: $d76f6d4dfc9a3307$var$getParsedType,
    ZodType: $d76f6d4dfc9a3307$var$ZodType,
    ZodString: $d76f6d4dfc9a3307$var$ZodString,
    ZodNumber: $d76f6d4dfc9a3307$var$ZodNumber,
    ZodBigInt: $d76f6d4dfc9a3307$var$ZodBigInt,
    ZodBoolean: $d76f6d4dfc9a3307$var$ZodBoolean,
    ZodDate: $d76f6d4dfc9a3307$var$ZodDate,
    ZodSymbol: $d76f6d4dfc9a3307$var$ZodSymbol,
    ZodUndefined: $d76f6d4dfc9a3307$var$ZodUndefined,
    ZodNull: $d76f6d4dfc9a3307$var$ZodNull,
    ZodAny: $d76f6d4dfc9a3307$var$ZodAny,
    ZodUnknown: $d76f6d4dfc9a3307$var$ZodUnknown,
    ZodNever: $d76f6d4dfc9a3307$var$ZodNever,
    ZodVoid: $d76f6d4dfc9a3307$var$ZodVoid,
    ZodArray: $d76f6d4dfc9a3307$var$ZodArray,
    ZodObject: $d76f6d4dfc9a3307$var$ZodObject,
    ZodUnion: $d76f6d4dfc9a3307$var$ZodUnion,
    ZodDiscriminatedUnion: $d76f6d4dfc9a3307$var$ZodDiscriminatedUnion,
    ZodIntersection: $d76f6d4dfc9a3307$var$ZodIntersection,
    ZodTuple: $d76f6d4dfc9a3307$var$ZodTuple,
    ZodRecord: $d76f6d4dfc9a3307$var$ZodRecord,
    ZodMap: $d76f6d4dfc9a3307$var$ZodMap,
    ZodSet: $d76f6d4dfc9a3307$var$ZodSet,
    ZodFunction: $d76f6d4dfc9a3307$var$ZodFunction,
    ZodLazy: $d76f6d4dfc9a3307$var$ZodLazy,
    ZodLiteral: $d76f6d4dfc9a3307$var$ZodLiteral,
    ZodEnum: $d76f6d4dfc9a3307$var$ZodEnum,
    ZodNativeEnum: $d76f6d4dfc9a3307$var$ZodNativeEnum,
    ZodPromise: $d76f6d4dfc9a3307$var$ZodPromise,
    ZodEffects: $d76f6d4dfc9a3307$var$ZodEffects,
    ZodTransformer: $d76f6d4dfc9a3307$var$ZodEffects,
    ZodOptional: $d76f6d4dfc9a3307$var$ZodOptional,
    ZodNullable: $d76f6d4dfc9a3307$var$ZodNullable,
    ZodDefault: $d76f6d4dfc9a3307$var$ZodDefault,
    ZodCatch: $d76f6d4dfc9a3307$var$ZodCatch,
    ZodNaN: $d76f6d4dfc9a3307$var$ZodNaN,
    BRAND: $d76f6d4dfc9a3307$var$BRAND,
    ZodBranded: $d76f6d4dfc9a3307$var$ZodBranded,
    ZodPipeline: $d76f6d4dfc9a3307$var$ZodPipeline,
    custom: $d76f6d4dfc9a3307$var$custom,
    Schema: $d76f6d4dfc9a3307$var$ZodType,
    ZodSchema: $d76f6d4dfc9a3307$var$ZodType,
    late: $d76f6d4dfc9a3307$var$late,
    get ZodFirstPartyTypeKind () {
        return $d76f6d4dfc9a3307$var$ZodFirstPartyTypeKind;
    },
    coerce: $d76f6d4dfc9a3307$var$coerce,
    any: $d76f6d4dfc9a3307$var$anyType,
    array: $d76f6d4dfc9a3307$var$arrayType,
    bigint: $d76f6d4dfc9a3307$var$bigIntType,
    boolean: $d76f6d4dfc9a3307$var$booleanType,
    date: $d76f6d4dfc9a3307$var$dateType,
    discriminatedUnion: $d76f6d4dfc9a3307$var$discriminatedUnionType,
    effect: $d76f6d4dfc9a3307$var$effectsType,
    "enum": $d76f6d4dfc9a3307$var$enumType,
    "function": $d76f6d4dfc9a3307$var$functionType,
    "instanceof": $d76f6d4dfc9a3307$var$instanceOfType,
    intersection: $d76f6d4dfc9a3307$var$intersectionType,
    lazy: $d76f6d4dfc9a3307$var$lazyType,
    literal: $d76f6d4dfc9a3307$var$literalType,
    map: $d76f6d4dfc9a3307$var$mapType,
    nan: $d76f6d4dfc9a3307$var$nanType,
    nativeEnum: $d76f6d4dfc9a3307$var$nativeEnumType,
    never: $d76f6d4dfc9a3307$var$neverType,
    "null": $d76f6d4dfc9a3307$var$nullType,
    nullable: $d76f6d4dfc9a3307$var$nullableType,
    number: $d76f6d4dfc9a3307$var$numberType,
    object: $d76f6d4dfc9a3307$var$objectType,
    oboolean: $d76f6d4dfc9a3307$var$oboolean,
    onumber: $d76f6d4dfc9a3307$var$onumber,
    optional: $d76f6d4dfc9a3307$var$optionalType,
    ostring: $d76f6d4dfc9a3307$var$ostring,
    pipeline: $d76f6d4dfc9a3307$var$pipelineType,
    preprocess: $d76f6d4dfc9a3307$var$preprocessType,
    promise: $d76f6d4dfc9a3307$var$promiseType,
    record: $d76f6d4dfc9a3307$var$recordType,
    set: $d76f6d4dfc9a3307$var$setType,
    strictObject: $d76f6d4dfc9a3307$var$strictObjectType,
    string: $d76f6d4dfc9a3307$var$stringType,
    symbol: $d76f6d4dfc9a3307$var$symbolType,
    transformer: $d76f6d4dfc9a3307$var$effectsType,
    tuple: $d76f6d4dfc9a3307$var$tupleType,
    "undefined": $d76f6d4dfc9a3307$var$undefinedType,
    union: $d76f6d4dfc9a3307$var$unionType,
    unknown: $d76f6d4dfc9a3307$var$unknownType,
    "void": $d76f6d4dfc9a3307$var$voidType,
    NEVER: $d76f6d4dfc9a3307$var$NEVER,
    ZodIssueCode: $d76f6d4dfc9a3307$var$ZodIssueCode,
    quotelessJson: $d76f6d4dfc9a3307$var$quotelessJson,
    ZodError: $d76f6d4dfc9a3307$var$ZodError
});
// ../common-web/src/check.ts
var $d76f6d4dfc9a3307$var$check_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$check_exports, {
    assure: ()=>$d76f6d4dfc9a3307$var$assure,
    is: ()=>$d76f6d4dfc9a3307$var$is,
    isObject: ()=>$d76f6d4dfc9a3307$var$isObject
});
var $d76f6d4dfc9a3307$var$is = (obj, def2)=>{
    return def2.safeParse(obj).success;
};
var $d76f6d4dfc9a3307$var$assure = (def2, obj)=>{
    return def2.parse(obj);
};
var $d76f6d4dfc9a3307$var$isObject = (obj)=>{
    return typeof obj === "object" && obj !== null;
};
// ../../node_modules/multiformats/esm/vendor/varint.js
var $d76f6d4dfc9a3307$var$encode_1 = $d76f6d4dfc9a3307$var$encode;
var $d76f6d4dfc9a3307$var$MSB = 128;
var $d76f6d4dfc9a3307$var$REST = 127;
var $d76f6d4dfc9a3307$var$MSBALL = ~$d76f6d4dfc9a3307$var$REST;
var $d76f6d4dfc9a3307$var$INT = Math.pow(2, 31);
function $d76f6d4dfc9a3307$var$encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= $d76f6d4dfc9a3307$var$INT){
        out[offset++] = num & 255 | $d76f6d4dfc9a3307$var$MSB;
        num /= 128;
    }
    while(num & $d76f6d4dfc9a3307$var$MSBALL){
        out[offset++] = num & 255 | $d76f6d4dfc9a3307$var$MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    $d76f6d4dfc9a3307$var$encode.bytes = offset - oldOffset + 1;
    return out;
}
var $d76f6d4dfc9a3307$var$decode = $d76f6d4dfc9a3307$var$read;
var $d76f6d4dfc9a3307$var$MSB$1 = 128;
var $d76f6d4dfc9a3307$var$REST$1 = 127;
function $d76f6d4dfc9a3307$var$read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            $d76f6d4dfc9a3307$var$read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & $d76f6d4dfc9a3307$var$REST$1) << shift : (b & $d76f6d4dfc9a3307$var$REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= $d76f6d4dfc9a3307$var$MSB$1);
    $d76f6d4dfc9a3307$var$read.bytes = counter - offset;
    return res;
}
var $d76f6d4dfc9a3307$var$N1 = Math.pow(2, 7);
var $d76f6d4dfc9a3307$var$N2 = Math.pow(2, 14);
var $d76f6d4dfc9a3307$var$N3 = Math.pow(2, 21);
var $d76f6d4dfc9a3307$var$N4 = Math.pow(2, 28);
var $d76f6d4dfc9a3307$var$N5 = Math.pow(2, 35);
var $d76f6d4dfc9a3307$var$N6 = Math.pow(2, 42);
var $d76f6d4dfc9a3307$var$N7 = Math.pow(2, 49);
var $d76f6d4dfc9a3307$var$N8 = Math.pow(2, 56);
var $d76f6d4dfc9a3307$var$N9 = Math.pow(2, 63);
var $d76f6d4dfc9a3307$var$length = function(value) {
    return value < $d76f6d4dfc9a3307$var$N1 ? 1 : value < $d76f6d4dfc9a3307$var$N2 ? 2 : value < $d76f6d4dfc9a3307$var$N3 ? 3 : value < $d76f6d4dfc9a3307$var$N4 ? 4 : value < $d76f6d4dfc9a3307$var$N5 ? 5 : value < $d76f6d4dfc9a3307$var$N6 ? 6 : value < $d76f6d4dfc9a3307$var$N7 ? 7 : value < $d76f6d4dfc9a3307$var$N8 ? 8 : value < $d76f6d4dfc9a3307$var$N9 ? 9 : 10;
};
var $d76f6d4dfc9a3307$var$varint = {
    encode: $d76f6d4dfc9a3307$var$encode_1,
    decode: $d76f6d4dfc9a3307$var$decode,
    encodingLength: $d76f6d4dfc9a3307$var$length
};
var $d76f6d4dfc9a3307$var$_brrp_varint = $d76f6d4dfc9a3307$var$varint;
var $d76f6d4dfc9a3307$var$varint_default = $d76f6d4dfc9a3307$var$_brrp_varint;
// ../../node_modules/multiformats/esm/src/varint.js
var $d76f6d4dfc9a3307$var$decode2 = (data, offset = 0)=>{
    const code2 = $d76f6d4dfc9a3307$var$varint_default.decode(data, offset);
    return [
        code2,
        $d76f6d4dfc9a3307$var$varint_default.decode.bytes
    ];
};
var $d76f6d4dfc9a3307$var$encodeTo = (int, target, offset = 0)=>{
    $d76f6d4dfc9a3307$var$varint_default.encode(int, target, offset);
    return target;
};
var $d76f6d4dfc9a3307$var$encodingLength = (int)=>{
    return $d76f6d4dfc9a3307$var$varint_default.encodingLength(int);
};
// ../../node_modules/multiformats/esm/src/bytes.js
var $d76f6d4dfc9a3307$var$empty = new Uint8Array(0);
var $d76f6d4dfc9a3307$var$equals = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) return false;
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) return false;
    }
    return true;
};
var $d76f6d4dfc9a3307$var$coerce2 = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    throw new Error("Unknown type, must be binary type");
};
var $d76f6d4dfc9a3307$var$fromString = (str)=>new TextEncoder().encode(str);
var $d76f6d4dfc9a3307$var$toString = (b)=>new TextDecoder().decode(b);
// ../../node_modules/multiformats/esm/src/hashes/digest.js
var $d76f6d4dfc9a3307$var$create = (code2, digest2)=>{
    const size = digest2.byteLength;
    const sizeOffset = $d76f6d4dfc9a3307$var$encodingLength(code2);
    const digestOffset = sizeOffset + $d76f6d4dfc9a3307$var$encodingLength(size);
    const bytes2 = new Uint8Array(digestOffset + size);
    $d76f6d4dfc9a3307$var$encodeTo(code2, bytes2, 0);
    $d76f6d4dfc9a3307$var$encodeTo(size, bytes2, sizeOffset);
    bytes2.set(digest2, digestOffset);
    return new $d76f6d4dfc9a3307$var$Digest(code2, size, digest2, bytes2);
};
var $d76f6d4dfc9a3307$var$decode3 = (multihash)=>{
    const bytes2 = $d76f6d4dfc9a3307$var$coerce2(multihash);
    const [code2, sizeOffset] = $d76f6d4dfc9a3307$var$decode2(bytes2);
    const [size, digestOffset] = $d76f6d4dfc9a3307$var$decode2(bytes2.subarray(sizeOffset));
    const digest2 = bytes2.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) throw new Error("Incorrect length");
    return new $d76f6d4dfc9a3307$var$Digest(code2, size, digest2, bytes2);
};
var $d76f6d4dfc9a3307$var$equals2 = (a, b)=>{
    if (a === b) return true;
    else return a.code === b.code && a.size === b.size && $d76f6d4dfc9a3307$var$equals(a.bytes, b.bytes);
};
var $d76f6d4dfc9a3307$var$Digest = class {
    constructor(code2, size, digest2, bytes2){
        this.code = code2;
        this.size = size;
        this.digest = digest2;
        this.bytes = bytes2;
    }
};
// ../../node_modules/multiformats/esm/src/bases/base58.js
var $d76f6d4dfc9a3307$var$base58_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base58_exports, {
    base58btc: ()=>$d76f6d4dfc9a3307$var$base58btc,
    base58flickr: ()=>$d76f6d4dfc9a3307$var$base58flickr
});
// ../../node_modules/multiformats/esm/vendor/base-x.js
function $d76f6d4dfc9a3307$var$base(ALPHABET, name2) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++)BASE_MAP[j] = 255;
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode5(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        else if (Array.isArray(source)) source = Uint8Array.from(source);
        if (!(source instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
        if (source.length === 0) return "";
        var zeroes = 0;
        var length2 = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i2 = 0;
            for(var it1 = size - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length2 = i2;
            pbegin++;
        }
        var it2 = size - length2;
        while(it2 !== size && b58[it2] === 0)it2++;
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return new Uint8Array();
        var psz = 0;
        if (source[psz] === " ") return;
        var zeroes = 0;
        var length2 = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) return;
            var i2 = 0;
            for(var it3 = size - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length2 = i2;
            psz++;
        }
        if (source[psz] === " ") return;
        var it4 = size - length2;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while(it4 !== size)vch[j2++] = b256[it4++];
        return vch;
    }
    function decode6(string3) {
        var buffer = decodeUnsafe(string3);
        if (buffer) return buffer;
        throw new Error(`Non-${name2} character`);
    }
    return {
        encode: encode5,
        decodeUnsafe: decodeUnsafe,
        decode: decode6
    };
}
var $d76f6d4dfc9a3307$var$src = $d76f6d4dfc9a3307$var$base;
var $d76f6d4dfc9a3307$var$_brrp__multiformats_scope_baseX = $d76f6d4dfc9a3307$var$src;
var $d76f6d4dfc9a3307$var$base_x_default = $d76f6d4dfc9a3307$var$_brrp__multiformats_scope_baseX;
// ../../node_modules/multiformats/esm/src/bases/base.js
var $d76f6d4dfc9a3307$var$Encoder = class {
    constructor(name2, prefix, baseEncode){
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes2) {
        if (bytes2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(bytes2)}`;
        else throw Error("Unknown type, must be binary type");
    }
};
var $d76f6d4dfc9a3307$var$Decoder = class {
    constructor(name2, prefix, baseDecode){
        this.name = name2;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(text.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
    }
    or(decoder2) {
        return $d76f6d4dfc9a3307$var$or(this, decoder2);
    }
};
var $d76f6d4dfc9a3307$var$ComposedDecoder = class {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder2) {
        return $d76f6d4dfc9a3307$var$or(this, decoder2);
    }
    decode(input) {
        const prefix = input[0];
        const decoder2 = this.decoders[prefix];
        if (decoder2) return decoder2.decode(input);
        else throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
};
var $d76f6d4dfc9a3307$var$or = (left, right)=>new $d76f6d4dfc9a3307$var$ComposedDecoder({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
var $d76f6d4dfc9a3307$var$Codec = class {
    constructor(name2, prefix, baseEncode, baseDecode){
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new $d76f6d4dfc9a3307$var$Encoder(name2, prefix, baseEncode);
        this.decoder = new $d76f6d4dfc9a3307$var$Decoder(name2, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
};
var $d76f6d4dfc9a3307$var$from = ({ name: name2, prefix: prefix, encode: encode5, decode: decode6 })=>new $d76f6d4dfc9a3307$var$Codec(name2, prefix, encode5, decode6);
var $d76f6d4dfc9a3307$var$baseX = ({ prefix: prefix, name: name2, alphabet: alphabet2 })=>{
    const { encode: encode5, decode: decode6 } = $d76f6d4dfc9a3307$var$base_x_default(alphabet2, name2);
    return $d76f6d4dfc9a3307$var$from({
        prefix: prefix,
        name: name2,
        encode: encode5,
        decode: (text)=>$d76f6d4dfc9a3307$var$coerce2(decode6(text))
    });
};
var $d76f6d4dfc9a3307$var$decode4 = (string3, alphabet2, bitsPerChar, name2)=>{
    const codes = {};
    for(let i = 0; i < alphabet2.length; ++i)codes[alphabet2[i]] = i;
    let end = string3.length;
    while(string3[end - 1] === "=")--end;
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string3[i]];
        if (value === void 0) throw new SyntaxError(`Non-${name2} character`);
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) throw new SyntaxError("Unexpected end of data");
    return out;
};
var $d76f6d4dfc9a3307$var$encode2 = (data, alphabet2, bitsPerChar)=>{
    const pad = alphabet2[alphabet2.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer >> bits];
        }
    }
    if (bits) out += alphabet2[mask & buffer << bitsPerChar - bits];
    if (pad) while(out.length * bitsPerChar & 7)out += "=";
    return out;
};
var $d76f6d4dfc9a3307$var$rfc4648 = ({ name: name2, prefix: prefix, bitsPerChar: bitsPerChar, alphabet: alphabet2 })=>{
    return $d76f6d4dfc9a3307$var$from({
        prefix: prefix,
        name: name2,
        encode (input) {
            return $d76f6d4dfc9a3307$var$encode2(input, alphabet2, bitsPerChar);
        },
        decode (input) {
            return $d76f6d4dfc9a3307$var$decode4(input, alphabet2, bitsPerChar, name2);
        }
    });
};
// ../../node_modules/multiformats/esm/src/bases/base58.js
var $d76f6d4dfc9a3307$var$base58btc = $d76f6d4dfc9a3307$var$baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var $d76f6d4dfc9a3307$var$base58flickr = $d76f6d4dfc9a3307$var$baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
// ../../node_modules/multiformats/esm/src/bases/base32.js
var $d76f6d4dfc9a3307$var$base32_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base32_exports, {
    base32: ()=>$d76f6d4dfc9a3307$var$base32,
    base32hex: ()=>$d76f6d4dfc9a3307$var$base32hex,
    base32hexpad: ()=>$d76f6d4dfc9a3307$var$base32hexpad,
    base32hexpadupper: ()=>$d76f6d4dfc9a3307$var$base32hexpadupper,
    base32hexupper: ()=>$d76f6d4dfc9a3307$var$base32hexupper,
    base32pad: ()=>$d76f6d4dfc9a3307$var$base32pad,
    base32padupper: ()=>$d76f6d4dfc9a3307$var$base32padupper,
    base32upper: ()=>$d76f6d4dfc9a3307$var$base32upper,
    base32z: ()=>$d76f6d4dfc9a3307$var$base32z
});
var $d76f6d4dfc9a3307$var$base32 = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32upper = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32pad = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32padupper = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32hex = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32hexupper = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32hexpad = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32hexpadupper = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
var $d76f6d4dfc9a3307$var$base32z = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
// ../../node_modules/multiformats/esm/src/cid.js
var $d76f6d4dfc9a3307$var$CID = class {
    constructor(version2, code2, multihash, bytes2){
        this.code = code2;
        this.version = version2;
        this.multihash = multihash;
        this.bytes = bytes2;
        this.byteOffset = bytes2.byteOffset;
        this.byteLength = bytes2.byteLength;
        this.asCID = this;
        this._baseCache = /* @__PURE__ */ new Map();
        Object.defineProperties(this, {
            byteOffset: $d76f6d4dfc9a3307$var$hidden,
            byteLength: $d76f6d4dfc9a3307$var$hidden,
            code: $d76f6d4dfc9a3307$var$readonly,
            version: $d76f6d4dfc9a3307$var$readonly,
            multihash: $d76f6d4dfc9a3307$var$readonly,
            bytes: $d76f6d4dfc9a3307$var$readonly,
            _baseCache: $d76f6d4dfc9a3307$var$hidden,
            asCID: $d76f6d4dfc9a3307$var$hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                return this;
            default:
                {
                    const { code: code2, multihash: multihash } = this;
                    if (code2 !== $d76f6d4dfc9a3307$var$DAG_PB_CODE) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    if (multihash.code !== $d76f6d4dfc9a3307$var$SHA_256_CODE) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    return $d76f6d4dfc9a3307$var$CID.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code: code2, digest: digest2 } = this.multihash;
                    const multihash = $d76f6d4dfc9a3307$var$create(code2, digest2);
                    return $d76f6d4dfc9a3307$var$CID.createV1(this.code, multihash);
                }
            case 1:
                return this;
            default:
                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && $d76f6d4dfc9a3307$var$equals2(this.multihash, other.multihash);
    }
    toString(base3) {
        const { bytes: bytes2, version: version2, _baseCache: _baseCache } = this;
        switch(version2){
            case 0:
                return $d76f6d4dfc9a3307$var$toStringV0(bytes2, _baseCache, base3 || $d76f6d4dfc9a3307$var$base58btc.encoder);
            default:
                return $d76f6d4dfc9a3307$var$toStringV1(bytes2, _baseCache, base3 || $d76f6d4dfc9a3307$var$base32.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        $d76f6d4dfc9a3307$var$deprecate(/^0\.0/, $d76f6d4dfc9a3307$var$IS_CID_DEPRECATION);
        return !!(value && (value[$d76f6d4dfc9a3307$var$cidSymbol] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof $d76f6d4dfc9a3307$var$CID) return value;
        else if (value != null && value.asCID === value) {
            const { version: version2, code: code2, multihash: multihash, bytes: bytes2 } = value;
            return new $d76f6d4dfc9a3307$var$CID(version2, code2, multihash, bytes2 || $d76f6d4dfc9a3307$var$encodeCID(version2, code2, multihash.bytes));
        } else if (value != null && value[$d76f6d4dfc9a3307$var$cidSymbol] === true) {
            const { version: version2, multihash: multihash, code: code2 } = value;
            const digest2 = $d76f6d4dfc9a3307$var$decode3(multihash);
            return $d76f6d4dfc9a3307$var$CID.create(version2, code2, digest2);
        } else return null;
    }
    static create(version2, code2, digest2) {
        if (typeof code2 !== "number") throw new Error("String codecs are no longer supported");
        switch(version2){
            case 0:
                if (code2 !== $d76f6d4dfc9a3307$var$DAG_PB_CODE) throw new Error(`Version 0 CID must use dag-pb (code: ${$d76f6d4dfc9a3307$var$DAG_PB_CODE}) block encoding`);
                else return new $d76f6d4dfc9a3307$var$CID(version2, code2, digest2, digest2.bytes);
            case 1:
                {
                    const bytes2 = $d76f6d4dfc9a3307$var$encodeCID(version2, code2, digest2.bytes);
                    return new $d76f6d4dfc9a3307$var$CID(version2, code2, digest2, bytes2);
                }
            default:
                throw new Error("Invalid version");
        }
    }
    static createV0(digest2) {
        return $d76f6d4dfc9a3307$var$CID.create(0, $d76f6d4dfc9a3307$var$DAG_PB_CODE, digest2);
    }
    static createV1(code2, digest2) {
        return $d76f6d4dfc9a3307$var$CID.create(1, code2, digest2);
    }
    static decode(bytes2) {
        const [cid2, remainder] = $d76f6d4dfc9a3307$var$CID.decodeFirst(bytes2);
        if (remainder.length) throw new Error("Incorrect length");
        return cid2;
    }
    static decodeFirst(bytes2) {
        const specs = $d76f6d4dfc9a3307$var$CID.inspectBytes(bytes2);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = $d76f6d4dfc9a3307$var$coerce2(bytes2.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) throw new Error("Incorrect length");
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest2 = new $d76f6d4dfc9a3307$var$Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid2 = specs.version === 0 ? $d76f6d4dfc9a3307$var$CID.createV0(digest2) : $d76f6d4dfc9a3307$var$CID.createV1(specs.codec, digest2);
        return [
            cid2,
            bytes2.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length2] = $d76f6d4dfc9a3307$var$decode2(initialBytes.subarray(offset));
            offset += length2;
            return i;
        };
        let version2 = next();
        let codec = $d76f6d4dfc9a3307$var$DAG_PB_CODE;
        if (version2 === 18) {
            version2 = 0;
            offset = 0;
        } else if (version2 === 1) codec = next();
        if (version2 !== 0 && version2 !== 1) throw new RangeError(`Invalid CID version ${version2}`);
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version2,
            codec: codec,
            multihashCode: multihashCode,
            digestSize: digestSize,
            multihashSize: multihashSize,
            size: size
        };
    }
    static parse(source, base3) {
        const [prefix, bytes2] = $d76f6d4dfc9a3307$var$parseCIDtoBytes(source, base3);
        const cid2 = $d76f6d4dfc9a3307$var$CID.decode(bytes2);
        cid2._baseCache.set(prefix, source);
        return cid2;
    }
};
var $d76f6d4dfc9a3307$var$parseCIDtoBytes = (source, base3)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder2 = base3 || $d76f6d4dfc9a3307$var$base58btc;
                return [
                    $d76f6d4dfc9a3307$var$base58btc.prefix,
                    decoder2.decode(`${$d76f6d4dfc9a3307$var$base58btc.prefix}${source}`)
                ];
            }
        case $d76f6d4dfc9a3307$var$base58btc.prefix:
            {
                const decoder2 = base3 || $d76f6d4dfc9a3307$var$base58btc;
                return [
                    $d76f6d4dfc9a3307$var$base58btc.prefix,
                    decoder2.decode(source)
                ];
            }
        case $d76f6d4dfc9a3307$var$base32.prefix:
            {
                const decoder2 = base3 || $d76f6d4dfc9a3307$var$base32;
                return [
                    $d76f6d4dfc9a3307$var$base32.prefix,
                    decoder2.decode(source)
                ];
            }
        default:
            if (base3 == null) throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            return [
                source[0],
                base3.decode(source)
            ];
    }
};
var $d76f6d4dfc9a3307$var$toStringV0 = (bytes2, cache, base3)=>{
    const { prefix: prefix } = base3;
    if (prefix !== $d76f6d4dfc9a3307$var$base58btc.prefix) throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
    const cid2 = cache.get(prefix);
    if (cid2 == null) {
        const cid3 = base3.encode(bytes2).slice(1);
        cache.set(prefix, cid3);
        return cid3;
    } else return cid2;
};
var $d76f6d4dfc9a3307$var$toStringV1 = (bytes2, cache, base3)=>{
    const { prefix: prefix } = base3;
    const cid2 = cache.get(prefix);
    if (cid2 == null) {
        const cid3 = base3.encode(bytes2);
        cache.set(prefix, cid3);
        return cid3;
    } else return cid2;
};
var $d76f6d4dfc9a3307$var$DAG_PB_CODE = 112;
var $d76f6d4dfc9a3307$var$SHA_256_CODE = 18;
var $d76f6d4dfc9a3307$var$encodeCID = (version2, code2, multihash)=>{
    const codeOffset = $d76f6d4dfc9a3307$var$encodingLength(version2);
    const hashOffset = codeOffset + $d76f6d4dfc9a3307$var$encodingLength(code2);
    const bytes2 = new Uint8Array(hashOffset + multihash.byteLength);
    $d76f6d4dfc9a3307$var$encodeTo(version2, bytes2, 0);
    $d76f6d4dfc9a3307$var$encodeTo(code2, bytes2, codeOffset);
    bytes2.set(multihash, hashOffset);
    return bytes2;
};
var $d76f6d4dfc9a3307$var$cidSymbol = Symbol.for("@ipld/js-cid/CID");
var $d76f6d4dfc9a3307$var$readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
var $d76f6d4dfc9a3307$var$hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
var $d76f6d4dfc9a3307$var$version = "0.0.0-dev";
var $d76f6d4dfc9a3307$var$deprecate = (range, message)=>{
    if (range.test($d76f6d4dfc9a3307$var$version)) console.warn(message);
    else throw new Error(message);
};
var $d76f6d4dfc9a3307$var$IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
// ../../node_modules/multiformats/esm/src/bases/identity.js
var $d76f6d4dfc9a3307$var$identity_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$identity_exports, {
    identity: ()=>$d76f6d4dfc9a3307$var$identity
});
var $d76f6d4dfc9a3307$var$identity = $d76f6d4dfc9a3307$var$from({
    prefix: "\x00",
    name: "identity",
    encode: (buf)=>$d76f6d4dfc9a3307$var$toString(buf),
    decode: (str)=>$d76f6d4dfc9a3307$var$fromString(str)
});
// ../../node_modules/multiformats/esm/src/bases/base2.js
var $d76f6d4dfc9a3307$var$base2_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base2_exports, {
    base2: ()=>$d76f6d4dfc9a3307$var$base2
});
var $d76f6d4dfc9a3307$var$base2 = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "0",
    name: "base2",
    alphabet: "01",
    bitsPerChar: 1
});
// ../../node_modules/multiformats/esm/src/bases/base8.js
var $d76f6d4dfc9a3307$var$base8_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base8_exports, {
    base8: ()=>$d76f6d4dfc9a3307$var$base8
});
var $d76f6d4dfc9a3307$var$base8 = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "7",
    name: "base8",
    alphabet: "01234567",
    bitsPerChar: 3
});
// ../../node_modules/multiformats/esm/src/bases/base10.js
var $d76f6d4dfc9a3307$var$base10_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base10_exports, {
    base10: ()=>$d76f6d4dfc9a3307$var$base10
});
var $d76f6d4dfc9a3307$var$base10 = $d76f6d4dfc9a3307$var$baseX({
    prefix: "9",
    name: "base10",
    alphabet: "0123456789"
});
// ../../node_modules/multiformats/esm/src/bases/base16.js
var $d76f6d4dfc9a3307$var$base16_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base16_exports, {
    base16: ()=>$d76f6d4dfc9a3307$var$base16,
    base16upper: ()=>$d76f6d4dfc9a3307$var$base16upper
});
var $d76f6d4dfc9a3307$var$base16 = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "f",
    name: "base16",
    alphabet: "0123456789abcdef",
    bitsPerChar: 4
});
var $d76f6d4dfc9a3307$var$base16upper = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "F",
    name: "base16upper",
    alphabet: "0123456789ABCDEF",
    bitsPerChar: 4
});
// ../../node_modules/multiformats/esm/src/bases/base36.js
var $d76f6d4dfc9a3307$var$base36_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base36_exports, {
    base36: ()=>$d76f6d4dfc9a3307$var$base36,
    base36upper: ()=>$d76f6d4dfc9a3307$var$base36upper
});
var $d76f6d4dfc9a3307$var$base36 = $d76f6d4dfc9a3307$var$baseX({
    prefix: "k",
    name: "base36",
    alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var $d76f6d4dfc9a3307$var$base36upper = $d76f6d4dfc9a3307$var$baseX({
    prefix: "K",
    name: "base36upper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});
// ../../node_modules/multiformats/esm/src/bases/base64.js
var $d76f6d4dfc9a3307$var$base64_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base64_exports, {
    base64: ()=>$d76f6d4dfc9a3307$var$base64,
    base64pad: ()=>$d76f6d4dfc9a3307$var$base64pad,
    base64url: ()=>$d76f6d4dfc9a3307$var$base64url,
    base64urlpad: ()=>$d76f6d4dfc9a3307$var$base64urlpad
});
var $d76f6d4dfc9a3307$var$base64 = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "m",
    name: "base64",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    bitsPerChar: 6
});
var $d76f6d4dfc9a3307$var$base64pad = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "M",
    name: "base64pad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    bitsPerChar: 6
});
var $d76f6d4dfc9a3307$var$base64url = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "u",
    name: "base64url",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    bitsPerChar: 6
});
var $d76f6d4dfc9a3307$var$base64urlpad = $d76f6d4dfc9a3307$var$rfc4648({
    prefix: "U",
    name: "base64urlpad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    bitsPerChar: 6
});
// ../../node_modules/multiformats/esm/src/bases/base256emoji.js
var $d76f6d4dfc9a3307$var$base256emoji_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$base256emoji_exports, {
    base256emoji: ()=>$d76f6d4dfc9a3307$var$base256emoji
});
var $d76f6d4dfc9a3307$var$alphabet = Array.from("\uD83D\uDE80\uD83E\uDE90☄\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09☀\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02❤\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09☺\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E✌✨\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D❣\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33✋\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13⭐✅\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6✔\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90☹\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20☝\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B⚽\uD83E\uDD19☕\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81⚡\uD83C\uDF1E\uD83C\uDF88❌✊\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C✈\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74▶➡❓\uD83D\uDC8E\uD83D\uDCB8⬇\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A⚠\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37☎\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51❄\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42");
var $d76f6d4dfc9a3307$var$alphabetBytesToChars = $d76f6d4dfc9a3307$var$alphabet.reduce((p, c, i)=>{
    p[i] = c;
    return p;
}, []);
var $d76f6d4dfc9a3307$var$alphabetCharsToBytes = $d76f6d4dfc9a3307$var$alphabet.reduce((p, c, i)=>{
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function $d76f6d4dfc9a3307$var$encode3(data) {
    return data.reduce((p, c)=>{
        p += $d76f6d4dfc9a3307$var$alphabetBytesToChars[c];
        return p;
    }, "");
}
function $d76f6d4dfc9a3307$var$decode5(str) {
    const byts = [];
    for (const char of str){
        const byt = $d76f6d4dfc9a3307$var$alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === void 0) throw new Error(`Non-base256emoji character: ${char}`);
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
var $d76f6d4dfc9a3307$var$base256emoji = $d76f6d4dfc9a3307$var$from({
    prefix: "\uD83D\uDE80",
    name: "base256emoji",
    encode: $d76f6d4dfc9a3307$var$encode3,
    decode: $d76f6d4dfc9a3307$var$decode5
});
// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var $d76f6d4dfc9a3307$var$sha2_browser_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$sha2_browser_exports, {
    sha256: ()=>$d76f6d4dfc9a3307$var$sha256,
    sha512: ()=>$d76f6d4dfc9a3307$var$sha512
});
// ../../node_modules/multiformats/esm/src/hashes/hasher.js
var $d76f6d4dfc9a3307$var$from2 = ({ name: name2, code: code2, encode: encode5 })=>new $d76f6d4dfc9a3307$var$Hasher(name2, code2, encode5);
var $d76f6d4dfc9a3307$var$Hasher = class {
    constructor(name2, code2, encode5){
        this.name = name2;
        this.code = code2;
        this.encode = encode5;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? $d76f6d4dfc9a3307$var$create(this.code, result) : result.then((digest2)=>$d76f6d4dfc9a3307$var$create(this.code, digest2));
        } else throw Error("Unknown type, must be binary type");
    }
};
// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var $d76f6d4dfc9a3307$var$sha = (name2)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name2, data));
var $d76f6d4dfc9a3307$var$sha256 = $d76f6d4dfc9a3307$var$from2({
    name: "sha2-256",
    code: 18,
    encode: $d76f6d4dfc9a3307$var$sha("SHA-256")
});
var $d76f6d4dfc9a3307$var$sha512 = $d76f6d4dfc9a3307$var$from2({
    name: "sha2-512",
    code: 19,
    encode: $d76f6d4dfc9a3307$var$sha("SHA-512")
});
// ../../node_modules/multiformats/esm/src/hashes/identity.js
var $d76f6d4dfc9a3307$var$identity_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$identity_exports2, {
    identity: ()=>$d76f6d4dfc9a3307$var$identity2
});
var $d76f6d4dfc9a3307$var$code = 0;
var $d76f6d4dfc9a3307$var$name = "identity";
var $d76f6d4dfc9a3307$var$encode4 = $d76f6d4dfc9a3307$var$coerce2;
var $d76f6d4dfc9a3307$var$digest = (input)=>$d76f6d4dfc9a3307$var$create($d76f6d4dfc9a3307$var$code, $d76f6d4dfc9a3307$var$encode4(input));
var $d76f6d4dfc9a3307$var$identity2 = {
    code: $d76f6d4dfc9a3307$var$code,
    name: $d76f6d4dfc9a3307$var$name,
    encode: $d76f6d4dfc9a3307$var$encode4,
    digest: $d76f6d4dfc9a3307$var$digest
};
// ../../node_modules/multiformats/esm/src/codecs/json.js
var $d76f6d4dfc9a3307$var$textEncoder = new TextEncoder();
var $d76f6d4dfc9a3307$var$textDecoder = new TextDecoder();
// ../../node_modules/multiformats/esm/src/basics.js
var $d76f6d4dfc9a3307$var$bases = {
    ...$d76f6d4dfc9a3307$var$identity_exports,
    ...$d76f6d4dfc9a3307$var$base2_exports,
    ...$d76f6d4dfc9a3307$var$base8_exports,
    ...$d76f6d4dfc9a3307$var$base10_exports,
    ...$d76f6d4dfc9a3307$var$base16_exports,
    ...$d76f6d4dfc9a3307$var$base32_exports,
    ...$d76f6d4dfc9a3307$var$base36_exports,
    ...$d76f6d4dfc9a3307$var$base58_exports,
    ...$d76f6d4dfc9a3307$var$base64_exports,
    ...$d76f6d4dfc9a3307$var$base256emoji_exports
};
var $d76f6d4dfc9a3307$var$hashes = {
    ...$d76f6d4dfc9a3307$var$sha2_browser_exports,
    ...$d76f6d4dfc9a3307$var$identity_exports2
};
// ../../node_modules/uint8arrays/esm/src/util/bases.js
function $d76f6d4dfc9a3307$var$createCodec(name2, prefix, encode5, decode6) {
    return {
        name: name2,
        prefix: prefix,
        encoder: {
            name: name2,
            prefix: prefix,
            encode: encode5
        },
        decoder: {
            decode: decode6
        }
    };
}
var $d76f6d4dfc9a3307$var$string = $d76f6d4dfc9a3307$var$createCodec("utf8", "u", (buf)=>{
    const decoder2 = new TextDecoder("utf8");
    return "u" + decoder2.decode(buf);
}, (str)=>{
    const encoder2 = new TextEncoder();
    return encoder2.encode(str.substring(1));
});
var $d76f6d4dfc9a3307$var$ascii = $d76f6d4dfc9a3307$var$createCodec("ascii", "a", (buf)=>{
    let string3 = "a";
    for(let i = 0; i < buf.length; i++)string3 += String.fromCharCode(buf[i]);
    return string3;
}, (str)=>{
    str = str.substring(1);
    const buf = new Uint8Array(str.length);
    for(let i = 0; i < str.length; i++)buf[i] = str.charCodeAt(i);
    return buf;
});
var $d76f6d4dfc9a3307$var$BASES = {
    utf8: $d76f6d4dfc9a3307$var$string,
    "utf-8": $d76f6d4dfc9a3307$var$string,
    hex: $d76f6d4dfc9a3307$var$bases.base16,
    latin1: $d76f6d4dfc9a3307$var$ascii,
    ascii: $d76f6d4dfc9a3307$var$ascii,
    binary: $d76f6d4dfc9a3307$var$ascii,
    ...$d76f6d4dfc9a3307$var$bases
};
var $d76f6d4dfc9a3307$var$bases_default = $d76f6d4dfc9a3307$var$BASES;
// ../../node_modules/uint8arrays/esm/src/from-string.js
function $d76f6d4dfc9a3307$var$fromString2(string3, encoding = "utf8") {
    const base3 = $d76f6d4dfc9a3307$var$bases_default[encoding];
    if (!base3) throw new Error(`Unsupported encoding "${encoding}"`);
    return base3.decoder.decode(`${base3.prefix}${string3}`);
}
// ../../node_modules/uint8arrays/esm/src/to-string.js
function $d76f6d4dfc9a3307$var$toString2(array2, encoding = "utf8") {
    const base3 = $d76f6d4dfc9a3307$var$bases_default[encoding];
    if (!base3) throw new Error(`Unsupported encoding "${encoding}"`);
    return base3.encoder.encode(array2).substring(1);
}
// ../common-web/src/ipld.ts
var $d76f6d4dfc9a3307$var$jsonToIpld = (val)=>{
    if (Array.isArray(val)) return val.map((item)=>$d76f6d4dfc9a3307$var$jsonToIpld(item));
    if (val && typeof val === "object") {
        if (typeof val["$link"] === "string" && Object.keys(val).length === 1) return $d76f6d4dfc9a3307$var$CID.parse(val["$link"]);
        if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) return $d76f6d4dfc9a3307$var$fromString2(val["$bytes"], "base64");
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = $d76f6d4dfc9a3307$var$jsonToIpld(val[key]);
        return toReturn;
    }
    return val;
};
var $d76f6d4dfc9a3307$var$ipldToJson = (val)=>{
    if (Array.isArray(val)) return val.map((item)=>$d76f6d4dfc9a3307$var$ipldToJson(item));
    if (val && typeof val === "object") {
        if (val instanceof Uint8Array) return {
            $bytes: $d76f6d4dfc9a3307$var$toString2(val, "base64")
        };
        if ($d76f6d4dfc9a3307$var$CID.asCID(val)) return {
            $link: val.toString()
        };
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = $d76f6d4dfc9a3307$var$ipldToJson(val[key]);
        return toReturn;
    }
    return val;
};
// ../common-web/src/types.ts
var $d76f6d4dfc9a3307$var$cidSchema = $d76f6d4dfc9a3307$var$z.any().refine((obj)=>$d76f6d4dfc9a3307$var$CID.asCID(obj) !== null, {
    message: "Not a CID"
}).transform((obj)=>$d76f6d4dfc9a3307$var$CID.asCID(obj));
var $d76f6d4dfc9a3307$var$schema = {
    cid: $d76f6d4dfc9a3307$var$cidSchema,
    bytes: $d76f6d4dfc9a3307$var$z.instanceof(Uint8Array),
    string: $d76f6d4dfc9a3307$var$z.string(),
    array: $d76f6d4dfc9a3307$var$z.array($d76f6d4dfc9a3307$var$z.unknown()),
    map: $d76f6d4dfc9a3307$var$z.record($d76f6d4dfc9a3307$var$z.string(), $d76f6d4dfc9a3307$var$z.unknown()),
    unknown: $d76f6d4dfc9a3307$var$z.unknown()
};
var $d76f6d4dfc9a3307$var$def = {
    cid: {
        name: "cid",
        schema: $d76f6d4dfc9a3307$var$schema.cid
    },
    bytes: {
        name: "bytes",
        schema: $d76f6d4dfc9a3307$var$schema.bytes
    },
    string: {
        name: "string",
        schema: $d76f6d4dfc9a3307$var$schema.string
    },
    map: {
        name: "map",
        schema: $d76f6d4dfc9a3307$var$schema.map
    },
    unknown: {
        name: "unknown",
        schema: $d76f6d4dfc9a3307$var$schema.unknown
    }
};
// ../common-web/src/times.ts
var $d76f6d4dfc9a3307$var$SECOND = 1e3;
var $d76f6d4dfc9a3307$var$MINUTE = $d76f6d4dfc9a3307$var$SECOND * 60;
var $d76f6d4dfc9a3307$var$HOUR = $d76f6d4dfc9a3307$var$MINUTE * 60;
var $d76f6d4dfc9a3307$var$DAY = $d76f6d4dfc9a3307$var$HOUR * 24;
// ../common-web/src/strings.ts
var $d76f6d4dfc9a3307$var$import_graphemer = $d76f6d4dfc9a3307$var$__toESM($d76f6d4dfc9a3307$var$require_lib());
var $d76f6d4dfc9a3307$var$utf8Len = (str)=>{
    return new TextEncoder().encode(str).byteLength;
};
var $d76f6d4dfc9a3307$var$graphemeLen = (str)=>{
    const splitter = new $d76f6d4dfc9a3307$var$import_graphemer.default();
    return splitter.countGraphemes(str);
};
var $d76f6d4dfc9a3307$var$parseLanguage = (langTag)=>{
    const parsed = langTag.match($d76f6d4dfc9a3307$var$bcp47Regexp);
    if (!parsed?.groups) return null;
    const parts = parsed.groups;
    return {
        grandfathered: parts.grandfathered,
        language: parts.language,
        extlang: parts.extlang,
        script: parts.script,
        region: parts.region,
        variant: parts.variant,
        extension: parts.extension,
        privateUse: parts.privateUseA || parts.privateUseB
    };
};
var $d76f6d4dfc9a3307$var$validateLanguage = (langTag)=>{
    return $d76f6d4dfc9a3307$var$bcp47Regexp.test(langTag);
};
var $d76f6d4dfc9a3307$var$bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
// ../lexicon/src/validators/formats.ts
var $d76f6d4dfc9a3307$var$import_iso_datestring_validator = $d76f6d4dfc9a3307$var$__toESM($d76f6d4dfc9a3307$var$require_dist());
function $d76f6d4dfc9a3307$var$datetime(path, value) {
    try {
        if (!(0, $d76f6d4dfc9a3307$var$import_iso_datestring_validator.isValidISODateString)(value)) throw new Error();
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an iso8601 formatted datetime`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$uri(path, value) {
    const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
    if (!isUri) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a uri`)
    };
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$atUri(path, value) {
    try {
        $d76f6d4dfc9a3307$var$ensureValidAtUri(value);
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a valid at-uri`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$did(path, value) {
    try {
        $d76f6d4dfc9a3307$var$ensureValidDid(value);
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a valid did`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$handle(path, value) {
    try {
        $d76f6d4dfc9a3307$var$ensureValidHandle(value);
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a valid handle`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$atIdentifier(path, value) {
    const isDid = $d76f6d4dfc9a3307$var$did(path, value);
    if (!isDid.success) {
        const isHandle2 = $d76f6d4dfc9a3307$var$handle(path, value);
        if (!isHandle2.success) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a valid did or a handle`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$nsid(path, value) {
    try {
        $d76f6d4dfc9a3307$var$ensureValidNsid(value);
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a valid nsid`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$cid(path, value) {
    try {
        $d76f6d4dfc9a3307$var$CID.parse(value);
    } catch  {
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a cid string`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$language(path, value) {
    if ($d76f6d4dfc9a3307$var$validateLanguage(value)) return {
        success: true,
        value: value
    };
    return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a well-formed BCP 47 language tag`)
    };
}
// ../lexicon/src/validators/primitives.ts
function $d76f6d4dfc9a3307$var$validate(lexicons2, path, def2, value) {
    switch(def2.type){
        case "boolean":
            return $d76f6d4dfc9a3307$var$boolean(lexicons2, path, def2, value);
        case "integer":
            return $d76f6d4dfc9a3307$var$integer(lexicons2, path, def2, value);
        case "string":
            return $d76f6d4dfc9a3307$var$string2(lexicons2, path, def2, value);
        case "bytes":
            return $d76f6d4dfc9a3307$var$bytes(lexicons2, path, def2, value);
        case "cid-link":
            return $d76f6d4dfc9a3307$var$cidLink(lexicons2, path, def2, value);
        case "unknown":
            return $d76f6d4dfc9a3307$var$unknown(lexicons2, path, def2, value);
        default:
            return {
                success: false,
                error: new $d76f6d4dfc9a3307$var$ValidationError(`Unexpected lexicon type: ${def2.type}`)
            };
    }
}
function $d76f6d4dfc9a3307$var$boolean(lexicons2, path, def2, value) {
    def2;
    const type = typeof value;
    if (type === "undefined") {
        if (typeof def2.default === "boolean") return {
            success: true,
            value: def2.default
        };
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a boolean`)
        };
    } else if (type !== "boolean") return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a boolean`)
    };
    if (typeof def2.const === "boolean") {
        if (value !== def2.const) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be ${def2.const}`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$integer(lexicons2, path, def2, value) {
    def2;
    const type = typeof value;
    if (type === "undefined") {
        if (typeof def2.default === "number") return {
            success: true,
            value: def2.default
        };
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an integer`)
        };
    } else if (!Number.isInteger(value)) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an integer`)
    };
    if (typeof def2.const === "number") {
        if (value !== def2.const) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be ${def2.const}`)
        };
    }
    if (Array.isArray(def2.enum)) {
        if (!def2.enum.includes(value)) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be one of (${def2.enum.join("|")})`)
        };
    }
    if (typeof def2.maximum === "number") {
        if (value > def2.maximum) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} can not be greater than ${def2.maximum}`)
        };
    }
    if (typeof def2.minimum === "number") {
        if (value < def2.minimum) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} can not be less than ${def2.minimum}`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$string2(lexicons2, path, def2, value) {
    def2;
    if (typeof value === "undefined") {
        if (typeof def2.default === "string") return {
            success: true,
            value: def2.default
        };
        return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a string`)
        };
    } else if (typeof value !== "string") return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a string`)
    };
    if (typeof def2.const === "string") {
        if (value !== def2.const) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be ${def2.const}`)
        };
    }
    if (Array.isArray(def2.enum)) {
        if (!def2.enum.includes(value)) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be one of (${def2.enum.join("|")})`)
        };
    }
    if (typeof def2.maxLength === "number") {
        if ($d76f6d4dfc9a3307$var$utf8Len(value) > def2.maxLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be longer than ${def2.maxLength} characters`)
        };
    }
    if (typeof def2.minLength === "number") {
        if ($d76f6d4dfc9a3307$var$utf8Len(value) < def2.minLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be shorter than ${def2.minLength} characters`)
        };
    }
    if (typeof def2.maxGraphemes === "number") {
        if ($d76f6d4dfc9a3307$var$graphemeLen(value) > def2.maxGraphemes) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be longer than ${def2.maxGraphemes} graphemes`)
        };
    }
    if (typeof def2.minGraphemes === "number") {
        if ($d76f6d4dfc9a3307$var$graphemeLen(value) < def2.minGraphemes) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be shorter than ${def2.minGraphemes} graphemes`)
        };
    }
    if (typeof def2.format === "string") switch(def2.format){
        case "datetime":
            return $d76f6d4dfc9a3307$var$datetime(path, value);
        case "uri":
            return $d76f6d4dfc9a3307$var$uri(path, value);
        case "at-uri":
            return $d76f6d4dfc9a3307$var$atUri(path, value);
        case "did":
            return $d76f6d4dfc9a3307$var$did(path, value);
        case "handle":
            return $d76f6d4dfc9a3307$var$handle(path, value);
        case "at-identifier":
            return $d76f6d4dfc9a3307$var$atIdentifier(path, value);
        case "nsid":
            return $d76f6d4dfc9a3307$var$nsid(path, value);
        case "cid":
            return $d76f6d4dfc9a3307$var$cid(path, value);
        case "language":
            return $d76f6d4dfc9a3307$var$language(path, value);
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$bytes(lexicons2, path, def2, value) {
    def2;
    if (!value || !(value instanceof Uint8Array)) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a byte array`)
    };
    if (typeof def2.maxLength === "number") {
        if (value.byteLength > def2.maxLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be larger than ${def2.maxLength} bytes`)
        };
    }
    if (typeof def2.minLength === "number") {
        if (value.byteLength < def2.minLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not be smaller than ${def2.minLength} bytes`)
        };
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$cidLink(lexicons2, path, def2, value) {
    if ($d76f6d4dfc9a3307$var$CID.asCID(value) === null) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be a CID`)
    };
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$unknown(lexicons2, path, def2, value) {
    if (!value || typeof value !== "object") return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an object`)
    };
    return {
        success: true,
        value: value
    };
}
// ../lexicon/src/blob-refs.ts
var $d76f6d4dfc9a3307$var$typedJsonBlobRef = $d76f6d4dfc9a3307$var$z.object({
    $type: $d76f6d4dfc9a3307$var$z.literal("blob"),
    ref: $d76f6d4dfc9a3307$var$schema.cid,
    mimeType: $d76f6d4dfc9a3307$var$z.string(),
    size: $d76f6d4dfc9a3307$var$z.number()
}).strict();
var $d76f6d4dfc9a3307$var$untypedJsonBlobRef = $d76f6d4dfc9a3307$var$z.object({
    cid: $d76f6d4dfc9a3307$var$z.string(),
    mimeType: $d76f6d4dfc9a3307$var$z.string()
}).strict();
var $d76f6d4dfc9a3307$var$jsonBlobRef = $d76f6d4dfc9a3307$var$z.union([
    $d76f6d4dfc9a3307$var$typedJsonBlobRef,
    $d76f6d4dfc9a3307$var$untypedJsonBlobRef
]);
var $d76f6d4dfc9a3307$var$BlobRef = class {
    constructor(ref, mimeType, size, original){
        this.ref = ref;
        this.mimeType = mimeType;
        this.size = size;
        this.original = original ?? {
            $type: "blob",
            ref: ref,
            mimeType: mimeType,
            size: size
        };
    }
    static asBlobRef(obj) {
        if ($d76f6d4dfc9a3307$var$check_exports.is(obj, $d76f6d4dfc9a3307$var$jsonBlobRef)) return $d76f6d4dfc9a3307$var$BlobRef.fromJsonRef(obj);
        return null;
    }
    static fromJsonRef(json) {
        if ($d76f6d4dfc9a3307$var$check_exports.is(json, $d76f6d4dfc9a3307$var$typedJsonBlobRef)) return new $d76f6d4dfc9a3307$var$BlobRef(json.ref, json.mimeType, json.size);
        else return new $d76f6d4dfc9a3307$var$BlobRef($d76f6d4dfc9a3307$var$CID.parse(json.cid), json.mimeType, -1, json);
    }
    ipld() {
        return {
            $type: "blob",
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
        };
    }
    toJSON() {
        return $d76f6d4dfc9a3307$var$ipldToJson(this.ipld());
    }
};
// ../lexicon/src/validators/blob.ts
function $d76f6d4dfc9a3307$var$blob(lexicons2, path, def2, value) {
    if (!value || !(value instanceof $d76f6d4dfc9a3307$var$BlobRef)) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} should be a blob ref`)
    };
    return {
        success: true,
        value: value
    };
}
// ../lexicon/src/validators/complex.ts
function $d76f6d4dfc9a3307$var$validate2(lexicons2, path, def2, value) {
    switch(def2.type){
        case "boolean":
            return $d76f6d4dfc9a3307$var$boolean(lexicons2, path, def2, value);
        case "integer":
            return $d76f6d4dfc9a3307$var$integer(lexicons2, path, def2, value);
        case "string":
            return $d76f6d4dfc9a3307$var$string2(lexicons2, path, def2, value);
        case "bytes":
            return $d76f6d4dfc9a3307$var$bytes(lexicons2, path, def2, value);
        case "cid-link":
            return $d76f6d4dfc9a3307$var$cidLink(lexicons2, path, def2, value);
        case "unknown":
            return $d76f6d4dfc9a3307$var$unknown(lexicons2, path, def2, value);
        case "object":
            return $d76f6d4dfc9a3307$var$object(lexicons2, path, def2, value);
        case "array":
            return $d76f6d4dfc9a3307$var$array(lexicons2, path, def2, value);
        case "blob":
            return $d76f6d4dfc9a3307$var$blob(lexicons2, path, def2, value);
        default:
            return {
                success: false,
                error: new $d76f6d4dfc9a3307$var$ValidationError(`Unexpected lexicon type: ${def2.type}`)
            };
    }
}
function $d76f6d4dfc9a3307$var$array(lexicons2, path, def2, value) {
    if (!Array.isArray(value)) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an array`)
    };
    if (typeof def2.maxLength === "number") {
        if (value.length > def2.maxLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not have more than ${def2.maxLength} elements`)
        };
    }
    if (typeof def2.minLength === "number") {
        if (value.length < def2.minLength) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must not have fewer than ${def2.minLength} elements`)
        };
    }
    const itemsDef = def2.items;
    for(let i = 0; i < value.length; i++){
        const itemValue = value[i];
        const itemPath = `${path}/${i}`;
        const res = $d76f6d4dfc9a3307$var$validateOneOf(lexicons2, itemPath, itemsDef, itemValue);
        if (!res.success) return res;
    }
    return {
        success: true,
        value: value
    };
}
function $d76f6d4dfc9a3307$var$object(lexicons2, path, def2, value) {
    def2;
    if (!value || typeof value !== "object") return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an object`)
    };
    const requiredProps = new Set(def2.required);
    const nullableProps = new Set(def2.nullable);
    let resultValue = value;
    if (typeof def2.properties === "object") for(const key in def2.properties){
        if (value[key] === null && nullableProps.has(key)) continue;
        const propDef = def2.properties[key];
        const propPath = `${path}/${key}`;
        const validated = $d76f6d4dfc9a3307$var$validateOneOf(lexicons2, propPath, propDef, value[key]);
        const propValue = validated.success ? validated.value : value[key];
        const propIsUndefined = typeof propValue === "undefined";
        if (propIsUndefined && requiredProps.has(key)) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must have the property "${key}"`)
        };
        else if (!propIsUndefined && !validated.success) return validated;
        if (propValue !== value[key]) {
            if (resultValue === value) resultValue = {
                ...value
            };
            resultValue[key] = propValue;
        }
    }
    return {
        success: true,
        value: resultValue
    };
}
// ../lexicon/src/util.ts
function $d76f6d4dfc9a3307$var$toLexUri(str, baseUri) {
    if (str.split("#").length > 2) throw new Error("Uri can only have one hash segment");
    if (str.startsWith("lex:")) return str;
    if (str.startsWith("#")) {
        if (!baseUri) throw new Error(`Unable to resolve uri without anchor: ${str}`);
        return `${baseUri}${str}`;
    }
    return `lex:${str}`;
}
function $d76f6d4dfc9a3307$var$validateOneOf(lexicons2, path, def2, value, mustBeObj = false) {
    let error;
    let concreteDefs;
    if (def2.type === "union") {
        if (!$d76f6d4dfc9a3307$var$isDiscriminatedObject(value)) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must be an object which includes the "$type" property`)
        };
        if (!$d76f6d4dfc9a3307$var$refsContainType(def2.refs, value.$type)) {
            if (def2.closed) return {
                success: false,
                error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} $type must be one of ${def2.refs.join(", ")}`)
            };
            return {
                success: true,
                value: value
            };
        } else concreteDefs = $d76f6d4dfc9a3307$var$toConcreteTypes(lexicons2, {
            type: "ref",
            ref: value.$type
        });
    } else concreteDefs = $d76f6d4dfc9a3307$var$toConcreteTypes(lexicons2, def2);
    for (const concreteDef of concreteDefs){
        const result = mustBeObj ? $d76f6d4dfc9a3307$var$object(lexicons2, path, concreteDef, value) : $d76f6d4dfc9a3307$var$validate2(lexicons2, path, concreteDef, value);
        if (result.success) return result;
        error ?? (error = result.error);
    }
    if (concreteDefs.length > 1) return {
        success: false,
        error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} did not match any of the expected definitions`)
    };
    return {
        success: false,
        error: error
    };
}
function $d76f6d4dfc9a3307$var$assertValidOneOf(lexicons2, path, def2, value, mustBeObj = false) {
    const res = $d76f6d4dfc9a3307$var$validateOneOf(lexicons2, path, def2, value, mustBeObj);
    if (!res.success) throw res.error;
    return res.value;
}
function $d76f6d4dfc9a3307$var$toConcreteTypes(lexicons2, def2) {
    if (def2.type === "ref") return [
        lexicons2.getDefOrThrow(def2.ref)
    ];
    else if (def2.type === "union") return def2.refs.map((ref)=>lexicons2.getDefOrThrow(ref)).flat();
    else return [
        def2
    ];
}
function $d76f6d4dfc9a3307$var$requiredPropertiesRefinement(object2, ctx) {
    if (object2.required === void 0) return;
    if (!Array.isArray(object2.required)) {
        ctx.addIssue({
            code: $d76f6d4dfc9a3307$var$z.ZodIssueCode.invalid_type,
            received: typeof object2.required,
            expected: "array"
        });
        return;
    }
    if (object2.properties === void 0) {
        if (object2.required.length > 0) ctx.addIssue({
            code: $d76f6d4dfc9a3307$var$z.ZodIssueCode.custom,
            message: `Required fields defined but no properties defined`
        });
        return;
    }
    for (const field of object2.required)if (object2.properties[field] === void 0) ctx.addIssue({
        code: $d76f6d4dfc9a3307$var$z.ZodIssueCode.custom,
        message: `Required field "${field}" not defined`
    });
}
var $d76f6d4dfc9a3307$var$refsContainType = (refs, type)=>{
    const lexUri = $d76f6d4dfc9a3307$var$toLexUri(type);
    if (refs.includes(lexUri)) return true;
    if (lexUri.endsWith("#main")) return refs.includes(lexUri.replace("#main", ""));
    else return refs.includes(lexUri + "#main");
};
// ../lexicon/src/types.ts
var $d76f6d4dfc9a3307$var$lexBoolean = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("boolean"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    default: $d76f6d4dfc9a3307$var$z.boolean().optional(),
    const: $d76f6d4dfc9a3307$var$z.boolean().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexInteger = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("integer"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    default: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    minimum: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    maximum: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    enum: $d76f6d4dfc9a3307$var$z.number().int().array().optional(),
    const: $d76f6d4dfc9a3307$var$z.number().int().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexStringFormat = $d76f6d4dfc9a3307$var$z.enum([
    "datetime",
    "uri",
    "at-uri",
    "did",
    "handle",
    "at-identifier",
    "nsid",
    "cid",
    "language"
]);
var $d76f6d4dfc9a3307$var$lexString = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("string"),
    format: $d76f6d4dfc9a3307$var$lexStringFormat.optional(),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    default: $d76f6d4dfc9a3307$var$z.string().optional(),
    minLength: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    maxLength: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    minGraphemes: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    maxGraphemes: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    enum: $d76f6d4dfc9a3307$var$z.string().array().optional(),
    const: $d76f6d4dfc9a3307$var$z.string().optional(),
    knownValues: $d76f6d4dfc9a3307$var$z.string().array().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexUnknown = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("unknown"),
    description: $d76f6d4dfc9a3307$var$z.string().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexPrimitive = $d76f6d4dfc9a3307$var$z.discriminatedUnion("type", [
    $d76f6d4dfc9a3307$var$lexBoolean,
    $d76f6d4dfc9a3307$var$lexInteger,
    $d76f6d4dfc9a3307$var$lexString,
    $d76f6d4dfc9a3307$var$lexUnknown
]);
var $d76f6d4dfc9a3307$var$lexBytes = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("bytes"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    maxLength: $d76f6d4dfc9a3307$var$z.number().optional(),
    minLength: $d76f6d4dfc9a3307$var$z.number().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexCidLink = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("cid-link"),
    description: $d76f6d4dfc9a3307$var$z.string().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexIpldType = $d76f6d4dfc9a3307$var$z.discriminatedUnion("type", [
    $d76f6d4dfc9a3307$var$lexBytes,
    $d76f6d4dfc9a3307$var$lexCidLink
]);
var $d76f6d4dfc9a3307$var$lexRef = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("ref"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    ref: $d76f6d4dfc9a3307$var$z.string()
}).strict();
var $d76f6d4dfc9a3307$var$lexRefUnion = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("union"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    refs: $d76f6d4dfc9a3307$var$z.string().array(),
    closed: $d76f6d4dfc9a3307$var$z.boolean().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexRefVariant = $d76f6d4dfc9a3307$var$z.discriminatedUnion("type", [
    $d76f6d4dfc9a3307$var$lexRef,
    $d76f6d4dfc9a3307$var$lexRefUnion
]);
var $d76f6d4dfc9a3307$var$lexBlob = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("blob"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    accept: $d76f6d4dfc9a3307$var$z.string().array().optional(),
    maxSize: $d76f6d4dfc9a3307$var$z.number().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexArray = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("array"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    items: $d76f6d4dfc9a3307$var$z.union([
        $d76f6d4dfc9a3307$var$lexPrimitive,
        $d76f6d4dfc9a3307$var$lexIpldType,
        $d76f6d4dfc9a3307$var$lexBlob,
        $d76f6d4dfc9a3307$var$lexRefVariant
    ]),
    minLength: $d76f6d4dfc9a3307$var$z.number().int().optional(),
    maxLength: $d76f6d4dfc9a3307$var$z.number().int().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexPrimitiveArray = $d76f6d4dfc9a3307$var$lexArray.merge($d76f6d4dfc9a3307$var$z.object({
    items: $d76f6d4dfc9a3307$var$lexPrimitive
}).strict());
var $d76f6d4dfc9a3307$var$lexToken = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("token"),
    description: $d76f6d4dfc9a3307$var$z.string().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexObject = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("object"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    required: $d76f6d4dfc9a3307$var$z.string().array().optional(),
    nullable: $d76f6d4dfc9a3307$var$z.string().array().optional(),
    properties: $d76f6d4dfc9a3307$var$z.record($d76f6d4dfc9a3307$var$z.union([
        $d76f6d4dfc9a3307$var$lexRefVariant,
        $d76f6d4dfc9a3307$var$lexIpldType,
        $d76f6d4dfc9a3307$var$lexArray,
        $d76f6d4dfc9a3307$var$lexBlob,
        $d76f6d4dfc9a3307$var$lexPrimitive
    ])).optional()
}).strict().superRefine($d76f6d4dfc9a3307$var$requiredPropertiesRefinement);
var $d76f6d4dfc9a3307$var$lexXrpcParameters = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("params"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    required: $d76f6d4dfc9a3307$var$z.string().array().optional(),
    properties: $d76f6d4dfc9a3307$var$z.record($d76f6d4dfc9a3307$var$z.union([
        $d76f6d4dfc9a3307$var$lexPrimitive,
        $d76f6d4dfc9a3307$var$lexPrimitiveArray
    ]))
}).strict().superRefine($d76f6d4dfc9a3307$var$requiredPropertiesRefinement);
var $d76f6d4dfc9a3307$var$lexXrpcBody = $d76f6d4dfc9a3307$var$z.object({
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    encoding: $d76f6d4dfc9a3307$var$z.string(),
    schema: $d76f6d4dfc9a3307$var$z.union([
        $d76f6d4dfc9a3307$var$lexRefVariant,
        $d76f6d4dfc9a3307$var$lexObject
    ]).optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexXrpcSubscriptionMessage = $d76f6d4dfc9a3307$var$z.object({
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    schema: $d76f6d4dfc9a3307$var$z.union([
        $d76f6d4dfc9a3307$var$lexRefVariant,
        $d76f6d4dfc9a3307$var$lexObject
    ]).optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexXrpcError = $d76f6d4dfc9a3307$var$z.object({
    name: $d76f6d4dfc9a3307$var$z.string(),
    description: $d76f6d4dfc9a3307$var$z.string().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexXrpcQuery = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("query"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    parameters: $d76f6d4dfc9a3307$var$lexXrpcParameters.optional(),
    output: $d76f6d4dfc9a3307$var$lexXrpcBody.optional(),
    errors: $d76f6d4dfc9a3307$var$lexXrpcError.array().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexXrpcProcedure = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("procedure"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    parameters: $d76f6d4dfc9a3307$var$lexXrpcParameters.optional(),
    input: $d76f6d4dfc9a3307$var$lexXrpcBody.optional(),
    output: $d76f6d4dfc9a3307$var$lexXrpcBody.optional(),
    errors: $d76f6d4dfc9a3307$var$lexXrpcError.array().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexXrpcSubscription = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("subscription"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    parameters: $d76f6d4dfc9a3307$var$lexXrpcParameters.optional(),
    message: $d76f6d4dfc9a3307$var$lexXrpcSubscriptionMessage.optional(),
    errors: $d76f6d4dfc9a3307$var$lexXrpcError.array().optional()
}).strict();
var $d76f6d4dfc9a3307$var$lexRecord = $d76f6d4dfc9a3307$var$z.object({
    type: $d76f6d4dfc9a3307$var$z.literal("record"),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    key: $d76f6d4dfc9a3307$var$z.string().optional(),
    record: $d76f6d4dfc9a3307$var$lexObject
}).strict();
var $d76f6d4dfc9a3307$var$lexUserType = $d76f6d4dfc9a3307$var$z.custom((val)=>{
    if (!val || typeof val !== "object") return;
    if (val["type"] === void 0) return;
    switch(val["type"]){
        case "record":
            return $d76f6d4dfc9a3307$var$lexRecord.parse(val);
        case "query":
            return $d76f6d4dfc9a3307$var$lexXrpcQuery.parse(val);
        case "procedure":
            return $d76f6d4dfc9a3307$var$lexXrpcProcedure.parse(val);
        case "subscription":
            return $d76f6d4dfc9a3307$var$lexXrpcSubscription.parse(val);
        case "blob":
            return $d76f6d4dfc9a3307$var$lexBlob.parse(val);
        case "array":
            return $d76f6d4dfc9a3307$var$lexArray.parse(val);
        case "token":
            return $d76f6d4dfc9a3307$var$lexToken.parse(val);
        case "object":
            return $d76f6d4dfc9a3307$var$lexObject.parse(val);
        case "boolean":
            return $d76f6d4dfc9a3307$var$lexBoolean.parse(val);
        case "integer":
            return $d76f6d4dfc9a3307$var$lexInteger.parse(val);
        case "string":
            return $d76f6d4dfc9a3307$var$lexString.parse(val);
        case "bytes":
            return $d76f6d4dfc9a3307$var$lexBytes.parse(val);
        case "cid-link":
            return $d76f6d4dfc9a3307$var$lexCidLink.parse(val);
        case "unknown":
            return $d76f6d4dfc9a3307$var$lexUnknown.parse(val);
    }
}, (val)=>{
    if (!val || typeof val !== "object") return {
        message: "Must be an object",
        fatal: true
    };
    if (val["type"] === void 0) return {
        message: "Must have a type",
        fatal: true
    };
    return {
        message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
        fatal: true
    };
});
var $d76f6d4dfc9a3307$var$lexiconDoc = $d76f6d4dfc9a3307$var$z.object({
    lexicon: $d76f6d4dfc9a3307$var$z.literal(1),
    id: $d76f6d4dfc9a3307$var$z.string().refine((v)=>$d76f6d4dfc9a3307$var$NSID.isValid(v), {
        message: "Must be a valid NSID"
    }),
    revision: $d76f6d4dfc9a3307$var$z.number().optional(),
    description: $d76f6d4dfc9a3307$var$z.string().optional(),
    defs: $d76f6d4dfc9a3307$var$z.record($d76f6d4dfc9a3307$var$lexUserType)
}).strict().superRefine((doc, ctx)=>{
    for(const defId in doc.defs){
        const def2 = doc.defs[defId];
        if (defId !== "main" && (def2.type === "record" || def2.type === "procedure" || def2.type === "query" || def2.type === "subscription")) ctx.addIssue({
            code: $d76f6d4dfc9a3307$var$z.ZodIssueCode.custom,
            message: `Records, procedures, queries, and subscriptions must be the main definition.`
        });
    }
});
function $d76f6d4dfc9a3307$var$isObj(obj) {
    return obj !== null && typeof obj === "object";
}
function $d76f6d4dfc9a3307$var$hasProp(data, prop) {
    return prop in data;
}
var $d76f6d4dfc9a3307$var$discriminatedObject = $d76f6d4dfc9a3307$var$z.object({
    $type: $d76f6d4dfc9a3307$var$z.string()
});
function $d76f6d4dfc9a3307$var$isDiscriminatedObject(value) {
    return $d76f6d4dfc9a3307$var$discriminatedObject.safeParse(value).success;
}
var $d76f6d4dfc9a3307$var$LexiconDocMalformedError = class extends Error {
    constructor(message, schemaDef, issues){
        super(message);
        this.schemaDef = schemaDef;
        this.issues = issues;
        this.schemaDef = schemaDef;
        this.issues = issues;
    }
};
var $d76f6d4dfc9a3307$var$ValidationError = class extends Error {
};
var $d76f6d4dfc9a3307$var$InvalidLexiconError = class extends Error {
};
var $d76f6d4dfc9a3307$var$LexiconDefNotFoundError = class extends Error {
};
// ../lexicon/src/validators/xrpc.ts
function $d76f6d4dfc9a3307$var$params(lexicons2, path, def2, val) {
    const value = val && typeof val === "object" ? val : {};
    const requiredProps = new Set(def2.required ?? []);
    let resultValue = value;
    if (typeof def2.properties === "object") for(const key in def2.properties){
        const propDef = def2.properties[key];
        const validated = propDef.type === "array" ? $d76f6d4dfc9a3307$var$array(lexicons2, key, propDef, value[key]) : $d76f6d4dfc9a3307$var$validate(lexicons2, key, propDef, value[key]);
        const propValue = validated.success ? validated.value : value[key];
        const propIsUndefined = typeof propValue === "undefined";
        if (propIsUndefined && requiredProps.has(key)) return {
            success: false,
            error: new $d76f6d4dfc9a3307$var$ValidationError(`${path} must have the property "${key}"`)
        };
        else if (!propIsUndefined && !validated.success) return validated;
        if (propValue !== value[key]) {
            if (resultValue === value) resultValue = {
                ...value
            };
            resultValue[key] = propValue;
        }
    }
    return {
        success: true,
        value: resultValue
    };
}
// ../lexicon/src/validation.ts
function $d76f6d4dfc9a3307$var$assertValidRecord(lexicons2, def2, value) {
    const res = $d76f6d4dfc9a3307$var$object(lexicons2, "Record", def2.record, value);
    if (!res.success) throw res.error;
    return res.value;
}
function $d76f6d4dfc9a3307$var$assertValidXrpcParams(lexicons2, def2, value) {
    if (def2.parameters) {
        const res = $d76f6d4dfc9a3307$var$params(lexicons2, "Params", def2.parameters, value);
        if (!res.success) throw res.error;
        return res.value;
    }
}
function $d76f6d4dfc9a3307$var$assertValidXrpcInput(lexicons2, def2, value) {
    if (def2.input?.schema) return $d76f6d4dfc9a3307$var$assertValidOneOf(lexicons2, "Input", def2.input.schema, value, true);
}
function $d76f6d4dfc9a3307$var$assertValidXrpcOutput(lexicons2, def2, value) {
    if (def2.output?.schema) return $d76f6d4dfc9a3307$var$assertValidOneOf(lexicons2, "Output", def2.output.schema, value, true);
}
function $d76f6d4dfc9a3307$var$assertValidXrpcMessage(lexicons2, def2, value) {
    if (def2.message?.schema) return $d76f6d4dfc9a3307$var$assertValidOneOf(lexicons2, "Message", def2.message.schema, value, true);
}
// ../lexicon/src/lexicons.ts
var $d76f6d4dfc9a3307$var$Lexicons = class {
    constructor(docs){
        this.docs = /* @__PURE__ */ new Map();
        this.defs = /* @__PURE__ */ new Map();
        if (docs?.length) for (const doc of docs)this.add(doc);
    }
    add(doc) {
        try {
            $d76f6d4dfc9a3307$var$lexiconDoc.parse(doc);
        } catch (e) {
            if (e instanceof $d76f6d4dfc9a3307$var$ZodError) throw new $d76f6d4dfc9a3307$var$LexiconDocMalformedError(`Failed to parse schema definition ${doc.id}`, doc, e.issues);
            else throw e;
        }
        const validatedDoc = doc;
        const uri2 = $d76f6d4dfc9a3307$var$toLexUri(validatedDoc.id);
        if (this.docs.has(uri2)) throw new Error(`${uri2} has already been registered`);
        $d76f6d4dfc9a3307$var$resolveRefUris(validatedDoc, uri2);
        this.docs.set(uri2, validatedDoc);
        for (const [defUri, def2] of $d76f6d4dfc9a3307$var$iterDefs(validatedDoc))this.defs.set(defUri, def2);
    }
    remove(uri2) {
        uri2 = $d76f6d4dfc9a3307$var$toLexUri(uri2);
        const doc = this.docs.get(uri2);
        if (!doc) throw new Error(`Unable to remove "${uri2}": does not exist`);
        for (const [defUri, _def] of $d76f6d4dfc9a3307$var$iterDefs(doc))this.defs.delete(defUri);
        this.docs.delete(uri2);
    }
    get(uri2) {
        uri2 = $d76f6d4dfc9a3307$var$toLexUri(uri2);
        return this.docs.get(uri2);
    }
    getDef(uri2) {
        uri2 = $d76f6d4dfc9a3307$var$toLexUri(uri2);
        return this.defs.get(uri2);
    }
    getDefOrThrow(uri2, types) {
        const def2 = this.getDef(uri2);
        if (!def2) throw new $d76f6d4dfc9a3307$var$LexiconDefNotFoundError(`Lexicon not found: ${uri2}`);
        if (types && !types.includes(def2.type)) throw new $d76f6d4dfc9a3307$var$InvalidLexiconError(`Not a ${types.join(" or ")} lexicon: ${uri2}`);
        return def2;
    }
    validate(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "record",
            "object"
        ]);
        if (!$d76f6d4dfc9a3307$var$isObj(value)) throw new $d76f6d4dfc9a3307$var$ValidationError(`Value must be an object`);
        if (def2.type === "record") return $d76f6d4dfc9a3307$var$object(this, "Record", def2.record, value);
        else if (def2.type === "object") return $d76f6d4dfc9a3307$var$object(this, "Object", def2, value);
        else throw new $d76f6d4dfc9a3307$var$InvalidLexiconError("Definition must be a record or object");
    }
    assertValidRecord(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "record"
        ]);
        if (!$d76f6d4dfc9a3307$var$isObj(value)) throw new $d76f6d4dfc9a3307$var$ValidationError(`Record must be an object`);
        if (!$d76f6d4dfc9a3307$var$hasProp(value, "$type") || typeof value.$type !== "string") throw new $d76f6d4dfc9a3307$var$ValidationError(`Record/$type must be a string`);
        const $type = value.$type || "";
        if ($d76f6d4dfc9a3307$var$toLexUri($type) !== lexUri) throw new $d76f6d4dfc9a3307$var$ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
        return $d76f6d4dfc9a3307$var$assertValidRecord(this, def2, value);
    }
    assertValidXrpcParams(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "query",
            "procedure",
            "subscription"
        ]);
        return $d76f6d4dfc9a3307$var$assertValidXrpcParams(this, def2, value);
    }
    assertValidXrpcInput(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "procedure"
        ]);
        return $d76f6d4dfc9a3307$var$assertValidXrpcInput(this, def2, value);
    }
    assertValidXrpcOutput(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "query",
            "procedure"
        ]);
        return $d76f6d4dfc9a3307$var$assertValidXrpcOutput(this, def2, value);
    }
    assertValidXrpcMessage(lexUri, value) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        const def2 = this.getDefOrThrow(lexUri, [
            "subscription"
        ]);
        return $d76f6d4dfc9a3307$var$assertValidXrpcMessage(this, def2, value);
    }
    resolveLexUri(lexUri, ref) {
        lexUri = $d76f6d4dfc9a3307$var$toLexUri(lexUri);
        return $d76f6d4dfc9a3307$var$toLexUri(ref, lexUri);
    }
};
function* $d76f6d4dfc9a3307$var$iterDefs(doc) {
    for(const defId in doc.defs){
        yield [
            `lex:${doc.id}#${defId}`,
            doc.defs[defId]
        ];
        if (defId === "main") yield [
            `lex:${doc.id}`,
            doc.defs[defId]
        ];
    }
}
function $d76f6d4dfc9a3307$var$resolveRefUris(obj, baseUri) {
    for(const k in obj){
        if (obj.type === "ref") obj.ref = $d76f6d4dfc9a3307$var$toLexUri(obj.ref, baseUri);
        else if (obj.type === "union") obj.refs = obj.refs.map((ref)=>$d76f6d4dfc9a3307$var$toLexUri(ref, baseUri));
        else if (Array.isArray(obj[k])) obj[k] = obj[k].map((item)=>{
            if (typeof item === "string") return item.startsWith("#") ? $d76f6d4dfc9a3307$var$toLexUri(item, baseUri) : item;
            else if (item && typeof item === "object") return $d76f6d4dfc9a3307$var$resolveRefUris(item, baseUri);
            return item;
        });
        else if (obj[k] && typeof obj[k] === "object") obj[k] = $d76f6d4dfc9a3307$var$resolveRefUris(obj[k], baseUri);
    }
    return obj;
}
// ../lexicon/src/serialize.ts
var $d76f6d4dfc9a3307$var$lexToIpld = (val)=>{
    if (Array.isArray(val)) return val.map((item)=>$d76f6d4dfc9a3307$var$lexToIpld(item));
    if (val && typeof val === "object") {
        if (val instanceof $d76f6d4dfc9a3307$var$BlobRef) return val.original;
        if ($d76f6d4dfc9a3307$var$CID.asCID(val) || val instanceof Uint8Array) return val;
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = $d76f6d4dfc9a3307$var$lexToIpld(val[key]);
        return toReturn;
    }
    return val;
};
var $d76f6d4dfc9a3307$var$ipldToLex = (val)=>{
    if (Array.isArray(val)) return val.map((item)=>$d76f6d4dfc9a3307$var$ipldToLex(item));
    if (val && typeof val === "object") {
        if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && $d76f6d4dfc9a3307$var$check_exports.is(val, $d76f6d4dfc9a3307$var$jsonBlobRef)) return $d76f6d4dfc9a3307$var$BlobRef.fromJsonRef(val);
        if ($d76f6d4dfc9a3307$var$CID.asCID(val) || val instanceof Uint8Array) return val;
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = $d76f6d4dfc9a3307$var$ipldToLex(val[key]);
        return toReturn;
    }
    return val;
};
var $d76f6d4dfc9a3307$var$lexToJson = (val)=>{
    return $d76f6d4dfc9a3307$var$ipldToJson($d76f6d4dfc9a3307$var$lexToIpld(val));
};
var $d76f6d4dfc9a3307$var$stringifyLex = (val)=>{
    return JSON.stringify($d76f6d4dfc9a3307$var$lexToJson(val));
};
var $d76f6d4dfc9a3307$var$jsonToLex = (val)=>{
    return $d76f6d4dfc9a3307$var$ipldToLex($d76f6d4dfc9a3307$var$jsonToIpld(val));
};
var $d76f6d4dfc9a3307$var$jsonStringToLex = (val)=>{
    return $d76f6d4dfc9a3307$var$jsonToLex(JSON.parse(val));
};
// ../xrpc/src/types.ts
var $d76f6d4dfc9a3307$var$errorResponseBody = $d76f6d4dfc9a3307$var$z.object({
    error: $d76f6d4dfc9a3307$var$z.string().optional(),
    message: $d76f6d4dfc9a3307$var$z.string().optional()
});
var $d76f6d4dfc9a3307$var$ResponseType = /* @__PURE__ */ ((ResponseType2)=>{
    ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
    ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
    ResponseType2[ResponseType2["Success"] = 200] = "Success";
    ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
    ResponseType2[ResponseType2["AuthRequired"] = 401] = "AuthRequired";
    ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
    ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
    ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
    ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
    ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
    ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
    ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
    ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
    return ResponseType2;
})($d76f6d4dfc9a3307$var$ResponseType || {});
var $d76f6d4dfc9a3307$var$ResponseTypeNames = {
    [2 /* InvalidResponse */ ]: "InvalidResponse",
    [200 /* Success */ ]: "Success",
    [400 /* InvalidRequest */ ]: "InvalidRequest",
    [401 /* AuthRequired */ ]: "AuthenticationRequired",
    [403 /* Forbidden */ ]: "Forbidden",
    [404 /* XRPCNotSupported */ ]: "XRPCNotSupported",
    [413 /* PayloadTooLarge */ ]: "PayloadTooLarge",
    [429 /* RateLimitExceeded */ ]: "RateLimitExceeded",
    [500 /* InternalServerError */ ]: "InternalServerError",
    [501 /* MethodNotImplemented */ ]: "MethodNotImplemented",
    [502 /* UpstreamFailure */ ]: "UpstreamFailure",
    [503 /* NotEnoughResources */ ]: "NotEnoughResources",
    [504 /* UpstreamTimeout */ ]: "UpstreamTimeout"
};
var $d76f6d4dfc9a3307$var$ResponseTypeStrings = {
    [2 /* InvalidResponse */ ]: "Invalid Response",
    [200 /* Success */ ]: "Success",
    [400 /* InvalidRequest */ ]: "Invalid Request",
    [401 /* AuthRequired */ ]: "Authentication Required",
    [403 /* Forbidden */ ]: "Forbidden",
    [404 /* XRPCNotSupported */ ]: "XRPC Not Supported",
    [413 /* PayloadTooLarge */ ]: "Payload Too Large",
    [429 /* RateLimitExceeded */ ]: "Rate Limit Exceeded",
    [500 /* InternalServerError */ ]: "Internal Server Error",
    [501 /* MethodNotImplemented */ ]: "Method Not Implemented",
    [502 /* UpstreamFailure */ ]: "Upstream Failure",
    [503 /* NotEnoughResources */ ]: "Not Enough Resources",
    [504 /* UpstreamTimeout */ ]: "Upstream Timeout"
};
var $d76f6d4dfc9a3307$var$XRPCResponse = class {
    constructor(data, headers){
        this.data = data;
        this.headers = headers;
        this.success = true;
    }
};
var $d76f6d4dfc9a3307$var$XRPCError = class extends Error {
    constructor(status, error, message, headers){
        super(message || error || $d76f6d4dfc9a3307$var$ResponseTypeStrings[status]);
        this.status = status;
        this.error = error;
        this.success = false;
        if (!this.error) this.error = $d76f6d4dfc9a3307$var$ResponseTypeNames[status];
        this.headers = headers;
    }
};
var $d76f6d4dfc9a3307$var$XRPCInvalidResponseError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(lexiconNsid, validationError, responseBody){
        super(2 /* InvalidResponse */ , $d76f6d4dfc9a3307$var$ResponseTypeStrings[2 /* InvalidResponse */ ], `The server gave an invalid response and may be out of date.`);
        this.lexiconNsid = lexiconNsid;
        this.validationError = validationError;
        this.responseBody = responseBody;
    }
};
// ../xrpc/src/util.ts
function $d76f6d4dfc9a3307$var$getMethodSchemaHTTPMethod(schema2) {
    if (schema2.type === "procedure") return "post";
    return "get";
}
function $d76f6d4dfc9a3307$var$constructMethodCallUri(nsid2, schema2, serviceUri, params2) {
    const uri2 = new URL(serviceUri);
    uri2.pathname = `/xrpc/${nsid2}`;
    if (params2) for (const [key, value] of Object.entries(params2)){
        const paramSchema = schema2.parameters?.properties?.[key];
        if (!paramSchema) throw new Error(`Invalid query parameter: ${key}`);
        if (value !== void 0) {
            if (paramSchema.type === "array") {
                const vals = [];
                vals.concat(value).forEach((val)=>{
                    uri2.searchParams.append(key, $d76f6d4dfc9a3307$var$encodeQueryParam(paramSchema.items.type, val));
                });
            } else uri2.searchParams.set(key, $d76f6d4dfc9a3307$var$encodeQueryParam(paramSchema.type, value));
        }
    }
    return uri2.toString();
}
function $d76f6d4dfc9a3307$var$encodeQueryParam(type, value) {
    if (type === "string" || type === "unknown") return String(value);
    if (type === "float") return String(Number(value));
    else if (type === "integer") return String(Number(value) | 0);
    else if (type === "boolean") return value ? "true" : "false";
    else if (type === "datetime") {
        if (value instanceof Date) return value.toISOString();
        return String(value);
    }
    throw new Error(`Unsupported query param type: ${type}`);
}
function $d76f6d4dfc9a3307$var$normalizeHeaders(headers) {
    const normalized = {};
    for (const [header, value] of Object.entries(headers))normalized[header.toLowerCase()] = value;
    return normalized;
}
function $d76f6d4dfc9a3307$var$constructMethodCallHeaders(schema2, data, opts) {
    const headers = opts?.headers || {};
    if (schema2.type === "procedure") {
        if (opts?.encoding) headers["Content-Type"] = opts.encoding;
        if (data && typeof data === "object") {
            if (!headers["Content-Type"]) headers["Content-Type"] = "application/json";
        }
    }
    return headers;
}
function $d76f6d4dfc9a3307$var$encodeMethodCallBody(headers, data) {
    if (!headers["content-type"] || typeof data === "undefined") return void 0;
    if (data instanceof ArrayBuffer) return data;
    if (headers["content-type"].startsWith("text/")) return new TextEncoder().encode(data.toString());
    if (headers["content-type"].startsWith("application/json")) return new TextEncoder().encode($d76f6d4dfc9a3307$var$stringifyLex(data));
    return data;
}
function $d76f6d4dfc9a3307$var$httpResponseCodeToEnum(status) {
    let resCode;
    if (status in $d76f6d4dfc9a3307$var$ResponseType) resCode = status;
    else if (status >= 100 && status < 200) resCode = 404 /* XRPCNotSupported */ ;
    else if (status >= 200 && status < 300) resCode = 200 /* Success */ ;
    else if (status >= 300 && status < 400) resCode = 404 /* XRPCNotSupported */ ;
    else if (status >= 400 && status < 500) resCode = 400 /* InvalidRequest */ ;
    else resCode = 500 /* InternalServerError */ ;
    return resCode;
}
function $d76f6d4dfc9a3307$var$httpResponseBodyParse(mimeType, data) {
    if (mimeType) {
        if (mimeType.includes("application/json") && data?.byteLength) try {
            const str = new TextDecoder().decode(data);
            return $d76f6d4dfc9a3307$var$jsonStringToLex(str);
        } catch (e) {
            throw new $d76f6d4dfc9a3307$var$XRPCError(2 /* InvalidResponse */ , `Failed to parse response body: ${String(e)}`);
        }
        if (mimeType.startsWith("text/") && data?.byteLength) try {
            return new TextDecoder().decode(data);
        } catch (e) {
            throw new $d76f6d4dfc9a3307$var$XRPCError(2 /* InvalidResponse */ , `Failed to parse response body: ${String(e)}`);
        }
    }
    if (data instanceof ArrayBuffer) return new Uint8Array(data);
    return data;
}
// ../xrpc/src/client.ts
var $d76f6d4dfc9a3307$var$Client = class {
    constructor(){
        this.fetch = $d76f6d4dfc9a3307$var$defaultFetchHandler;
        this.lex = new $d76f6d4dfc9a3307$var$Lexicons();
    }
    async call(serviceUri, methodNsid, params2, data, opts) {
        return this.service(serviceUri).call(methodNsid, params2, data, opts);
    }
    service(serviceUri) {
        return new $d76f6d4dfc9a3307$var$ServiceClient(this, serviceUri);
    }
    addLexicon(doc) {
        this.lex.add(doc);
    }
    addLexicons(docs) {
        for (const doc of docs)this.addLexicon(doc);
    }
    removeLexicon(uri2) {
        this.lex.remove(uri2);
    }
};
var $d76f6d4dfc9a3307$var$ServiceClient = class {
    constructor(baseClient, serviceUri){
        this.headers = {};
        this.baseClient = baseClient;
        this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
    }
    setHeader(key, value) {
        this.headers[key] = value;
    }
    unsetHeader(key) {
        delete this.headers[key];
    }
    async call(methodNsid, params2, data, opts) {
        const def2 = this.baseClient.lex.getDefOrThrow(methodNsid);
        if (!def2 || def2.type !== "query" && def2.type !== "procedure") throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
        const httpMethod = $d76f6d4dfc9a3307$var$getMethodSchemaHTTPMethod(def2);
        const httpUri = $d76f6d4dfc9a3307$var$constructMethodCallUri(methodNsid, def2, this.uri, params2);
        const httpHeaders = $d76f6d4dfc9a3307$var$constructMethodCallHeaders(def2, data, {
            headers: {
                ...this.headers,
                ...opts?.headers
            },
            encoding: opts?.encoding
        });
        const res = await this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);
        const resCode = $d76f6d4dfc9a3307$var$httpResponseCodeToEnum(res.status);
        if (resCode === 200 /* Success */ ) {
            try {
                this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);
            } catch (e) {
                if (e instanceof $d76f6d4dfc9a3307$var$ValidationError) throw new $d76f6d4dfc9a3307$var$XRPCInvalidResponseError(methodNsid, e, res.body);
                else throw e;
            }
            return new $d76f6d4dfc9a3307$var$XRPCResponse(res.body, res.headers);
        } else {
            if (res.body && $d76f6d4dfc9a3307$var$isErrorResponseBody(res.body)) throw new $d76f6d4dfc9a3307$var$XRPCError(resCode, res.body.error, res.body.message, res.headers);
            else throw new $d76f6d4dfc9a3307$var$XRPCError(resCode);
        }
    }
};
async function $d76f6d4dfc9a3307$var$defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {
    try {
        const headers = $d76f6d4dfc9a3307$var$normalizeHeaders(httpHeaders);
        const reqInit = {
            method: httpMethod,
            headers: headers,
            body: $d76f6d4dfc9a3307$var$encodeMethodCallBody(headers, httpReqBody),
            duplex: "half"
        };
        const res = await fetch(httpUri, reqInit);
        const resBody = await res.arrayBuffer();
        return {
            status: res.status,
            headers: Object.fromEntries(res.headers.entries()),
            body: $d76f6d4dfc9a3307$var$httpResponseBodyParse(res.headers.get("content-type"), resBody)
        };
    } catch (e) {
        throw new $d76f6d4dfc9a3307$var$XRPCError(1 /* Unknown */ , String(e));
    }
}
function $d76f6d4dfc9a3307$var$isErrorResponseBody(v) {
    return $d76f6d4dfc9a3307$var$errorResponseBody.safeParse(v).success;
}
// ../xrpc/src/index.ts
var $d76f6d4dfc9a3307$var$defaultInst = new $d76f6d4dfc9a3307$var$Client();
// src/client/lexicons.ts
var $d76f6d4dfc9a3307$var$schemaDict = {
    ComAtprotoAdminDefs: {
        lexicon: 1,
        id: "com.atproto.admin.defs",
        defs: {
            actionView: {
                type: "object",
                required: [
                    "id",
                    "action",
                    "subject",
                    "subjectBlobCids",
                    "reason",
                    "createdBy",
                    "createdAt",
                    "resolvedReportIds"
                ],
                properties: {
                    id: {
                        type: "integer"
                    },
                    action: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionType"
                    },
                    durationInHours: {
                        type: "integer",
                        description: "Indicates how long this action was meant to be in effect before automatically expiring."
                    },
                    subject: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.admin.defs#repoRef",
                            "lex:com.atproto.repo.strongRef"
                        ]
                    },
                    subjectBlobCids: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    createLabelVals: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    negateLabelVals: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    reason: {
                        type: "string"
                    },
                    createdBy: {
                        type: "string",
                        format: "did"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    reversal: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionReversal"
                    },
                    resolvedReportIds: {
                        type: "array",
                        items: {
                            type: "integer"
                        }
                    }
                }
            },
            actionViewDetail: {
                type: "object",
                required: [
                    "id",
                    "action",
                    "subject",
                    "subjectBlobs",
                    "reason",
                    "createdBy",
                    "createdAt",
                    "resolvedReports"
                ],
                properties: {
                    id: {
                        type: "integer"
                    },
                    action: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionType"
                    },
                    durationInHours: {
                        type: "integer",
                        description: "Indicates how long this action was meant to be in effect before automatically expiring."
                    },
                    subject: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.admin.defs#repoView",
                            "lex:com.atproto.admin.defs#repoViewNotFound",
                            "lex:com.atproto.admin.defs#recordView",
                            "lex:com.atproto.admin.defs#recordViewNotFound"
                        ]
                    },
                    subjectBlobs: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#blobView"
                        }
                    },
                    createLabelVals: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    negateLabelVals: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    reason: {
                        type: "string"
                    },
                    createdBy: {
                        type: "string",
                        format: "did"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    reversal: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionReversal"
                    },
                    resolvedReports: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#reportView"
                        }
                    }
                }
            },
            actionViewCurrent: {
                type: "object",
                required: [
                    "id",
                    "action"
                ],
                properties: {
                    id: {
                        type: "integer"
                    },
                    action: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionType"
                    },
                    durationInHours: {
                        type: "integer",
                        description: "Indicates how long this action was meant to be in effect before automatically expiring."
                    }
                }
            },
            actionReversal: {
                type: "object",
                required: [
                    "reason",
                    "createdBy",
                    "createdAt"
                ],
                properties: {
                    reason: {
                        type: "string"
                    },
                    createdBy: {
                        type: "string",
                        format: "did"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            actionType: {
                type: "string",
                knownValues: [
                    "lex:com.atproto.admin.defs#takedown",
                    "lex:com.atproto.admin.defs#flag",
                    "lex:com.atproto.admin.defs#acknowledge",
                    "lex:com.atproto.admin.defs#escalate"
                ]
            },
            takedown: {
                type: "token",
                description: "Moderation action type: Takedown. Indicates that content should not be served by the PDS."
            },
            flag: {
                type: "token",
                description: "Moderation action type: Flag. Indicates that the content was reviewed and considered to violate PDS rules, but may still be served."
            },
            acknowledge: {
                type: "token",
                description: "Moderation action type: Acknowledge. Indicates that the content was reviewed and not considered to violate PDS rules."
            },
            escalate: {
                type: "token",
                description: "Moderation action type: Escalate. Indicates that the content has been flagged for additional review."
            },
            reportView: {
                type: "object",
                required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt",
                    "resolvedByActionIds"
                ],
                properties: {
                    id: {
                        type: "integer"
                    },
                    reasonType: {
                        type: "ref",
                        ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                        type: "string"
                    },
                    subjectRepoHandle: {
                        type: "string"
                    },
                    subject: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.admin.defs#repoRef",
                            "lex:com.atproto.repo.strongRef"
                        ]
                    },
                    reportedBy: {
                        type: "string",
                        format: "did"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    resolvedByActionIds: {
                        type: "array",
                        items: {
                            type: "integer"
                        }
                    }
                }
            },
            reportViewDetail: {
                type: "object",
                required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt",
                    "resolvedByActions"
                ],
                properties: {
                    id: {
                        type: "integer"
                    },
                    reasonType: {
                        type: "ref",
                        ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                        type: "string"
                    },
                    subject: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.admin.defs#repoView",
                            "lex:com.atproto.admin.defs#repoViewNotFound",
                            "lex:com.atproto.admin.defs#recordView",
                            "lex:com.atproto.admin.defs#recordViewNotFound"
                        ]
                    },
                    reportedBy: {
                        type: "string",
                        format: "did"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    resolvedByActions: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#actionView"
                        }
                    }
                }
            },
            repoView: {
                type: "object",
                required: [
                    "did",
                    "handle",
                    "relatedRecords",
                    "indexedAt",
                    "moderation"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    email: {
                        type: "string"
                    },
                    relatedRecords: {
                        type: "array",
                        items: {
                            type: "unknown"
                        }
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    moderation: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#moderation"
                    },
                    invitedBy: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                    },
                    invitesDisabled: {
                        type: "boolean"
                    },
                    inviteNote: {
                        type: "string"
                    }
                }
            },
            repoViewDetail: {
                type: "object",
                required: [
                    "did",
                    "handle",
                    "relatedRecords",
                    "indexedAt",
                    "moderation"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    email: {
                        type: "string"
                    },
                    relatedRecords: {
                        type: "array",
                        items: {
                            type: "unknown"
                        }
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    moderation: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#moderationDetail"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    },
                    invitedBy: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                    },
                    invites: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.server.defs#inviteCode"
                        }
                    },
                    invitesDisabled: {
                        type: "boolean"
                    },
                    inviteNote: {
                        type: "string"
                    }
                }
            },
            repoViewNotFound: {
                type: "object",
                required: [
                    "did"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    }
                }
            },
            repoRef: {
                type: "object",
                required: [
                    "did"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    }
                }
            },
            recordView: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "value",
                    "blobCids",
                    "indexedAt",
                    "moderation",
                    "repo"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    value: {
                        type: "unknown"
                    },
                    blobCids: {
                        type: "array",
                        items: {
                            type: "string",
                            format: "cid"
                        }
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    moderation: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#moderation"
                    },
                    repo: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#repoView"
                    }
                }
            },
            recordViewDetail: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "value",
                    "blobs",
                    "indexedAt",
                    "moderation",
                    "repo"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    value: {
                        type: "unknown"
                    },
                    blobs: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#blobView"
                        }
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    moderation: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#moderationDetail"
                    },
                    repo: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#repoView"
                    }
                }
            },
            recordViewNotFound: {
                type: "object",
                required: [
                    "uri"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            },
            moderation: {
                type: "object",
                properties: {
                    currentAction: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionViewCurrent"
                    }
                }
            },
            moderationDetail: {
                type: "object",
                required: [
                    "actions",
                    "reports"
                ],
                properties: {
                    currentAction: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionViewCurrent"
                    },
                    actions: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#actionView"
                        }
                    },
                    reports: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.admin.defs#reportView"
                        }
                    }
                }
            },
            blobView: {
                type: "object",
                required: [
                    "cid",
                    "mimeType",
                    "size",
                    "createdAt"
                ],
                properties: {
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    mimeType: {
                        type: "string"
                    },
                    size: {
                        type: "integer"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    details: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.admin.defs#imageDetails",
                            "lex:com.atproto.admin.defs#videoDetails"
                        ]
                    },
                    moderation: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#moderation"
                    }
                }
            },
            imageDetails: {
                type: "object",
                required: [
                    "width",
                    "height"
                ],
                properties: {
                    width: {
                        type: "integer"
                    },
                    height: {
                        type: "integer"
                    }
                }
            },
            videoDetails: {
                type: "object",
                required: [
                    "width",
                    "height",
                    "length"
                ],
                properties: {
                    width: {
                        type: "integer"
                    },
                    height: {
                        type: "integer"
                    },
                    length: {
                        type: "integer"
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableAccountInvites: {
        lexicon: 1,
        id: "com.atproto.admin.disableAccountInvites",
        defs: {
            main: {
                type: "procedure",
                description: "Disable an account from receiving new invite codes, but does not invalidate existing codes",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "account"
                        ],
                        properties: {
                            account: {
                                type: "string",
                                format: "did"
                            },
                            note: {
                                type: "string",
                                description: "Additionally add a note describing why the invites were disabled"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableInviteCodes: {
        lexicon: 1,
        id: "com.atproto.admin.disableInviteCodes",
        defs: {
            main: {
                type: "procedure",
                description: "Disable some set of codes and/or all codes associated with a set of users",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        properties: {
                            codes: {
                                type: "array",
                                items: {
                                    type: "string"
                                }
                            },
                            accounts: {
                                type: "array",
                                items: {
                                    type: "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminEnableAccountInvites: {
        lexicon: 1,
        id: "com.atproto.admin.enableAccountInvites",
        defs: {
            main: {
                type: "procedure",
                description: "Re-enable an accounts ability to receive invite codes",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "account"
                        ],
                        properties: {
                            account: {
                                type: "string",
                                format: "did"
                            },
                            note: {
                                type: "string",
                                description: "Additionally add a note describing why the invites were enabled"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetInviteCodes: {
        lexicon: 1,
        id: "com.atproto.admin.getInviteCodes",
        defs: {
            main: {
                type: "query",
                description: "Admin view of invite codes",
                parameters: {
                    type: "params",
                    properties: {
                        sort: {
                            type: "string",
                            knownValues: [
                                "recent",
                                "usage"
                            ],
                            default: "recent"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 500,
                            default: 100
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "codes"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            codes: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.server.defs#inviteCode"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetModerationAction: {
        lexicon: 1,
        id: "com.atproto.admin.getModerationAction",
        defs: {
            main: {
                type: "query",
                description: "View details about a moderation action.",
                parameters: {
                    type: "params",
                    required: [
                        "id"
                    ],
                    properties: {
                        id: {
                            type: "integer"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionViewDetail"
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetModerationActions: {
        lexicon: 1,
        id: "com.atproto.admin.getModerationActions",
        defs: {
            main: {
                type: "query",
                description: "List moderation actions related to a subject.",
                parameters: {
                    type: "params",
                    properties: {
                        subject: {
                            type: "string"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actions"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            actions: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.admin.defs#actionView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetModerationReport: {
        lexicon: 1,
        id: "com.atproto.admin.getModerationReport",
        defs: {
            main: {
                type: "query",
                description: "View details about a moderation report.",
                parameters: {
                    type: "params",
                    required: [
                        "id"
                    ],
                    properties: {
                        id: {
                            type: "integer"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#reportViewDetail"
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetModerationReports: {
        lexicon: 1,
        id: "com.atproto.admin.getModerationReports",
        defs: {
            main: {
                type: "query",
                description: "List moderation reports related to a subject.",
                parameters: {
                    type: "params",
                    properties: {
                        subject: {
                            type: "string"
                        },
                        ignoreSubjects: {
                            type: "array",
                            items: {
                                type: "string"
                            }
                        },
                        actionedBy: {
                            type: "string",
                            format: "did",
                            description: "Get all reports that were actioned by a specific moderator"
                        },
                        reporters: {
                            type: "array",
                            items: {
                                type: "string"
                            },
                            description: "Filter reports made by one or more DIDs"
                        },
                        resolved: {
                            type: "boolean"
                        },
                        actionType: {
                            type: "string",
                            knownValues: [
                                "com.atproto.admin.defs#takedown",
                                "com.atproto.admin.defs#flag",
                                "com.atproto.admin.defs#acknowledge",
                                "com.atproto.admin.defs#escalate"
                            ]
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        },
                        reverse: {
                            type: "boolean",
                            description: "Reverse the order of the returned records? when true, returns reports in chronological order"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "reports"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            reports: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.admin.defs#reportView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetRecord: {
        lexicon: 1,
        id: "com.atproto.admin.getRecord",
        defs: {
            main: {
                type: "query",
                description: "View details about a record.",
                parameters: {
                    type: "params",
                    required: [
                        "uri"
                    ],
                    properties: {
                        uri: {
                            type: "string",
                            format: "at-uri"
                        },
                        cid: {
                            type: "string",
                            format: "cid"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#recordViewDetail"
                    }
                },
                errors: [
                    {
                        name: "RecordNotFound"
                    }
                ]
            }
        }
    },
    ComAtprotoAdminGetRepo: {
        lexicon: 1,
        id: "com.atproto.admin.getRepo",
        defs: {
            main: {
                type: "query",
                description: "View details about a repository.",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#repoViewDetail"
                    }
                },
                errors: [
                    {
                        name: "RepoNotFound"
                    }
                ]
            }
        }
    },
    ComAtprotoAdminRebaseRepo: {
        lexicon: 1,
        id: "com.atproto.admin.rebaseRepo",
        defs: {
            main: {
                type: "procedure",
                description: "Administrative action to rebase an account's repo",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous commit by cid."
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    },
                    {
                        name: "ConcurrentWrites"
                    }
                ]
            }
        }
    },
    ComAtprotoAdminResolveModerationReports: {
        lexicon: 1,
        id: "com.atproto.admin.resolveModerationReports",
        defs: {
            main: {
                type: "procedure",
                description: "Resolve moderation reports by an action.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actionId",
                            "reportIds",
                            "createdBy"
                        ],
                        properties: {
                            actionId: {
                                type: "integer"
                            },
                            reportIds: {
                                type: "array",
                                items: {
                                    type: "integer"
                                }
                            },
                            createdBy: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionView"
                    }
                }
            }
        }
    },
    ComAtprotoAdminReverseModerationAction: {
        lexicon: 1,
        id: "com.atproto.admin.reverseModerationAction",
        defs: {
            main: {
                type: "procedure",
                description: "Reverse a moderation action.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "id",
                            "reason",
                            "createdBy"
                        ],
                        properties: {
                            id: {
                                type: "integer"
                            },
                            reason: {
                                type: "string"
                            },
                            createdBy: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionView"
                    }
                }
            }
        }
    },
    ComAtprotoAdminSearchRepos: {
        lexicon: 1,
        id: "com.atproto.admin.searchRepos",
        defs: {
            main: {
                type: "query",
                description: "Find repositories based on a search term.",
                parameters: {
                    type: "params",
                    properties: {
                        term: {
                            type: "string"
                        },
                        invitedBy: {
                            type: "string"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repos"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            repos: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.admin.defs#repoView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminSendEmail: {
        lexicon: 1,
        id: "com.atproto.admin.sendEmail",
        defs: {
            main: {
                type: "procedure",
                description: "Send email to a user's primary email address",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "recipientDid",
                            "content"
                        ],
                        properties: {
                            recipientDid: {
                                type: "string",
                                format: "did"
                            },
                            content: {
                                type: "string"
                            },
                            subject: {
                                type: "string"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "sent"
                        ],
                        properties: {
                            sent: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminTakeModerationAction: {
        lexicon: 1,
        id: "com.atproto.admin.takeModerationAction",
        defs: {
            main: {
                type: "procedure",
                description: "Take a moderation action on a repo.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "action",
                            "subject",
                            "reason",
                            "createdBy"
                        ],
                        properties: {
                            action: {
                                type: "string",
                                knownValues: [
                                    "com.atproto.admin.defs#takedown",
                                    "com.atproto.admin.defs#flag",
                                    "com.atproto.admin.defs#acknowledge"
                                ]
                            },
                            subject: {
                                type: "union",
                                refs: [
                                    "lex:com.atproto.admin.defs#repoRef",
                                    "lex:com.atproto.repo.strongRef"
                                ]
                            },
                            subjectBlobCids: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "cid"
                                }
                            },
                            createLabelVals: {
                                type: "array",
                                items: {
                                    type: "string"
                                }
                            },
                            negateLabelVals: {
                                type: "array",
                                items: {
                                    type: "string"
                                }
                            },
                            reason: {
                                type: "string"
                            },
                            durationInHours: {
                                type: "integer",
                                description: "Indicates how long this action was meant to be in effect before automatically expiring."
                            },
                            createdBy: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionView"
                    }
                },
                errors: [
                    {
                        name: "SubjectHasAction"
                    }
                ]
            }
        }
    },
    ComAtprotoAdminUpdateAccountEmail: {
        lexicon: 1,
        id: "com.atproto.admin.updateAccountEmail",
        defs: {
            main: {
                type: "procedure",
                description: "Administrative action to update an account's email",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "account",
                            "email"
                        ],
                        properties: {
                            account: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            email: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountHandle: {
        lexicon: 1,
        id: "com.atproto.admin.updateAccountHandle",
        defs: {
            main: {
                type: "procedure",
                description: "Administrative action to update an account's handle",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "did",
                            "handle"
                        ],
                        properties: {
                            did: {
                                type: "string",
                                format: "did"
                            },
                            handle: {
                                type: "string",
                                format: "handle"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityResolveHandle: {
        lexicon: 1,
        id: "com.atproto.identity.resolveHandle",
        defs: {
            main: {
                type: "query",
                description: "Provides the DID of a repo.",
                parameters: {
                    type: "params",
                    required: [
                        "handle"
                    ],
                    properties: {
                        handle: {
                            type: "string",
                            format: "handle",
                            description: "The handle to resolve."
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "did"
                        ],
                        properties: {
                            did: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityUpdateHandle: {
        lexicon: 1,
        id: "com.atproto.identity.updateHandle",
        defs: {
            main: {
                type: "procedure",
                description: "Updates the handle of the account",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "handle"
                        ],
                        properties: {
                            handle: {
                                type: "string",
                                format: "handle"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelDefs: {
        lexicon: 1,
        id: "com.atproto.label.defs",
        defs: {
            label: {
                type: "object",
                description: "Metadata tag on an atproto resource (eg, repo or record)",
                required: [
                    "src",
                    "uri",
                    "val",
                    "cts"
                ],
                properties: {
                    src: {
                        type: "string",
                        format: "did",
                        description: "DID of the actor who created this label"
                    },
                    uri: {
                        type: "string",
                        format: "uri",
                        description: "AT URI of the record, repository (account), or other resource which this label applies to"
                    },
                    cid: {
                        type: "string",
                        format: "cid",
                        description: "optionally, CID specifying the specific version of 'uri' resource this label applies to"
                    },
                    val: {
                        type: "string",
                        maxLength: 128,
                        description: "the short string name of the value or type of this label"
                    },
                    neg: {
                        type: "boolean",
                        description: "if true, this is a negation label, overwriting a previous label"
                    },
                    cts: {
                        type: "string",
                        format: "datetime",
                        description: "timestamp when this label was created"
                    }
                }
            },
            selfLabels: {
                type: "object",
                description: "Metadata tags on an atproto record, published by the author within the record.",
                required: [
                    "values"
                ],
                properties: {
                    values: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#selfLabel"
                        },
                        maxLength: 10
                    }
                }
            },
            selfLabel: {
                type: "object",
                description: "Metadata tag on an atproto record, published by the author within the record. Note -- schemas should use #selfLabels, not #selfLabel.",
                required: [
                    "val"
                ],
                properties: {
                    val: {
                        type: "string",
                        maxLength: 128,
                        description: "the short string name of the value or type of this label"
                    }
                }
            }
        }
    },
    ComAtprotoLabelQueryLabels: {
        lexicon: 1,
        id: "com.atproto.label.queryLabels",
        defs: {
            main: {
                type: "query",
                description: "Find labels relevant to the provided URI patterns.",
                parameters: {
                    type: "params",
                    required: [
                        "uriPatterns"
                    ],
                    properties: {
                        uriPatterns: {
                            type: "array",
                            items: {
                                type: "string"
                            },
                            description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI"
                        },
                        sources: {
                            type: "array",
                            items: {
                                type: "string",
                                format: "did"
                            },
                            description: "Optional list of label sources (DIDs) to filter on"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 250,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "labels"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            labels: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.label.defs#label"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelSubscribeLabels: {
        lexicon: 1,
        id: "com.atproto.label.subscribeLabels",
        defs: {
            main: {
                type: "subscription",
                description: "Subscribe to label updates",
                parameters: {
                    type: "params",
                    properties: {
                        cursor: {
                            type: "integer",
                            description: "The last known event to backfill from."
                        }
                    }
                },
                message: {
                    schema: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.label.subscribeLabels#labels",
                            "lex:com.atproto.label.subscribeLabels#info"
                        ]
                    }
                },
                errors: [
                    {
                        name: "FutureCursor"
                    }
                ]
            },
            labels: {
                type: "object",
                required: [
                    "seq",
                    "labels"
                ],
                properties: {
                    seq: {
                        type: "integer"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            },
            info: {
                type: "object",
                required: [
                    "name"
                ],
                properties: {
                    name: {
                        type: "string",
                        knownValues: [
                            "OutdatedCursor"
                        ]
                    },
                    message: {
                        type: "string"
                    }
                }
            }
        }
    },
    ComAtprotoModerationCreateReport: {
        lexicon: 1,
        id: "com.atproto.moderation.createReport",
        defs: {
            main: {
                type: "procedure",
                description: "Report a repo or a record.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "reasonType",
                            "subject"
                        ],
                        properties: {
                            reasonType: {
                                type: "ref",
                                ref: "lex:com.atproto.moderation.defs#reasonType"
                            },
                            reason: {
                                type: "string"
                            },
                            subject: {
                                type: "union",
                                refs: [
                                    "lex:com.atproto.admin.defs#repoRef",
                                    "lex:com.atproto.repo.strongRef"
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "id",
                            "reasonType",
                            "subject",
                            "reportedBy",
                            "createdAt"
                        ],
                        properties: {
                            id: {
                                type: "integer"
                            },
                            reasonType: {
                                type: "ref",
                                ref: "lex:com.atproto.moderation.defs#reasonType"
                            },
                            reason: {
                                type: "string"
                            },
                            subject: {
                                type: "union",
                                refs: [
                                    "lex:com.atproto.admin.defs#repoRef",
                                    "lex:com.atproto.repo.strongRef"
                                ]
                            },
                            reportedBy: {
                                type: "string",
                                format: "did"
                            },
                            createdAt: {
                                type: "string",
                                format: "datetime"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoModerationDefs: {
        lexicon: 1,
        id: "com.atproto.moderation.defs",
        defs: {
            reasonType: {
                type: "string",
                knownValues: [
                    "com.atproto.moderation.defs#reasonSpam",
                    "com.atproto.moderation.defs#reasonViolation",
                    "com.atproto.moderation.defs#reasonMisleading",
                    "com.atproto.moderation.defs#reasonSexual",
                    "com.atproto.moderation.defs#reasonRude",
                    "com.atproto.moderation.defs#reasonOther"
                ]
            },
            reasonSpam: {
                type: "token",
                description: "Spam: frequent unwanted promotion, replies, mentions"
            },
            reasonViolation: {
                type: "token",
                description: "Direct violation of server rules, laws, terms of service"
            },
            reasonMisleading: {
                type: "token",
                description: "Misleading identity, affiliation, or content"
            },
            reasonSexual: {
                type: "token",
                description: "Unwanted or mislabeled sexual content"
            },
            reasonRude: {
                type: "token",
                description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
            },
            reasonOther: {
                type: "token",
                description: "Other: reports not falling under another report category"
            }
        }
    },
    ComAtprotoRepoApplyWrites: {
        lexicon: 1,
        id: "com.atproto.repo.applyWrites",
        defs: {
            main: {
                type: "procedure",
                description: "Apply a batch transaction of creates, updates, and deletes.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo",
                            "writes"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            validate: {
                                type: "boolean",
                                default: true,
                                description: "Validate the records?"
                            },
                            writes: {
                                type: "array",
                                items: {
                                    type: "union",
                                    refs: [
                                        "lex:com.atproto.repo.applyWrites#create",
                                        "lex:com.atproto.repo.applyWrites#update",
                                        "lex:com.atproto.repo.applyWrites#delete"
                                    ],
                                    closed: true
                                }
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    }
                ]
            },
            create: {
                type: "object",
                description: "Create a new record.",
                required: [
                    "collection",
                    "value"
                ],
                properties: {
                    collection: {
                        type: "string",
                        format: "nsid"
                    },
                    rkey: {
                        type: "string",
                        maxLength: 15
                    },
                    value: {
                        type: "unknown"
                    }
                }
            },
            update: {
                type: "object",
                description: "Update an existing record.",
                required: [
                    "collection",
                    "rkey",
                    "value"
                ],
                properties: {
                    collection: {
                        type: "string",
                        format: "nsid"
                    },
                    rkey: {
                        type: "string"
                    },
                    value: {
                        type: "unknown"
                    }
                }
            },
            delete: {
                type: "object",
                description: "Delete an existing record.",
                required: [
                    "collection",
                    "rkey"
                ],
                properties: {
                    collection: {
                        type: "string",
                        format: "nsid"
                    },
                    rkey: {
                        type: "string"
                    }
                }
            }
        }
    },
    ComAtprotoRepoCreateRecord: {
        lexicon: 1,
        id: "com.atproto.repo.createRecord",
        defs: {
            main: {
                type: "procedure",
                description: "Create a new record.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo",
                            "collection",
                            "record"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            collection: {
                                type: "string",
                                format: "nsid",
                                description: "The NSID of the record collection."
                            },
                            rkey: {
                                type: "string",
                                description: "The key of the record.",
                                maxLength: 15
                            },
                            validate: {
                                type: "boolean",
                                default: true,
                                description: "Validate the record?"
                            },
                            record: {
                                type: "unknown",
                                description: "The record to create."
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous commit by cid."
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "uri",
                            "cid"
                        ],
                        properties: {
                            uri: {
                                type: "string",
                                format: "at-uri"
                            },
                            cid: {
                                type: "string",
                                format: "cid"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDeleteRecord: {
        lexicon: 1,
        id: "com.atproto.repo.deleteRecord",
        defs: {
            main: {
                type: "procedure",
                description: "Delete a record, or ensure it doesn't exist.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo",
                            "collection",
                            "rkey"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            collection: {
                                type: "string",
                                format: "nsid",
                                description: "The NSID of the record collection."
                            },
                            rkey: {
                                type: "string",
                                description: "The key of the record."
                            },
                            swapRecord: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous record by cid."
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous commit by cid."
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDescribeRepo: {
        lexicon: 1,
        id: "com.atproto.repo.describeRepo",
        defs: {
            main: {
                type: "query",
                description: "Get information about the repo, including the list of collections.",
                parameters: {
                    type: "params",
                    required: [
                        "repo"
                    ],
                    properties: {
                        repo: {
                            type: "string",
                            format: "at-identifier",
                            description: "The handle or DID of the repo."
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "handle",
                            "did",
                            "didDoc",
                            "collections",
                            "handleIsCorrect"
                        ],
                        properties: {
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            },
                            didDoc: {
                                type: "unknown"
                            },
                            collections: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "nsid"
                                }
                            },
                            handleIsCorrect: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoRepoGetRecord: {
        lexicon: 1,
        id: "com.atproto.repo.getRecord",
        defs: {
            main: {
                type: "query",
                description: "Get a record.",
                parameters: {
                    type: "params",
                    required: [
                        "repo",
                        "collection",
                        "rkey"
                    ],
                    properties: {
                        repo: {
                            type: "string",
                            format: "at-identifier",
                            description: "The handle or DID of the repo."
                        },
                        collection: {
                            type: "string",
                            format: "nsid",
                            description: "The NSID of the record collection."
                        },
                        rkey: {
                            type: "string",
                            description: "The key of the record."
                        },
                        cid: {
                            type: "string",
                            format: "cid",
                            description: "The CID of the version of the record. If not specified, then return the most recent version."
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "uri",
                            "value"
                        ],
                        properties: {
                            uri: {
                                type: "string",
                                format: "at-uri"
                            },
                            cid: {
                                type: "string",
                                format: "cid"
                            },
                            value: {
                                type: "unknown"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoRepoListRecords: {
        lexicon: 1,
        id: "com.atproto.repo.listRecords",
        defs: {
            main: {
                type: "query",
                description: "List a range of records in a collection.",
                parameters: {
                    type: "params",
                    required: [
                        "repo",
                        "collection"
                    ],
                    properties: {
                        repo: {
                            type: "string",
                            format: "at-identifier",
                            description: "The handle or DID of the repo."
                        },
                        collection: {
                            type: "string",
                            format: "nsid",
                            description: "The NSID of the record type."
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50,
                            description: "The number of records to return."
                        },
                        cursor: {
                            type: "string"
                        },
                        rkeyStart: {
                            type: "string",
                            description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
                        },
                        rkeyEnd: {
                            type: "string",
                            description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
                        },
                        reverse: {
                            type: "boolean",
                            description: "Reverse the order of the returned records?"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "records"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            records: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.repo.listRecords#record"
                                }
                            }
                        }
                    }
                }
            },
            record: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "value"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    value: {
                        type: "unknown"
                    }
                }
            }
        }
    },
    ComAtprotoRepoPutRecord: {
        lexicon: 1,
        id: "com.atproto.repo.putRecord",
        defs: {
            main: {
                type: "procedure",
                description: "Write a record, creating or updating it as needed.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo",
                            "collection",
                            "rkey",
                            "record"
                        ],
                        nullable: [
                            "swapRecord"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            collection: {
                                type: "string",
                                format: "nsid",
                                description: "The NSID of the record collection."
                            },
                            rkey: {
                                type: "string",
                                description: "The key of the record.",
                                maxLength: 15
                            },
                            validate: {
                                type: "boolean",
                                default: true,
                                description: "Validate the record?"
                            },
                            record: {
                                type: "unknown",
                                description: "The record to write."
                            },
                            swapRecord: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous record by cid."
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous commit by cid."
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "uri",
                            "cid"
                        ],
                        properties: {
                            uri: {
                                type: "string",
                                format: "at-uri"
                            },
                            cid: {
                                type: "string",
                                format: "cid"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    }
                ]
            }
        }
    },
    ComAtprotoRepoRebaseRepo: {
        lexicon: 1,
        id: "com.atproto.repo.rebaseRepo",
        defs: {
            main: {
                type: "procedure",
                description: "Simple rebase of repo that deletes history",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repo"
                        ],
                        properties: {
                            repo: {
                                type: "string",
                                format: "at-identifier",
                                description: "The handle or DID of the repo."
                            },
                            swapCommit: {
                                type: "string",
                                format: "cid",
                                description: "Compare and swap with the previous commit by cid."
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidSwap"
                    },
                    {
                        name: "ConcurrentWrites"
                    }
                ]
            }
        }
    },
    ComAtprotoRepoStrongRef: {
        lexicon: 1,
        id: "com.atproto.repo.strongRef",
        description: "A URI with a content-hash fingerprint.",
        defs: {
            main: {
                type: "object",
                required: [
                    "uri",
                    "cid"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    }
                }
            }
        }
    },
    ComAtprotoRepoUploadBlob: {
        lexicon: 1,
        id: "com.atproto.repo.uploadBlob",
        defs: {
            main: {
                type: "procedure",
                description: "Upload a new blob to be added to repo in a later request.",
                input: {
                    encoding: "*/*"
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "blob"
                        ],
                        properties: {
                            blob: {
                                type: "blob"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateAccount: {
        lexicon: 1,
        id: "com.atproto.server.createAccount",
        defs: {
            main: {
                type: "procedure",
                description: "Create an account.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "handle",
                            "email",
                            "password"
                        ],
                        properties: {
                            email: {
                                type: "string"
                            },
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            },
                            inviteCode: {
                                type: "string"
                            },
                            password: {
                                type: "string"
                            },
                            recoveryKey: {
                                type: "string"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "accessJwt",
                            "refreshJwt",
                            "handle",
                            "did"
                        ],
                        properties: {
                            accessJwt: {
                                type: "string"
                            },
                            refreshJwt: {
                                type: "string"
                            },
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "InvalidHandle"
                    },
                    {
                        name: "InvalidPassword"
                    },
                    {
                        name: "InvalidInviteCode"
                    },
                    {
                        name: "HandleNotAvailable"
                    },
                    {
                        name: "UnsupportedDomain"
                    },
                    {
                        name: "UnresolvableDid"
                    },
                    {
                        name: "IncompatibleDidDoc"
                    }
                ]
            }
        }
    },
    ComAtprotoServerCreateAppPassword: {
        lexicon: 1,
        id: "com.atproto.server.createAppPassword",
        defs: {
            main: {
                type: "procedure",
                description: "Create an app-specific password.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "name"
                        ],
                        properties: {
                            name: {
                                type: "string"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:com.atproto.server.createAppPassword#appPassword"
                    }
                },
                errors: [
                    {
                        name: "AccountTakedown"
                    }
                ]
            },
            appPassword: {
                type: "object",
                required: [
                    "name",
                    "password",
                    "createdAt"
                ],
                properties: {
                    name: {
                        type: "string"
                    },
                    password: {
                        type: "string"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCode: {
        lexicon: 1,
        id: "com.atproto.server.createInviteCode",
        defs: {
            main: {
                type: "procedure",
                description: "Create an invite code.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "useCount"
                        ],
                        properties: {
                            useCount: {
                                type: "integer"
                            },
                            forAccount: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "code"
                        ],
                        properties: {
                            code: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCodes: {
        lexicon: 1,
        id: "com.atproto.server.createInviteCodes",
        defs: {
            main: {
                type: "procedure",
                description: "Create an invite code.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "codeCount",
                            "useCount"
                        ],
                        properties: {
                            codeCount: {
                                type: "integer",
                                default: 1
                            },
                            useCount: {
                                type: "integer"
                            },
                            forAccounts: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "did"
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "codes"
                        ],
                        properties: {
                            codes: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                                }
                            }
                        }
                    }
                }
            },
            accountCodes: {
                type: "object",
                required: [
                    "account",
                    "codes"
                ],
                properties: {
                    account: {
                        type: "string"
                    },
                    codes: {
                        type: "array",
                        items: {
                            type: "string"
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateSession: {
        lexicon: 1,
        id: "com.atproto.server.createSession",
        defs: {
            main: {
                type: "procedure",
                description: "Create an authentication session.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "identifier",
                            "password"
                        ],
                        properties: {
                            identifier: {
                                type: "string",
                                description: "Handle or other identifier supported by the server for the authenticating user."
                            },
                            password: {
                                type: "string"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "accessJwt",
                            "refreshJwt",
                            "handle",
                            "did"
                        ],
                        properties: {
                            accessJwt: {
                                type: "string"
                            },
                            refreshJwt: {
                                type: "string"
                            },
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            },
                            email: {
                                type: "string"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "AccountTakedown"
                    }
                ]
            }
        }
    },
    ComAtprotoServerDefs: {
        lexicon: 1,
        id: "com.atproto.server.defs",
        defs: {
            inviteCode: {
                type: "object",
                required: [
                    "code",
                    "available",
                    "disabled",
                    "forAccount",
                    "createdBy",
                    "createdAt",
                    "uses"
                ],
                properties: {
                    code: {
                        type: "string"
                    },
                    available: {
                        type: "integer"
                    },
                    disabled: {
                        type: "boolean"
                    },
                    forAccount: {
                        type: "string"
                    },
                    createdBy: {
                        type: "string"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    uses: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.server.defs#inviteCodeUse"
                        }
                    }
                }
            },
            inviteCodeUse: {
                type: "object",
                required: [
                    "usedBy",
                    "usedAt"
                ],
                properties: {
                    usedBy: {
                        type: "string",
                        format: "did"
                    },
                    usedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            }
        }
    },
    ComAtprotoServerDeleteAccount: {
        lexicon: 1,
        id: "com.atproto.server.deleteAccount",
        defs: {
            main: {
                type: "procedure",
                description: "Delete a user account with a token and password.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "did",
                            "password",
                            "token"
                        ],
                        properties: {
                            did: {
                                type: "string",
                                format: "did"
                            },
                            password: {
                                type: "string"
                            },
                            token: {
                                type: "string"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "ExpiredToken"
                    },
                    {
                        name: "InvalidToken"
                    }
                ]
            }
        }
    },
    ComAtprotoServerDeleteSession: {
        lexicon: 1,
        id: "com.atproto.server.deleteSession",
        defs: {
            main: {
                type: "procedure",
                description: "Delete the current session."
            }
        }
    },
    ComAtprotoServerDescribeServer: {
        lexicon: 1,
        id: "com.atproto.server.describeServer",
        defs: {
            main: {
                type: "query",
                description: "Get a document describing the service's accounts configuration.",
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "availableUserDomains"
                        ],
                        properties: {
                            inviteCodeRequired: {
                                type: "boolean"
                            },
                            availableUserDomains: {
                                type: "array",
                                items: {
                                    type: "string"
                                }
                            },
                            links: {
                                type: "ref",
                                ref: "lex:com.atproto.server.describeServer#links"
                            }
                        }
                    }
                }
            },
            links: {
                type: "object",
                properties: {
                    privacyPolicy: {
                        type: "string"
                    },
                    termsOfService: {
                        type: "string"
                    }
                }
            }
        }
    },
    ComAtprotoServerGetAccountInviteCodes: {
        lexicon: 1,
        id: "com.atproto.server.getAccountInviteCodes",
        defs: {
            main: {
                type: "query",
                description: "Get all invite codes for a given account",
                parameters: {
                    type: "params",
                    properties: {
                        includeUsed: {
                            type: "boolean",
                            default: true
                        },
                        createAvailable: {
                            type: "boolean",
                            default: true
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "codes"
                        ],
                        properties: {
                            codes: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.server.defs#inviteCode"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "DuplicateCreate"
                    }
                ]
            }
        }
    },
    ComAtprotoServerGetSession: {
        lexicon: 1,
        id: "com.atproto.server.getSession",
        defs: {
            main: {
                type: "query",
                description: "Get information about the current session.",
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "handle",
                            "did"
                        ],
                        properties: {
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            },
                            email: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerListAppPasswords: {
        lexicon: 1,
        id: "com.atproto.server.listAppPasswords",
        defs: {
            main: {
                type: "query",
                description: "List all app-specific passwords.",
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "passwords"
                        ],
                        properties: {
                            passwords: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "AccountTakedown"
                    }
                ]
            },
            appPassword: {
                type: "object",
                required: [
                    "name",
                    "createdAt"
                ],
                properties: {
                    name: {
                        type: "string"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            }
        }
    },
    ComAtprotoServerRefreshSession: {
        lexicon: 1,
        id: "com.atproto.server.refreshSession",
        defs: {
            main: {
                type: "procedure",
                description: "Refresh an authentication session.",
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "accessJwt",
                            "refreshJwt",
                            "handle",
                            "did"
                        ],
                        properties: {
                            accessJwt: {
                                type: "string"
                            },
                            refreshJwt: {
                                type: "string"
                            },
                            handle: {
                                type: "string",
                                format: "handle"
                            },
                            did: {
                                type: "string",
                                format: "did"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "AccountTakedown"
                    }
                ]
            }
        }
    },
    ComAtprotoServerRequestAccountDelete: {
        lexicon: 1,
        id: "com.atproto.server.requestAccountDelete",
        defs: {
            main: {
                type: "procedure",
                description: "Initiate a user account deletion via email."
            }
        }
    },
    ComAtprotoServerRequestPasswordReset: {
        lexicon: 1,
        id: "com.atproto.server.requestPasswordReset",
        defs: {
            main: {
                type: "procedure",
                description: "Initiate a user account password reset via email.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "email"
                        ],
                        properties: {
                            email: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerResetPassword: {
        lexicon: 1,
        id: "com.atproto.server.resetPassword",
        defs: {
            main: {
                type: "procedure",
                description: "Reset a user account password using a token.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "token",
                            "password"
                        ],
                        properties: {
                            token: {
                                type: "string"
                            },
                            password: {
                                type: "string"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "ExpiredToken"
                    },
                    {
                        name: "InvalidToken"
                    }
                ]
            }
        }
    },
    ComAtprotoServerRevokeAppPassword: {
        lexicon: 1,
        id: "com.atproto.server.revokeAppPassword",
        defs: {
            main: {
                type: "procedure",
                description: "Revoke an app-specific password by name.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "name"
                        ],
                        properties: {
                            name: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncGetBlob: {
        lexicon: 1,
        id: "com.atproto.sync.getBlob",
        defs: {
            main: {
                type: "query",
                description: "Get a blob associated with a given repo.",
                parameters: {
                    type: "params",
                    required: [
                        "did",
                        "cid"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        cid: {
                            type: "string",
                            format: "cid",
                            description: "The CID of the blob to fetch"
                        }
                    }
                },
                output: {
                    encoding: "*/*"
                }
            }
        }
    },
    ComAtprotoSyncGetBlocks: {
        lexicon: 1,
        id: "com.atproto.sync.getBlocks",
        defs: {
            main: {
                type: "query",
                description: "Gets blocks from a given repo.",
                parameters: {
                    type: "params",
                    required: [
                        "did",
                        "cids"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        cids: {
                            type: "array",
                            items: {
                                type: "string",
                                format: "cid"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/vnd.ipld.car"
                }
            }
        }
    },
    ComAtprotoSyncGetCheckout: {
        lexicon: 1,
        id: "com.atproto.sync.getCheckout",
        defs: {
            main: {
                type: "query",
                description: "Gets the repo state.",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        commit: {
                            type: "string",
                            format: "cid",
                            description: "The commit to get the checkout from. Defaults to current HEAD."
                        }
                    }
                },
                output: {
                    encoding: "application/vnd.ipld.car"
                }
            }
        }
    },
    ComAtprotoSyncGetCommitPath: {
        lexicon: 1,
        id: "com.atproto.sync.getCommitPath",
        defs: {
            main: {
                type: "query",
                description: "Gets the path of repo commits",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        latest: {
                            type: "string",
                            format: "cid",
                            description: "The most recent commit"
                        },
                        earliest: {
                            type: "string",
                            format: "cid",
                            description: "The earliest commit to start from"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "commits"
                        ],
                        properties: {
                            commits: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "cid"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncGetHead: {
        lexicon: 1,
        id: "com.atproto.sync.getHead",
        defs: {
            main: {
                type: "query",
                description: "Gets the current HEAD CID of a repo.",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "root"
                        ],
                        properties: {
                            root: {
                                type: "string",
                                format: "cid"
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "HeadNotFound"
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRecord: {
        lexicon: 1,
        id: "com.atproto.sync.getRecord",
        defs: {
            main: {
                type: "query",
                description: "Gets blocks needed for existence or non-existence of record.",
                parameters: {
                    type: "params",
                    required: [
                        "did",
                        "collection",
                        "rkey"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        collection: {
                            type: "string",
                            format: "nsid"
                        },
                        rkey: {
                            type: "string"
                        },
                        commit: {
                            type: "string",
                            format: "cid",
                            description: "An optional past commit CID."
                        }
                    }
                },
                output: {
                    encoding: "application/vnd.ipld.car"
                }
            }
        }
    },
    ComAtprotoSyncGetRepo: {
        lexicon: 1,
        id: "com.atproto.sync.getRepo",
        defs: {
            main: {
                type: "query",
                description: "Gets the repo state.",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        earliest: {
                            type: "string",
                            format: "cid",
                            description: "The earliest commit in the commit range (not inclusive)"
                        },
                        latest: {
                            type: "string",
                            format: "cid",
                            description: "The latest commit in the commit range (inclusive)"
                        }
                    }
                },
                output: {
                    encoding: "application/vnd.ipld.car"
                }
            }
        }
    },
    ComAtprotoSyncListBlobs: {
        lexicon: 1,
        id: "com.atproto.sync.listBlobs",
        defs: {
            main: {
                type: "query",
                description: "List blob cids for some range of commits",
                parameters: {
                    type: "params",
                    required: [
                        "did"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did",
                            description: "The DID of the repo."
                        },
                        latest: {
                            type: "string",
                            format: "cid",
                            description: "The most recent commit"
                        },
                        earliest: {
                            type: "string",
                            format: "cid",
                            description: "The earliest commit to start from"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "cids"
                        ],
                        properties: {
                            cids: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "cid"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncListRepos: {
        lexicon: 1,
        id: "com.atproto.sync.listRepos",
        defs: {
            main: {
                type: "query",
                description: "List dids and root cids of hosted repos",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 1e3,
                            default: 500
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "repos"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            repos: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.sync.listRepos#repo"
                                }
                            }
                        }
                    }
                }
            },
            repo: {
                type: "object",
                required: [
                    "did",
                    "head"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    head: {
                        type: "string",
                        format: "cid"
                    }
                }
            }
        }
    },
    ComAtprotoSyncNotifyOfUpdate: {
        lexicon: 1,
        id: "com.atproto.sync.notifyOfUpdate",
        defs: {
            main: {
                type: "procedure",
                description: "Notify a crawling service of a recent update. Often when a long break between updates causes the connection with the crawling service to break.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "hostname"
                        ],
                        properties: {
                            hostname: {
                                type: "string",
                                description: "Hostname of the service that is notifying of update."
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncRequestCrawl: {
        lexicon: 1,
        id: "com.atproto.sync.requestCrawl",
        defs: {
            main: {
                type: "procedure",
                description: "Request a service to persistently crawl hosted repos.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "hostname"
                        ],
                        properties: {
                            hostname: {
                                type: "string",
                                description: "Hostname of the service that is requesting to be crawled."
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncSubscribeRepos: {
        lexicon: 1,
        id: "com.atproto.sync.subscribeRepos",
        defs: {
            main: {
                type: "subscription",
                description: "Subscribe to repo updates",
                parameters: {
                    type: "params",
                    properties: {
                        cursor: {
                            type: "integer",
                            description: "The last known event to backfill from."
                        }
                    }
                },
                message: {
                    schema: {
                        type: "union",
                        refs: [
                            "lex:com.atproto.sync.subscribeRepos#commit",
                            "lex:com.atproto.sync.subscribeRepos#handle",
                            "lex:com.atproto.sync.subscribeRepos#migrate",
                            "lex:com.atproto.sync.subscribeRepos#tombstone",
                            "lex:com.atproto.sync.subscribeRepos#info"
                        ]
                    }
                },
                errors: [
                    {
                        name: "FutureCursor"
                    },
                    {
                        name: "ConsumerTooSlow"
                    }
                ]
            },
            commit: {
                type: "object",
                required: [
                    "seq",
                    "rebase",
                    "tooBig",
                    "repo",
                    "commit",
                    "prev",
                    "blocks",
                    "ops",
                    "blobs",
                    "time"
                ],
                nullable: [
                    "prev"
                ],
                properties: {
                    seq: {
                        type: "integer"
                    },
                    rebase: {
                        type: "boolean"
                    },
                    tooBig: {
                        type: "boolean"
                    },
                    repo: {
                        type: "string",
                        format: "did"
                    },
                    commit: {
                        type: "cid-link"
                    },
                    prev: {
                        type: "cid-link"
                    },
                    blocks: {
                        type: "bytes",
                        description: "CAR file containing relevant blocks",
                        maxLength: 1e6
                    },
                    ops: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.sync.subscribeRepos#repoOp"
                        },
                        maxLength: 200
                    },
                    blobs: {
                        type: "array",
                        items: {
                            type: "cid-link"
                        }
                    },
                    time: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            handle: {
                type: "object",
                required: [
                    "seq",
                    "did",
                    "handle",
                    "time"
                ],
                properties: {
                    seq: {
                        type: "integer"
                    },
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    time: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            migrate: {
                type: "object",
                required: [
                    "seq",
                    "did",
                    "migrateTo",
                    "time"
                ],
                nullable: [
                    "migrateTo"
                ],
                properties: {
                    seq: {
                        type: "integer"
                    },
                    did: {
                        type: "string",
                        format: "did"
                    },
                    migrateTo: {
                        type: "string"
                    },
                    time: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            tombstone: {
                type: "object",
                required: [
                    "seq",
                    "did",
                    "time"
                ],
                properties: {
                    seq: {
                        type: "integer"
                    },
                    did: {
                        type: "string",
                        format: "did"
                    },
                    time: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            info: {
                type: "object",
                required: [
                    "name"
                ],
                properties: {
                    name: {
                        type: "string",
                        knownValues: [
                            "OutdatedCursor"
                        ]
                    },
                    message: {
                        type: "string"
                    }
                }
            },
            repoOp: {
                type: "object",
                description: "A repo operation, ie a write of a single record. For creates and updates, cid is the record's CID as of this operation. For deletes, it's null.",
                required: [
                    "action",
                    "path",
                    "cid"
                ],
                nullable: [
                    "cid"
                ],
                properties: {
                    action: {
                        type: "string",
                        knownValues: [
                            "create",
                            "update",
                            "delete"
                        ]
                    },
                    path: {
                        type: "string"
                    },
                    cid: {
                        type: "cid-link"
                    }
                }
            }
        }
    },
    AppBskyActorDefs: {
        lexicon: 1,
        id: "app.bsky.actor.defs",
        description: "A reference to an actor in the network.",
        defs: {
            profileViewBasic: {
                type: "object",
                required: [
                    "did",
                    "handle"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    displayName: {
                        type: "string",
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    avatar: {
                        type: "string"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#viewerState"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            },
            profileView: {
                type: "object",
                required: [
                    "did",
                    "handle"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    displayName: {
                        type: "string",
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: "string",
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: "string"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#viewerState"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            },
            profileViewDetailed: {
                type: "object",
                required: [
                    "did",
                    "handle"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    handle: {
                        type: "string",
                        format: "handle"
                    },
                    displayName: {
                        type: "string",
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: "string",
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: "string"
                    },
                    banner: {
                        type: "string"
                    },
                    followersCount: {
                        type: "integer"
                    },
                    followsCount: {
                        type: "integer"
                    },
                    postsCount: {
                        type: "integer"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#viewerState"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            },
            viewerState: {
                type: "object",
                properties: {
                    muted: {
                        type: "boolean"
                    },
                    mutedByList: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listViewBasic"
                    },
                    blockedBy: {
                        type: "boolean"
                    },
                    blocking: {
                        type: "string",
                        format: "at-uri"
                    },
                    following: {
                        type: "string",
                        format: "at-uri"
                    },
                    followedBy: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            },
            preferences: {
                type: "array",
                items: {
                    type: "union",
                    refs: [
                        "lex:app.bsky.actor.defs#adultContentPref",
                        "lex:app.bsky.actor.defs#contentLabelPref",
                        "lex:app.bsky.actor.defs#savedFeedsPref"
                    ]
                }
            },
            adultContentPref: {
                type: "object",
                required: [
                    "enabled"
                ],
                properties: {
                    enabled: {
                        type: "boolean",
                        default: false
                    }
                }
            },
            contentLabelPref: {
                type: "object",
                required: [
                    "label",
                    "visibility"
                ],
                properties: {
                    label: {
                        type: "string"
                    },
                    visibility: {
                        type: "string",
                        knownValues: [
                            "show",
                            "warn",
                            "hide"
                        ]
                    }
                }
            },
            savedFeedsPref: {
                type: "object",
                required: [
                    "pinned",
                    "saved"
                ],
                properties: {
                    pinned: {
                        type: "array",
                        items: {
                            type: "string",
                            format: "at-uri"
                        }
                    },
                    saved: {
                        type: "array",
                        items: {
                            type: "string",
                            format: "at-uri"
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetPreferences: {
        lexicon: 1,
        id: "app.bsky.actor.getPreferences",
        defs: {
            main: {
                type: "query",
                description: "Get private preferences attached to the account.",
                parameters: {
                    type: "params",
                    properties: {}
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "preferences"
                        ],
                        properties: {
                            preferences: {
                                type: "ref",
                                ref: "lex:app.bsky.actor.defs#preferences"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetProfile: {
        lexicon: 1,
        id: "app.bsky.actor.getProfile",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                    }
                }
            }
        }
    },
    AppBskyActorGetProfiles: {
        lexicon: 1,
        id: "app.bsky.actor.getProfiles",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    required: [
                        "actors"
                    ],
                    properties: {
                        actors: {
                            type: "array",
                            items: {
                                type: "string",
                                format: "at-identifier"
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "profiles"
                        ],
                        properties: {
                            profiles: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetSuggestions: {
        lexicon: 1,
        id: "app.bsky.actor.getSuggestions",
        defs: {
            main: {
                type: "query",
                description: "Get a list of actors suggested for following. Used in discovery UIs.",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actors"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            actors: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorProfile: {
        lexicon: 1,
        id: "app.bsky.actor.profile",
        defs: {
            main: {
                type: "record",
                key: "literal:self",
                record: {
                    type: "object",
                    properties: {
                        displayName: {
                            type: "string",
                            maxGraphemes: 64,
                            maxLength: 640
                        },
                        description: {
                            type: "string",
                            maxGraphemes: 256,
                            maxLength: 2560
                        },
                        avatar: {
                            type: "blob",
                            accept: [
                                "image/png",
                                "image/jpeg"
                            ],
                            maxSize: 1e6
                        },
                        banner: {
                            type: "blob",
                            accept: [
                                "image/png",
                                "image/jpeg"
                            ],
                            maxSize: 1e6
                        },
                        labels: {
                            type: "union",
                            refs: [
                                "lex:com.atproto.label.defs#selfLabels"
                            ]
                        }
                    }
                }
            }
        }
    },
    AppBskyActorPutPreferences: {
        lexicon: 1,
        id: "app.bsky.actor.putPreferences",
        defs: {
            main: {
                type: "procedure",
                description: "Sets the private preferences attached to the account.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "preferences"
                        ],
                        properties: {
                            preferences: {
                                type: "ref",
                                ref: "lex:app.bsky.actor.defs#preferences"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActors: {
        lexicon: 1,
        id: "app.bsky.actor.searchActors",
        defs: {
            main: {
                type: "query",
                description: "Find actors matching search criteria.",
                parameters: {
                    type: "params",
                    properties: {
                        term: {
                            type: "string"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actors"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            actors: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActorsTypeahead: {
        lexicon: 1,
        id: "app.bsky.actor.searchActorsTypeahead",
        defs: {
            main: {
                type: "query",
                description: "Find actor suggestions for a search term.",
                parameters: {
                    type: "params",
                    properties: {
                        term: {
                            type: "string"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actors"
                        ],
                        properties: {
                            actors: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileViewBasic"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyEmbedExternal: {
        lexicon: 1,
        id: "app.bsky.embed.external",
        description: "A representation of some externally linked content, embedded in another form of content",
        defs: {
            main: {
                type: "object",
                required: [
                    "external"
                ],
                properties: {
                    external: {
                        type: "ref",
                        ref: "lex:app.bsky.embed.external#external"
                    }
                }
            },
            external: {
                type: "object",
                required: [
                    "uri",
                    "title",
                    "description"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "uri"
                    },
                    title: {
                        type: "string"
                    },
                    description: {
                        type: "string"
                    },
                    thumb: {
                        type: "blob",
                        accept: [
                            "image/*"
                        ],
                        maxSize: 1e6
                    }
                }
            },
            view: {
                type: "object",
                required: [
                    "external"
                ],
                properties: {
                    external: {
                        type: "ref",
                        ref: "lex:app.bsky.embed.external#viewExternal"
                    }
                }
            },
            viewExternal: {
                type: "object",
                required: [
                    "uri",
                    "title",
                    "description"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "uri"
                    },
                    title: {
                        type: "string"
                    },
                    description: {
                        type: "string"
                    },
                    thumb: {
                        type: "string"
                    }
                }
            }
        }
    },
    AppBskyEmbedImages: {
        lexicon: 1,
        id: "app.bsky.embed.images",
        description: "A set of images embedded in some other form of content",
        defs: {
            main: {
                type: "object",
                required: [
                    "images"
                ],
                properties: {
                    images: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:app.bsky.embed.images#image"
                        },
                        maxLength: 4
                    }
                }
            },
            image: {
                type: "object",
                required: [
                    "image",
                    "alt"
                ],
                properties: {
                    image: {
                        type: "blob",
                        accept: [
                            "image/*"
                        ],
                        maxSize: 1e6
                    },
                    alt: {
                        type: "string"
                    }
                }
            },
            view: {
                type: "object",
                required: [
                    "images"
                ],
                properties: {
                    images: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:app.bsky.embed.images#viewImage"
                        },
                        maxLength: 4
                    }
                }
            },
            viewImage: {
                type: "object",
                required: [
                    "thumb",
                    "fullsize",
                    "alt"
                ],
                properties: {
                    thumb: {
                        type: "string"
                    },
                    fullsize: {
                        type: "string"
                    },
                    alt: {
                        type: "string"
                    }
                }
            }
        }
    },
    AppBskyEmbedRecord: {
        lexicon: 1,
        id: "app.bsky.embed.record",
        description: "A representation of a record embedded in another form of content",
        defs: {
            main: {
                type: "object",
                required: [
                    "record"
                ],
                properties: {
                    record: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.strongRef"
                    }
                }
            },
            view: {
                type: "object",
                required: [
                    "record"
                ],
                properties: {
                    record: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.embed.record#viewRecord",
                            "lex:app.bsky.embed.record#viewNotFound",
                            "lex:app.bsky.embed.record#viewBlocked",
                            "lex:app.bsky.feed.defs#generatorView",
                            "lex:app.bsky.graph.defs#listView"
                        ]
                    }
                }
            },
            viewRecord: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "author",
                    "value",
                    "indexedAt"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    author: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                    },
                    value: {
                        type: "unknown"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    },
                    embeds: {
                        type: "array",
                        items: {
                            type: "union",
                            refs: [
                                "lex:app.bsky.embed.images#view",
                                "lex:app.bsky.embed.external#view",
                                "lex:app.bsky.embed.record#view",
                                "lex:app.bsky.embed.recordWithMedia#view"
                            ]
                        }
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            viewNotFound: {
                type: "object",
                required: [
                    "uri",
                    "notFound"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    notFound: {
                        type: "boolean",
                        const: true
                    }
                }
            },
            viewBlocked: {
                type: "object",
                required: [
                    "uri",
                    "blocked",
                    "author"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    blocked: {
                        type: "boolean",
                        const: true
                    },
                    author: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#blockedAuthor"
                    }
                }
            }
        }
    },
    AppBskyEmbedRecordWithMedia: {
        lexicon: 1,
        id: "app.bsky.embed.recordWithMedia",
        description: "A representation of a record embedded in another form of content, alongside other compatible embeds",
        defs: {
            main: {
                type: "object",
                required: [
                    "record",
                    "media"
                ],
                properties: {
                    record: {
                        type: "ref",
                        ref: "lex:app.bsky.embed.record"
                    },
                    media: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.embed.images",
                            "lex:app.bsky.embed.external"
                        ]
                    }
                }
            },
            view: {
                type: "object",
                required: [
                    "record",
                    "media"
                ],
                properties: {
                    record: {
                        type: "ref",
                        ref: "lex:app.bsky.embed.record#view"
                    },
                    media: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.embed.images#view",
                            "lex:app.bsky.embed.external#view"
                        ]
                    }
                }
            }
        }
    },
    AppBskyFeedDefs: {
        lexicon: 1,
        id: "app.bsky.feed.defs",
        defs: {
            postView: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "author",
                    "record",
                    "indexedAt"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    author: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                    },
                    record: {
                        type: "unknown"
                    },
                    embed: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.embed.images#view",
                            "lex:app.bsky.embed.external#view",
                            "lex:app.bsky.embed.record#view",
                            "lex:app.bsky.embed.recordWithMedia#view"
                        ]
                    },
                    replyCount: {
                        type: "integer"
                    },
                    repostCount: {
                        type: "integer"
                    },
                    likeCount: {
                        type: "integer"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#viewerState"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            },
            viewerState: {
                type: "object",
                properties: {
                    repost: {
                        type: "string",
                        format: "at-uri"
                    },
                    like: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            },
            feedViewPost: {
                type: "object",
                required: [
                    "post"
                ],
                properties: {
                    post: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                    },
                    reply: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#replyRef"
                    },
                    reason: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.feed.defs#reasonRepost"
                        ]
                    }
                }
            },
            replyRef: {
                type: "object",
                required: [
                    "root",
                    "parent"
                ],
                properties: {
                    root: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.feed.defs#postView",
                            "lex:app.bsky.feed.defs#notFoundPost",
                            "lex:app.bsky.feed.defs#blockedPost"
                        ]
                    },
                    parent: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.feed.defs#postView",
                            "lex:app.bsky.feed.defs#notFoundPost",
                            "lex:app.bsky.feed.defs#blockedPost"
                        ]
                    }
                }
            },
            reasonRepost: {
                type: "object",
                required: [
                    "by",
                    "indexedAt"
                ],
                properties: {
                    by: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            threadViewPost: {
                type: "object",
                required: [
                    "post"
                ],
                properties: {
                    post: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                    },
                    parent: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.feed.defs#threadViewPost",
                            "lex:app.bsky.feed.defs#notFoundPost",
                            "lex:app.bsky.feed.defs#blockedPost"
                        ]
                    },
                    replies: {
                        type: "array",
                        items: {
                            type: "union",
                            refs: [
                                "lex:app.bsky.feed.defs#threadViewPost",
                                "lex:app.bsky.feed.defs#notFoundPost",
                                "lex:app.bsky.feed.defs#blockedPost"
                            ]
                        }
                    }
                }
            },
            notFoundPost: {
                type: "object",
                required: [
                    "uri",
                    "notFound"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    notFound: {
                        type: "boolean",
                        const: true
                    }
                }
            },
            blockedPost: {
                type: "object",
                required: [
                    "uri",
                    "blocked",
                    "author"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    blocked: {
                        type: "boolean",
                        const: true
                    },
                    author: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#blockedAuthor"
                    }
                }
            },
            blockedAuthor: {
                type: "object",
                required: [
                    "did"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#viewerState"
                    }
                }
            },
            generatorView: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "did",
                    "creator",
                    "displayName",
                    "indexedAt"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    did: {
                        type: "string",
                        format: "did"
                    },
                    creator: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    displayName: {
                        type: "string"
                    },
                    description: {
                        type: "string",
                        maxGraphemes: 300,
                        maxLength: 3e3
                    },
                    descriptionFacets: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:app.bsky.richtext.facet"
                        }
                    },
                    avatar: {
                        type: "string"
                    },
                    likeCount: {
                        type: "integer",
                        minimum: 0
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorViewerState"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            generatorViewerState: {
                type: "object",
                properties: {
                    like: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            },
            skeletonFeedPost: {
                type: "object",
                required: [
                    "post"
                ],
                properties: {
                    post: {
                        type: "string",
                        format: "at-uri"
                    },
                    reason: {
                        type: "union",
                        refs: [
                            "lex:app.bsky.feed.defs#skeletonReasonRepost"
                        ]
                    }
                }
            },
            skeletonReasonRepost: {
                type: "object",
                required: [
                    "repost"
                ],
                properties: {
                    repost: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            }
        }
    },
    AppBskyFeedDescribeFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.describeFeedGenerator",
        defs: {
            main: {
                type: "query",
                description: "Returns information about a given feed generator including TOS & offered feed URIs",
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "did",
                            "feeds"
                        ],
                        properties: {
                            did: {
                                type: "string",
                                format: "did"
                            },
                            feeds: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                                }
                            },
                            links: {
                                type: "ref",
                                ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                            }
                        }
                    }
                }
            },
            feed: {
                type: "object",
                required: [
                    "uri"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    }
                }
            },
            links: {
                type: "object",
                properties: {
                    privacyPolicy: {
                        type: "string"
                    },
                    termsOfService: {
                        type: "string"
                    }
                }
            }
        }
    },
    AppBskyFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.generator",
        defs: {
            main: {
                type: "record",
                description: "A declaration of the existence of a feed generator",
                key: "any",
                record: {
                    type: "object",
                    required: [
                        "did",
                        "displayName",
                        "createdAt"
                    ],
                    properties: {
                        did: {
                            type: "string",
                            format: "did"
                        },
                        displayName: {
                            type: "string",
                            maxGraphemes: 24,
                            maxLength: 240
                        },
                        description: {
                            type: "string",
                            maxGraphemes: 300,
                            maxLength: 3e3
                        },
                        descriptionFacets: {
                            type: "array",
                            items: {
                                type: "ref",
                                ref: "lex:app.bsky.richtext.facet"
                            }
                        },
                        avatar: {
                            type: "blob",
                            accept: [
                                "image/png",
                                "image/jpeg"
                            ],
                            maxSize: 1e6
                        },
                        labels: {
                            type: "union",
                            refs: [
                                "lex:com.atproto.label.defs#selfLabels"
                            ]
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorFeeds: {
        lexicon: 1,
        id: "app.bsky.feed.getActorFeeds",
        defs: {
            main: {
                type: "query",
                description: "Retrieve a list of feeds created by a given actor",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feeds"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feeds: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#generatorView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorLikes: {
        lexicon: 1,
        id: "app.bsky.feed.getActorLikes",
        defs: {
            main: {
                type: "query",
                description: "A view of the posts liked by an actor.",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "BlockedActor"
                    },
                    {
                        name: "BlockedByActor"
                    }
                ]
            }
        }
    },
    AppBskyFeedGetAuthorFeed: {
        lexicon: 1,
        id: "app.bsky.feed.getAuthorFeed",
        defs: {
            main: {
                type: "query",
                description: "A view of an actor's feed.",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        },
                        filter: {
                            type: "string",
                            knownValues: [
                                "posts_with_replies",
                                "posts_no_replies",
                                "posts_with_media"
                            ],
                            default: "posts_with_replies"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "BlockedActor"
                    },
                    {
                        name: "BlockedByActor"
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeed: {
        lexicon: 1,
        id: "app.bsky.feed.getFeed",
        defs: {
            main: {
                type: "query",
                description: "Compose and hydrate a feed from a user's selected feed generator",
                parameters: {
                    type: "params",
                    required: [
                        "feed"
                    ],
                    properties: {
                        feed: {
                            type: "string",
                            format: "at-uri"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "UnknownFeed"
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedGenerator",
        defs: {
            main: {
                type: "query",
                description: "Get information about a specific feed offered by a feed generator, such as its online status",
                parameters: {
                    type: "params",
                    required: [
                        "feed"
                    ],
                    properties: {
                        feed: {
                            type: "string",
                            format: "at-uri"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "view",
                            "isOnline",
                            "isValid"
                        ],
                        properties: {
                            view: {
                                type: "ref",
                                ref: "lex:app.bsky.feed.defs#generatorView"
                            },
                            isOnline: {
                                type: "boolean"
                            },
                            isValid: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedGenerators: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedGenerators",
        defs: {
            main: {
                type: "query",
                description: "Get information about a list of feed generators",
                parameters: {
                    type: "params",
                    required: [
                        "feeds"
                    ],
                    properties: {
                        feeds: {
                            type: "array",
                            items: {
                                type: "string",
                                format: "at-uri"
                            }
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feeds"
                        ],
                        properties: {
                            feeds: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#generatorView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedSkeleton: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedSkeleton",
        defs: {
            main: {
                type: "query",
                description: "A skeleton of a feed provided by a feed generator",
                parameters: {
                    type: "params",
                    required: [
                        "feed"
                    ],
                    properties: {
                        feed: {
                            type: "string",
                            format: "at-uri"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "UnknownFeed"
                    }
                ]
            }
        }
    },
    AppBskyFeedGetLikes: {
        lexicon: 1,
        id: "app.bsky.feed.getLikes",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    required: [
                        "uri"
                    ],
                    properties: {
                        uri: {
                            type: "string",
                            format: "at-uri"
                        },
                        cid: {
                            type: "string",
                            format: "cid"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "uri",
                            "likes"
                        ],
                        properties: {
                            uri: {
                                type: "string",
                                format: "at-uri"
                            },
                            cid: {
                                type: "string",
                                format: "cid"
                            },
                            cursor: {
                                type: "string"
                            },
                            likes: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.getLikes#like"
                                }
                            }
                        }
                    }
                }
            },
            like: {
                type: "object",
                required: [
                    "indexedAt",
                    "createdAt",
                    "actor"
                ],
                properties: {
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    createdAt: {
                        type: "string",
                        format: "datetime"
                    },
                    actor: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                    }
                }
            }
        }
    },
    AppBskyFeedGetPostThread: {
        lexicon: 1,
        id: "app.bsky.feed.getPostThread",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    required: [
                        "uri"
                    ],
                    properties: {
                        uri: {
                            type: "string",
                            format: "at-uri"
                        },
                        depth: {
                            type: "integer",
                            default: 6,
                            minimum: 0,
                            maximum: 1e3
                        },
                        parentHeight: {
                            type: "integer",
                            default: 80,
                            minimum: 0,
                            maximum: 1e3
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "thread"
                        ],
                        properties: {
                            thread: {
                                type: "union",
                                refs: [
                                    "lex:app.bsky.feed.defs#threadViewPost",
                                    "lex:app.bsky.feed.defs#notFoundPost",
                                    "lex:app.bsky.feed.defs#blockedPost"
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "NotFound"
                    }
                ]
            }
        }
    },
    AppBskyFeedGetPosts: {
        lexicon: 1,
        id: "app.bsky.feed.getPosts",
        defs: {
            main: {
                type: "query",
                description: "A view of an actor's feed.",
                parameters: {
                    type: "params",
                    required: [
                        "uris"
                    ],
                    properties: {
                        uris: {
                            type: "array",
                            items: {
                                type: "string",
                                format: "at-uri"
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "posts"
                        ],
                        properties: {
                            posts: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#postView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetRepostedBy: {
        lexicon: 1,
        id: "app.bsky.feed.getRepostedBy",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    required: [
                        "uri"
                    ],
                    properties: {
                        uri: {
                            type: "string",
                            format: "at-uri"
                        },
                        cid: {
                            type: "string",
                            format: "cid"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "uri",
                            "repostedBy"
                        ],
                        properties: {
                            uri: {
                                type: "string",
                                format: "at-uri"
                            },
                            cid: {
                                type: "string",
                                format: "cid"
                            },
                            cursor: {
                                type: "string"
                            },
                            repostedBy: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetTimeline: {
        lexicon: 1,
        id: "app.bsky.feed.getTimeline",
        defs: {
            main: {
                type: "query",
                description: "A view of the user's home timeline.",
                parameters: {
                    type: "params",
                    properties: {
                        algorithm: {
                            type: "string"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedLike: {
        lexicon: 1,
        id: "app.bsky.feed.like",
        defs: {
            main: {
                type: "record",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "subject",
                        "createdAt"
                    ],
                    properties: {
                        subject: {
                            type: "ref",
                            ref: "lex:com.atproto.repo.strongRef"
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedPost: {
        lexicon: 1,
        id: "app.bsky.feed.post",
        defs: {
            main: {
                type: "record",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "text",
                        "createdAt"
                    ],
                    properties: {
                        text: {
                            type: "string",
                            maxLength: 3e3,
                            maxGraphemes: 300
                        },
                        entities: {
                            type: "array",
                            description: "Deprecated: replaced by app.bsky.richtext.facet.",
                            items: {
                                type: "ref",
                                ref: "lex:app.bsky.feed.post#entity"
                            }
                        },
                        facets: {
                            type: "array",
                            items: {
                                type: "ref",
                                ref: "lex:app.bsky.richtext.facet"
                            }
                        },
                        reply: {
                            type: "ref",
                            ref: "lex:app.bsky.feed.post#replyRef"
                        },
                        embed: {
                            type: "union",
                            refs: [
                                "lex:app.bsky.embed.images",
                                "lex:app.bsky.embed.external",
                                "lex:app.bsky.embed.record",
                                "lex:app.bsky.embed.recordWithMedia"
                            ]
                        },
                        langs: {
                            type: "array",
                            maxLength: 3,
                            items: {
                                type: "string",
                                format: "language"
                            }
                        },
                        labels: {
                            type: "union",
                            refs: [
                                "lex:com.atproto.label.defs#selfLabels"
                            ]
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            },
            replyRef: {
                type: "object",
                required: [
                    "root",
                    "parent"
                ],
                properties: {
                    root: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.strongRef"
                    },
                    parent: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.strongRef"
                    }
                }
            },
            entity: {
                type: "object",
                description: "Deprecated: use facets instead.",
                required: [
                    "index",
                    "type",
                    "value"
                ],
                properties: {
                    index: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.post#textSlice"
                    },
                    type: {
                        type: "string",
                        description: "Expected values are 'mention' and 'link'."
                    },
                    value: {
                        type: "string"
                    }
                }
            },
            textSlice: {
                type: "object",
                description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
                required: [
                    "start",
                    "end"
                ],
                properties: {
                    start: {
                        type: "integer",
                        minimum: 0
                    },
                    end: {
                        type: "integer",
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyFeedRepost: {
        lexicon: 1,
        id: "app.bsky.feed.repost",
        defs: {
            main: {
                type: "record",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "subject",
                        "createdAt"
                    ],
                    properties: {
                        subject: {
                            type: "ref",
                            ref: "lex:com.atproto.repo.strongRef"
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphBlock: {
        lexicon: 1,
        id: "app.bsky.graph.block",
        defs: {
            main: {
                type: "record",
                description: "A block.",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "subject",
                        "createdAt"
                    ],
                    properties: {
                        subject: {
                            type: "string",
                            format: "did"
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphDefs: {
        lexicon: 1,
        id: "app.bsky.graph.defs",
        defs: {
            listViewBasic: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "name",
                    "purpose"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    name: {
                        type: "string",
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listPurpose"
                    },
                    avatar: {
                        type: "string"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listViewerState"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            listView: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "creator",
                    "name",
                    "purpose",
                    "indexedAt"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    creator: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    name: {
                        type: "string",
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listPurpose"
                    },
                    description: {
                        type: "string",
                        maxGraphemes: 300,
                        maxLength: 3e3
                    },
                    descriptionFacets: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:app.bsky.richtext.facet"
                        }
                    },
                    avatar: {
                        type: "string"
                    },
                    viewer: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listViewerState"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    }
                }
            },
            listItemView: {
                type: "object",
                required: [
                    "subject"
                ],
                properties: {
                    subject: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                    }
                }
            },
            listPurpose: {
                type: "string",
                knownValues: [
                    "app.bsky.graph.defs#modlist"
                ]
            },
            modlist: {
                type: "token",
                description: "A list of actors to apply an aggregate moderation action (mute/block) on"
            },
            listViewerState: {
                type: "object",
                properties: {
                    muted: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    AppBskyGraphFollow: {
        lexicon: 1,
        id: "app.bsky.graph.follow",
        defs: {
            main: {
                type: "record",
                description: "A social follow.",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "subject",
                        "createdAt"
                    ],
                    properties: {
                        subject: {
                            type: "string",
                            format: "did"
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetBlocks: {
        lexicon: 1,
        id: "app.bsky.graph.getBlocks",
        defs: {
            main: {
                type: "query",
                description: "Who is the requester's account blocking?",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "blocks"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            blocks: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollowers: {
        lexicon: 1,
        id: "app.bsky.graph.getFollowers",
        defs: {
            main: {
                type: "query",
                description: "Who is following an actor?",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "subject",
                            "followers"
                        ],
                        properties: {
                            subject: {
                                type: "ref",
                                ref: "lex:app.bsky.actor.defs#profileView"
                            },
                            cursor: {
                                type: "string"
                            },
                            followers: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollows: {
        lexicon: 1,
        id: "app.bsky.graph.getFollows",
        defs: {
            main: {
                type: "query",
                description: "Who is an actor following?",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "subject",
                            "follows"
                        ],
                        properties: {
                            subject: {
                                type: "ref",
                                ref: "lex:app.bsky.actor.defs#profileView"
                            },
                            cursor: {
                                type: "string"
                            },
                            follows: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetList: {
        lexicon: 1,
        id: "app.bsky.graph.getList",
        defs: {
            main: {
                type: "query",
                description: "Fetch a list of actors",
                parameters: {
                    type: "params",
                    required: [
                        "list"
                    ],
                    properties: {
                        list: {
                            type: "string",
                            format: "at-uri"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "list",
                            "items"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            list: {
                                type: "ref",
                                ref: "lex:app.bsky.graph.defs#listView"
                            },
                            items: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.graph.defs#listItemView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetListMutes: {
        lexicon: 1,
        id: "app.bsky.graph.getListMutes",
        defs: {
            main: {
                type: "query",
                description: "Which lists is the requester's account muting?",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "lists"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            lists: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.graph.defs#listView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetLists: {
        lexicon: 1,
        id: "app.bsky.graph.getLists",
        defs: {
            main: {
                type: "query",
                description: "Fetch a list of lists that belong to an actor",
                parameters: {
                    type: "params",
                    required: [
                        "actor"
                    ],
                    properties: {
                        actor: {
                            type: "string",
                            format: "at-identifier"
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "lists"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            lists: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.graph.defs#listView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetMutes: {
        lexicon: 1,
        id: "app.bsky.graph.getMutes",
        defs: {
            main: {
                type: "query",
                description: "Who does the viewer mute?",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "mutes"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            mutes: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.actor.defs#profileView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphList: {
        lexicon: 1,
        id: "app.bsky.graph.list",
        defs: {
            main: {
                type: "record",
                description: "A declaration of a list of actors.",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "name",
                        "purpose",
                        "createdAt"
                    ],
                    properties: {
                        purpose: {
                            type: "ref",
                            ref: "lex:app.bsky.graph.defs#listPurpose"
                        },
                        name: {
                            type: "string",
                            maxLength: 64,
                            minLength: 1
                        },
                        description: {
                            type: "string",
                            maxGraphemes: 300,
                            maxLength: 3e3
                        },
                        descriptionFacets: {
                            type: "array",
                            items: {
                                type: "ref",
                                ref: "lex:app.bsky.richtext.facet"
                            }
                        },
                        avatar: {
                            type: "blob",
                            accept: [
                                "image/png",
                                "image/jpeg"
                            ],
                            maxSize: 1e6
                        },
                        labels: {
                            type: "union",
                            refs: [
                                "lex:com.atproto.label.defs#selfLabels"
                            ]
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphListitem: {
        lexicon: 1,
        id: "app.bsky.graph.listitem",
        defs: {
            main: {
                type: "record",
                description: "An item under a declared list of actors",
                key: "tid",
                record: {
                    type: "object",
                    required: [
                        "subject",
                        "list",
                        "createdAt"
                    ],
                    properties: {
                        subject: {
                            type: "string",
                            format: "did"
                        },
                        list: {
                            type: "string",
                            format: "at-uri"
                        },
                        createdAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActor: {
        lexicon: 1,
        id: "app.bsky.graph.muteActor",
        defs: {
            main: {
                type: "procedure",
                description: "Mute an actor by did or handle.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actor"
                        ],
                        properties: {
                            actor: {
                                type: "string",
                                format: "at-identifier"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActorList: {
        lexicon: 1,
        id: "app.bsky.graph.muteActorList",
        defs: {
            main: {
                type: "procedure",
                description: "Mute a list of actors.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "list"
                        ],
                        properties: {
                            list: {
                                type: "string",
                                format: "at-uri"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActor: {
        lexicon: 1,
        id: "app.bsky.graph.unmuteActor",
        defs: {
            main: {
                type: "procedure",
                description: "Unmute an actor by did or handle.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "actor"
                        ],
                        properties: {
                            actor: {
                                type: "string",
                                format: "at-identifier"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActorList: {
        lexicon: 1,
        id: "app.bsky.graph.unmuteActorList",
        defs: {
            main: {
                type: "procedure",
                description: "Unmute a list of actors.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "list"
                        ],
                        properties: {
                            list: {
                                type: "string",
                                format: "at-uri"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationGetUnreadCount: {
        lexicon: 1,
        id: "app.bsky.notification.getUnreadCount",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    properties: {
                        seenAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "count"
                        ],
                        properties: {
                            count: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationListNotifications: {
        lexicon: 1,
        id: "app.bsky.notification.listNotifications",
        defs: {
            main: {
                type: "query",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        },
                        seenAt: {
                            type: "string",
                            format: "datetime"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "notifications"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            notifications: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.notification.listNotifications#notification"
                                }
                            }
                        }
                    }
                }
            },
            notification: {
                type: "object",
                required: [
                    "uri",
                    "cid",
                    "author",
                    "reason",
                    "record",
                    "isRead",
                    "indexedAt"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "at-uri"
                    },
                    cid: {
                        type: "string",
                        format: "cid"
                    },
                    author: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    reason: {
                        type: "string",
                        description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
                        knownValues: [
                            "like",
                            "repost",
                            "follow",
                            "mention",
                            "reply",
                            "quote"
                        ]
                    },
                    reasonSubject: {
                        type: "string",
                        format: "at-uri"
                    },
                    record: {
                        type: "unknown"
                    },
                    isRead: {
                        type: "boolean"
                    },
                    indexedAt: {
                        type: "string",
                        format: "datetime"
                    },
                    labels: {
                        type: "array",
                        items: {
                            type: "ref",
                            ref: "lex:com.atproto.label.defs#label"
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationRegisterPush: {
        lexicon: 1,
        id: "app.bsky.notification.registerPush",
        defs: {
            main: {
                type: "procedure",
                description: "Register for push notifications with a service",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "serviceDid",
                            "token",
                            "platform",
                            "appId"
                        ],
                        properties: {
                            serviceDid: {
                                type: "string",
                                format: "did"
                            },
                            token: {
                                type: "string"
                            },
                            platform: {
                                type: "string",
                                knownValues: [
                                    "ios",
                                    "android",
                                    "web"
                                ]
                            },
                            appId: {
                                type: "string"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationUpdateSeen: {
        lexicon: 1,
        id: "app.bsky.notification.updateSeen",
        defs: {
            main: {
                type: "procedure",
                description: "Notify server that the user has seen notifications.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "seenAt"
                        ],
                        properties: {
                            seenAt: {
                                type: "string",
                                format: "datetime"
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyRichtextFacet: {
        lexicon: 1,
        id: "app.bsky.richtext.facet",
        defs: {
            main: {
                type: "object",
                required: [
                    "index",
                    "features"
                ],
                properties: {
                    index: {
                        type: "ref",
                        ref: "lex:app.bsky.richtext.facet#byteSlice"
                    },
                    features: {
                        type: "array",
                        items: {
                            type: "union",
                            refs: [
                                "lex:app.bsky.richtext.facet#mention",
                                "lex:app.bsky.richtext.facet#link"
                            ]
                        }
                    }
                }
            },
            mention: {
                type: "object",
                description: "A facet feature for actor mentions.",
                required: [
                    "did"
                ],
                properties: {
                    did: {
                        type: "string",
                        format: "did"
                    }
                }
            },
            link: {
                type: "object",
                description: "A facet feature for links.",
                required: [
                    "uri"
                ],
                properties: {
                    uri: {
                        type: "string",
                        format: "uri"
                    }
                }
            },
            byteSlice: {
                type: "object",
                description: "A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.",
                required: [
                    "byteStart",
                    "byteEnd"
                ],
                properties: {
                    byteStart: {
                        type: "integer",
                        minimum: 0
                    },
                    byteEnd: {
                        type: "integer",
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyUnspeccedApplyLabels: {
        lexicon: 1,
        id: "app.bsky.unspecced.applyLabels",
        defs: {
            main: {
                type: "procedure",
                description: "Allow a labeler to apply labels directly.",
                input: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "labels"
                        ],
                        properties: {
                            labels: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:com.atproto.label.defs#label"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetPopular: {
        lexicon: 1,
        id: "app.bsky.unspecced.getPopular",
        defs: {
            main: {
                type: "query",
                description: "An unspecced view of globally popular items",
                parameters: {
                    type: "params",
                    properties: {
                        includeNsfw: {
                            type: "boolean",
                            default: false
                        },
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: 1,
        id: "app.bsky.unspecced.getPopularFeedGenerators",
        defs: {
            main: {
                type: "query",
                description: "An unspecced view of globally popular feed generators",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        },
                        query: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feeds"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feeds: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#generatorView"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTimelineSkeleton: {
        lexicon: 1,
        id: "app.bsky.unspecced.getTimelineSkeleton",
        defs: {
            main: {
                type: "query",
                description: "A skeleton of a timeline - UNSPECCED & WILL GO AWAY SOON",
                parameters: {
                    type: "params",
                    properties: {
                        limit: {
                            type: "integer",
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: "string"
                        }
                    }
                },
                output: {
                    encoding: "application/json",
                    schema: {
                        type: "object",
                        required: [
                            "feed"
                        ],
                        properties: {
                            cursor: {
                                type: "string"
                            },
                            feed: {
                                type: "array",
                                items: {
                                    type: "ref",
                                    ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: "UnknownFeed"
                    }
                ]
            }
        }
    }
};
var $d76f6d4dfc9a3307$var$schemas = Object.values($d76f6d4dfc9a3307$var$schemaDict);
var $d76f6d4dfc9a3307$var$lexicons = new $d76f6d4dfc9a3307$var$Lexicons($d76f6d4dfc9a3307$var$schemas);
// src/client/types/com/atproto/admin/disableAccountInvites.ts
var $d76f6d4dfc9a3307$var$disableAccountInvites_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$disableAccountInvites_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr
});
function $d76f6d4dfc9a3307$var$toKnownErr(e) {
    return e;
}
// src/client/types/com/atproto/admin/disableInviteCodes.ts
var $d76f6d4dfc9a3307$var$disableInviteCodes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$disableInviteCodes_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr2
});
function $d76f6d4dfc9a3307$var$toKnownErr2(e) {
    return e;
}
// src/client/types/com/atproto/admin/enableAccountInvites.ts
var $d76f6d4dfc9a3307$var$enableAccountInvites_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$enableAccountInvites_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr3
});
function $d76f6d4dfc9a3307$var$toKnownErr3(e) {
    return e;
}
// src/client/types/com/atproto/admin/getInviteCodes.ts
var $d76f6d4dfc9a3307$var$getInviteCodes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getInviteCodes_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr4
});
function $d76f6d4dfc9a3307$var$toKnownErr4(e) {
    return e;
}
// src/client/types/com/atproto/admin/getModerationAction.ts
var $d76f6d4dfc9a3307$var$getModerationAction_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getModerationAction_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr5
});
function $d76f6d4dfc9a3307$var$toKnownErr5(e) {
    return e;
}
// src/client/types/com/atproto/admin/getModerationActions.ts
var $d76f6d4dfc9a3307$var$getModerationActions_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getModerationActions_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr6
});
function $d76f6d4dfc9a3307$var$toKnownErr6(e) {
    return e;
}
// src/client/types/com/atproto/admin/getModerationReport.ts
var $d76f6d4dfc9a3307$var$getModerationReport_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getModerationReport_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr7
});
function $d76f6d4dfc9a3307$var$toKnownErr7(e) {
    return e;
}
// src/client/types/com/atproto/admin/getModerationReports.ts
var $d76f6d4dfc9a3307$var$getModerationReports_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getModerationReports_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr8
});
function $d76f6d4dfc9a3307$var$toKnownErr8(e) {
    return e;
}
// src/client/types/com/atproto/admin/getRecord.ts
var $d76f6d4dfc9a3307$var$getRecord_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRecord_exports, {
    RecordNotFoundError: ()=>$d76f6d4dfc9a3307$var$RecordNotFoundError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr9
});
var $d76f6d4dfc9a3307$var$RecordNotFoundError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr9(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "RecordNotFound") return new $d76f6d4dfc9a3307$var$RecordNotFoundError(e);
    }
    return e;
}
// src/client/types/com/atproto/admin/getRepo.ts
var $d76f6d4dfc9a3307$var$getRepo_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRepo_exports, {
    RepoNotFoundError: ()=>$d76f6d4dfc9a3307$var$RepoNotFoundError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr10
});
var $d76f6d4dfc9a3307$var$RepoNotFoundError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr10(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "RepoNotFound") return new $d76f6d4dfc9a3307$var$RepoNotFoundError(e);
    }
    return e;
}
// src/client/types/com/atproto/admin/rebaseRepo.ts
var $d76f6d4dfc9a3307$var$rebaseRepo_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$rebaseRepo_exports, {
    ConcurrentWritesError: ()=>$d76f6d4dfc9a3307$var$ConcurrentWritesError,
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr11
});
var $d76f6d4dfc9a3307$var$InvalidSwapError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$ConcurrentWritesError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr11(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError(e);
        if (e.error === "ConcurrentWrites") return new $d76f6d4dfc9a3307$var$ConcurrentWritesError(e);
    }
    return e;
}
// src/client/types/com/atproto/admin/resolveModerationReports.ts
var $d76f6d4dfc9a3307$var$resolveModerationReports_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$resolveModerationReports_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr12
});
function $d76f6d4dfc9a3307$var$toKnownErr12(e) {
    return e;
}
// src/client/types/com/atproto/admin/reverseModerationAction.ts
var $d76f6d4dfc9a3307$var$reverseModerationAction_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$reverseModerationAction_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr13
});
function $d76f6d4dfc9a3307$var$toKnownErr13(e) {
    return e;
}
// src/client/types/com/atproto/admin/searchRepos.ts
var $d76f6d4dfc9a3307$var$searchRepos_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$searchRepos_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr14
});
function $d76f6d4dfc9a3307$var$toKnownErr14(e) {
    return e;
}
// src/client/types/com/atproto/admin/sendEmail.ts
var $d76f6d4dfc9a3307$var$sendEmail_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$sendEmail_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr15
});
function $d76f6d4dfc9a3307$var$toKnownErr15(e) {
    return e;
}
// src/client/types/com/atproto/admin/takeModerationAction.ts
var $d76f6d4dfc9a3307$var$takeModerationAction_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$takeModerationAction_exports, {
    SubjectHasActionError: ()=>$d76f6d4dfc9a3307$var$SubjectHasActionError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr16
});
var $d76f6d4dfc9a3307$var$SubjectHasActionError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr16(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "SubjectHasAction") return new $d76f6d4dfc9a3307$var$SubjectHasActionError(e);
    }
    return e;
}
// src/client/types/com/atproto/admin/updateAccountEmail.ts
var $d76f6d4dfc9a3307$var$updateAccountEmail_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$updateAccountEmail_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr17
});
function $d76f6d4dfc9a3307$var$toKnownErr17(e) {
    return e;
}
// src/client/types/com/atproto/admin/updateAccountHandle.ts
var $d76f6d4dfc9a3307$var$updateAccountHandle_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$updateAccountHandle_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr18
});
function $d76f6d4dfc9a3307$var$toKnownErr18(e) {
    return e;
}
// src/client/types/com/atproto/identity/resolveHandle.ts
var $d76f6d4dfc9a3307$var$resolveHandle_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$resolveHandle_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr19
});
function $d76f6d4dfc9a3307$var$toKnownErr19(e) {
    return e;
}
// src/client/types/com/atproto/identity/updateHandle.ts
var $d76f6d4dfc9a3307$var$updateHandle_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$updateHandle_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr20
});
function $d76f6d4dfc9a3307$var$toKnownErr20(e) {
    return e;
}
// src/client/types/com/atproto/label/queryLabels.ts
var $d76f6d4dfc9a3307$var$queryLabels_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$queryLabels_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr21
});
function $d76f6d4dfc9a3307$var$toKnownErr21(e) {
    return e;
}
// src/client/types/com/atproto/moderation/createReport.ts
var $d76f6d4dfc9a3307$var$createReport_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createReport_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr22
});
function $d76f6d4dfc9a3307$var$toKnownErr22(e) {
    return e;
}
// src/client/types/com/atproto/repo/applyWrites.ts
var $d76f6d4dfc9a3307$var$applyWrites_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$applyWrites_exports, {
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError2,
    isCreate: ()=>$d76f6d4dfc9a3307$var$isCreate,
    isDelete: ()=>$d76f6d4dfc9a3307$var$isDelete,
    isUpdate: ()=>$d76f6d4dfc9a3307$var$isUpdate,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr23,
    validateCreate: ()=>$d76f6d4dfc9a3307$var$validateCreate,
    validateDelete: ()=>$d76f6d4dfc9a3307$var$validateDelete,
    validateUpdate: ()=>$d76f6d4dfc9a3307$var$validateUpdate
});
// src/client/util.ts
function $d76f6d4dfc9a3307$var$isObj2(v) {
    return typeof v === "object" && v !== null;
}
function $d76f6d4dfc9a3307$var$hasProp2(data, prop) {
    return prop in data;
}
// src/client/types/com/atproto/repo/applyWrites.ts
var $d76f6d4dfc9a3307$var$InvalidSwapError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr23(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError2(e);
    }
    return e;
}
function $d76f6d4dfc9a3307$var$isCreate(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#create";
}
function $d76f6d4dfc9a3307$var$validateCreate(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.repo.applyWrites#create", v);
}
function $d76f6d4dfc9a3307$var$isUpdate(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#update";
}
function $d76f6d4dfc9a3307$var$validateUpdate(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.repo.applyWrites#update", v);
}
function $d76f6d4dfc9a3307$var$isDelete(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#delete";
}
function $d76f6d4dfc9a3307$var$validateDelete(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.repo.applyWrites#delete", v);
}
// src/client/types/com/atproto/repo/createRecord.ts
var $d76f6d4dfc9a3307$var$createRecord_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createRecord_exports, {
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError3,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr24
});
var $d76f6d4dfc9a3307$var$InvalidSwapError3 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr24(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError3(e);
    }
    return e;
}
// src/client/types/com/atproto/repo/deleteRecord.ts
var $d76f6d4dfc9a3307$var$deleteRecord_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$deleteRecord_exports, {
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError4,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr25
});
var $d76f6d4dfc9a3307$var$InvalidSwapError4 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr25(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError4(e);
    }
    return e;
}
// src/client/types/com/atproto/repo/describeRepo.ts
var $d76f6d4dfc9a3307$var$describeRepo_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$describeRepo_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr26
});
function $d76f6d4dfc9a3307$var$toKnownErr26(e) {
    return e;
}
// src/client/types/com/atproto/repo/getRecord.ts
var $d76f6d4dfc9a3307$var$getRecord_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRecord_exports2, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr27
});
function $d76f6d4dfc9a3307$var$toKnownErr27(e) {
    return e;
}
// src/client/types/com/atproto/repo/listRecords.ts
var $d76f6d4dfc9a3307$var$listRecords_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listRecords_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr28,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord
});
function $d76f6d4dfc9a3307$var$toKnownErr28(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isRecord(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.repo.listRecords#record";
}
function $d76f6d4dfc9a3307$var$validateRecord(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.repo.listRecords#record", v);
}
// src/client/types/com/atproto/repo/putRecord.ts
var $d76f6d4dfc9a3307$var$putRecord_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$putRecord_exports, {
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError5,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr29
});
var $d76f6d4dfc9a3307$var$InvalidSwapError5 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr29(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError5(e);
    }
    return e;
}
// src/client/types/com/atproto/repo/rebaseRepo.ts
var $d76f6d4dfc9a3307$var$rebaseRepo_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$rebaseRepo_exports2, {
    ConcurrentWritesError: ()=>$d76f6d4dfc9a3307$var$ConcurrentWritesError2,
    InvalidSwapError: ()=>$d76f6d4dfc9a3307$var$InvalidSwapError6,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr30
});
var $d76f6d4dfc9a3307$var$InvalidSwapError6 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$ConcurrentWritesError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr30(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidSwap") return new $d76f6d4dfc9a3307$var$InvalidSwapError6(e);
        if (e.error === "ConcurrentWrites") return new $d76f6d4dfc9a3307$var$ConcurrentWritesError2(e);
    }
    return e;
}
// src/client/types/com/atproto/repo/uploadBlob.ts
var $d76f6d4dfc9a3307$var$uploadBlob_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$uploadBlob_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr31
});
function $d76f6d4dfc9a3307$var$toKnownErr31(e) {
    return e;
}
// src/client/types/com/atproto/server/createAccount.ts
var $d76f6d4dfc9a3307$var$createAccount_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createAccount_exports, {
    HandleNotAvailableError: ()=>$d76f6d4dfc9a3307$var$HandleNotAvailableError,
    IncompatibleDidDocError: ()=>$d76f6d4dfc9a3307$var$IncompatibleDidDocError,
    InvalidHandleError: ()=>$d76f6d4dfc9a3307$var$InvalidHandleError2,
    InvalidInviteCodeError: ()=>$d76f6d4dfc9a3307$var$InvalidInviteCodeError,
    InvalidPasswordError: ()=>$d76f6d4dfc9a3307$var$InvalidPasswordError,
    UnresolvableDidError: ()=>$d76f6d4dfc9a3307$var$UnresolvableDidError,
    UnsupportedDomainError: ()=>$d76f6d4dfc9a3307$var$UnsupportedDomainError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr32
});
var $d76f6d4dfc9a3307$var$InvalidHandleError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$InvalidPasswordError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$InvalidInviteCodeError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$HandleNotAvailableError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$UnsupportedDomainError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$UnresolvableDidError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$IncompatibleDidDocError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr32(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "InvalidHandle") return new $d76f6d4dfc9a3307$var$InvalidHandleError2(e);
        if (e.error === "InvalidPassword") return new $d76f6d4dfc9a3307$var$InvalidPasswordError(e);
        if (e.error === "InvalidInviteCode") return new $d76f6d4dfc9a3307$var$InvalidInviteCodeError(e);
        if (e.error === "HandleNotAvailable") return new $d76f6d4dfc9a3307$var$HandleNotAvailableError(e);
        if (e.error === "UnsupportedDomain") return new $d76f6d4dfc9a3307$var$UnsupportedDomainError(e);
        if (e.error === "UnresolvableDid") return new $d76f6d4dfc9a3307$var$UnresolvableDidError(e);
        if (e.error === "IncompatibleDidDoc") return new $d76f6d4dfc9a3307$var$IncompatibleDidDocError(e);
    }
    return e;
}
// src/client/types/com/atproto/server/createAppPassword.ts
var $d76f6d4dfc9a3307$var$createAppPassword_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createAppPassword_exports, {
    AccountTakedownError: ()=>$d76f6d4dfc9a3307$var$AccountTakedownError,
    isAppPassword: ()=>$d76f6d4dfc9a3307$var$isAppPassword,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr33,
    validateAppPassword: ()=>$d76f6d4dfc9a3307$var$validateAppPassword
});
var $d76f6d4dfc9a3307$var$AccountTakedownError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr33(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "AccountTakedown") return new $d76f6d4dfc9a3307$var$AccountTakedownError(e);
    }
    return e;
}
function $d76f6d4dfc9a3307$var$isAppPassword(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.createAppPassword#appPassword";
}
function $d76f6d4dfc9a3307$var$validateAppPassword(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.createAppPassword#appPassword", v);
}
// src/client/types/com/atproto/server/createInviteCode.ts
var $d76f6d4dfc9a3307$var$createInviteCode_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createInviteCode_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr34
});
function $d76f6d4dfc9a3307$var$toKnownErr34(e) {
    return e;
}
// src/client/types/com/atproto/server/createInviteCodes.ts
var $d76f6d4dfc9a3307$var$createInviteCodes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createInviteCodes_exports, {
    isAccountCodes: ()=>$d76f6d4dfc9a3307$var$isAccountCodes,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr35,
    validateAccountCodes: ()=>$d76f6d4dfc9a3307$var$validateAccountCodes
});
function $d76f6d4dfc9a3307$var$toKnownErr35(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isAccountCodes(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.createInviteCodes#accountCodes";
}
function $d76f6d4dfc9a3307$var$validateAccountCodes(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", v);
}
// src/client/types/com/atproto/server/createSession.ts
var $d76f6d4dfc9a3307$var$createSession_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$createSession_exports, {
    AccountTakedownError: ()=>$d76f6d4dfc9a3307$var$AccountTakedownError2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr36
});
var $d76f6d4dfc9a3307$var$AccountTakedownError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr36(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "AccountTakedown") return new $d76f6d4dfc9a3307$var$AccountTakedownError2(e);
    }
    return e;
}
// src/client/types/com/atproto/server/deleteAccount.ts
var $d76f6d4dfc9a3307$var$deleteAccount_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$deleteAccount_exports, {
    ExpiredTokenError: ()=>$d76f6d4dfc9a3307$var$ExpiredTokenError,
    InvalidTokenError: ()=>$d76f6d4dfc9a3307$var$InvalidTokenError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr37
});
var $d76f6d4dfc9a3307$var$ExpiredTokenError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$InvalidTokenError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr37(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "ExpiredToken") return new $d76f6d4dfc9a3307$var$ExpiredTokenError(e);
        if (e.error === "InvalidToken") return new $d76f6d4dfc9a3307$var$InvalidTokenError(e);
    }
    return e;
}
// src/client/types/com/atproto/server/deleteSession.ts
var $d76f6d4dfc9a3307$var$deleteSession_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$deleteSession_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr38
});
function $d76f6d4dfc9a3307$var$toKnownErr38(e) {
    return e;
}
// src/client/types/com/atproto/server/describeServer.ts
var $d76f6d4dfc9a3307$var$describeServer_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$describeServer_exports, {
    isLinks: ()=>$d76f6d4dfc9a3307$var$isLinks,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr39,
    validateLinks: ()=>$d76f6d4dfc9a3307$var$validateLinks
});
function $d76f6d4dfc9a3307$var$toKnownErr39(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isLinks(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.describeServer#links";
}
function $d76f6d4dfc9a3307$var$validateLinks(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.describeServer#links", v);
}
// src/client/types/com/atproto/server/getAccountInviteCodes.ts
var $d76f6d4dfc9a3307$var$getAccountInviteCodes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getAccountInviteCodes_exports, {
    DuplicateCreateError: ()=>$d76f6d4dfc9a3307$var$DuplicateCreateError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr40
});
var $d76f6d4dfc9a3307$var$DuplicateCreateError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr40(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "DuplicateCreate") return new $d76f6d4dfc9a3307$var$DuplicateCreateError(e);
    }
    return e;
}
// src/client/types/com/atproto/server/getSession.ts
var $d76f6d4dfc9a3307$var$getSession_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getSession_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr41
});
function $d76f6d4dfc9a3307$var$toKnownErr41(e) {
    return e;
}
// src/client/types/com/atproto/server/listAppPasswords.ts
var $d76f6d4dfc9a3307$var$listAppPasswords_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listAppPasswords_exports, {
    AccountTakedownError: ()=>$d76f6d4dfc9a3307$var$AccountTakedownError3,
    isAppPassword: ()=>$d76f6d4dfc9a3307$var$isAppPassword2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr42,
    validateAppPassword: ()=>$d76f6d4dfc9a3307$var$validateAppPassword2
});
var $d76f6d4dfc9a3307$var$AccountTakedownError3 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr42(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "AccountTakedown") return new $d76f6d4dfc9a3307$var$AccountTakedownError3(e);
    }
    return e;
}
function $d76f6d4dfc9a3307$var$isAppPassword2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.listAppPasswords#appPassword";
}
function $d76f6d4dfc9a3307$var$validateAppPassword2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.listAppPasswords#appPassword", v);
}
// src/client/types/com/atproto/server/refreshSession.ts
var $d76f6d4dfc9a3307$var$refreshSession_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$refreshSession_exports, {
    AccountTakedownError: ()=>$d76f6d4dfc9a3307$var$AccountTakedownError4,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr43
});
var $d76f6d4dfc9a3307$var$AccountTakedownError4 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr43(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "AccountTakedown") return new $d76f6d4dfc9a3307$var$AccountTakedownError4(e);
    }
    return e;
}
// src/client/types/com/atproto/server/requestAccountDelete.ts
var $d76f6d4dfc9a3307$var$requestAccountDelete_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$requestAccountDelete_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr44
});
function $d76f6d4dfc9a3307$var$toKnownErr44(e) {
    return e;
}
// src/client/types/com/atproto/server/requestPasswordReset.ts
var $d76f6d4dfc9a3307$var$requestPasswordReset_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$requestPasswordReset_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr45
});
function $d76f6d4dfc9a3307$var$toKnownErr45(e) {
    return e;
}
// src/client/types/com/atproto/server/resetPassword.ts
var $d76f6d4dfc9a3307$var$resetPassword_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$resetPassword_exports, {
    ExpiredTokenError: ()=>$d76f6d4dfc9a3307$var$ExpiredTokenError2,
    InvalidTokenError: ()=>$d76f6d4dfc9a3307$var$InvalidTokenError2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr46
});
var $d76f6d4dfc9a3307$var$ExpiredTokenError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$InvalidTokenError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr46(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "ExpiredToken") return new $d76f6d4dfc9a3307$var$ExpiredTokenError2(e);
        if (e.error === "InvalidToken") return new $d76f6d4dfc9a3307$var$InvalidTokenError2(e);
    }
    return e;
}
// src/client/types/com/atproto/server/revokeAppPassword.ts
var $d76f6d4dfc9a3307$var$revokeAppPassword_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$revokeAppPassword_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr47
});
function $d76f6d4dfc9a3307$var$toKnownErr47(e) {
    return e;
}
// src/client/types/com/atproto/sync/getBlob.ts
var $d76f6d4dfc9a3307$var$getBlob_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getBlob_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr48
});
function $d76f6d4dfc9a3307$var$toKnownErr48(e) {
    return e;
}
// src/client/types/com/atproto/sync/getBlocks.ts
var $d76f6d4dfc9a3307$var$getBlocks_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getBlocks_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr49
});
function $d76f6d4dfc9a3307$var$toKnownErr49(e) {
    return e;
}
// src/client/types/com/atproto/sync/getCheckout.ts
var $d76f6d4dfc9a3307$var$getCheckout_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getCheckout_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr50
});
function $d76f6d4dfc9a3307$var$toKnownErr50(e) {
    return e;
}
// src/client/types/com/atproto/sync/getCommitPath.ts
var $d76f6d4dfc9a3307$var$getCommitPath_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getCommitPath_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr51
});
function $d76f6d4dfc9a3307$var$toKnownErr51(e) {
    return e;
}
// src/client/types/com/atproto/sync/getHead.ts
var $d76f6d4dfc9a3307$var$getHead_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getHead_exports, {
    HeadNotFoundError: ()=>$d76f6d4dfc9a3307$var$HeadNotFoundError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr52
});
var $d76f6d4dfc9a3307$var$HeadNotFoundError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr52(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "HeadNotFound") return new $d76f6d4dfc9a3307$var$HeadNotFoundError(e);
    }
    return e;
}
// src/client/types/com/atproto/sync/getRecord.ts
var $d76f6d4dfc9a3307$var$getRecord_exports3 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRecord_exports3, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr53
});
function $d76f6d4dfc9a3307$var$toKnownErr53(e) {
    return e;
}
// src/client/types/com/atproto/sync/getRepo.ts
var $d76f6d4dfc9a3307$var$getRepo_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRepo_exports2, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr54
});
function $d76f6d4dfc9a3307$var$toKnownErr54(e) {
    return e;
}
// src/client/types/com/atproto/sync/listBlobs.ts
var $d76f6d4dfc9a3307$var$listBlobs_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listBlobs_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr55
});
function $d76f6d4dfc9a3307$var$toKnownErr55(e) {
    return e;
}
// src/client/types/com/atproto/sync/listRepos.ts
var $d76f6d4dfc9a3307$var$listRepos_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listRepos_exports, {
    isRepo: ()=>$d76f6d4dfc9a3307$var$isRepo,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr56,
    validateRepo: ()=>$d76f6d4dfc9a3307$var$validateRepo
});
function $d76f6d4dfc9a3307$var$toKnownErr56(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isRepo(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.listRepos#repo";
}
function $d76f6d4dfc9a3307$var$validateRepo(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.listRepos#repo", v);
}
// src/client/types/com/atproto/sync/notifyOfUpdate.ts
var $d76f6d4dfc9a3307$var$notifyOfUpdate_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$notifyOfUpdate_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr57
});
function $d76f6d4dfc9a3307$var$toKnownErr57(e) {
    return e;
}
// src/client/types/com/atproto/sync/requestCrawl.ts
var $d76f6d4dfc9a3307$var$requestCrawl_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$requestCrawl_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr58
});
function $d76f6d4dfc9a3307$var$toKnownErr58(e) {
    return e;
}
// src/client/types/app/bsky/actor/getPreferences.ts
var $d76f6d4dfc9a3307$var$getPreferences_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getPreferences_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr59
});
function $d76f6d4dfc9a3307$var$toKnownErr59(e) {
    return e;
}
// src/client/types/app/bsky/actor/getProfile.ts
var $d76f6d4dfc9a3307$var$getProfile_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getProfile_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr60
});
function $d76f6d4dfc9a3307$var$toKnownErr60(e) {
    return e;
}
// src/client/types/app/bsky/actor/getProfiles.ts
var $d76f6d4dfc9a3307$var$getProfiles_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getProfiles_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr61
});
function $d76f6d4dfc9a3307$var$toKnownErr61(e) {
    return e;
}
// src/client/types/app/bsky/actor/getSuggestions.ts
var $d76f6d4dfc9a3307$var$getSuggestions_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getSuggestions_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr62
});
function $d76f6d4dfc9a3307$var$toKnownErr62(e) {
    return e;
}
// src/client/types/app/bsky/actor/putPreferences.ts
var $d76f6d4dfc9a3307$var$putPreferences_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$putPreferences_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr63
});
function $d76f6d4dfc9a3307$var$toKnownErr63(e) {
    return e;
}
// src/client/types/app/bsky/actor/searchActors.ts
var $d76f6d4dfc9a3307$var$searchActors_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$searchActors_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr64
});
function $d76f6d4dfc9a3307$var$toKnownErr64(e) {
    return e;
}
// src/client/types/app/bsky/actor/searchActorsTypeahead.ts
var $d76f6d4dfc9a3307$var$searchActorsTypeahead_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$searchActorsTypeahead_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr65
});
function $d76f6d4dfc9a3307$var$toKnownErr65(e) {
    return e;
}
// src/client/types/app/bsky/feed/describeFeedGenerator.ts
var $d76f6d4dfc9a3307$var$describeFeedGenerator_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$describeFeedGenerator_exports, {
    isFeed: ()=>$d76f6d4dfc9a3307$var$isFeed,
    isLinks: ()=>$d76f6d4dfc9a3307$var$isLinks2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr66,
    validateFeed: ()=>$d76f6d4dfc9a3307$var$validateFeed,
    validateLinks: ()=>$d76f6d4dfc9a3307$var$validateLinks2
});
function $d76f6d4dfc9a3307$var$toKnownErr66(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isFeed(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#feed";
}
function $d76f6d4dfc9a3307$var$validateFeed(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", v);
}
function $d76f6d4dfc9a3307$var$isLinks2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#links";
}
function $d76f6d4dfc9a3307$var$validateLinks2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.describeFeedGenerator#links", v);
}
// src/client/types/app/bsky/feed/getActorFeeds.ts
var $d76f6d4dfc9a3307$var$getActorFeeds_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getActorFeeds_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr67
});
function $d76f6d4dfc9a3307$var$toKnownErr67(e) {
    return e;
}
// src/client/types/app/bsky/feed/getActorLikes.ts
var $d76f6d4dfc9a3307$var$getActorLikes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getActorLikes_exports, {
    BlockedActorError: ()=>$d76f6d4dfc9a3307$var$BlockedActorError,
    BlockedByActorError: ()=>$d76f6d4dfc9a3307$var$BlockedByActorError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr68
});
var $d76f6d4dfc9a3307$var$BlockedActorError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$BlockedByActorError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr68(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "BlockedActor") return new $d76f6d4dfc9a3307$var$BlockedActorError(e);
        if (e.error === "BlockedByActor") return new $d76f6d4dfc9a3307$var$BlockedByActorError(e);
    }
    return e;
}
// src/client/types/app/bsky/feed/getAuthorFeed.ts
var $d76f6d4dfc9a3307$var$getAuthorFeed_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getAuthorFeed_exports, {
    BlockedActorError: ()=>$d76f6d4dfc9a3307$var$BlockedActorError2,
    BlockedByActorError: ()=>$d76f6d4dfc9a3307$var$BlockedByActorError2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr69
});
var $d76f6d4dfc9a3307$var$BlockedActorError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
var $d76f6d4dfc9a3307$var$BlockedByActorError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr69(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "BlockedActor") return new $d76f6d4dfc9a3307$var$BlockedActorError2(e);
        if (e.error === "BlockedByActor") return new $d76f6d4dfc9a3307$var$BlockedByActorError2(e);
    }
    return e;
}
// src/client/types/app/bsky/feed/getFeed.ts
var $d76f6d4dfc9a3307$var$getFeed_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFeed_exports, {
    UnknownFeedError: ()=>$d76f6d4dfc9a3307$var$UnknownFeedError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr70
});
var $d76f6d4dfc9a3307$var$UnknownFeedError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr70(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "UnknownFeed") return new $d76f6d4dfc9a3307$var$UnknownFeedError(e);
    }
    return e;
}
// src/client/types/app/bsky/feed/getFeedGenerator.ts
var $d76f6d4dfc9a3307$var$getFeedGenerator_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFeedGenerator_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr71
});
function $d76f6d4dfc9a3307$var$toKnownErr71(e) {
    return e;
}
// src/client/types/app/bsky/feed/getFeedGenerators.ts
var $d76f6d4dfc9a3307$var$getFeedGenerators_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFeedGenerators_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr72
});
function $d76f6d4dfc9a3307$var$toKnownErr72(e) {
    return e;
}
// src/client/types/app/bsky/feed/getFeedSkeleton.ts
var $d76f6d4dfc9a3307$var$getFeedSkeleton_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFeedSkeleton_exports, {
    UnknownFeedError: ()=>$d76f6d4dfc9a3307$var$UnknownFeedError2,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr73
});
var $d76f6d4dfc9a3307$var$UnknownFeedError2 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr73(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "UnknownFeed") return new $d76f6d4dfc9a3307$var$UnknownFeedError2(e);
    }
    return e;
}
// src/client/types/app/bsky/feed/getLikes.ts
var $d76f6d4dfc9a3307$var$getLikes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getLikes_exports, {
    isLike: ()=>$d76f6d4dfc9a3307$var$isLike,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr74,
    validateLike: ()=>$d76f6d4dfc9a3307$var$validateLike
});
function $d76f6d4dfc9a3307$var$toKnownErr74(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isLike(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.getLikes#like";
}
function $d76f6d4dfc9a3307$var$validateLike(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.getLikes#like", v);
}
// src/client/types/app/bsky/feed/getPostThread.ts
var $d76f6d4dfc9a3307$var$getPostThread_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getPostThread_exports, {
    NotFoundError: ()=>$d76f6d4dfc9a3307$var$NotFoundError,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr75
});
var $d76f6d4dfc9a3307$var$NotFoundError = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr75(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "NotFound") return new $d76f6d4dfc9a3307$var$NotFoundError(e);
    }
    return e;
}
// src/client/types/app/bsky/feed/getPosts.ts
var $d76f6d4dfc9a3307$var$getPosts_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getPosts_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr76
});
function $d76f6d4dfc9a3307$var$toKnownErr76(e) {
    return e;
}
// src/client/types/app/bsky/feed/getRepostedBy.ts
var $d76f6d4dfc9a3307$var$getRepostedBy_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getRepostedBy_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr77
});
function $d76f6d4dfc9a3307$var$toKnownErr77(e) {
    return e;
}
// src/client/types/app/bsky/feed/getTimeline.ts
var $d76f6d4dfc9a3307$var$getTimeline_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getTimeline_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr78
});
function $d76f6d4dfc9a3307$var$toKnownErr78(e) {
    return e;
}
// src/client/types/app/bsky/graph/getBlocks.ts
var $d76f6d4dfc9a3307$var$getBlocks_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getBlocks_exports2, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr79
});
function $d76f6d4dfc9a3307$var$toKnownErr79(e) {
    return e;
}
// src/client/types/app/bsky/graph/getFollowers.ts
var $d76f6d4dfc9a3307$var$getFollowers_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFollowers_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr80
});
function $d76f6d4dfc9a3307$var$toKnownErr80(e) {
    return e;
}
// src/client/types/app/bsky/graph/getFollows.ts
var $d76f6d4dfc9a3307$var$getFollows_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getFollows_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr81
});
function $d76f6d4dfc9a3307$var$toKnownErr81(e) {
    return e;
}
// src/client/types/app/bsky/graph/getList.ts
var $d76f6d4dfc9a3307$var$getList_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getList_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr82
});
function $d76f6d4dfc9a3307$var$toKnownErr82(e) {
    return e;
}
// src/client/types/app/bsky/graph/getListMutes.ts
var $d76f6d4dfc9a3307$var$getListMutes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getListMutes_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr83
});
function $d76f6d4dfc9a3307$var$toKnownErr83(e) {
    return e;
}
// src/client/types/app/bsky/graph/getLists.ts
var $d76f6d4dfc9a3307$var$getLists_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getLists_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr84
});
function $d76f6d4dfc9a3307$var$toKnownErr84(e) {
    return e;
}
// src/client/types/app/bsky/graph/getMutes.ts
var $d76f6d4dfc9a3307$var$getMutes_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getMutes_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr85
});
function $d76f6d4dfc9a3307$var$toKnownErr85(e) {
    return e;
}
// src/client/types/app/bsky/graph/muteActor.ts
var $d76f6d4dfc9a3307$var$muteActor_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$muteActor_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr86
});
function $d76f6d4dfc9a3307$var$toKnownErr86(e) {
    return e;
}
// src/client/types/app/bsky/graph/muteActorList.ts
var $d76f6d4dfc9a3307$var$muteActorList_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$muteActorList_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr87
});
function $d76f6d4dfc9a3307$var$toKnownErr87(e) {
    return e;
}
// src/client/types/app/bsky/graph/unmuteActor.ts
var $d76f6d4dfc9a3307$var$unmuteActor_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$unmuteActor_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr88
});
function $d76f6d4dfc9a3307$var$toKnownErr88(e) {
    return e;
}
// src/client/types/app/bsky/graph/unmuteActorList.ts
var $d76f6d4dfc9a3307$var$unmuteActorList_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$unmuteActorList_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr89
});
function $d76f6d4dfc9a3307$var$toKnownErr89(e) {
    return e;
}
// src/client/types/app/bsky/notification/getUnreadCount.ts
var $d76f6d4dfc9a3307$var$getUnreadCount_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getUnreadCount_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr90
});
function $d76f6d4dfc9a3307$var$toKnownErr90(e) {
    return e;
}
// src/client/types/app/bsky/notification/listNotifications.ts
var $d76f6d4dfc9a3307$var$listNotifications_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listNotifications_exports, {
    isNotification: ()=>$d76f6d4dfc9a3307$var$isNotification,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr91,
    validateNotification: ()=>$d76f6d4dfc9a3307$var$validateNotification
});
function $d76f6d4dfc9a3307$var$toKnownErr91(e) {
    return e;
}
function $d76f6d4dfc9a3307$var$isNotification(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.notification.listNotifications#notification";
}
function $d76f6d4dfc9a3307$var$validateNotification(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.notification.listNotifications#notification", v);
}
// src/client/types/app/bsky/notification/registerPush.ts
var $d76f6d4dfc9a3307$var$registerPush_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$registerPush_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr92
});
function $d76f6d4dfc9a3307$var$toKnownErr92(e) {
    return e;
}
// src/client/types/app/bsky/notification/updateSeen.ts
var $d76f6d4dfc9a3307$var$updateSeen_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$updateSeen_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr93
});
function $d76f6d4dfc9a3307$var$toKnownErr93(e) {
    return e;
}
// src/client/types/app/bsky/unspecced/applyLabels.ts
var $d76f6d4dfc9a3307$var$applyLabels_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$applyLabels_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr94
});
function $d76f6d4dfc9a3307$var$toKnownErr94(e) {
    return e;
}
// src/client/types/app/bsky/unspecced/getPopular.ts
var $d76f6d4dfc9a3307$var$getPopular_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getPopular_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr95
});
function $d76f6d4dfc9a3307$var$toKnownErr95(e) {
    return e;
}
// src/client/types/app/bsky/unspecced/getPopularFeedGenerators.ts
var $d76f6d4dfc9a3307$var$getPopularFeedGenerators_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getPopularFeedGenerators_exports, {
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr96
});
function $d76f6d4dfc9a3307$var$toKnownErr96(e) {
    return e;
}
// src/client/types/app/bsky/unspecced/getTimelineSkeleton.ts
var $d76f6d4dfc9a3307$var$getTimelineSkeleton_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$getTimelineSkeleton_exports, {
    UnknownFeedError: ()=>$d76f6d4dfc9a3307$var$UnknownFeedError3,
    toKnownErr: ()=>$d76f6d4dfc9a3307$var$toKnownErr97
});
var $d76f6d4dfc9a3307$var$UnknownFeedError3 = class extends $d76f6d4dfc9a3307$var$XRPCError {
    constructor(src2){
        super(src2.status, src2.error, src2.message, src2.headers);
    }
};
function $d76f6d4dfc9a3307$var$toKnownErr97(e) {
    if (e instanceof $d76f6d4dfc9a3307$var$XRPCError) {
        if (e.error === "UnknownFeed") return new $d76f6d4dfc9a3307$var$UnknownFeedError3(e);
    }
    return e;
}
// src/client/types/com/atproto/admin/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports, {
    ACKNOWLEDGE: ()=>$d76f6d4dfc9a3307$var$ACKNOWLEDGE,
    ESCALATE: ()=>$d76f6d4dfc9a3307$var$ESCALATE,
    FLAG: ()=>$d76f6d4dfc9a3307$var$FLAG,
    TAKEDOWN: ()=>$d76f6d4dfc9a3307$var$TAKEDOWN,
    isActionReversal: ()=>$d76f6d4dfc9a3307$var$isActionReversal,
    isActionView: ()=>$d76f6d4dfc9a3307$var$isActionView,
    isActionViewCurrent: ()=>$d76f6d4dfc9a3307$var$isActionViewCurrent,
    isActionViewDetail: ()=>$d76f6d4dfc9a3307$var$isActionViewDetail,
    isBlobView: ()=>$d76f6d4dfc9a3307$var$isBlobView,
    isImageDetails: ()=>$d76f6d4dfc9a3307$var$isImageDetails,
    isModeration: ()=>$d76f6d4dfc9a3307$var$isModeration,
    isModerationDetail: ()=>$d76f6d4dfc9a3307$var$isModerationDetail,
    isRecordView: ()=>$d76f6d4dfc9a3307$var$isRecordView,
    isRecordViewDetail: ()=>$d76f6d4dfc9a3307$var$isRecordViewDetail,
    isRecordViewNotFound: ()=>$d76f6d4dfc9a3307$var$isRecordViewNotFound,
    isRepoRef: ()=>$d76f6d4dfc9a3307$var$isRepoRef,
    isRepoView: ()=>$d76f6d4dfc9a3307$var$isRepoView,
    isRepoViewDetail: ()=>$d76f6d4dfc9a3307$var$isRepoViewDetail,
    isRepoViewNotFound: ()=>$d76f6d4dfc9a3307$var$isRepoViewNotFound,
    isReportView: ()=>$d76f6d4dfc9a3307$var$isReportView,
    isReportViewDetail: ()=>$d76f6d4dfc9a3307$var$isReportViewDetail,
    isVideoDetails: ()=>$d76f6d4dfc9a3307$var$isVideoDetails,
    validateActionReversal: ()=>$d76f6d4dfc9a3307$var$validateActionReversal,
    validateActionView: ()=>$d76f6d4dfc9a3307$var$validateActionView,
    validateActionViewCurrent: ()=>$d76f6d4dfc9a3307$var$validateActionViewCurrent,
    validateActionViewDetail: ()=>$d76f6d4dfc9a3307$var$validateActionViewDetail,
    validateBlobView: ()=>$d76f6d4dfc9a3307$var$validateBlobView,
    validateImageDetails: ()=>$d76f6d4dfc9a3307$var$validateImageDetails,
    validateModeration: ()=>$d76f6d4dfc9a3307$var$validateModeration,
    validateModerationDetail: ()=>$d76f6d4dfc9a3307$var$validateModerationDetail,
    validateRecordView: ()=>$d76f6d4dfc9a3307$var$validateRecordView,
    validateRecordViewDetail: ()=>$d76f6d4dfc9a3307$var$validateRecordViewDetail,
    validateRecordViewNotFound: ()=>$d76f6d4dfc9a3307$var$validateRecordViewNotFound,
    validateRepoRef: ()=>$d76f6d4dfc9a3307$var$validateRepoRef,
    validateRepoView: ()=>$d76f6d4dfc9a3307$var$validateRepoView,
    validateRepoViewDetail: ()=>$d76f6d4dfc9a3307$var$validateRepoViewDetail,
    validateRepoViewNotFound: ()=>$d76f6d4dfc9a3307$var$validateRepoViewNotFound,
    validateReportView: ()=>$d76f6d4dfc9a3307$var$validateReportView,
    validateReportViewDetail: ()=>$d76f6d4dfc9a3307$var$validateReportViewDetail,
    validateVideoDetails: ()=>$d76f6d4dfc9a3307$var$validateVideoDetails
});
function $d76f6d4dfc9a3307$var$isActionView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionView";
}
function $d76f6d4dfc9a3307$var$validateActionView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#actionView", v);
}
function $d76f6d4dfc9a3307$var$isActionViewDetail(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionViewDetail";
}
function $d76f6d4dfc9a3307$var$validateActionViewDetail(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#actionViewDetail", v);
}
function $d76f6d4dfc9a3307$var$isActionViewCurrent(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionViewCurrent";
}
function $d76f6d4dfc9a3307$var$validateActionViewCurrent(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#actionViewCurrent", v);
}
function $d76f6d4dfc9a3307$var$isActionReversal(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionReversal";
}
function $d76f6d4dfc9a3307$var$validateActionReversal(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#actionReversal", v);
}
var $d76f6d4dfc9a3307$var$TAKEDOWN = "com.atproto.admin.defs#takedown";
var $d76f6d4dfc9a3307$var$FLAG = "com.atproto.admin.defs#flag";
var $d76f6d4dfc9a3307$var$ACKNOWLEDGE = "com.atproto.admin.defs#acknowledge";
var $d76f6d4dfc9a3307$var$ESCALATE = "com.atproto.admin.defs#escalate";
function $d76f6d4dfc9a3307$var$isReportView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#reportView";
}
function $d76f6d4dfc9a3307$var$validateReportView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#reportView", v);
}
function $d76f6d4dfc9a3307$var$isReportViewDetail(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#reportViewDetail";
}
function $d76f6d4dfc9a3307$var$validateReportViewDetail(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#reportViewDetail", v);
}
function $d76f6d4dfc9a3307$var$isRepoView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoView";
}
function $d76f6d4dfc9a3307$var$validateRepoView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#repoView", v);
}
function $d76f6d4dfc9a3307$var$isRepoViewDetail(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoViewDetail";
}
function $d76f6d4dfc9a3307$var$validateRepoViewDetail(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#repoViewDetail", v);
}
function $d76f6d4dfc9a3307$var$isRepoViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoViewNotFound";
}
function $d76f6d4dfc9a3307$var$validateRepoViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#repoViewNotFound", v);
}
function $d76f6d4dfc9a3307$var$isRepoRef(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoRef";
}
function $d76f6d4dfc9a3307$var$validateRepoRef(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#repoRef", v);
}
function $d76f6d4dfc9a3307$var$isRecordView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordView";
}
function $d76f6d4dfc9a3307$var$validateRecordView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#recordView", v);
}
function $d76f6d4dfc9a3307$var$isRecordViewDetail(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordViewDetail";
}
function $d76f6d4dfc9a3307$var$validateRecordViewDetail(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#recordViewDetail", v);
}
function $d76f6d4dfc9a3307$var$isRecordViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordViewNotFound";
}
function $d76f6d4dfc9a3307$var$validateRecordViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#recordViewNotFound", v);
}
function $d76f6d4dfc9a3307$var$isModeration(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#moderation";
}
function $d76f6d4dfc9a3307$var$validateModeration(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#moderation", v);
}
function $d76f6d4dfc9a3307$var$isModerationDetail(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#moderationDetail";
}
function $d76f6d4dfc9a3307$var$validateModerationDetail(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#moderationDetail", v);
}
function $d76f6d4dfc9a3307$var$isBlobView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#blobView";
}
function $d76f6d4dfc9a3307$var$validateBlobView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#blobView", v);
}
function $d76f6d4dfc9a3307$var$isImageDetails(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#imageDetails";
}
function $d76f6d4dfc9a3307$var$validateImageDetails(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#imageDetails", v);
}
function $d76f6d4dfc9a3307$var$isVideoDetails(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#videoDetails";
}
function $d76f6d4dfc9a3307$var$validateVideoDetails(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.admin.defs#videoDetails", v);
}
// src/client/types/com/atproto/label/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports2 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports2, {
    isLabel: ()=>$d76f6d4dfc9a3307$var$isLabel,
    isSelfLabel: ()=>$d76f6d4dfc9a3307$var$isSelfLabel,
    isSelfLabels: ()=>$d76f6d4dfc9a3307$var$isSelfLabels,
    validateLabel: ()=>$d76f6d4dfc9a3307$var$validateLabel,
    validateSelfLabel: ()=>$d76f6d4dfc9a3307$var$validateSelfLabel,
    validateSelfLabels: ()=>$d76f6d4dfc9a3307$var$validateSelfLabels
});
function $d76f6d4dfc9a3307$var$isLabel(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#label";
}
function $d76f6d4dfc9a3307$var$validateLabel(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.label.defs#label", v);
}
function $d76f6d4dfc9a3307$var$isSelfLabels(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#selfLabels";
}
function $d76f6d4dfc9a3307$var$validateSelfLabels(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.label.defs#selfLabels", v);
}
function $d76f6d4dfc9a3307$var$isSelfLabel(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#selfLabel";
}
function $d76f6d4dfc9a3307$var$validateSelfLabel(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.label.defs#selfLabel", v);
}
// src/client/types/com/atproto/label/subscribeLabels.ts
var $d76f6d4dfc9a3307$var$subscribeLabels_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$subscribeLabels_exports, {
    isInfo: ()=>$d76f6d4dfc9a3307$var$isInfo,
    isLabels: ()=>$d76f6d4dfc9a3307$var$isLabels,
    validateInfo: ()=>$d76f6d4dfc9a3307$var$validateInfo,
    validateLabels: ()=>$d76f6d4dfc9a3307$var$validateLabels
});
function $d76f6d4dfc9a3307$var$isLabels(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#labels";
}
function $d76f6d4dfc9a3307$var$validateLabels(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.label.subscribeLabels#labels", v);
}
function $d76f6d4dfc9a3307$var$isInfo(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#info";
}
function $d76f6d4dfc9a3307$var$validateInfo(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.label.subscribeLabels#info", v);
}
// src/client/types/com/atproto/moderation/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports3 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports3, {
    REASONMISLEADING: ()=>$d76f6d4dfc9a3307$var$REASONMISLEADING,
    REASONOTHER: ()=>$d76f6d4dfc9a3307$var$REASONOTHER,
    REASONRUDE: ()=>$d76f6d4dfc9a3307$var$REASONRUDE,
    REASONSEXUAL: ()=>$d76f6d4dfc9a3307$var$REASONSEXUAL,
    REASONSPAM: ()=>$d76f6d4dfc9a3307$var$REASONSPAM,
    REASONVIOLATION: ()=>$d76f6d4dfc9a3307$var$REASONVIOLATION
});
var $d76f6d4dfc9a3307$var$REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
var $d76f6d4dfc9a3307$var$REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
var $d76f6d4dfc9a3307$var$REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
var $d76f6d4dfc9a3307$var$REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
var $d76f6d4dfc9a3307$var$REASONRUDE = "com.atproto.moderation.defs#reasonRude";
var $d76f6d4dfc9a3307$var$REASONOTHER = "com.atproto.moderation.defs#reasonOther";
// src/client/types/com/atproto/repo/strongRef.ts
var $d76f6d4dfc9a3307$var$strongRef_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$strongRef_exports, {
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain
});
function $d76f6d4dfc9a3307$var$isMain(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "com.atproto.repo.strongRef#main" || v.$type === "com.atproto.repo.strongRef");
}
function $d76f6d4dfc9a3307$var$validateMain(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.repo.strongRef#main", v);
}
// src/client/types/com/atproto/server/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports4 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports4, {
    isInviteCode: ()=>$d76f6d4dfc9a3307$var$isInviteCode,
    isInviteCodeUse: ()=>$d76f6d4dfc9a3307$var$isInviteCodeUse,
    validateInviteCode: ()=>$d76f6d4dfc9a3307$var$validateInviteCode,
    validateInviteCodeUse: ()=>$d76f6d4dfc9a3307$var$validateInviteCodeUse
});
function $d76f6d4dfc9a3307$var$isInviteCode(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.defs#inviteCode";
}
function $d76f6d4dfc9a3307$var$validateInviteCode(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.defs#inviteCode", v);
}
function $d76f6d4dfc9a3307$var$isInviteCodeUse(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.server.defs#inviteCodeUse";
}
function $d76f6d4dfc9a3307$var$validateInviteCodeUse(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.server.defs#inviteCodeUse", v);
}
// src/client/types/com/atproto/sync/subscribeRepos.ts
var $d76f6d4dfc9a3307$var$subscribeRepos_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$subscribeRepos_exports, {
    isCommit: ()=>$d76f6d4dfc9a3307$var$isCommit,
    isHandle: ()=>$d76f6d4dfc9a3307$var$isHandle,
    isInfo: ()=>$d76f6d4dfc9a3307$var$isInfo2,
    isMigrate: ()=>$d76f6d4dfc9a3307$var$isMigrate,
    isRepoOp: ()=>$d76f6d4dfc9a3307$var$isRepoOp,
    isTombstone: ()=>$d76f6d4dfc9a3307$var$isTombstone,
    validateCommit: ()=>$d76f6d4dfc9a3307$var$validateCommit,
    validateHandle: ()=>$d76f6d4dfc9a3307$var$validateHandle,
    validateInfo: ()=>$d76f6d4dfc9a3307$var$validateInfo2,
    validateMigrate: ()=>$d76f6d4dfc9a3307$var$validateMigrate,
    validateRepoOp: ()=>$d76f6d4dfc9a3307$var$validateRepoOp,
    validateTombstone: ()=>$d76f6d4dfc9a3307$var$validateTombstone
});
function $d76f6d4dfc9a3307$var$isCommit(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#commit";
}
function $d76f6d4dfc9a3307$var$validateCommit(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#commit", v);
}
function $d76f6d4dfc9a3307$var$isHandle(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#handle";
}
function $d76f6d4dfc9a3307$var$validateHandle(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#handle", v);
}
function $d76f6d4dfc9a3307$var$isMigrate(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#migrate";
}
function $d76f6d4dfc9a3307$var$validateMigrate(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#migrate", v);
}
function $d76f6d4dfc9a3307$var$isTombstone(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#tombstone";
}
function $d76f6d4dfc9a3307$var$validateTombstone(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", v);
}
function $d76f6d4dfc9a3307$var$isInfo2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#info";
}
function $d76f6d4dfc9a3307$var$validateInfo2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#info", v);
}
function $d76f6d4dfc9a3307$var$isRepoOp(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#repoOp";
}
function $d76f6d4dfc9a3307$var$validateRepoOp(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", v);
}
// src/client/types/app/bsky/actor/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports5 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports5, {
    isAdultContentPref: ()=>$d76f6d4dfc9a3307$var$isAdultContentPref,
    isContentLabelPref: ()=>$d76f6d4dfc9a3307$var$isContentLabelPref,
    isProfileView: ()=>$d76f6d4dfc9a3307$var$isProfileView,
    isProfileViewBasic: ()=>$d76f6d4dfc9a3307$var$isProfileViewBasic,
    isProfileViewDetailed: ()=>$d76f6d4dfc9a3307$var$isProfileViewDetailed,
    isSavedFeedsPref: ()=>$d76f6d4dfc9a3307$var$isSavedFeedsPref,
    isViewerState: ()=>$d76f6d4dfc9a3307$var$isViewerState,
    validateAdultContentPref: ()=>$d76f6d4dfc9a3307$var$validateAdultContentPref,
    validateContentLabelPref: ()=>$d76f6d4dfc9a3307$var$validateContentLabelPref,
    validateProfileView: ()=>$d76f6d4dfc9a3307$var$validateProfileView,
    validateProfileViewBasic: ()=>$d76f6d4dfc9a3307$var$validateProfileViewBasic,
    validateProfileViewDetailed: ()=>$d76f6d4dfc9a3307$var$validateProfileViewDetailed,
    validateSavedFeedsPref: ()=>$d76f6d4dfc9a3307$var$validateSavedFeedsPref,
    validateViewerState: ()=>$d76f6d4dfc9a3307$var$validateViewerState
});
function $d76f6d4dfc9a3307$var$isProfileViewBasic(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewBasic";
}
function $d76f6d4dfc9a3307$var$validateProfileViewBasic(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#profileViewBasic", v);
}
function $d76f6d4dfc9a3307$var$isProfileView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileView";
}
function $d76f6d4dfc9a3307$var$validateProfileView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#profileView", v);
}
function $d76f6d4dfc9a3307$var$isProfileViewDetailed(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewDetailed";
}
function $d76f6d4dfc9a3307$var$validateProfileViewDetailed(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#profileViewDetailed", v);
}
function $d76f6d4dfc9a3307$var$isViewerState(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#viewerState";
}
function $d76f6d4dfc9a3307$var$validateViewerState(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#viewerState", v);
}
function $d76f6d4dfc9a3307$var$isAdultContentPref(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#adultContentPref";
}
function $d76f6d4dfc9a3307$var$validateAdultContentPref(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#adultContentPref", v);
}
function $d76f6d4dfc9a3307$var$isContentLabelPref(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#contentLabelPref";
}
function $d76f6d4dfc9a3307$var$validateContentLabelPref(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#contentLabelPref", v);
}
function $d76f6d4dfc9a3307$var$isSavedFeedsPref(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#savedFeedsPref";
}
function $d76f6d4dfc9a3307$var$validateSavedFeedsPref(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.defs#savedFeedsPref", v);
}
// src/client/types/app/bsky/actor/profile.ts
var $d76f6d4dfc9a3307$var$profile_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$profile_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord2,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord2
});
function $d76f6d4dfc9a3307$var$isRecord2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.actor.profile#main" || v.$type === "app.bsky.actor.profile");
}
function $d76f6d4dfc9a3307$var$validateRecord2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.actor.profile#main", v);
}
// src/client/types/app/bsky/embed/external.ts
var $d76f6d4dfc9a3307$var$external_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$external_exports, {
    isExternal: ()=>$d76f6d4dfc9a3307$var$isExternal,
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain2,
    isView: ()=>$d76f6d4dfc9a3307$var$isView,
    isViewExternal: ()=>$d76f6d4dfc9a3307$var$isViewExternal,
    validateExternal: ()=>$d76f6d4dfc9a3307$var$validateExternal,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain2,
    validateView: ()=>$d76f6d4dfc9a3307$var$validateView,
    validateViewExternal: ()=>$d76f6d4dfc9a3307$var$validateViewExternal
});
function $d76f6d4dfc9a3307$var$isMain2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.embed.external#main" || v.$type === "app.bsky.embed.external");
}
function $d76f6d4dfc9a3307$var$validateMain2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.external#main", v);
}
function $d76f6d4dfc9a3307$var$isExternal(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#external";
}
function $d76f6d4dfc9a3307$var$validateExternal(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.external#external", v);
}
function $d76f6d4dfc9a3307$var$isView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#view";
}
function $d76f6d4dfc9a3307$var$validateView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.external#view", v);
}
function $d76f6d4dfc9a3307$var$isViewExternal(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#viewExternal";
}
function $d76f6d4dfc9a3307$var$validateViewExternal(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.external#viewExternal", v);
}
// src/client/types/app/bsky/embed/images.ts
var $d76f6d4dfc9a3307$var$images_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$images_exports, {
    isImage: ()=>$d76f6d4dfc9a3307$var$isImage,
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain3,
    isView: ()=>$d76f6d4dfc9a3307$var$isView2,
    isViewImage: ()=>$d76f6d4dfc9a3307$var$isViewImage,
    validateImage: ()=>$d76f6d4dfc9a3307$var$validateImage,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain3,
    validateView: ()=>$d76f6d4dfc9a3307$var$validateView2,
    validateViewImage: ()=>$d76f6d4dfc9a3307$var$validateViewImage
});
function $d76f6d4dfc9a3307$var$isMain3(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.embed.images#main" || v.$type === "app.bsky.embed.images");
}
function $d76f6d4dfc9a3307$var$validateMain3(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.images#main", v);
}
function $d76f6d4dfc9a3307$var$isImage(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#image";
}
function $d76f6d4dfc9a3307$var$validateImage(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.images#image", v);
}
function $d76f6d4dfc9a3307$var$isView2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#view";
}
function $d76f6d4dfc9a3307$var$validateView2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.images#view", v);
}
function $d76f6d4dfc9a3307$var$isViewImage(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#viewImage";
}
function $d76f6d4dfc9a3307$var$validateViewImage(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.images#viewImage", v);
}
// src/client/types/app/bsky/embed/record.ts
var $d76f6d4dfc9a3307$var$record_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$record_exports, {
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain4,
    isView: ()=>$d76f6d4dfc9a3307$var$isView3,
    isViewBlocked: ()=>$d76f6d4dfc9a3307$var$isViewBlocked,
    isViewNotFound: ()=>$d76f6d4dfc9a3307$var$isViewNotFound,
    isViewRecord: ()=>$d76f6d4dfc9a3307$var$isViewRecord,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain4,
    validateView: ()=>$d76f6d4dfc9a3307$var$validateView3,
    validateViewBlocked: ()=>$d76f6d4dfc9a3307$var$validateViewBlocked,
    validateViewNotFound: ()=>$d76f6d4dfc9a3307$var$validateViewNotFound,
    validateViewRecord: ()=>$d76f6d4dfc9a3307$var$validateViewRecord
});
function $d76f6d4dfc9a3307$var$isMain4(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.embed.record#main" || v.$type === "app.bsky.embed.record");
}
function $d76f6d4dfc9a3307$var$validateMain4(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.record#main", v);
}
function $d76f6d4dfc9a3307$var$isView3(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#view";
}
function $d76f6d4dfc9a3307$var$validateView3(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.record#view", v);
}
function $d76f6d4dfc9a3307$var$isViewRecord(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewRecord";
}
function $d76f6d4dfc9a3307$var$validateViewRecord(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.record#viewRecord", v);
}
function $d76f6d4dfc9a3307$var$isViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewNotFound";
}
function $d76f6d4dfc9a3307$var$validateViewNotFound(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.record#viewNotFound", v);
}
function $d76f6d4dfc9a3307$var$isViewBlocked(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewBlocked";
}
function $d76f6d4dfc9a3307$var$validateViewBlocked(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.record#viewBlocked", v);
}
// src/client/types/app/bsky/embed/recordWithMedia.ts
var $d76f6d4dfc9a3307$var$recordWithMedia_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$recordWithMedia_exports, {
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain5,
    isView: ()=>$d76f6d4dfc9a3307$var$isView4,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain5,
    validateView: ()=>$d76f6d4dfc9a3307$var$validateView4
});
function $d76f6d4dfc9a3307$var$isMain5(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.embed.recordWithMedia#main" || v.$type === "app.bsky.embed.recordWithMedia");
}
function $d76f6d4dfc9a3307$var$validateMain5(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.recordWithMedia#main", v);
}
function $d76f6d4dfc9a3307$var$isView4(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.embed.recordWithMedia#view";
}
function $d76f6d4dfc9a3307$var$validateView4(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.embed.recordWithMedia#view", v);
}
// src/client/types/app/bsky/feed/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports6 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports6, {
    isBlockedAuthor: ()=>$d76f6d4dfc9a3307$var$isBlockedAuthor,
    isBlockedPost: ()=>$d76f6d4dfc9a3307$var$isBlockedPost,
    isFeedViewPost: ()=>$d76f6d4dfc9a3307$var$isFeedViewPost,
    isGeneratorView: ()=>$d76f6d4dfc9a3307$var$isGeneratorView,
    isGeneratorViewerState: ()=>$d76f6d4dfc9a3307$var$isGeneratorViewerState,
    isNotFoundPost: ()=>$d76f6d4dfc9a3307$var$isNotFoundPost,
    isPostView: ()=>$d76f6d4dfc9a3307$var$isPostView,
    isReasonRepost: ()=>$d76f6d4dfc9a3307$var$isReasonRepost,
    isReplyRef: ()=>$d76f6d4dfc9a3307$var$isReplyRef,
    isSkeletonFeedPost: ()=>$d76f6d4dfc9a3307$var$isSkeletonFeedPost,
    isSkeletonReasonRepost: ()=>$d76f6d4dfc9a3307$var$isSkeletonReasonRepost,
    isThreadViewPost: ()=>$d76f6d4dfc9a3307$var$isThreadViewPost,
    isViewerState: ()=>$d76f6d4dfc9a3307$var$isViewerState2,
    validateBlockedAuthor: ()=>$d76f6d4dfc9a3307$var$validateBlockedAuthor,
    validateBlockedPost: ()=>$d76f6d4dfc9a3307$var$validateBlockedPost,
    validateFeedViewPost: ()=>$d76f6d4dfc9a3307$var$validateFeedViewPost,
    validateGeneratorView: ()=>$d76f6d4dfc9a3307$var$validateGeneratorView,
    validateGeneratorViewerState: ()=>$d76f6d4dfc9a3307$var$validateGeneratorViewerState,
    validateNotFoundPost: ()=>$d76f6d4dfc9a3307$var$validateNotFoundPost,
    validatePostView: ()=>$d76f6d4dfc9a3307$var$validatePostView,
    validateReasonRepost: ()=>$d76f6d4dfc9a3307$var$validateReasonRepost,
    validateReplyRef: ()=>$d76f6d4dfc9a3307$var$validateReplyRef,
    validateSkeletonFeedPost: ()=>$d76f6d4dfc9a3307$var$validateSkeletonFeedPost,
    validateSkeletonReasonRepost: ()=>$d76f6d4dfc9a3307$var$validateSkeletonReasonRepost,
    validateThreadViewPost: ()=>$d76f6d4dfc9a3307$var$validateThreadViewPost,
    validateViewerState: ()=>$d76f6d4dfc9a3307$var$validateViewerState2
});
function $d76f6d4dfc9a3307$var$isPostView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#postView";
}
function $d76f6d4dfc9a3307$var$validatePostView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#postView", v);
}
function $d76f6d4dfc9a3307$var$isViewerState2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#viewerState";
}
function $d76f6d4dfc9a3307$var$validateViewerState2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#viewerState", v);
}
function $d76f6d4dfc9a3307$var$isFeedViewPost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#feedViewPost";
}
function $d76f6d4dfc9a3307$var$validateFeedViewPost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#feedViewPost", v);
}
function $d76f6d4dfc9a3307$var$isReplyRef(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#replyRef";
}
function $d76f6d4dfc9a3307$var$validateReplyRef(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#replyRef", v);
}
function $d76f6d4dfc9a3307$var$isReasonRepost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#reasonRepost";
}
function $d76f6d4dfc9a3307$var$validateReasonRepost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#reasonRepost", v);
}
function $d76f6d4dfc9a3307$var$isThreadViewPost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#threadViewPost";
}
function $d76f6d4dfc9a3307$var$validateThreadViewPost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#threadViewPost", v);
}
function $d76f6d4dfc9a3307$var$isNotFoundPost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#notFoundPost";
}
function $d76f6d4dfc9a3307$var$validateNotFoundPost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#notFoundPost", v);
}
function $d76f6d4dfc9a3307$var$isBlockedPost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#blockedPost";
}
function $d76f6d4dfc9a3307$var$validateBlockedPost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#blockedPost", v);
}
function $d76f6d4dfc9a3307$var$isBlockedAuthor(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#blockedAuthor";
}
function $d76f6d4dfc9a3307$var$validateBlockedAuthor(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#blockedAuthor", v);
}
function $d76f6d4dfc9a3307$var$isGeneratorView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#generatorView";
}
function $d76f6d4dfc9a3307$var$validateGeneratorView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#generatorView", v);
}
function $d76f6d4dfc9a3307$var$isGeneratorViewerState(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#generatorViewerState";
}
function $d76f6d4dfc9a3307$var$validateGeneratorViewerState(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#generatorViewerState", v);
}
function $d76f6d4dfc9a3307$var$isSkeletonFeedPost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonFeedPost";
}
function $d76f6d4dfc9a3307$var$validateSkeletonFeedPost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", v);
}
function $d76f6d4dfc9a3307$var$isSkeletonReasonRepost(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonReasonRepost";
}
function $d76f6d4dfc9a3307$var$validateSkeletonReasonRepost(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", v);
}
// src/client/types/app/bsky/feed/generator.ts
var $d76f6d4dfc9a3307$var$generator_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$generator_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord3,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord3
});
function $d76f6d4dfc9a3307$var$isRecord3(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.feed.generator#main" || v.$type === "app.bsky.feed.generator");
}
function $d76f6d4dfc9a3307$var$validateRecord3(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.generator#main", v);
}
// src/client/types/app/bsky/feed/like.ts
var $d76f6d4dfc9a3307$var$like_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$like_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord4,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord4
});
function $d76f6d4dfc9a3307$var$isRecord4(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.feed.like#main" || v.$type === "app.bsky.feed.like");
}
function $d76f6d4dfc9a3307$var$validateRecord4(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.like#main", v);
}
// src/client/types/app/bsky/feed/post.ts
var $d76f6d4dfc9a3307$var$post_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$post_exports, {
    isEntity: ()=>$d76f6d4dfc9a3307$var$isEntity,
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord5,
    isReplyRef: ()=>$d76f6d4dfc9a3307$var$isReplyRef2,
    isTextSlice: ()=>$d76f6d4dfc9a3307$var$isTextSlice,
    validateEntity: ()=>$d76f6d4dfc9a3307$var$validateEntity,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord5,
    validateReplyRef: ()=>$d76f6d4dfc9a3307$var$validateReplyRef2,
    validateTextSlice: ()=>$d76f6d4dfc9a3307$var$validateTextSlice
});
function $d76f6d4dfc9a3307$var$isRecord5(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.feed.post#main" || v.$type === "app.bsky.feed.post");
}
function $d76f6d4dfc9a3307$var$validateRecord5(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.post#main", v);
}
function $d76f6d4dfc9a3307$var$isReplyRef2(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#replyRef";
}
function $d76f6d4dfc9a3307$var$validateReplyRef2(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.post#replyRef", v);
}
function $d76f6d4dfc9a3307$var$isEntity(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#entity";
}
function $d76f6d4dfc9a3307$var$validateEntity(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.post#entity", v);
}
function $d76f6d4dfc9a3307$var$isTextSlice(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#textSlice";
}
function $d76f6d4dfc9a3307$var$validateTextSlice(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.post#textSlice", v);
}
// src/client/types/app/bsky/feed/repost.ts
var $d76f6d4dfc9a3307$var$repost_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$repost_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord6,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord6
});
function $d76f6d4dfc9a3307$var$isRecord6(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.feed.repost#main" || v.$type === "app.bsky.feed.repost");
}
function $d76f6d4dfc9a3307$var$validateRecord6(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.feed.repost#main", v);
}
// src/client/types/app/bsky/graph/block.ts
var $d76f6d4dfc9a3307$var$block_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$block_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord7,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord7
});
function $d76f6d4dfc9a3307$var$isRecord7(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.graph.block#main" || v.$type === "app.bsky.graph.block");
}
function $d76f6d4dfc9a3307$var$validateRecord7(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.block#main", v);
}
// src/client/types/app/bsky/graph/defs.ts
var $d76f6d4dfc9a3307$var$defs_exports7 = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$defs_exports7, {
    MODLIST: ()=>$d76f6d4dfc9a3307$var$MODLIST,
    isListItemView: ()=>$d76f6d4dfc9a3307$var$isListItemView,
    isListView: ()=>$d76f6d4dfc9a3307$var$isListView,
    isListViewBasic: ()=>$d76f6d4dfc9a3307$var$isListViewBasic,
    isListViewerState: ()=>$d76f6d4dfc9a3307$var$isListViewerState,
    validateListItemView: ()=>$d76f6d4dfc9a3307$var$validateListItemView,
    validateListView: ()=>$d76f6d4dfc9a3307$var$validateListView,
    validateListViewBasic: ()=>$d76f6d4dfc9a3307$var$validateListViewBasic,
    validateListViewerState: ()=>$d76f6d4dfc9a3307$var$validateListViewerState
});
function $d76f6d4dfc9a3307$var$isListViewBasic(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listViewBasic";
}
function $d76f6d4dfc9a3307$var$validateListViewBasic(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.defs#listViewBasic", v);
}
function $d76f6d4dfc9a3307$var$isListView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listView";
}
function $d76f6d4dfc9a3307$var$validateListView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.defs#listView", v);
}
function $d76f6d4dfc9a3307$var$isListItemView(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listItemView";
}
function $d76f6d4dfc9a3307$var$validateListItemView(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.defs#listItemView", v);
}
var $d76f6d4dfc9a3307$var$MODLIST = "app.bsky.graph.defs#modlist";
function $d76f6d4dfc9a3307$var$isListViewerState(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listViewerState";
}
function $d76f6d4dfc9a3307$var$validateListViewerState(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.defs#listViewerState", v);
}
// src/client/types/app/bsky/graph/follow.ts
var $d76f6d4dfc9a3307$var$follow_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$follow_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord8,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord8
});
function $d76f6d4dfc9a3307$var$isRecord8(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.graph.follow#main" || v.$type === "app.bsky.graph.follow");
}
function $d76f6d4dfc9a3307$var$validateRecord8(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.follow#main", v);
}
// src/client/types/app/bsky/graph/list.ts
var $d76f6d4dfc9a3307$var$list_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$list_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord9,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord9
});
function $d76f6d4dfc9a3307$var$isRecord9(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.graph.list#main" || v.$type === "app.bsky.graph.list");
}
function $d76f6d4dfc9a3307$var$validateRecord9(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.list#main", v);
}
// src/client/types/app/bsky/graph/listitem.ts
var $d76f6d4dfc9a3307$var$listitem_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$listitem_exports, {
    isRecord: ()=>$d76f6d4dfc9a3307$var$isRecord10,
    validateRecord: ()=>$d76f6d4dfc9a3307$var$validateRecord10
});
function $d76f6d4dfc9a3307$var$isRecord10(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.graph.listitem#main" || v.$type === "app.bsky.graph.listitem");
}
function $d76f6d4dfc9a3307$var$validateRecord10(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.graph.listitem#main", v);
}
// src/client/types/app/bsky/richtext/facet.ts
var $d76f6d4dfc9a3307$var$facet_exports = {};
$d76f6d4dfc9a3307$var$__export($d76f6d4dfc9a3307$var$facet_exports, {
    isByteSlice: ()=>$d76f6d4dfc9a3307$var$isByteSlice,
    isLink: ()=>$d76f6d4dfc9a3307$var$isLink,
    isMain: ()=>$d76f6d4dfc9a3307$var$isMain6,
    isMention: ()=>$d76f6d4dfc9a3307$var$isMention,
    validateByteSlice: ()=>$d76f6d4dfc9a3307$var$validateByteSlice,
    validateLink: ()=>$d76f6d4dfc9a3307$var$validateLink,
    validateMain: ()=>$d76f6d4dfc9a3307$var$validateMain6,
    validateMention: ()=>$d76f6d4dfc9a3307$var$validateMention
});
function $d76f6d4dfc9a3307$var$isMain6(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && (v.$type === "app.bsky.richtext.facet#main" || v.$type === "app.bsky.richtext.facet");
}
function $d76f6d4dfc9a3307$var$validateMain6(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.richtext.facet#main", v);
}
function $d76f6d4dfc9a3307$var$isMention(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#mention";
}
function $d76f6d4dfc9a3307$var$validateMention(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.richtext.facet#mention", v);
}
function $d76f6d4dfc9a3307$var$isLink(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#link";
}
function $d76f6d4dfc9a3307$var$validateLink(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.richtext.facet#link", v);
}
function $d76f6d4dfc9a3307$var$isByteSlice(v) {
    return $d76f6d4dfc9a3307$var$isObj2(v) && $d76f6d4dfc9a3307$var$hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#byteSlice";
}
function $d76f6d4dfc9a3307$var$validateByteSlice(v) {
    return $d76f6d4dfc9a3307$var$lexicons.validate("app.bsky.richtext.facet#byteSlice", v);
}
// src/client/index.ts
var $d76f6d4dfc9a3307$var$COM_ATPROTO_ADMIN = {
    DefsTakedown: "com.atproto.admin.defs#takedown",
    DefsFlag: "com.atproto.admin.defs#flag",
    DefsAcknowledge: "com.atproto.admin.defs#acknowledge",
    DefsEscalate: "com.atproto.admin.defs#escalate"
};
var $d76f6d4dfc9a3307$var$COM_ATPROTO_MODERATION = {
    DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
    DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
    DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
    DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
    DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
    DefsReasonOther: "com.atproto.moderation.defs#reasonOther"
};
var $d76f6d4dfc9a3307$var$APP_BSKY_GRAPH = {
    DefsModlist: "app.bsky.graph.defs#modlist"
};
var $d76f6d4dfc9a3307$var$AtpBaseClient = class {
    constructor(){
        this.xrpc = new $d76f6d4dfc9a3307$var$Client();
        this.xrpc.addLexicons($d76f6d4dfc9a3307$var$schemas);
    }
    service(serviceUri) {
        return new $d76f6d4dfc9a3307$var$AtpServiceClient(this, this.xrpc.service(serviceUri));
    }
};
var $d76f6d4dfc9a3307$var$AtpServiceClient = class {
    constructor(baseClient, xrpcService){
        this._baseClient = baseClient;
        this.xrpc = xrpcService;
        this.com = new $d76f6d4dfc9a3307$var$ComNS(this);
        this.app = new $d76f6d4dfc9a3307$var$AppNS(this);
    }
    setHeader(key, value) {
        this.xrpc.setHeader(key, value);
    }
};
var $d76f6d4dfc9a3307$var$ComNS = class {
    constructor(service){
        this._service = service;
        this.atproto = new $d76f6d4dfc9a3307$var$AtprotoNS(service);
    }
};
var $d76f6d4dfc9a3307$var$AtprotoNS = class {
    constructor(service){
        this._service = service;
        this.admin = new $d76f6d4dfc9a3307$var$AdminNS(service);
        this.identity = new $d76f6d4dfc9a3307$var$IdentityNS(service);
        this.label = new $d76f6d4dfc9a3307$var$LabelNS(service);
        this.moderation = new $d76f6d4dfc9a3307$var$ModerationNS(service);
        this.repo = new $d76f6d4dfc9a3307$var$RepoNS(service);
        this.server = new $d76f6d4dfc9a3307$var$ServerNS(service);
        this.sync = new $d76f6d4dfc9a3307$var$SyncNS(service);
    }
};
var $d76f6d4dfc9a3307$var$AdminNS = class {
    constructor(service){
        this._service = service;
    }
    disableAccountInvites(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.disableAccountInvites", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr(e);
        });
    }
    disableInviteCodes(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.disableInviteCodes", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr2(e);
        });
    }
    enableAccountInvites(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.enableAccountInvites", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr3(e);
        });
    }
    getInviteCodes(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getInviteCodes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr4(e);
        });
    }
    getModerationAction(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getModerationAction", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr5(e);
        });
    }
    getModerationActions(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getModerationActions", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr6(e);
        });
    }
    getModerationReport(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getModerationReport", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr7(e);
        });
    }
    getModerationReports(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getModerationReports", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr8(e);
        });
    }
    getRecord(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getRecord", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr9(e);
        });
    }
    getRepo(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.getRepo", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr10(e);
        });
    }
    rebaseRepo(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.rebaseRepo", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr11(e);
        });
    }
    resolveModerationReports(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.resolveModerationReports", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr12(e);
        });
    }
    reverseModerationAction(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.reverseModerationAction", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr13(e);
        });
    }
    searchRepos(params2, opts) {
        return this._service.xrpc.call("com.atproto.admin.searchRepos", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr14(e);
        });
    }
    sendEmail(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.sendEmail", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr15(e);
        });
    }
    takeModerationAction(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.takeModerationAction", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr16(e);
        });
    }
    updateAccountEmail(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.updateAccountEmail", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr17(e);
        });
    }
    updateAccountHandle(data, opts) {
        return this._service.xrpc.call("com.atproto.admin.updateAccountHandle", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr18(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$IdentityNS = class {
    constructor(service){
        this._service = service;
    }
    resolveHandle(params2, opts) {
        return this._service.xrpc.call("com.atproto.identity.resolveHandle", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr19(e);
        });
    }
    updateHandle(data, opts) {
        return this._service.xrpc.call("com.atproto.identity.updateHandle", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr20(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$LabelNS = class {
    constructor(service){
        this._service = service;
    }
    queryLabels(params2, opts) {
        return this._service.xrpc.call("com.atproto.label.queryLabels", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr21(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$ModerationNS = class {
    constructor(service){
        this._service = service;
    }
    createReport(data, opts) {
        return this._service.xrpc.call("com.atproto.moderation.createReport", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr22(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$RepoNS = class {
    constructor(service){
        this._service = service;
    }
    applyWrites(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.applyWrites", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr23(e);
        });
    }
    createRecord(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.createRecord", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr24(e);
        });
    }
    deleteRecord(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.deleteRecord", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr25(e);
        });
    }
    describeRepo(params2, opts) {
        return this._service.xrpc.call("com.atproto.repo.describeRepo", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr26(e);
        });
    }
    getRecord(params2, opts) {
        return this._service.xrpc.call("com.atproto.repo.getRecord", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr27(e);
        });
    }
    listRecords(params2, opts) {
        return this._service.xrpc.call("com.atproto.repo.listRecords", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr28(e);
        });
    }
    putRecord(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.putRecord", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr29(e);
        });
    }
    rebaseRepo(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.rebaseRepo", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr30(e);
        });
    }
    uploadBlob(data, opts) {
        return this._service.xrpc.call("com.atproto.repo.uploadBlob", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr31(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$ServerNS = class {
    constructor(service){
        this._service = service;
    }
    createAccount(data, opts) {
        return this._service.xrpc.call("com.atproto.server.createAccount", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr32(e);
        });
    }
    createAppPassword(data, opts) {
        return this._service.xrpc.call("com.atproto.server.createAppPassword", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr33(e);
        });
    }
    createInviteCode(data, opts) {
        return this._service.xrpc.call("com.atproto.server.createInviteCode", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr34(e);
        });
    }
    createInviteCodes(data, opts) {
        return this._service.xrpc.call("com.atproto.server.createInviteCodes", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr35(e);
        });
    }
    createSession(data, opts) {
        return this._service.xrpc.call("com.atproto.server.createSession", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr36(e);
        });
    }
    deleteAccount(data, opts) {
        return this._service.xrpc.call("com.atproto.server.deleteAccount", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr37(e);
        });
    }
    deleteSession(data, opts) {
        return this._service.xrpc.call("com.atproto.server.deleteSession", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr38(e);
        });
    }
    describeServer(params2, opts) {
        return this._service.xrpc.call("com.atproto.server.describeServer", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr39(e);
        });
    }
    getAccountInviteCodes(params2, opts) {
        return this._service.xrpc.call("com.atproto.server.getAccountInviteCodes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr40(e);
        });
    }
    getSession(params2, opts) {
        return this._service.xrpc.call("com.atproto.server.getSession", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr41(e);
        });
    }
    listAppPasswords(params2, opts) {
        return this._service.xrpc.call("com.atproto.server.listAppPasswords", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr42(e);
        });
    }
    refreshSession(data, opts) {
        return this._service.xrpc.call("com.atproto.server.refreshSession", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr43(e);
        });
    }
    requestAccountDelete(data, opts) {
        return this._service.xrpc.call("com.atproto.server.requestAccountDelete", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr44(e);
        });
    }
    requestPasswordReset(data, opts) {
        return this._service.xrpc.call("com.atproto.server.requestPasswordReset", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr45(e);
        });
    }
    resetPassword(data, opts) {
        return this._service.xrpc.call("com.atproto.server.resetPassword", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr46(e);
        });
    }
    revokeAppPassword(data, opts) {
        return this._service.xrpc.call("com.atproto.server.revokeAppPassword", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr47(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$SyncNS = class {
    constructor(service){
        this._service = service;
    }
    getBlob(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getBlob", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr48(e);
        });
    }
    getBlocks(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getBlocks", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr49(e);
        });
    }
    getCheckout(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getCheckout", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr50(e);
        });
    }
    getCommitPath(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getCommitPath", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr51(e);
        });
    }
    getHead(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getHead", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr52(e);
        });
    }
    getRecord(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getRecord", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr53(e);
        });
    }
    getRepo(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.getRepo", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr54(e);
        });
    }
    listBlobs(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.listBlobs", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr55(e);
        });
    }
    listRepos(params2, opts) {
        return this._service.xrpc.call("com.atproto.sync.listRepos", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr56(e);
        });
    }
    notifyOfUpdate(data, opts) {
        return this._service.xrpc.call("com.atproto.sync.notifyOfUpdate", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr57(e);
        });
    }
    requestCrawl(data, opts) {
        return this._service.xrpc.call("com.atproto.sync.requestCrawl", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr58(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$AppNS = class {
    constructor(service){
        this._service = service;
        this.bsky = new $d76f6d4dfc9a3307$var$BskyNS(service);
    }
};
var $d76f6d4dfc9a3307$var$BskyNS = class {
    constructor(service){
        this._service = service;
        this.actor = new $d76f6d4dfc9a3307$var$ActorNS(service);
        this.embed = new $d76f6d4dfc9a3307$var$EmbedNS(service);
        this.feed = new $d76f6d4dfc9a3307$var$FeedNS(service);
        this.graph = new $d76f6d4dfc9a3307$var$GraphNS(service);
        this.notification = new $d76f6d4dfc9a3307$var$NotificationNS(service);
        this.richtext = new $d76f6d4dfc9a3307$var$RichtextNS(service);
        this.unspecced = new $d76f6d4dfc9a3307$var$UnspeccedNS(service);
    }
};
var $d76f6d4dfc9a3307$var$ActorNS = class {
    constructor(service){
        this._service = service;
        this.profile = new $d76f6d4dfc9a3307$var$ProfileRecord(service);
    }
    getPreferences(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.getPreferences", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr59(e);
        });
    }
    getProfile(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.getProfile", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr60(e);
        });
    }
    getProfiles(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.getProfiles", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr61(e);
        });
    }
    getSuggestions(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.getSuggestions", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr62(e);
        });
    }
    putPreferences(data, opts) {
        return this._service.xrpc.call("app.bsky.actor.putPreferences", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr63(e);
        });
    }
    searchActors(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.searchActors", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr64(e);
        });
    }
    searchActorsTypeahead(params2, opts) {
        return this._service.xrpc.call("app.bsky.actor.searchActorsTypeahead", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr65(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$ProfileRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.actor.profile",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.actor.profile",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.actor.profile";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.actor.profile",
            rkey: "self",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.actor.profile",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$EmbedNS = class {
    constructor(service){
        this._service = service;
    }
};
var $d76f6d4dfc9a3307$var$FeedNS = class {
    constructor(service){
        this._service = service;
        this.generator = new $d76f6d4dfc9a3307$var$GeneratorRecord(service);
        this.like = new $d76f6d4dfc9a3307$var$LikeRecord(service);
        this.post = new $d76f6d4dfc9a3307$var$PostRecord(service);
        this.repost = new $d76f6d4dfc9a3307$var$RepostRecord(service);
    }
    describeFeedGenerator(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.describeFeedGenerator", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr66(e);
        });
    }
    getActorFeeds(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getActorFeeds", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr67(e);
        });
    }
    getActorLikes(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getActorLikes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr68(e);
        });
    }
    getAuthorFeed(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getAuthorFeed", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr69(e);
        });
    }
    getFeed(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getFeed", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr70(e);
        });
    }
    getFeedGenerator(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getFeedGenerator", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr71(e);
        });
    }
    getFeedGenerators(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getFeedGenerators", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr72(e);
        });
    }
    getFeedSkeleton(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getFeedSkeleton", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr73(e);
        });
    }
    getLikes(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getLikes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr74(e);
        });
    }
    getPostThread(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getPostThread", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr75(e);
        });
    }
    getPosts(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getPosts", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr76(e);
        });
    }
    getRepostedBy(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getRepostedBy", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr77(e);
        });
    }
    getTimeline(params2, opts) {
        return this._service.xrpc.call("app.bsky.feed.getTimeline", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr78(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$GeneratorRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.generator",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.generator",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.feed.generator";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.feed.generator",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.feed.generator",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$LikeRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.like",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.like",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.feed.like";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.feed.like",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.feed.like",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$PostRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.post",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.post",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.feed.post";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.feed.post",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.feed.post",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$RepostRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.repost",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.repost",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.feed.repost";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.feed.repost",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.feed.repost",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$GraphNS = class {
    constructor(service){
        this._service = service;
        this.block = new $d76f6d4dfc9a3307$var$BlockRecord(service);
        this.follow = new $d76f6d4dfc9a3307$var$FollowRecord(service);
        this.list = new $d76f6d4dfc9a3307$var$ListRecord(service);
        this.listitem = new $d76f6d4dfc9a3307$var$ListitemRecord(service);
    }
    getBlocks(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getBlocks", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr79(e);
        });
    }
    getFollowers(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getFollowers", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr80(e);
        });
    }
    getFollows(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getFollows", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr81(e);
        });
    }
    getList(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getList", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr82(e);
        });
    }
    getListMutes(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getListMutes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr83(e);
        });
    }
    getLists(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getLists", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr84(e);
        });
    }
    getMutes(params2, opts) {
        return this._service.xrpc.call("app.bsky.graph.getMutes", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr85(e);
        });
    }
    muteActor(data, opts) {
        return this._service.xrpc.call("app.bsky.graph.muteActor", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr86(e);
        });
    }
    muteActorList(data, opts) {
        return this._service.xrpc.call("app.bsky.graph.muteActorList", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr87(e);
        });
    }
    unmuteActor(data, opts) {
        return this._service.xrpc.call("app.bsky.graph.unmuteActor", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr88(e);
        });
    }
    unmuteActorList(data, opts) {
        return this._service.xrpc.call("app.bsky.graph.unmuteActorList", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr89(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$BlockRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.block",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.block",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.graph.block";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.graph.block",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.graph.block",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$FollowRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.follow",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.follow",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.graph.follow";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.graph.follow",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.graph.follow",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$ListRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.list",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.list",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.graph.list";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.graph.list",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.graph.list",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$ListitemRecord = class {
    constructor(service){
        this._service = service;
    }
    async list(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.listitem",
            ...params2
        });
        return res.data;
    }
    async get(params2) {
        const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.listitem",
            ...params2
        });
        return res.data;
    }
    async create(params2, record, headers) {
        record.$type = "app.bsky.graph.listitem";
        const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, {
            collection: "app.bsky.graph.listitem",
            ...params2,
            record: record
        }, {
            encoding: "application/json",
            headers: headers
        });
        return res.data;
    }
    async delete(params2, headers) {
        await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, {
            collection: "app.bsky.graph.listitem",
            ...params2
        }, {
            headers: headers
        });
    }
};
var $d76f6d4dfc9a3307$var$NotificationNS = class {
    constructor(service){
        this._service = service;
    }
    getUnreadCount(params2, opts) {
        return this._service.xrpc.call("app.bsky.notification.getUnreadCount", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr90(e);
        });
    }
    listNotifications(params2, opts) {
        return this._service.xrpc.call("app.bsky.notification.listNotifications", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr91(e);
        });
    }
    registerPush(data, opts) {
        return this._service.xrpc.call("app.bsky.notification.registerPush", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr92(e);
        });
    }
    updateSeen(data, opts) {
        return this._service.xrpc.call("app.bsky.notification.updateSeen", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr93(e);
        });
    }
};
var $d76f6d4dfc9a3307$var$RichtextNS = class {
    constructor(service){
        this._service = service;
    }
};
var $d76f6d4dfc9a3307$var$UnspeccedNS = class {
    constructor(service){
        this._service = service;
    }
    applyLabels(data, opts) {
        return this._service.xrpc.call("app.bsky.unspecced.applyLabels", opts?.qp, data, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr94(e);
        });
    }
    getPopular(params2, opts) {
        return this._service.xrpc.call("app.bsky.unspecced.getPopular", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr95(e);
        });
    }
    getPopularFeedGenerators(params2, opts) {
        return this._service.xrpc.call("app.bsky.unspecced.getPopularFeedGenerators", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr96(e);
        });
    }
    getTimelineSkeleton(params2, opts) {
        return this._service.xrpc.call("app.bsky.unspecced.getTimelineSkeleton", params2, void 0, opts).catch((e)=>{
            throw $d76f6d4dfc9a3307$var$toKnownErr97(e);
        });
    }
};
// src/agent.ts
var $d76f6d4dfc9a3307$var$REFRESH_SESSION = "com.atproto.server.refreshSession";
var $d76f6d4dfc9a3307$var$_AtpAgent = class {
    constructor(opts){
        this.uploadBlob = (data, opts)=>this.api.com.atproto.repo.uploadBlob(data, opts);
        this.resolveHandle = (params2, opts)=>this.api.com.atproto.identity.resolveHandle(params2, opts);
        this.updateHandle = (data, opts)=>this.api.com.atproto.identity.updateHandle(data, opts);
        this.createModerationReport = (data, opts)=>this.api.com.atproto.moderation.createReport(data, opts);
        this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);
        this._persistSession = opts.persistSession;
        this._baseClient = new $d76f6d4dfc9a3307$var$AtpBaseClient();
        this._baseClient.xrpc.fetch = this._fetch.bind(this);
        this.api = this._baseClient.service(opts.service);
    }
    get com() {
        return this.api.com;
    }
    static configure(opts) {
        $d76f6d4dfc9a3307$var$_AtpAgent.fetch = opts.fetch;
    }
    get hasSession() {
        return !!this.session;
    }
    setPersistSessionHandler(handler) {
        this._persistSession = handler;
    }
    async createAccount(opts) {
        try {
            const res = await this.api.com.atproto.server.createAccount({
                handle: opts.handle,
                password: opts.password,
                email: opts.email,
                inviteCode: opts.inviteCode
            });
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: opts.email
            };
            return res;
        } catch (e) {
            this.session = void 0;
            throw e;
        } finally{
            if (this.session) this._persistSession?.("create", this.session);
            else this._persistSession?.("create-failed", void 0);
        }
    }
    async login(opts) {
        try {
            const res = await this.api.com.atproto.server.createSession({
                identifier: opts.identifier,
                password: opts.password
            });
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: res.data.email
            };
            return res;
        } catch (e) {
            this.session = void 0;
            throw e;
        } finally{
            if (this.session) this._persistSession?.("create", this.session);
            else this._persistSession?.("create-failed", void 0);
        }
    }
    async resumeSession(session) {
        try {
            this.session = session;
            const res = await this.api.com.atproto.server.getSession();
            if (!res.success || res.data.did !== this.session.did) throw new Error("Invalid session");
            this.session.email = res.data.email;
            this.session.handle = res.data.handle;
            return res;
        } catch (e) {
            this.session = void 0;
            throw e;
        } finally{
            if (this.session) this._persistSession?.("create", this.session);
            else this._persistSession?.("create-failed", void 0);
        }
    }
    _addAuthHeader(reqHeaders) {
        if (!reqHeaders.authorization && this.session?.accessJwt) return {
            ...reqHeaders,
            authorization: `Bearer ${this.session.accessJwt}`
        };
        return reqHeaders;
    }
    async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
        if (!$d76f6d4dfc9a3307$var$_AtpAgent.fetch) throw new Error("AtpAgent fetch() method not configured");
        await this._refreshSessionPromise;
        let res = await $d76f6d4dfc9a3307$var$_AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);
        if ($d76f6d4dfc9a3307$var$isErrorResponse(res, [
            "ExpiredToken"
        ]) && this.session?.refreshJwt) {
            await this._refreshSession();
            res = await $d76f6d4dfc9a3307$var$_AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);
        }
        return res;
    }
    async _refreshSession() {
        if (this._refreshSessionPromise) return this._refreshSessionPromise;
        this._refreshSessionPromise = this._refreshSessionInner();
        try {
            await this._refreshSessionPromise;
        } finally{
            this._refreshSessionPromise = void 0;
        }
    }
    async _refreshSessionInner() {
        if (!$d76f6d4dfc9a3307$var$_AtpAgent.fetch) throw new Error("AtpAgent fetch() method not configured");
        if (!this.session?.refreshJwt) return;
        const url = new URL(this.service.origin);
        url.pathname = `/xrpc/${$d76f6d4dfc9a3307$var$REFRESH_SESSION}`;
        const res = await $d76f6d4dfc9a3307$var$_AtpAgent.fetch(url.toString(), "POST", {
            authorization: `Bearer ${this.session.refreshJwt}`
        }, void 0);
        if ($d76f6d4dfc9a3307$var$isErrorResponse(res, [
            "ExpiredToken",
            "InvalidToken"
        ])) {
            this.session = void 0;
            this._persistSession?.("expired", void 0);
        } else if ($d76f6d4dfc9a3307$var$isNewSessionObject(this._baseClient, res.body)) {
            this.session = {
                accessJwt: res.body.accessJwt,
                refreshJwt: res.body.refreshJwt,
                handle: res.body.handle,
                did: res.body.did
            };
            this._persistSession?.("update", this.session);
        }
    }
};
var $d76f6d4dfc9a3307$var$AtpAgent = $d76f6d4dfc9a3307$var$_AtpAgent;
$d76f6d4dfc9a3307$var$AtpAgent.fetch = $d76f6d4dfc9a3307$var$defaultFetchHandler;
function $d76f6d4dfc9a3307$var$isErrorObject(v) {
    return $d76f6d4dfc9a3307$var$errorResponseBody.safeParse(v).success;
}
function $d76f6d4dfc9a3307$var$isErrorResponse(res, errorNames) {
    if (res.status !== 400) return false;
    if (!$d76f6d4dfc9a3307$var$isErrorObject(res.body)) return false;
    return typeof res.body.error === "string" && errorNames.includes(res.body.error);
}
function $d76f6d4dfc9a3307$var$isNewSessionObject(client, v) {
    try {
        client.xrpc.lex.assertValidXrpcOutput("com.atproto.server.refreshSession", v);
        return true;
    } catch  {
        return false;
    }
}
// src/rich-text/unicode.ts
var $d76f6d4dfc9a3307$var$encoder = new TextEncoder();
var $d76f6d4dfc9a3307$var$decoder = new TextDecoder();
var $d76f6d4dfc9a3307$var$UnicodeString = class {
    constructor(utf16){
        this.utf16 = utf16;
        this.utf8 = $d76f6d4dfc9a3307$var$encoder.encode(utf16);
    }
    get length() {
        return this.utf8.byteLength;
    }
    get graphemeLength() {
        if (!this._graphemeLen) this._graphemeLen = $d76f6d4dfc9a3307$var$graphemeLen(this.utf16);
        return this._graphemeLen;
    }
    slice(start, end) {
        return $d76f6d4dfc9a3307$var$decoder.decode(this.utf8.slice(start, end));
    }
    utf16IndexToUtf8Index(i) {
        return $d76f6d4dfc9a3307$var$encoder.encode(this.utf16.slice(0, i)).byteLength;
    }
    toString() {
        return this.utf16;
    }
};
// src/rich-text/sanitization.ts
var $d76f6d4dfc9a3307$var$EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
var $d76f6d4dfc9a3307$var$REPLACEMENT_STR = "\n\n";
function $d76f6d4dfc9a3307$var$sanitizeRichText(richText, opts) {
    if (opts.cleanNewlines) richText = $d76f6d4dfc9a3307$var$clean(richText, $d76f6d4dfc9a3307$var$EXCESS_SPACE_RE, $d76f6d4dfc9a3307$var$REPLACEMENT_STR);
    return richText;
}
function $d76f6d4dfc9a3307$var$clean(richText, targetRegexp, replacementString) {
    richText = richText.clone();
    let match = richText.unicodeText.utf16.match(targetRegexp);
    while(match && typeof match.index !== "undefined"){
        const oldText = richText.unicodeText;
        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
        const removeEndIndex = removeStartIndex + new $d76f6d4dfc9a3307$var$UnicodeString(match[0]).length;
        richText.delete(removeStartIndex, removeEndIndex);
        if (richText.unicodeText.utf16 === oldText.utf16) break;
        richText.insert(removeStartIndex, replacementString);
        match = richText.unicodeText.utf16.match(targetRegexp);
    }
    return richText;
}
// ../../node_modules/tlds/index.json
var $d76f6d4dfc9a3307$var$tlds_default = [
    "aaa",
    "aarp",
    "abarth",
    "abb",
    "abbott",
    "abbvie",
    "abc",
    "able",
    "abogado",
    "abudhabi",
    "ac",
    "academy",
    "accenture",
    "accountant",
    "accountants",
    "aco",
    "actor",
    "ad",
    "ads",
    "adult",
    "ae",
    "aeg",
    "aero",
    "aetna",
    "af",
    "afl",
    "africa",
    "ag",
    "agakhan",
    "agency",
    "ai",
    "aig",
    "airbus",
    "airforce",
    "airtel",
    "akdn",
    "al",
    "alfaromeo",
    "alibaba",
    "alipay",
    "allfinanz",
    "allstate",
    "ally",
    "alsace",
    "alstom",
    "am",
    "amazon",
    "americanexpress",
    "americanfamily",
    "amex",
    "amfam",
    "amica",
    "amsterdam",
    "analytics",
    "android",
    "anquan",
    "anz",
    "ao",
    "aol",
    "apartments",
    "app",
    "apple",
    "aq",
    "aquarelle",
    "ar",
    "arab",
    "aramco",
    "archi",
    "army",
    "arpa",
    "art",
    "arte",
    "as",
    "asda",
    "asia",
    "associates",
    "at",
    "athleta",
    "attorney",
    "au",
    "auction",
    "audi",
    "audible",
    "audio",
    "auspost",
    "author",
    "auto",
    "autos",
    "avianca",
    "aw",
    "aws",
    "ax",
    "axa",
    "az",
    "azure",
    "ba",
    "baby",
    "baidu",
    "banamex",
    "bananarepublic",
    "band",
    "bank",
    "bar",
    "barcelona",
    "barclaycard",
    "barclays",
    "barefoot",
    "bargains",
    "baseball",
    "basketball",
    "bauhaus",
    "bayern",
    "bb",
    "bbc",
    "bbt",
    "bbva",
    "bcg",
    "bcn",
    "bd",
    "be",
    "beats",
    "beauty",
    "beer",
    "bentley",
    "berlin",
    "best",
    "bestbuy",
    "bet",
    "bf",
    "bg",
    "bh",
    "bharti",
    "bi",
    "bible",
    "bid",
    "bike",
    "bing",
    "bingo",
    "bio",
    "biz",
    "bj",
    "black",
    "blackfriday",
    "blockbuster",
    "blog",
    "bloomberg",
    "blue",
    "bm",
    "bms",
    "bmw",
    "bn",
    "bnpparibas",
    "bo",
    "boats",
    "boehringer",
    "bofa",
    "bom",
    "bond",
    "boo",
    "book",
    "booking",
    "bosch",
    "bostik",
    "boston",
    "bot",
    "boutique",
    "box",
    "br",
    "bradesco",
    "bridgestone",
    "broadway",
    "broker",
    "brother",
    "brussels",
    "bs",
    "bt",
    "build",
    "builders",
    "business",
    "buy",
    "buzz",
    "bv",
    "bw",
    "by",
    "bz",
    "bzh",
    "ca",
    "cab",
    "cafe",
    "cal",
    "call",
    "calvinklein",
    "cam",
    "camera",
    "camp",
    "canon",
    "capetown",
    "capital",
    "capitalone",
    "car",
    "caravan",
    "cards",
    "care",
    "career",
    "careers",
    "cars",
    "casa",
    "case",
    "cash",
    "casino",
    "cat",
    "catering",
    "catholic",
    "cba",
    "cbn",
    "cbre",
    "cbs",
    "cc",
    "cd",
    "center",
    "ceo",
    "cern",
    "cf",
    "cfa",
    "cfd",
    "cg",
    "ch",
    "chanel",
    "channel",
    "charity",
    "chase",
    "chat",
    "cheap",
    "chintai",
    "christmas",
    "chrome",
    "church",
    "ci",
    "cipriani",
    "circle",
    "cisco",
    "citadel",
    "citi",
    "citic",
    "city",
    "cityeats",
    "ck",
    "cl",
    "claims",
    "cleaning",
    "click",
    "clinic",
    "clinique",
    "clothing",
    "cloud",
    "club",
    "clubmed",
    "cm",
    "cn",
    "co",
    "coach",
    "codes",
    "coffee",
    "college",
    "cologne",
    "com",
    "comcast",
    "commbank",
    "community",
    "company",
    "compare",
    "computer",
    "comsec",
    "condos",
    "construction",
    "consulting",
    "contact",
    "contractors",
    "cooking",
    "cookingchannel",
    "cool",
    "coop",
    "corsica",
    "country",
    "coupon",
    "coupons",
    "courses",
    "cpa",
    "cr",
    "credit",
    "creditcard",
    "creditunion",
    "cricket",
    "crown",
    "crs",
    "cruise",
    "cruises",
    "cu",
    "cuisinella",
    "cv",
    "cw",
    "cx",
    "cy",
    "cymru",
    "cyou",
    "cz",
    "dabur",
    "dad",
    "dance",
    "data",
    "date",
    "dating",
    "datsun",
    "day",
    "dclk",
    "dds",
    "de",
    "deal",
    "dealer",
    "deals",
    "degree",
    "delivery",
    "dell",
    "deloitte",
    "delta",
    "democrat",
    "dental",
    "dentist",
    "desi",
    "design",
    "dev",
    "dhl",
    "diamonds",
    "diet",
    "digital",
    "direct",
    "directory",
    "discount",
    "discover",
    "dish",
    "diy",
    "dj",
    "dk",
    "dm",
    "dnp",
    "do",
    "docs",
    "doctor",
    "dog",
    "domains",
    "dot",
    "download",
    "drive",
    "dtv",
    "dubai",
    "dunlop",
    "dupont",
    "durban",
    "dvag",
    "dvr",
    "dz",
    "earth",
    "eat",
    "ec",
    "eco",
    "edeka",
    "edu",
    "education",
    "ee",
    "eg",
    "email",
    "emerck",
    "energy",
    "engineer",
    "engineering",
    "enterprises",
    "epson",
    "equipment",
    "er",
    "ericsson",
    "erni",
    "es",
    "esq",
    "estate",
    "et",
    "etisalat",
    "eu",
    "eurovision",
    "eus",
    "events",
    "exchange",
    "expert",
    "exposed",
    "express",
    "extraspace",
    "fage",
    "fail",
    "fairwinds",
    "faith",
    "family",
    "fan",
    "fans",
    "farm",
    "farmers",
    "fashion",
    "fast",
    "fedex",
    "feedback",
    "ferrari",
    "ferrero",
    "fi",
    "fiat",
    "fidelity",
    "fido",
    "film",
    "final",
    "finance",
    "financial",
    "fire",
    "firestone",
    "firmdale",
    "fish",
    "fishing",
    "fit",
    "fitness",
    "fj",
    "fk",
    "flickr",
    "flights",
    "flir",
    "florist",
    "flowers",
    "fly",
    "fm",
    "fo",
    "foo",
    "food",
    "foodnetwork",
    "football",
    "ford",
    "forex",
    "forsale",
    "forum",
    "foundation",
    "fox",
    "fr",
    "free",
    "fresenius",
    "frl",
    "frogans",
    "frontdoor",
    "frontier",
    "ftr",
    "fujitsu",
    "fun",
    "fund",
    "furniture",
    "futbol",
    "fyi",
    "ga",
    "gal",
    "gallery",
    "gallo",
    "gallup",
    "game",
    "games",
    "gap",
    "garden",
    "gay",
    "gb",
    "gbiz",
    "gd",
    "gdn",
    "ge",
    "gea",
    "gent",
    "genting",
    "george",
    "gf",
    "gg",
    "ggee",
    "gh",
    "gi",
    "gift",
    "gifts",
    "gives",
    "giving",
    "gl",
    "glass",
    "gle",
    "global",
    "globo",
    "gm",
    "gmail",
    "gmbh",
    "gmo",
    "gmx",
    "gn",
    "godaddy",
    "gold",
    "goldpoint",
    "golf",
    "goo",
    "goodyear",
    "goog",
    "google",
    "gop",
    "got",
    "gov",
    "gp",
    "gq",
    "gr",
    "grainger",
    "graphics",
    "gratis",
    "green",
    "gripe",
    "grocery",
    "group",
    "gs",
    "gt",
    "gu",
    "guardian",
    "gucci",
    "guge",
    "guide",
    "guitars",
    "guru",
    "gw",
    "gy",
    "hair",
    "hamburg",
    "hangout",
    "haus",
    "hbo",
    "hdfc",
    "hdfcbank",
    "health",
    "healthcare",
    "help",
    "helsinki",
    "here",
    "hermes",
    "hgtv",
    "hiphop",
    "hisamitsu",
    "hitachi",
    "hiv",
    "hk",
    "hkt",
    "hm",
    "hn",
    "hockey",
    "holdings",
    "holiday",
    "homedepot",
    "homegoods",
    "homes",
    "homesense",
    "honda",
    "horse",
    "hospital",
    "host",
    "hosting",
    "hot",
    "hoteles",
    "hotels",
    "hotmail",
    "house",
    "how",
    "hr",
    "hsbc",
    "ht",
    "hu",
    "hughes",
    "hyatt",
    "hyundai",
    "ibm",
    "icbc",
    "ice",
    "icu",
    "id",
    "ie",
    "ieee",
    "ifm",
    "ikano",
    "il",
    "im",
    "imamat",
    "imdb",
    "immo",
    "immobilien",
    "in",
    "inc",
    "industries",
    "infiniti",
    "info",
    "ing",
    "ink",
    "institute",
    "insurance",
    "insure",
    "int",
    "international",
    "intuit",
    "investments",
    "io",
    "ipiranga",
    "iq",
    "ir",
    "irish",
    "is",
    "ismaili",
    "ist",
    "istanbul",
    "it",
    "itau",
    "itv",
    "jaguar",
    "java",
    "jcb",
    "je",
    "jeep",
    "jetzt",
    "jewelry",
    "jio",
    "jll",
    "jm",
    "jmp",
    "jnj",
    "jo",
    "jobs",
    "joburg",
    "jot",
    "joy",
    "jp",
    "jpmorgan",
    "jprs",
    "juegos",
    "juniper",
    "kaufen",
    "kddi",
    "ke",
    "kerryhotels",
    "kerrylogistics",
    "kerryproperties",
    "kfh",
    "kg",
    "kh",
    "ki",
    "kia",
    "kids",
    "kim",
    "kinder",
    "kindle",
    "kitchen",
    "kiwi",
    "km",
    "kn",
    "koeln",
    "komatsu",
    "kosher",
    "kp",
    "kpmg",
    "kpn",
    "kr",
    "krd",
    "kred",
    "kuokgroup",
    "kw",
    "ky",
    "kyoto",
    "kz",
    "la",
    "lacaixa",
    "lamborghini",
    "lamer",
    "lancaster",
    "lancia",
    "land",
    "landrover",
    "lanxess",
    "lasalle",
    "lat",
    "latino",
    "latrobe",
    "law",
    "lawyer",
    "lb",
    "lc",
    "lds",
    "lease",
    "leclerc",
    "lefrak",
    "legal",
    "lego",
    "lexus",
    "lgbt",
    "li",
    "lidl",
    "life",
    "lifeinsurance",
    "lifestyle",
    "lighting",
    "like",
    "lilly",
    "limited",
    "limo",
    "lincoln",
    "link",
    "lipsy",
    "live",
    "living",
    "lk",
    "llc",
    "llp",
    "loan",
    "loans",
    "locker",
    "locus",
    "lol",
    "london",
    "lotte",
    "lotto",
    "love",
    "lpl",
    "lplfinancial",
    "lr",
    "ls",
    "lt",
    "ltd",
    "ltda",
    "lu",
    "lundbeck",
    "luxe",
    "luxury",
    "lv",
    "ly",
    "ma",
    "madrid",
    "maif",
    "maison",
    "makeup",
    "man",
    "management",
    "mango",
    "map",
    "market",
    "marketing",
    "markets",
    "marriott",
    "marshalls",
    "maserati",
    "mattel",
    "mba",
    "mc",
    "mckinsey",
    "md",
    "me",
    "med",
    "media",
    "meet",
    "melbourne",
    "meme",
    "memorial",
    "men",
    "menu",
    "merckmsd",
    "mg",
    "mh",
    "miami",
    "microsoft",
    "mil",
    "mini",
    "mint",
    "mit",
    "mitsubishi",
    "mk",
    "ml",
    "mlb",
    "mls",
    "mm",
    "mma",
    "mn",
    "mo",
    "mobi",
    "mobile",
    "moda",
    "moe",
    "moi",
    "mom",
    "monash",
    "money",
    "monster",
    "mormon",
    "mortgage",
    "moscow",
    "moto",
    "motorcycles",
    "mov",
    "movie",
    "mp",
    "mq",
    "mr",
    "ms",
    "msd",
    "mt",
    "mtn",
    "mtr",
    "mu",
    "museum",
    "music",
    "mutual",
    "mv",
    "mw",
    "mx",
    "my",
    "mz",
    "na",
    "nab",
    "nagoya",
    "name",
    "natura",
    "navy",
    "nba",
    "nc",
    "ne",
    "nec",
    "net",
    "netbank",
    "netflix",
    "network",
    "neustar",
    "new",
    "news",
    "next",
    "nextdirect",
    "nexus",
    "nf",
    "nfl",
    "ng",
    "ngo",
    "nhk",
    "ni",
    "nico",
    "nike",
    "nikon",
    "ninja",
    "nissan",
    "nissay",
    "nl",
    "no",
    "nokia",
    "northwesternmutual",
    "norton",
    "now",
    "nowruz",
    "nowtv",
    "np",
    "nr",
    "nra",
    "nrw",
    "ntt",
    "nu",
    "nyc",
    "nz",
    "obi",
    "observer",
    "office",
    "okinawa",
    "olayan",
    "olayangroup",
    "oldnavy",
    "ollo",
    "om",
    "omega",
    "one",
    "ong",
    "onl",
    "online",
    "ooo",
    "open",
    "oracle",
    "orange",
    "org",
    "organic",
    "origins",
    "osaka",
    "otsuka",
    "ott",
    "ovh",
    "pa",
    "page",
    "panasonic",
    "paris",
    "pars",
    "partners",
    "parts",
    "party",
    "passagens",
    "pay",
    "pccw",
    "pe",
    "pet",
    "pf",
    "pfizer",
    "pg",
    "ph",
    "pharmacy",
    "phd",
    "philips",
    "phone",
    "photo",
    "photography",
    "photos",
    "physio",
    "pics",
    "pictet",
    "pictures",
    "pid",
    "pin",
    "ping",
    "pink",
    "pioneer",
    "pizza",
    "pk",
    "pl",
    "place",
    "play",
    "playstation",
    "plumbing",
    "plus",
    "pm",
    "pn",
    "pnc",
    "pohl",
    "poker",
    "politie",
    "porn",
    "post",
    "pr",
    "pramerica",
    "praxi",
    "press",
    "prime",
    "pro",
    "prod",
    "productions",
    "prof",
    "progressive",
    "promo",
    "properties",
    "property",
    "protection",
    "pru",
    "prudential",
    "ps",
    "pt",
    "pub",
    "pw",
    "pwc",
    "py",
    "qa",
    "qpon",
    "quebec",
    "quest",
    "racing",
    "radio",
    "re",
    "read",
    "realestate",
    "realtor",
    "realty",
    "recipes",
    "red",
    "redstone",
    "redumbrella",
    "rehab",
    "reise",
    "reisen",
    "reit",
    "reliance",
    "ren",
    "rent",
    "rentals",
    "repair",
    "report",
    "republican",
    "rest",
    "restaurant",
    "review",
    "reviews",
    "rexroth",
    "rich",
    "richardli",
    "ricoh",
    "ril",
    "rio",
    "rip",
    "ro",
    "rocher",
    "rocks",
    "rodeo",
    "rogers",
    "room",
    "rs",
    "rsvp",
    "ru",
    "rugby",
    "ruhr",
    "run",
    "rw",
    "rwe",
    "ryukyu",
    "sa",
    "saarland",
    "safe",
    "safety",
    "sakura",
    "sale",
    "salon",
    "samsclub",
    "samsung",
    "sandvik",
    "sandvikcoromant",
    "sanofi",
    "sap",
    "sarl",
    "sas",
    "save",
    "saxo",
    "sb",
    "sbi",
    "sbs",
    "sc",
    "sca",
    "scb",
    "schaeffler",
    "schmidt",
    "scholarships",
    "school",
    "schule",
    "schwarz",
    "science",
    "scot",
    "sd",
    "se",
    "search",
    "seat",
    "secure",
    "security",
    "seek",
    "select",
    "sener",
    "services",
    "seven",
    "sew",
    "sex",
    "sexy",
    "sfr",
    "sg",
    "sh",
    "shangrila",
    "sharp",
    "shaw",
    "shell",
    "shia",
    "shiksha",
    "shoes",
    "shop",
    "shopping",
    "shouji",
    "show",
    "showtime",
    "si",
    "silk",
    "sina",
    "singles",
    "site",
    "sj",
    "sk",
    "ski",
    "skin",
    "sky",
    "skype",
    "sl",
    "sling",
    "sm",
    "smart",
    "smile",
    "sn",
    "sncf",
    "so",
    "soccer",
    "social",
    "softbank",
    "software",
    "sohu",
    "solar",
    "solutions",
    "song",
    "sony",
    "soy",
    "spa",
    "space",
    "sport",
    "spot",
    "sr",
    "srl",
    "ss",
    "st",
    "stada",
    "staples",
    "star",
    "statebank",
    "statefarm",
    "stc",
    "stcgroup",
    "stockholm",
    "storage",
    "store",
    "stream",
    "studio",
    "study",
    "style",
    "su",
    "sucks",
    "supplies",
    "supply",
    "support",
    "surf",
    "surgery",
    "suzuki",
    "sv",
    "swatch",
    "swiss",
    "sx",
    "sy",
    "sydney",
    "systems",
    "sz",
    "tab",
    "taipei",
    "talk",
    "taobao",
    "target",
    "tatamotors",
    "tatar",
    "tattoo",
    "tax",
    "taxi",
    "tc",
    "tci",
    "td",
    "tdk",
    "team",
    "tech",
    "technology",
    "tel",
    "temasek",
    "tennis",
    "teva",
    "tf",
    "tg",
    "th",
    "thd",
    "theater",
    "theatre",
    "tiaa",
    "tickets",
    "tienda",
    "tiffany",
    "tips",
    "tires",
    "tirol",
    "tj",
    "tjmaxx",
    "tjx",
    "tk",
    "tkmaxx",
    "tl",
    "tm",
    "tmall",
    "tn",
    "to",
    "today",
    "tokyo",
    "tools",
    "top",
    "toray",
    "toshiba",
    "total",
    "tours",
    "town",
    "toyota",
    "toys",
    "tr",
    "trade",
    "trading",
    "training",
    "travel",
    "travelchannel",
    "travelers",
    "travelersinsurance",
    "trust",
    "trv",
    "tt",
    "tube",
    "tui",
    "tunes",
    "tushu",
    "tv",
    "tvs",
    "tw",
    "tz",
    "ua",
    "ubank",
    "ubs",
    "ug",
    "uk",
    "unicom",
    "university",
    "uno",
    "uol",
    "ups",
    "us",
    "uy",
    "uz",
    "va",
    "vacations",
    "vana",
    "vanguard",
    "vc",
    "ve",
    "vegas",
    "ventures",
    "verisign",
    "verm\xf6gensberater",
    "verm\xf6gensberatung",
    "versicherung",
    "vet",
    "vg",
    "vi",
    "viajes",
    "video",
    "vig",
    "viking",
    "villas",
    "vin",
    "vip",
    "virgin",
    "visa",
    "vision",
    "viva",
    "vivo",
    "vlaanderen",
    "vn",
    "vodka",
    "volkswagen",
    "volvo",
    "vote",
    "voting",
    "voto",
    "voyage",
    "vu",
    "vuelos",
    "wales",
    "walmart",
    "walter",
    "wang",
    "wanggou",
    "watch",
    "watches",
    "weather",
    "weatherchannel",
    "webcam",
    "weber",
    "website",
    "wed",
    "wedding",
    "weibo",
    "weir",
    "wf",
    "whoswho",
    "wien",
    "wiki",
    "williamhill",
    "win",
    "windows",
    "wine",
    "winners",
    "wme",
    "wolterskluwer",
    "woodside",
    "work",
    "works",
    "world",
    "wow",
    "ws",
    "wtc",
    "wtf",
    "xbox",
    "xerox",
    "xfinity",
    "xihuan",
    "xin",
    "xxx",
    "xyz",
    "yachts",
    "yahoo",
    "yamaxun",
    "yandex",
    "ye",
    "yodobashi",
    "yoga",
    "yokohama",
    "you",
    "youtube",
    "yt",
    "yun",
    "za",
    "zappos",
    "zara",
    "zero",
    "zip",
    "zm",
    "zone",
    "zuerich",
    "zw",
    "ελ",
    "ευ",
    "бг",
    "бел",
    "дети",
    "ею",
    "католик",
    "ком",
    "мкд",
    "мон",
    "москва",
    "онлайн",
    "орг",
    "рус",
    "рф",
    "сайт",
    "срб",
    "укр",
    "қаз",
    "հայ",
    "ישראל",
    "קום",
    "ابوظبي",
    "اتصالات",
    "ارامكو",
    "الاردن",
    "البحرين",
    "الجزائر",
    "السعودية",
    "العليان",
    "المغرب",
    "امارات",
    "ایران",
    "بارت",
    "بازار",
    "بيتك",
    "بھارت",
    "تونس",
    "سودان",
    "سورية",
    "شبكة",
    "عراق",
    "عرب",
    "عمان",
    "فلسطين",
    "قطر",
    "كاثوليك",
    "كوم",
    "مصر",
    "مليسيا",
    "موريتانيا",
    "موقع",
    "همراه",
    "پاکستان",
    "ڀارت",
    "कॉम",
    "नेट",
    "भारत",
    "भारतम्",
    "भारोत",
    "संगठन",
    "বাংলা",
    "ভারত",
    "ভাৰত",
    "ਭਾਰਤ",
    "ભારત",
    "ଭାରତ",
    "இந்தியா",
    "இலங்கை",
    "சிங்கப்பூர்",
    "భారత్",
    "ಭಾರತ",
    "ഭാരതം",
    "ලංකා",
    "คอม",
    "ไทย",
    "ລາວ",
    "გე",
    "みんな",
    "アマゾン",
    "クラウド",
    "グーグル",
    "コム",
    "ストア",
    "セール",
    "ファッション",
    "ポイント",
    "世界",
    "中信",
    "中国",
    "中國",
    "中文网",
    "亚马逊",
    "企业",
    "佛山",
    "信息",
    "健康",
    "八卦",
    "公司",
    "公益",
    "台湾",
    "台灣",
    "商城",
    "商店",
    "商标",
    "嘉里",
    "嘉里大酒店",
    "在线",
    "大拿",
    "天主教",
    "娱乐",
    "家電",
    "广东",
    "微博",
    "慈善",
    "我爱你",
    "手机",
    "招聘",
    "政务",
    "政府",
    "新加坡",
    "新闻",
    "时尚",
    "書籍",
    "机构",
    "淡马锡",
    "游戏",
    "澳門",
    "点看",
    "移动",
    "组织机构",
    "网址",
    "网店",
    "网站",
    "网络",
    "联通",
    "谷歌",
    "购物",
    "通販",
    "集团",
    "電訊盈科",
    "飞利浦",
    "食品",
    "餐厅",
    "香格里拉",
    "香港",
    "닷넷",
    "닷컴",
    "삼성",
    "한국"
];
// src/rich-text/detection.ts
function $d76f6d4dfc9a3307$var$detectFacets(text) {
    let match;
    const facets = [];
    {
        const re = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
        while(match = re.exec(text.utf16)){
            if (!$d76f6d4dfc9a3307$var$isValidDomain(match[3]) && !match[3].endsWith(".test")) continue;
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
                $type: "app.bsky.richtext.facet",
                index: {
                    byteStart: text.utf16IndexToUtf8Index(start),
                    byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
                },
                features: [
                    {
                        $type: "app.bsky.richtext.facet#mention",
                        did: match[3]
                    }
                ]
            });
        }
    }
    {
        const re = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
        while(match = re.exec(text.utf16)){
            let uri2 = match[2];
            if (!uri2.startsWith("http")) {
                const domain = match.groups?.domain;
                if (!domain || !$d76f6d4dfc9a3307$var$isValidDomain(domain)) continue;
                uri2 = `https://${uri2}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = {
                start: start,
                end: start + match[2].length
            };
            if (/[.,;!?]$/.test(uri2)) {
                uri2 = uri2.slice(0, -1);
                index.end--;
            }
            if (/[)]$/.test(uri2) && !uri2.includes("(")) {
                uri2 = uri2.slice(0, -1);
                index.end--;
            }
            facets.push({
                index: {
                    byteStart: text.utf16IndexToUtf8Index(index.start),
                    byteEnd: text.utf16IndexToUtf8Index(index.end)
                },
                features: [
                    {
                        $type: "app.bsky.richtext.facet#link",
                        uri: uri2
                    }
                ]
            });
        }
    }
    return facets.length > 0 ? facets : void 0;
}
function $d76f6d4dfc9a3307$var$isValidDomain(str) {
    return !!$d76f6d4dfc9a3307$var$tlds_default.find((tld)=>{
        const i = str.lastIndexOf(tld);
        if (i === -1) return false;
        return str.charAt(i - 1) === "." && i === str.length - tld.length;
    });
}
// src/rich-text/rich-text.ts
var $d76f6d4dfc9a3307$var$RichTextSegment = class {
    constructor(text, facet){
        this.text = text;
        this.facet = facet;
    }
    get link() {
        const link = this.facet?.features.find($d76f6d4dfc9a3307$var$facet_exports.isLink);
        if ($d76f6d4dfc9a3307$var$facet_exports.isLink(link)) return link;
        return void 0;
    }
    isLink() {
        return !!this.link;
    }
    get mention() {
        const mention = this.facet?.features.find($d76f6d4dfc9a3307$var$facet_exports.isMention);
        if ($d76f6d4dfc9a3307$var$facet_exports.isMention(mention)) return mention;
        return void 0;
    }
    isMention() {
        return !!this.mention;
    }
};
var $d76f6d4dfc9a3307$var$RichText = class {
    constructor(props, opts){
        this.unicodeText = new $d76f6d4dfc9a3307$var$UnicodeString(props.text);
        this.facets = props.facets;
        if (!this.facets?.length && props.entities?.length) this.facets = $d76f6d4dfc9a3307$var$entitiesToFacets(this.unicodeText, props.entities);
        if (this.facets) this.facets.sort($d76f6d4dfc9a3307$var$facetSort);
        if (opts?.cleanNewlines) $d76f6d4dfc9a3307$var$sanitizeRichText(this, {
            cleanNewlines: true
        }).copyInto(this);
    }
    get text() {
        return this.unicodeText.toString();
    }
    get length() {
        return this.unicodeText.length;
    }
    get graphemeLength() {
        return this.unicodeText.graphemeLength;
    }
    clone() {
        return new $d76f6d4dfc9a3307$var$RichText({
            text: this.unicodeText.utf16,
            facets: $d76f6d4dfc9a3307$var$cloneDeep(this.facets)
        });
    }
    copyInto(target) {
        target.unicodeText = this.unicodeText;
        target.facets = $d76f6d4dfc9a3307$var$cloneDeep(this.facets);
    }
    *segments() {
        const facets = this.facets || [];
        if (!facets.length) {
            yield new $d76f6d4dfc9a3307$var$RichTextSegment(this.unicodeText.utf16);
            return;
        }
        let textCursor = 0;
        let facetCursor = 0;
        do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) yield new $d76f6d4dfc9a3307$var$RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            else if (textCursor > currFacet.index.byteStart) {
                facetCursor++;
                continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
                const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
                if (!subtext.trim()) yield new $d76f6d4dfc9a3307$var$RichTextSegment(subtext);
                else yield new $d76f6d4dfc9a3307$var$RichTextSegment(subtext, currFacet);
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
        }while (facetCursor < facets.length);
        if (textCursor < this.unicodeText.length) yield new $d76f6d4dfc9a3307$var$RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
    }
    insert(insertIndex, insertText) {
        this.unicodeText = new $d76f6d4dfc9a3307$var$UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
        if (!this.facets?.length) return this;
        const numCharsAdded = insertText.length;
        for (const ent of this.facets){
            if (insertIndex <= ent.index.byteStart) {
                ent.index.byteStart += numCharsAdded;
                ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) ent.index.byteEnd += numCharsAdded;
        }
        return this;
    }
    delete(removeStartIndex, removeEndIndex) {
        this.unicodeText = new $d76f6d4dfc9a3307$var$UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
        if (!this.facets?.length) return this;
        const numCharsRemoved = removeEndIndex - removeStartIndex;
        for (const ent of this.facets){
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
                ent.index.byteStart = 0;
                ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) ;
            else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) ent.index.byteEnd = removeStartIndex;
            else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) ent.index.byteEnd -= numCharsRemoved;
            else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
                ent.index.byteStart = removeStartIndex;
                ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
                ent.index.byteStart -= numCharsRemoved;
                ent.index.byteEnd -= numCharsRemoved;
            }
        }
        this.facets = this.facets.filter((ent)=>ent.index.byteStart < ent.index.byteEnd);
        return this;
    }
    async detectFacets(agent) {
        this.facets = $d76f6d4dfc9a3307$var$detectFacets(this.unicodeText);
        if (this.facets) {
            for (const facet of this.facets){
                for (const feature of facet.features)if ($d76f6d4dfc9a3307$var$facet_exports.isMention(feature)) {
                    const did2 = await agent.resolveHandle({
                        handle: feature.did
                    }).catch((_)=>void 0).then((res)=>res?.data.did);
                    feature.did = did2 || "";
                }
            }
            this.facets.sort($d76f6d4dfc9a3307$var$facetSort);
        }
    }
    detectFacetsWithoutResolution() {
        this.facets = $d76f6d4dfc9a3307$var$detectFacets(this.unicodeText);
        if (this.facets) this.facets.sort($d76f6d4dfc9a3307$var$facetSort);
    }
};
var $d76f6d4dfc9a3307$var$facetSort = (a, b)=>a.index.byteStart - b.index.byteStart;
function $d76f6d4dfc9a3307$var$entitiesToFacets(text, entities) {
    const facets = [];
    for (const ent of entities){
        if (ent.type === "link") facets.push({
            $type: "app.bsky.richtext.facet",
            index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
                {
                    $type: "app.bsky.richtext.facet#link",
                    uri: ent.value
                }
            ]
        });
        else if (ent.type === "mention") facets.push({
            $type: "app.bsky.richtext.facet",
            index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
                {
                    $type: "app.bsky.richtext.facet#mention",
                    did: ent.value
                }
            ]
        });
    }
    return facets;
}
function $d76f6d4dfc9a3307$var$cloneDeep(v) {
    if (typeof v === "undefined") return v;
    return JSON.parse(JSON.stringify(v));
}
// src/moderation/types.ts
var $d76f6d4dfc9a3307$var$ModerationDecision = class {
    constructor(cause, alert = false, blur = false, blurMedia = false, filter = false, noOverride = false, additionalCauses = [], did2 = ""){
        this.cause = cause;
        this.alert = alert;
        this.blur = blur;
        this.blurMedia = blurMedia;
        this.filter = filter;
        this.noOverride = noOverride;
        this.additionalCauses = additionalCauses;
        this.did = did2;
    }
    static noop() {
        return new $d76f6d4dfc9a3307$var$ModerationDecision();
    }
};
// src/moderation/const/labels.ts
var $d76f6d4dfc9a3307$var$LABELS = {
    "!hide": {
        id: "!hide",
        preferences: [
            "hide"
        ],
        flags: [
            "no-override"
        ],
        onwarn: "blur",
        groupId: "system",
        configurable: false,
        strings: {
            settings: {
                en: {
                    name: "Moderator Hide",
                    description: "Moderator has chosen to hide the content."
                }
            },
            account: {
                en: {
                    name: "Content Blocked",
                    description: "This account has been hidden by the moderators."
                }
            },
            content: {
                en: {
                    name: "Content Blocked",
                    description: "This content has been hidden by the moderators."
                }
            }
        }
    },
    "!no-promote": {
        id: "!no-promote",
        preferences: [
            "hide"
        ],
        flags: [],
        onwarn: null,
        groupId: "system",
        configurable: false,
        strings: {
            settings: {
                en: {
                    name: "Moderator Filter",
                    description: "Moderator has chosen to filter the content from feeds."
                }
            },
            account: {
                en: {
                    name: "N/A",
                    description: "N/A"
                }
            },
            content: {
                en: {
                    name: "N/A",
                    description: "N/A"
                }
            }
        }
    },
    "!warn": {
        id: "!warn",
        preferences: [
            "warn"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "system",
        configurable: false,
        strings: {
            settings: {
                en: {
                    name: "Moderator Warn",
                    description: "Moderator has chosen to set a general warning on the content."
                }
            },
            account: {
                en: {
                    name: "Content Warning",
                    description: "This account has received a general warning from moderators."
                }
            },
            content: {
                en: {
                    name: "Content Warning",
                    description: "This content has received a general warning from moderators."
                }
            }
        }
    },
    "dmca-violation": {
        id: "dmca-violation",
        preferences: [
            "hide"
        ],
        flags: [
            "no-override"
        ],
        onwarn: "blur",
        groupId: "legal",
        configurable: false,
        strings: {
            settings: {
                en: {
                    name: "Copyright Violation",
                    description: "The content has received a DMCA takedown request."
                }
            },
            account: {
                en: {
                    name: "Copyright Violation",
                    description: "This account has received a DMCA takedown request. It will be restored if the concerns can be resolved."
                }
            },
            content: {
                en: {
                    name: "Copyright Violation",
                    description: "This content has received a DMCA takedown request. It will be restored if the concerns can be resolved."
                }
            }
        }
    },
    doxxing: {
        id: "doxxing",
        preferences: [
            "hide"
        ],
        flags: [
            "no-override"
        ],
        onwarn: "blur",
        groupId: "legal",
        configurable: false,
        strings: {
            settings: {
                en: {
                    name: "Doxxing",
                    description: "Information that reveals private information about someone which has been shared without the consent of the subject."
                }
            },
            account: {
                en: {
                    name: "Doxxing",
                    description: "This account has been reported to publish private information about someone without their consent. This report is currently under review."
                }
            },
            content: {
                en: {
                    name: "Doxxing",
                    description: "This content has been reported to include private information about someone without their consent."
                }
            }
        }
    },
    porn: {
        id: "porn",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "sexual",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Pornography",
                    description: "Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes)."
                }
            },
            account: {
                en: {
                    name: "Adult Content",
                    description: "This account contains imagery of full-frontal nudity or explicit sexual activity."
                }
            },
            content: {
                en: {
                    name: "Adult Content",
                    description: "This content contains imagery of full-frontal nudity or explicit sexual activity."
                }
            }
        }
    },
    sexual: {
        id: "sexual",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "sexual",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Sexually Suggestive",
                    description: 'Content that does not meet the level of "pornography", but is still sexual. Some common examples have been selfies and "hornyposting" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.'
                }
            },
            account: {
                en: {
                    name: "Suggestive Content",
                    description: "This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress."
                }
            },
            content: {
                en: {
                    name: "Suggestive Content",
                    description: "This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress."
                }
            }
        }
    },
    nudity: {
        id: "nudity",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "sexual",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Nudity",
                    description: 'Nudity which is not sexual, or that is primarily "artistic" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. "Erotic photography" is likely to end up in sexual or porn.'
                }
            },
            account: {
                en: {
                    name: "Adult Content",
                    description: "This account contains imagery which portrays nudity in a non-sexual or artistic setting."
                }
            },
            content: {
                en: {
                    name: "Adult Content",
                    description: "This content contains imagery which portrays nudity in a non-sexual or artistic setting."
                }
            }
        }
    },
    nsfl: {
        id: "nsfl",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "violence",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "NSFL",
                    description: `"Not Suitable For Life." This includes graphic images like the infamous "goatse" (don't look it up).`
                }
            },
            account: {
                en: {
                    name: "Graphic Imagery (NSFL)",
                    description: 'This account contains graphic images which are often referred to as "Not Suitable For Life."'
                }
            },
            content: {
                en: {
                    name: "Graphic Imagery (NSFL)",
                    description: 'This content contains graphic images which are often referred to as "Not Suitable For Life."'
                }
            }
        }
    },
    corpse: {
        id: "corpse",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "violence",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Corpse",
                    description: "Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings."
                }
            },
            account: {
                en: {
                    name: "Graphic Imagery (Corpse)",
                    description: "This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets."
                }
            },
            content: {
                en: {
                    name: "Graphic Imagery (Corpse)",
                    description: "This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets."
                }
            }
        }
    },
    gore: {
        id: "gore",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "violence",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Gore",
                    description: "Intended for shocking images, typically involving blood or visible wounds."
                }
            },
            account: {
                en: {
                    name: "Graphic Imagery (Gore)",
                    description: "This account contains shocking images involving blood or visible wounds."
                }
            },
            content: {
                en: {
                    name: "Graphic Imagery (Gore)",
                    description: "This content contains shocking images involving blood or visible wounds."
                }
            }
        }
    },
    torture: {
        id: "torture",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur",
        groupId: "violence",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Torture",
                    description: "Depictions of torture of a human or animal (animal cruelty)."
                }
            },
            account: {
                en: {
                    name: "Graphic Imagery (Torture)",
                    description: "This account contains depictions of torture of a human or animal."
                }
            },
            content: {
                en: {
                    name: "Graphic Imagery (Torture)",
                    description: "This content contains depictions of torture of a human or animal."
                }
            }
        }
    },
    "self-harm": {
        id: "self-harm",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [
            "adult"
        ],
        onwarn: "blur-media",
        groupId: "violence",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Self-Harm",
                    description: "A visual depiction (photo or figurative) of cutting, suicide, or similar."
                }
            },
            account: {
                en: {
                    name: "Graphic Imagery (Self-Harm)",
                    description: "This account includes depictions of cutting, suicide, or other forms of self-harm."
                }
            },
            content: {
                en: {
                    name: "Graphic Imagery (Self-Harm)",
                    description: "This content includes depictions of cutting, suicide, or other forms of self-harm."
                }
            }
        }
    },
    "intolerant-race": {
        id: "intolerant-race",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Racial Intolerance",
                    description: "Hateful or intolerant content related to race."
                }
            },
            account: {
                en: {
                    name: "Intolerance (Racial)",
                    description: "This account includes hateful or intolerant content related to race."
                }
            },
            content: {
                en: {
                    name: "Intolerance (Racial)",
                    description: "This content includes hateful or intolerant views related to race."
                }
            }
        }
    },
    "intolerant-gender": {
        id: "intolerant-gender",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Gender Intolerance",
                    description: "Hateful or intolerant content related to gender or gender identity."
                }
            },
            account: {
                en: {
                    name: "Intolerance (Gender)",
                    description: "This account includes hateful or intolerant content related to gender or gender identity."
                }
            },
            content: {
                en: {
                    name: "Intolerance (Gender)",
                    description: "This content includes hateful or intolerant views related to gender or gender identity."
                }
            }
        }
    },
    "intolerant-sexual-orientation": {
        id: "intolerant-sexual-orientation",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Sexual Orientation Intolerance",
                    description: "Hateful or intolerant content related to sexual preferences."
                }
            },
            account: {
                en: {
                    name: "Intolerance (Orientation)",
                    description: "This account includes hateful or intolerant content related to sexual preferences."
                }
            },
            content: {
                en: {
                    name: "Intolerance (Orientation)",
                    description: "This content includes hateful or intolerant views related to sexual preferences."
                }
            }
        }
    },
    "intolerant-religion": {
        id: "intolerant-religion",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Religious Intolerance",
                    description: "Hateful or intolerant content related to religious views or practices."
                }
            },
            account: {
                en: {
                    name: "Intolerance (Religious)",
                    description: "This account includes hateful or intolerant content related to religious views or practices."
                }
            },
            content: {
                en: {
                    name: "Intolerance (Religious)",
                    description: "This content includes hateful or intolerant views related to religious views or practices."
                }
            }
        }
    },
    intolerant: {
        id: "intolerant",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Intolerance",
                    description: "A catchall for hateful or intolerant content which is not covered elsewhere."
                }
            },
            account: {
                en: {
                    name: "Intolerance",
                    description: "This account includes hateful or intolerant content."
                }
            },
            content: {
                en: {
                    name: "Intolerance",
                    description: "This content includes hateful or intolerant views."
                }
            }
        }
    },
    "icon-intolerant": {
        id: "icon-intolerant",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur-media",
        groupId: "intolerance",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Intolerant Iconography",
                    description: "Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc)."
                }
            },
            account: {
                en: {
                    name: "Intolerant Iconography",
                    description: "This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes."
                }
            },
            content: {
                en: {
                    name: "Intolerant Iconography",
                    description: "This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes."
                }
            }
        }
    },
    threat: {
        id: "threat",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "rude",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Threats",
                    description: "Statements or imagery published with the intent to threaten, intimidate, or harm."
                }
            },
            account: {
                en: {
                    name: "Threats",
                    description: "The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others."
                }
            },
            content: {
                en: {
                    name: "Threats",
                    description: "The moderators believe this content was published with the intent to threaten, intimidate, or harm others."
                }
            }
        }
    },
    spoiler: {
        id: "spoiler",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "curation",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Spoiler",
                    description: "Discussion about film, TV, etc which gives away plot points."
                }
            },
            account: {
                en: {
                    name: "Spoiler Warning",
                    description: "This account contains discussion about film, TV, etc which gives away plot points."
                }
            },
            content: {
                en: {
                    name: "Spoiler Warning",
                    description: "This content contains discussion about film, TV, etc which gives away plot points."
                }
            }
        }
    },
    spam: {
        id: "spam",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "spam",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Spam",
                    description: "Repeat, low-quality messages which are clearly not designed to add to a conversation or space."
                }
            },
            account: {
                en: {
                    name: "Spam",
                    description: "This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space."
                }
            },
            content: {
                en: {
                    name: "Spam",
                    description: "This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space."
                }
            }
        }
    },
    "account-security": {
        id: "account-security",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "misinfo",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Security Concerns",
                    description: "Content designed to hijack user accounts such as a phishing attack."
                }
            },
            account: {
                en: {
                    name: "Security Warning",
                    description: "This account has published content designed to hijack user accounts such as a phishing attack."
                }
            },
            content: {
                en: {
                    name: "Security Warning",
                    description: "This content is designed to hijack user accounts such as a phishing attack."
                }
            }
        }
    },
    "net-abuse": {
        id: "net-abuse",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "blur",
        groupId: "misinfo",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Network Attacks",
                    description: "Content designed to attack network systems such as denial-of-service attacks."
                }
            },
            account: {
                en: {
                    name: "Network Attack Warning",
                    description: "This account has published content designed to attack network systems such as denial-of-service attacks."
                }
            },
            content: {
                en: {
                    name: "Network Attack Warning",
                    description: "This content is designed to attack network systems such as denial-of-service attacks."
                }
            }
        }
    },
    impersonation: {
        id: "impersonation",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "alert",
        groupId: "misinfo",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Impersonation",
                    description: "Accounts which falsely assert some identity."
                }
            },
            account: {
                en: {
                    name: "Impersonation Warning",
                    description: "The moderators believe this account is lying about their identity."
                }
            },
            content: {
                en: {
                    name: "Impersonation Warning",
                    description: "The moderators believe this account is lying about their identity."
                }
            }
        }
    },
    scam: {
        id: "scam",
        preferences: [
            "ignore",
            "warn",
            "hide"
        ],
        flags: [],
        onwarn: "alert",
        groupId: "misinfo",
        configurable: true,
        strings: {
            settings: {
                en: {
                    name: "Scam",
                    description: "Fraudulent content."
                }
            },
            account: {
                en: {
                    name: "Scam Warning",
                    description: "The moderators believe this account publishes fraudulent content."
                }
            },
            content: {
                en: {
                    name: "Scam Warning",
                    description: "The moderators believe this is fraudulent content."
                }
            }
        }
    }
};
// src/moderation/accumulator.ts
var $d76f6d4dfc9a3307$var$ModerationCauseAccumulator = class {
    constructor(){
        this.did = "";
        this.causes = [];
    }
    setDid(did2) {
        this.did = did2;
    }
    addBlocking(blocking) {
        if (blocking) this.causes.push({
            type: "blocking",
            source: {
                type: "user"
            },
            priority: 3
        });
    }
    addBlockedBy(blockedBy) {
        if (blockedBy) this.causes.push({
            type: "blocked-by",
            source: {
                type: "user"
            },
            priority: 4
        });
    }
    addBlockOther(blockOther) {
        if (blockOther) this.causes.push({
            type: "block-other",
            source: {
                type: "user"
            },
            priority: 4
        });
    }
    addLabel(label, opts) {
        const labelDef = $d76f6d4dfc9a3307$var$LABELS[label.val];
        if (!labelDef) return;
        const isSelf = label.src === this.did;
        const labeler = isSelf ? void 0 : opts.labelers.find((s)=>s.labeler.did === label.src);
        let labelPref = "ignore";
        if (!labelDef.configurable) labelPref = labelDef.preferences[0];
        else if (labelDef.flags.includes("adult") && !opts.adultContentEnabled) labelPref = "hide";
        else if (labeler?.labels[label.val]) labelPref = labeler.labels[label.val];
        else if (opts.labels[label.val]) labelPref = opts.labels[label.val];
        if (labelPref === "ignore") return;
        let priority;
        if (labelDef.flags.includes("no-override")) priority = 1;
        else if (labelPref === "hide") priority = 2;
        else if (labelDef.onwarn === "blur") priority = 5;
        else if (labelDef.onwarn === "blur-media") priority = 7;
        else priority = 8;
        this.causes.push({
            type: "label",
            source: isSelf || !labeler ? {
                type: "user"
            } : {
                type: "labeler",
                labeler: labeler.labeler
            },
            label: label,
            labelDef: labelDef,
            setting: labelPref,
            priority: priority
        });
    }
    addMuted(muted) {
        if (muted) this.causes.push({
            type: "muted",
            source: {
                type: "user"
            },
            priority: 6
        });
    }
    addMutedByList(mutedByList) {
        if (mutedByList) this.causes.push({
            type: "muted",
            source: {
                type: "list",
                list: mutedByList
            },
            priority: 6
        });
    }
    finalizeDecision(opts) {
        const mod = new $d76f6d4dfc9a3307$var$ModerationDecision();
        mod.did = this.did;
        if (!this.causes.length) return mod;
        this.causes.sort((a, b)=>a.priority - b.priority);
        mod.cause = this.causes[0];
        mod.additionalCauses = this.causes.slice(1);
        if (mod.cause.type === "blocking" || mod.cause.type === "blocked-by" || mod.cause.type === "block-other") {
            mod.filter = true;
            mod.blur = true;
            mod.noOverride = true;
        } else if (mod.cause.type === "muted") {
            mod.filter = true;
            mod.blur = true;
        } else if (mod.cause.type === "label") {
            if (mod.cause.setting === "hide") mod.filter = true;
            switch(mod.cause.labelDef.onwarn){
                case "alert":
                    mod.alert = true;
                    break;
                case "blur":
                    mod.blur = true;
                    break;
                case "blur-media":
                    mod.blurMedia = true;
                    break;
                case null:
                    break;
            }
            if (mod.cause.labelDef.flags.includes("no-override")) mod.noOverride = true;
            else if (mod.cause.labelDef.flags.includes("adult") && !opts.adultContentEnabled) mod.noOverride = true;
        }
        return mod;
    }
};
// src/moderation/subjects/account.ts
function $d76f6d4dfc9a3307$var$decideAccount(subject, opts) {
    const acc = new $d76f6d4dfc9a3307$var$ModerationCauseAccumulator();
    acc.setDid(subject.did);
    if (subject.viewer?.muted) {
        if (subject.viewer?.mutedByList) acc.addMutedByList(subject.viewer?.mutedByList);
        else acc.addMuted(subject.viewer?.muted);
    }
    acc.addBlocking(subject.viewer?.blocking);
    acc.addBlockedBy(subject.viewer?.blockedBy);
    for (const label of $d76f6d4dfc9a3307$var$filterAccountLabels(subject.labels))acc.addLabel(label, opts);
    return acc.finalizeDecision(opts);
}
function $d76f6d4dfc9a3307$var$filterAccountLabels(labels) {
    if (!labels) return [];
    return labels.filter((label)=>!label.uri.endsWith("/app.bsky.actor.profile/self"));
}
// src/moderation/subjects/profile.ts
function $d76f6d4dfc9a3307$var$decideProfile(subject, opts) {
    const acc = new $d76f6d4dfc9a3307$var$ModerationCauseAccumulator();
    acc.setDid(subject.did);
    for (const label of $d76f6d4dfc9a3307$var$filterProfileLabels(subject.labels))acc.addLabel(label, opts);
    return acc.finalizeDecision(opts);
}
function $d76f6d4dfc9a3307$var$filterProfileLabels(labels) {
    if (!labels) return [];
    return labels.filter((label)=>label.uri.endsWith("/app.bsky.actor.profile/self"));
}
// src/moderation/subjects/post.ts
function $d76f6d4dfc9a3307$var$decidePost(subject, opts) {
    const acc = new $d76f6d4dfc9a3307$var$ModerationCauseAccumulator();
    acc.setDid(subject.author.did);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel(label, opts);
    return acc.finalizeDecision(opts);
}
// src/moderation/subjects/quoted-post.ts
function $d76f6d4dfc9a3307$var$decideQuotedPost(subject, opts) {
    const acc = new $d76f6d4dfc9a3307$var$ModerationCauseAccumulator();
    if ($d76f6d4dfc9a3307$var$record_exports.isViewRecord(subject.record)) {
        acc.setDid(subject.record.author.did);
        if (subject.record.labels?.length) for (const label of subject.record.labels)acc.addLabel(label, opts);
    } else if ($d76f6d4dfc9a3307$var$record_exports.isViewBlocked(subject.record)) {
        acc.setDid(subject.record.author.did);
        if (subject.record.author.viewer?.blocking) acc.addBlocking(subject.record.author.viewer?.blocking);
        else if (subject.record.author.viewer?.blockedBy) acc.addBlockedBy(subject.record.author.viewer?.blockedBy);
        else acc.addBlockOther(true);
    }
    return acc.finalizeDecision(opts);
}
function $d76f6d4dfc9a3307$var$decideQuotedPostAccount(subject, opts) {
    if ($d76f6d4dfc9a3307$var$record_exports.isViewRecord(subject.record)) return $d76f6d4dfc9a3307$var$decideAccount(subject.record.author, opts);
    return $d76f6d4dfc9a3307$var$ModerationDecision.noop();
}
function $d76f6d4dfc9a3307$var$decideQuotedPostWithMedia(subject, opts) {
    const acc = new $d76f6d4dfc9a3307$var$ModerationCauseAccumulator();
    if ($d76f6d4dfc9a3307$var$record_exports.isViewRecord(subject.record.record)) {
        acc.setDid(subject.record.record.author.did);
        if (subject.record.record.labels?.length) for (const label of subject.record.record.labels)acc.addLabel(label, opts);
    } else if ($d76f6d4dfc9a3307$var$record_exports.isViewBlocked(subject.record.record)) {
        acc.setDid(subject.record.record.author.did);
        if (subject.record.record.author.viewer?.blocking) acc.addBlocking(subject.record.record.author.viewer?.blocking);
        else if (subject.record.record.author.viewer?.blockedBy) acc.addBlockedBy(subject.record.record.author.viewer?.blockedBy);
        else acc.addBlockOther(true);
    }
    return acc.finalizeDecision(opts);
}
function $d76f6d4dfc9a3307$var$decideQuotedPostWithMediaAccount(subject, opts) {
    if ($d76f6d4dfc9a3307$var$record_exports.isViewRecord(subject.record.record)) return $d76f6d4dfc9a3307$var$decideAccount(subject.record.record.author, opts);
    return $d76f6d4dfc9a3307$var$ModerationDecision.noop();
}
// src/moderation/subjects/feed-generator.ts
function $d76f6d4dfc9a3307$var$decideFeedGenerator(subject, opts) {
    return $d76f6d4dfc9a3307$var$ModerationDecision.noop();
}
// src/moderation/subjects/user-list.ts
function $d76f6d4dfc9a3307$var$decideUserList(subject, opts) {
    return $d76f6d4dfc9a3307$var$ModerationDecision.noop();
}
// src/moderation/util.ts
function $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(...decisions) {
    const filtered = decisions.filter((d)=>!!d);
    if (filtered.length === 0) return $d76f6d4dfc9a3307$var$ModerationDecision.noop();
    filtered.sort((a, b)=>{
        if (a.cause && b.cause) return a.cause.priority - b.cause.priority;
        if (a.cause) return -1;
        if (b.cause) return 1;
        return 0;
    });
    return filtered[0];
}
function $d76f6d4dfc9a3307$var$downgradeDecision(decision, to) {
    decision.filter = false;
    decision.noOverride = false;
    if (to === "noop") {
        decision.blur = false;
        decision.blurMedia = false;
        decision.alert = false;
        delete decision.cause;
    } else if (to === "alert") {
        decision.blur = false;
        decision.blurMedia = false;
        decision.alert = true;
    }
}
function $d76f6d4dfc9a3307$var$isModerationDecisionNoop(decision, { ignoreFilter: ignoreFilter } = {
    ignoreFilter: false
}) {
    if (!decision) return true;
    if (decision.alert) return false;
    if (decision.blur) return false;
    if (decision.filter && !ignoreFilter) return false;
    return true;
}
function $d76f6d4dfc9a3307$var$isQuotedPost(embed) {
    return Boolean(embed && $d76f6d4dfc9a3307$var$record_exports.isView(embed));
}
function $d76f6d4dfc9a3307$var$isQuotedPostWithMedia(embed) {
    return Boolean(embed && $d76f6d4dfc9a3307$var$recordWithMedia_exports.isView(embed));
}
function $d76f6d4dfc9a3307$var$toModerationUI(decision) {
    return {
        cause: decision.cause,
        filter: decision.filter,
        blur: decision.blur,
        alert: decision.alert,
        noOverride: decision.noOverride
    };
}
// src/moderation/index.ts
function $d76f6d4dfc9a3307$var$moderateProfile(subject, opts) {
    const account = $d76f6d4dfc9a3307$var$decideAccount(subject, opts);
    const profile = $d76f6d4dfc9a3307$var$decideProfile(subject, opts);
    if (account.blurMedia) account.blur = true;
    profile.filter = false;
    if (!$d76f6d4dfc9a3307$var$isModerationDecisionNoop(account) && account.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(account, "alert");
    if (!$d76f6d4dfc9a3307$var$isModerationDecisionNoop(profile) && profile.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(profile, "alert");
    let avatarBlur = false;
    let avatarNoOverride = false;
    if ((account.blur || account.blurMedia) && account.cause?.type !== "muted") {
        avatarBlur = true;
        avatarNoOverride = account.noOverride || profile.noOverride;
    } else if (profile.blur || profile.blurMedia) {
        avatarBlur = true;
        avatarNoOverride = account.noOverride || profile.noOverride;
    }
    if (account.cause?.type === "blocking" || account.cause?.type === "blocked-by" || account.cause?.type === "muted") {
        account.blur = false;
        account.noOverride = false;
    }
    return {
        decisions: {
            account: account,
            profile: profile
        },
        account: account.filter || account.blur || account.alert ? $d76f6d4dfc9a3307$var$toModerationUI(account) : {},
        profile: profile.filter || profile.blur || profile.alert ? $d76f6d4dfc9a3307$var$toModerationUI(profile) : {},
        avatar: {
            blur: avatarBlur,
            alert: account.alert || profile.alert,
            noOverride: avatarNoOverride
        }
    };
}
function $d76f6d4dfc9a3307$var$moderatePost(subject, opts) {
    const post = $d76f6d4dfc9a3307$var$decidePost(subject, opts);
    const account = $d76f6d4dfc9a3307$var$decideAccount(subject.author, opts);
    const profile = $d76f6d4dfc9a3307$var$decideProfile(subject.author, opts);
    let quote;
    let quotedAccount;
    if ($d76f6d4dfc9a3307$var$isQuotedPost(subject.embed)) {
        quote = $d76f6d4dfc9a3307$var$decideQuotedPost(subject.embed, opts);
        quotedAccount = $d76f6d4dfc9a3307$var$decideQuotedPostAccount(subject.embed, opts);
    } else if ($d76f6d4dfc9a3307$var$isQuotedPostWithMedia(subject.embed)) {
        quote = $d76f6d4dfc9a3307$var$decideQuotedPostWithMedia(subject.embed, opts);
        quotedAccount = $d76f6d4dfc9a3307$var$decideQuotedPostWithMediaAccount(subject.embed, opts);
    }
    if (quote?.blurMedia) quote.blur = true;
    if (!$d76f6d4dfc9a3307$var$isModerationDecisionNoop(post) && post.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(post, "blur");
    if (account.cause && account.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(account, "noop");
    if (profile.cause && profile.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(profile, "noop");
    if (quote && !$d76f6d4dfc9a3307$var$isModerationDecisionNoop(quote) && quote.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(quote, "blur");
    if (quotedAccount && !$d76f6d4dfc9a3307$var$isModerationDecisionNoop(quotedAccount) && quotedAccount.did === opts.userDid) $d76f6d4dfc9a3307$var$downgradeDecision(quotedAccount, "noop");
    const mergedForFeed = $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(post, account, quote, quotedAccount);
    const mergedForView = $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(post, account);
    const mergedQuote = $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(quote, quotedAccount);
    let blurAvatar = false;
    if ((account.blur || account.blurMedia) && account.cause?.type !== "muted") blurAvatar = true;
    else if ((profile.blur || profile.blurMedia) && profile.cause?.type !== "muted") blurAvatar = true;
    return {
        decisions: {
            post: post,
            account: account,
            profile: profile,
            quote: quote,
            quotedAccount: quotedAccount
        },
        content: {
            cause: !$d76f6d4dfc9a3307$var$isModerationDecisionNoop(mergedForView) ? mergedForView.cause : mergedForFeed.filter ? mergedForFeed.cause : void 0,
            filter: mergedForFeed.filter,
            blur: mergedForView.blur,
            alert: mergedForView.alert,
            noOverride: mergedForView.noOverride
        },
        avatar: {
            blur: blurAvatar,
            alert: account.alert || profile.alert,
            noOverride: account.noOverride || profile.noOverride
        },
        embed: !$d76f6d4dfc9a3307$var$isModerationDecisionNoop(mergedQuote, {
            ignoreFilter: true
        }) ? {
            cause: mergedQuote.cause,
            blur: mergedQuote.blur,
            alert: mergedQuote.alert,
            noOverride: mergedQuote.noOverride
        } : account.blurMedia ? {
            cause: account.cause,
            blur: true,
            noOverride: account.noOverride
        } : post.blurMedia ? {
            cause: post.cause,
            blur: true,
            noOverride: post.noOverride
        } : {}
    };
}
function $d76f6d4dfc9a3307$var$moderateFeedGenerator(subject, opts) {
    const feedGenerator = $d76f6d4dfc9a3307$var$decideFeedGenerator(subject, opts);
    const account = $d76f6d4dfc9a3307$var$decideAccount(subject.creator, opts);
    const profile = $d76f6d4dfc9a3307$var$decideProfile(subject.creator, opts);
    const merged = $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(feedGenerator, account);
    return {
        decisions: {
            feedGenerator: feedGenerator,
            account: account,
            profile: profile
        },
        content: {
            cause: $d76f6d4dfc9a3307$var$isModerationDecisionNoop(merged) ? void 0 : merged.cause,
            filter: merged.filter,
            blur: merged.blur,
            alert: merged.alert,
            noOverride: merged.noOverride
        },
        avatar: {
            blur: account.blurMedia || profile.blurMedia,
            alert: account.alert,
            noOverride: account.noOverride || profile.noOverride
        }
    };
}
function $d76f6d4dfc9a3307$var$moderateUserList(subject, opts) {
    const userList = $d76f6d4dfc9a3307$var$decideUserList(subject, opts);
    const account = $d76f6d4dfc9a3307$var$defs_exports5.isProfileViewBasic(subject.creator) ? $d76f6d4dfc9a3307$var$decideAccount(subject.creator, opts) : $d76f6d4dfc9a3307$var$ModerationDecision.noop();
    const profile = $d76f6d4dfc9a3307$var$defs_exports5.isProfileViewBasic(subject.creator) ? $d76f6d4dfc9a3307$var$decideProfile(subject.creator, opts) : $d76f6d4dfc9a3307$var$ModerationDecision.noop();
    const merged = $d76f6d4dfc9a3307$var$takeHighestPriorityDecision(userList, account);
    return {
        decisions: {
            userList: userList,
            account: account,
            profile: profile
        },
        content: {
            cause: $d76f6d4dfc9a3307$var$isModerationDecisionNoop(merged) ? void 0 : merged.cause,
            filter: merged.filter,
            blur: merged.blur,
            alert: merged.alert,
            noOverride: merged.noOverride
        },
        avatar: {
            blur: account.blurMedia || profile.blurMedia,
            alert: account.alert,
            noOverride: account.noOverride || profile.noOverride
        }
    };
}
// src/moderation/const/label-groups.ts
var $d76f6d4dfc9a3307$var$LABEL_GROUPS = {
    system: {
        id: "system",
        configurable: false,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["!hide"],
            $d76f6d4dfc9a3307$var$LABELS["!no-promote"],
            $d76f6d4dfc9a3307$var$LABELS["!warn"]
        ],
        strings: {
            settings: {
                en: {
                    name: "System",
                    description: "Moderator overrides for special cases."
                }
            }
        }
    },
    legal: {
        id: "legal",
        configurable: false,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["dmca-violation"],
            $d76f6d4dfc9a3307$var$LABELS["doxxing"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Legal",
                    description: "Content removed for legal reasons."
                }
            }
        }
    },
    sexual: {
        id: "sexual",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["porn"],
            $d76f6d4dfc9a3307$var$LABELS["sexual"],
            $d76f6d4dfc9a3307$var$LABELS["nudity"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Adult Content",
                    description: "Content which is sexual in nature."
                }
            }
        }
    },
    violence: {
        id: "violence",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["nsfl"],
            $d76f6d4dfc9a3307$var$LABELS["corpse"],
            $d76f6d4dfc9a3307$var$LABELS["gore"],
            $d76f6d4dfc9a3307$var$LABELS["torture"],
            $d76f6d4dfc9a3307$var$LABELS["self-harm"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Violence",
                    description: "Content which is violent or deeply disturbing."
                }
            }
        }
    },
    intolerance: {
        id: "intolerance",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["intolerant-race"],
            $d76f6d4dfc9a3307$var$LABELS["intolerant-gender"],
            $d76f6d4dfc9a3307$var$LABELS["intolerant-sexual-orientation"],
            $d76f6d4dfc9a3307$var$LABELS["intolerant-religion"],
            $d76f6d4dfc9a3307$var$LABELS["intolerant"],
            $d76f6d4dfc9a3307$var$LABELS["icon-intolerant"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Intolerance",
                    description: "Content or behavior which is hateful or intolerant toward a group of people."
                }
            }
        }
    },
    rude: {
        id: "rude",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["threat"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Rude",
                    description: "Behavior which is rude toward other users."
                }
            }
        }
    },
    curation: {
        id: "curation",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["spoiler"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Curational",
                    description: "Subjective moderation geared towards curating a more positive environment."
                }
            }
        }
    },
    spam: {
        id: "spam",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["spam"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Spam",
                    description: "Content which doesn't add to the conversation."
                }
            }
        }
    },
    misinfo: {
        id: "misinfo",
        configurable: true,
        labels: [
            $d76f6d4dfc9a3307$var$LABELS["account-security"],
            $d76f6d4dfc9a3307$var$LABELS["net-abuse"],
            $d76f6d4dfc9a3307$var$LABELS["impersonation"],
            $d76f6d4dfc9a3307$var$LABELS["scam"]
        ],
        strings: {
            settings: {
                en: {
                    name: "Misinformation",
                    description: "Content which misleads or defrauds users."
                }
            }
        }
    }
};
// src/bsky-agent.ts
var $d76f6d4dfc9a3307$var$BskyAgent = class extends $d76f6d4dfc9a3307$var$AtpAgent {
    constructor(){
        super(...arguments);
        this.getTimeline = (params2, opts)=>this.api.app.bsky.feed.getTimeline(params2, opts);
        this.getAuthorFeed = (params2, opts)=>this.api.app.bsky.feed.getAuthorFeed(params2, opts);
        this.getActorLikes = (params2, opts)=>this.api.app.bsky.feed.getActorLikes(params2, opts);
        this.getPostThread = (params2, opts)=>this.api.app.bsky.feed.getPostThread(params2, opts);
        this.getPost = (params2)=>this.api.app.bsky.feed.post.get(params2);
        this.getPosts = (params2, opts)=>this.api.app.bsky.feed.getPosts(params2, opts);
        this.getLikes = (params2, opts)=>this.api.app.bsky.feed.getLikes(params2, opts);
        this.getRepostedBy = (params2, opts)=>this.api.app.bsky.feed.getRepostedBy(params2, opts);
        this.getFollows = (params2, opts)=>this.api.app.bsky.graph.getFollows(params2, opts);
        this.getFollowers = (params2, opts)=>this.api.app.bsky.graph.getFollowers(params2, opts);
        this.getProfile = (params2, opts)=>this.api.app.bsky.actor.getProfile(params2, opts);
        this.getProfiles = (params2, opts)=>this.api.app.bsky.actor.getProfiles(params2, opts);
        this.getSuggestions = (params2, opts)=>this.api.app.bsky.actor.getSuggestions(params2, opts);
        this.searchActors = (params2, opts)=>this.api.app.bsky.actor.searchActors(params2, opts);
        this.searchActorsTypeahead = (params2, opts)=>this.api.app.bsky.actor.searchActorsTypeahead(params2, opts);
        this.listNotifications = (params2, opts)=>this.api.app.bsky.notification.listNotifications(params2, opts);
        this.countUnreadNotifications = (params2, opts)=>this.api.app.bsky.notification.getUnreadCount(params2, opts);
    }
    get app() {
        return this.api.app;
    }
    async post(record) {
        if (!this.session) throw new Error("Not logged in");
        record.createdAt = record.createdAt || new Date().toISOString();
        return this.api.app.bsky.feed.post.create({
            repo: this.session.did
        }, record);
    }
    async deletePost(postUri) {
        if (!this.session) throw new Error("Not logged in");
        const postUrip = new $d76f6d4dfc9a3307$var$AtUri(postUri);
        return await this.api.app.bsky.feed.post.delete({
            repo: postUrip.hostname,
            rkey: postUrip.rkey
        });
    }
    async like(uri2, cid2) {
        if (!this.session) throw new Error("Not logged in");
        return await this.api.app.bsky.feed.like.create({
            repo: this.session.did
        }, {
            subject: {
                uri: uri2,
                cid: cid2
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteLike(likeUri) {
        if (!this.session) throw new Error("Not logged in");
        const likeUrip = new $d76f6d4dfc9a3307$var$AtUri(likeUri);
        return await this.api.app.bsky.feed.like.delete({
            repo: likeUrip.hostname,
            rkey: likeUrip.rkey
        });
    }
    async repost(uri2, cid2) {
        if (!this.session) throw new Error("Not logged in");
        return await this.api.app.bsky.feed.repost.create({
            repo: this.session.did
        }, {
            subject: {
                uri: uri2,
                cid: cid2
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteRepost(repostUri) {
        if (!this.session) throw new Error("Not logged in");
        const repostUrip = new $d76f6d4dfc9a3307$var$AtUri(repostUri);
        return await this.api.app.bsky.feed.repost.delete({
            repo: repostUrip.hostname,
            rkey: repostUrip.rkey
        });
    }
    async follow(subjectDid) {
        if (!this.session) throw new Error("Not logged in");
        return await this.api.app.bsky.graph.follow.create({
            repo: this.session.did
        }, {
            subject: subjectDid,
            createdAt: new Date().toISOString()
        });
    }
    async deleteFollow(followUri) {
        if (!this.session) throw new Error("Not logged in");
        const followUrip = new $d76f6d4dfc9a3307$var$AtUri(followUri);
        return await this.api.app.bsky.graph.follow.delete({
            repo: followUrip.hostname,
            rkey: followUrip.rkey
        });
    }
    async upsertProfile(updateFn) {
        if (!this.session) throw new Error("Not logged in");
        let retriesRemaining = 5;
        while(retriesRemaining >= 0){
            const existing = await this.com.atproto.repo.getRecord({
                repo: this.session.did,
                collection: "app.bsky.actor.profile",
                rkey: "self"
            }).catch((_)=>void 0);
            const updated = await updateFn(existing?.data.value);
            if (updated) updated.$type = "app.bsky.actor.profile";
            const validation = $d76f6d4dfc9a3307$var$profile_exports.validateRecord(updated);
            if (!validation.success) throw validation.error;
            try {
                await this.com.atproto.repo.putRecord({
                    repo: this.session.did,
                    collection: "app.bsky.actor.profile",
                    rkey: "self",
                    record: updated,
                    swapRecord: existing?.data.cid || null
                });
            } catch (e) {
                if (retriesRemaining > 0 && e instanceof $d76f6d4dfc9a3307$var$putRecord_exports.InvalidSwapError) {
                    retriesRemaining--;
                    continue;
                } else throw e;
            }
            break;
        }
    }
    async mute(actor) {
        return this.api.app.bsky.graph.muteActor({
            actor: actor
        });
    }
    async unmute(actor) {
        return this.api.app.bsky.graph.unmuteActor({
            actor: actor
        });
    }
    async updateSeenNotifications(seenAt) {
        seenAt = seenAt || new Date().toISOString();
        return this.api.app.bsky.notification.updateSeen({
            seenAt: seenAt
        });
    }
};


var $50dd583e1e079a0c$exports = {};

$parcel$defineInteropFlag($50dd583e1e079a0c$exports);

$parcel$export($50dd583e1e079a0c$exports, "Dexie", () => $50dd583e1e079a0c$export$4ece27d405df7279);
$parcel$export($50dd583e1e079a0c$exports, "RangeSet", () => $50dd583e1e079a0c$export$34cb5241245008dd);
$parcel$export($50dd583e1e079a0c$exports, "mergeRanges", () => $50dd583e1e079a0c$export$4876cc3130d3f820);
$parcel$export($50dd583e1e079a0c$exports, "rangesOverlap", () => $50dd583e1e079a0c$export$8f43b23b5d8de905);
$parcel$export($50dd583e1e079a0c$exports, "liveQuery", () => $50dd583e1e079a0c$export$6a9705d8f6f38796);
$parcel$export($50dd583e1e079a0c$exports, "default", () => $50dd583e1e079a0c$export$4ece27d405df7279);
/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * By David Fahlander, david.fahlander@gmail.com
 *
 * Version 3.2.4, Tue May 30 2023
 *
 * https://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 */ /*! *****************************************************************************
Copyright (c) Microsoft Corporation.
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ var $50dd583e1e079a0c$var$__assign = function() {
    $50dd583e1e079a0c$var$__assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $50dd583e1e079a0c$var$__assign.apply(this, arguments);
};
function $50dd583e1e079a0c$var$__spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
var $50dd583e1e079a0c$var$_global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : $parcel$global;
var $50dd583e1e079a0c$var$keys = Object.keys;
var $50dd583e1e079a0c$var$isArray = Array.isArray;
if (typeof Promise !== "undefined" && !$50dd583e1e079a0c$var$_global.Promise) $50dd583e1e079a0c$var$_global.Promise = Promise;
function $50dd583e1e079a0c$var$extend(obj, extension) {
    if (typeof extension !== "object") return obj;
    $50dd583e1e079a0c$var$keys(extension).forEach(function(key) {
        obj[key] = extension[key];
    });
    return obj;
}
var $50dd583e1e079a0c$var$getProto = Object.getPrototypeOf;
var $50dd583e1e079a0c$var$_hasOwn = {}.hasOwnProperty;
function $50dd583e1e079a0c$var$hasOwn(obj, prop) {
    return $50dd583e1e079a0c$var$_hasOwn.call(obj, prop);
}
function $50dd583e1e079a0c$var$props(proto, extension) {
    if (typeof extension === "function") extension = extension($50dd583e1e079a0c$var$getProto(proto));
    (typeof Reflect === "undefined" ? $50dd583e1e079a0c$var$keys : Reflect.ownKeys)(extension).forEach(function(key) {
        $50dd583e1e079a0c$var$setProp(proto, key, extension[key]);
    });
}
var $50dd583e1e079a0c$var$defineProperty = Object.defineProperty;
function $50dd583e1e079a0c$var$setProp(obj, prop, functionOrGetSet, options) {
    $50dd583e1e079a0c$var$defineProperty(obj, prop, $50dd583e1e079a0c$var$extend(functionOrGetSet && $50dd583e1e079a0c$var$hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? {
        get: functionOrGetSet.get,
        set: functionOrGetSet.set,
        configurable: true
    } : {
        value: functionOrGetSet,
        configurable: true,
        writable: true
    }, options));
}
function $50dd583e1e079a0c$var$derive(Child) {
    return {
        from: function(Parent) {
            Child.prototype = Object.create(Parent.prototype);
            $50dd583e1e079a0c$var$setProp(Child.prototype, "constructor", Child);
            return {
                extend: $50dd583e1e079a0c$var$props.bind(null, Child.prototype)
            };
        }
    };
}
var $50dd583e1e079a0c$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
function $50dd583e1e079a0c$var$getPropertyDescriptor(obj, prop) {
    var pd = $50dd583e1e079a0c$var$getOwnPropertyDescriptor(obj, prop);
    var proto;
    return pd || (proto = $50dd583e1e079a0c$var$getProto(obj)) && $50dd583e1e079a0c$var$getPropertyDescriptor(proto, prop);
}
var $50dd583e1e079a0c$var$_slice = [].slice;
function $50dd583e1e079a0c$var$slice(args, start, end) {
    return $50dd583e1e079a0c$var$_slice.call(args, start, end);
}
function $50dd583e1e079a0c$var$override(origFunc, overridedFactory) {
    return overridedFactory(origFunc);
}
function $50dd583e1e079a0c$var$assert(b) {
    if (!b) throw new Error("Assertion Failed");
}
function $50dd583e1e079a0c$var$asap$1(fn) {
    if ($50dd583e1e079a0c$var$_global.setImmediate) setImmediate(fn);
    else setTimeout(fn, 0);
}
function $50dd583e1e079a0c$var$arrayToObject(array, extractor) {
    return array.reduce(function(result, item, i) {
        var nameAndValue = extractor(item, i);
        if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];
        return result;
    }, {});
}
function $50dd583e1e079a0c$var$tryCatch(fn, onerror, args) {
    try {
        fn.apply(null, args);
    } catch (ex) {
        onerror && onerror(ex);
    }
}
function $50dd583e1e079a0c$var$getByKeyPath(obj, keyPath) {
    if ($50dd583e1e079a0c$var$hasOwn(obj, keyPath)) return obj[keyPath];
    if (!keyPath) return obj;
    if (typeof keyPath !== "string") {
        var rv = [];
        for(var i = 0, l = keyPath.length; i < l; ++i){
            var val = $50dd583e1e079a0c$var$getByKeyPath(obj, keyPath[i]);
            rv.push(val);
        }
        return rv;
    }
    var period = keyPath.indexOf(".");
    if (period !== -1) {
        var innerObj = obj[keyPath.substr(0, period)];
        return innerObj === undefined ? undefined : $50dd583e1e079a0c$var$getByKeyPath(innerObj, keyPath.substr(period + 1));
    }
    return undefined;
}
function $50dd583e1e079a0c$var$setByKeyPath(obj, keyPath, value) {
    if (!obj || keyPath === undefined) return;
    if ("isFrozen" in Object && Object.isFrozen(obj)) return;
    if (typeof keyPath !== "string" && "length" in keyPath) {
        $50dd583e1e079a0c$var$assert(typeof value !== "string" && "length" in value);
        for(var i = 0, l = keyPath.length; i < l; ++i)$50dd583e1e079a0c$var$setByKeyPath(obj, keyPath[i], value[i]);
    } else {
        var period = keyPath.indexOf(".");
        if (period !== -1) {
            var currentKeyPath = keyPath.substr(0, period);
            var remainingKeyPath = keyPath.substr(period + 1);
            if (remainingKeyPath === "") {
                if (value === undefined) {
                    if ($50dd583e1e079a0c$var$isArray(obj) && !isNaN(parseInt(currentKeyPath))) obj.splice(currentKeyPath, 1);
                    else delete obj[currentKeyPath];
                } else obj[currentKeyPath] = value;
            } else {
                var innerObj = obj[currentKeyPath];
                if (!innerObj || !$50dd583e1e079a0c$var$hasOwn(obj, currentKeyPath)) innerObj = obj[currentKeyPath] = {};
                $50dd583e1e079a0c$var$setByKeyPath(innerObj, remainingKeyPath, value);
            }
        } else if (value === undefined) {
            if ($50dd583e1e079a0c$var$isArray(obj) && !isNaN(parseInt(keyPath))) obj.splice(keyPath, 1);
            else delete obj[keyPath];
        } else obj[keyPath] = value;
    }
}
function $50dd583e1e079a0c$var$delByKeyPath(obj, keyPath) {
    if (typeof keyPath === "string") $50dd583e1e079a0c$var$setByKeyPath(obj, keyPath, undefined);
    else if ("length" in keyPath) [].map.call(keyPath, function(kp) {
        $50dd583e1e079a0c$var$setByKeyPath(obj, kp, undefined);
    });
}
function $50dd583e1e079a0c$var$shallowClone(obj) {
    var rv = {};
    for(var m in obj)if ($50dd583e1e079a0c$var$hasOwn(obj, m)) rv[m] = obj[m];
    return rv;
}
var $50dd583e1e079a0c$var$concat = [].concat;
function $50dd583e1e079a0c$var$flatten(a) {
    return $50dd583e1e079a0c$var$concat.apply([], a);
}
var $50dd583e1e079a0c$var$intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat($50dd583e1e079a0c$var$flatten([
    8,
    16,
    32,
    64
].map(function(num) {
    return [
        "Int",
        "Uint",
        "Float"
    ].map(function(t) {
        return t + num + "Array";
    });
}))).filter(function(t) {
    return $50dd583e1e079a0c$var$_global[t];
});
var $50dd583e1e079a0c$var$intrinsicTypes = $50dd583e1e079a0c$var$intrinsicTypeNames.map(function(t) {
    return $50dd583e1e079a0c$var$_global[t];
});
$50dd583e1e079a0c$var$arrayToObject($50dd583e1e079a0c$var$intrinsicTypeNames, function(x) {
    return [
        x,
        true
    ];
});
var $50dd583e1e079a0c$var$circularRefs = null;
function $50dd583e1e079a0c$var$deepClone(any) {
    $50dd583e1e079a0c$var$circularRefs = typeof WeakMap !== "undefined" && new WeakMap();
    var rv = $50dd583e1e079a0c$var$innerDeepClone(any);
    $50dd583e1e079a0c$var$circularRefs = null;
    return rv;
}
function $50dd583e1e079a0c$var$innerDeepClone(any) {
    if (!any || typeof any !== "object") return any;
    var rv = $50dd583e1e079a0c$var$circularRefs && $50dd583e1e079a0c$var$circularRefs.get(any);
    if (rv) return rv;
    if ($50dd583e1e079a0c$var$isArray(any)) {
        rv = [];
        $50dd583e1e079a0c$var$circularRefs && $50dd583e1e079a0c$var$circularRefs.set(any, rv);
        for(var i = 0, l = any.length; i < l; ++i)rv.push($50dd583e1e079a0c$var$innerDeepClone(any[i]));
    } else if ($50dd583e1e079a0c$var$intrinsicTypes.indexOf(any.constructor) >= 0) rv = any;
    else {
        var proto = $50dd583e1e079a0c$var$getProto(any);
        rv = proto === Object.prototype ? {} : Object.create(proto);
        $50dd583e1e079a0c$var$circularRefs && $50dd583e1e079a0c$var$circularRefs.set(any, rv);
        for(var prop in any)if ($50dd583e1e079a0c$var$hasOwn(any, prop)) rv[prop] = $50dd583e1e079a0c$var$innerDeepClone(any[prop]);
    }
    return rv;
}
var $50dd583e1e079a0c$var$toString = {}.toString;
function $50dd583e1e079a0c$var$toStringTag(o) {
    return $50dd583e1e079a0c$var$toString.call(o).slice(8, -1);
}
var $50dd583e1e079a0c$var$iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
var $50dd583e1e079a0c$var$getIteratorOf = typeof $50dd583e1e079a0c$var$iteratorSymbol === "symbol" ? function(x) {
    var i;
    return x != null && (i = x[$50dd583e1e079a0c$var$iteratorSymbol]) && i.apply(x);
} : function() {
    return null;
};
var $50dd583e1e079a0c$var$NO_CHAR_ARRAY = {};
function $50dd583e1e079a0c$var$getArrayOf(arrayLike) {
    var i, a, x, it;
    if (arguments.length === 1) {
        if ($50dd583e1e079a0c$var$isArray(arrayLike)) return arrayLike.slice();
        if (this === $50dd583e1e079a0c$var$NO_CHAR_ARRAY && typeof arrayLike === "string") return [
            arrayLike
        ];
        if (it = $50dd583e1e079a0c$var$getIteratorOf(arrayLike)) {
            a = [];
            while(x = it.next(), !x.done)a.push(x.value);
            return a;
        }
        if (arrayLike == null) return [
            arrayLike
        ];
        i = arrayLike.length;
        if (typeof i === "number") {
            a = new Array(i);
            while(i--)a[i] = arrayLike[i];
            return a;
        }
        return [
            arrayLike
        ];
    }
    i = arguments.length;
    a = new Array(i);
    while(i--)a[i] = arguments[i];
    return a;
}
var $50dd583e1e079a0c$var$isAsyncFunction = typeof Symbol !== "undefined" ? function(fn) {
    return fn[Symbol.toStringTag] === "AsyncFunction";
} : function() {
    return false;
};
var $50dd583e1e079a0c$var$debug = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
function $50dd583e1e079a0c$var$setDebug(value, filter) {
    $50dd583e1e079a0c$var$debug = value;
    $50dd583e1e079a0c$var$libraryFilter = filter;
}
var $50dd583e1e079a0c$var$libraryFilter = function() {
    return true;
};
var $50dd583e1e079a0c$var$NEEDS_THROW_FOR_STACK = !new Error("").stack;
function $50dd583e1e079a0c$var$getErrorWithStack() {
    if ($50dd583e1e079a0c$var$NEEDS_THROW_FOR_STACK) try {
        $50dd583e1e079a0c$var$getErrorWithStack.arguments;
        throw new Error();
    } catch (e) {
        return e;
    }
    return new Error();
}
function $50dd583e1e079a0c$var$prettyStack(exception, numIgnoredFrames) {
    var stack = exception.stack;
    if (!stack) return "";
    numIgnoredFrames = numIgnoredFrames || 0;
    if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split("\n").length;
    return stack.split("\n").slice(numIgnoredFrames).filter($50dd583e1e079a0c$var$libraryFilter).map(function(frame) {
        return "\n" + frame;
    }).join("");
}
var $50dd583e1e079a0c$var$dexieErrorNames = [
    "Modify",
    "Bulk",
    "OpenFailed",
    "VersionChange",
    "Schema",
    "Upgrade",
    "InvalidTable",
    "MissingAPI",
    "NoSuchDatabase",
    "InvalidArgument",
    "SubTransaction",
    "Unsupported",
    "Internal",
    "DatabaseClosed",
    "PrematureCommit",
    "ForeignAwait"
];
var $50dd583e1e079a0c$var$idbDomErrorNames = [
    "Unknown",
    "Constraint",
    "Data",
    "TransactionInactive",
    "ReadOnly",
    "Version",
    "NotFound",
    "InvalidState",
    "InvalidAccess",
    "Abort",
    "Timeout",
    "QuotaExceeded",
    "Syntax",
    "DataClone"
];
var $50dd583e1e079a0c$var$errorList = $50dd583e1e079a0c$var$dexieErrorNames.concat($50dd583e1e079a0c$var$idbDomErrorNames);
var $50dd583e1e079a0c$var$defaultTexts = {
    VersionChanged: "Database version changed by other database connection",
    DatabaseClosed: "Database has been closed",
    Abort: "Transaction aborted",
    TransactionInactive: "Transaction has already completed or failed",
    MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
};
function $50dd583e1e079a0c$var$DexieError(name, msg) {
    this._e = $50dd583e1e079a0c$var$getErrorWithStack();
    this.name = name;
    this.message = msg;
}
$50dd583e1e079a0c$var$derive($50dd583e1e079a0c$var$DexieError).from(Error).extend({
    stack: {
        get: function() {
            return this._stack || (this._stack = this.name + ": " + this.message + $50dd583e1e079a0c$var$prettyStack(this._e, 2));
        }
    },
    toString: function() {
        return this.name + ": " + this.message;
    }
});
function $50dd583e1e079a0c$var$getMultiErrorMessage(msg, failures) {
    return msg + ". Errors: " + Object.keys(failures).map(function(key) {
        return failures[key].toString();
    }).filter(function(v, i, s) {
        return s.indexOf(v) === i;
    }).join("\n");
}
function $50dd583e1e079a0c$var$ModifyError(msg, failures, successCount, failedKeys) {
    this._e = $50dd583e1e079a0c$var$getErrorWithStack();
    this.failures = failures;
    this.failedKeys = failedKeys;
    this.successCount = successCount;
    this.message = $50dd583e1e079a0c$var$getMultiErrorMessage(msg, failures);
}
$50dd583e1e079a0c$var$derive($50dd583e1e079a0c$var$ModifyError).from($50dd583e1e079a0c$var$DexieError);
function $50dd583e1e079a0c$var$BulkError(msg, failures) {
    this._e = $50dd583e1e079a0c$var$getErrorWithStack();
    this.name = "BulkError";
    this.failures = Object.keys(failures).map(function(pos) {
        return failures[pos];
    });
    this.failuresByPos = failures;
    this.message = $50dd583e1e079a0c$var$getMultiErrorMessage(msg, failures);
}
$50dd583e1e079a0c$var$derive($50dd583e1e079a0c$var$BulkError).from($50dd583e1e079a0c$var$DexieError);
var $50dd583e1e079a0c$var$errnames = $50dd583e1e079a0c$var$errorList.reduce(function(obj, name) {
    return obj[name] = name + "Error", obj;
}, {});
var $50dd583e1e079a0c$var$BaseException = $50dd583e1e079a0c$var$DexieError;
var $50dd583e1e079a0c$var$exceptions = $50dd583e1e079a0c$var$errorList.reduce(function(obj, name) {
    var fullName = name + "Error";
    function DexieError(msgOrInner, inner) {
        this._e = $50dd583e1e079a0c$var$getErrorWithStack();
        this.name = fullName;
        if (!msgOrInner) {
            this.message = $50dd583e1e079a0c$var$defaultTexts[name] || fullName;
            this.inner = null;
        } else if (typeof msgOrInner === "string") {
            this.message = "" + msgOrInner + (!inner ? "" : "\n " + inner);
            this.inner = inner || null;
        } else if (typeof msgOrInner === "object") {
            this.message = msgOrInner.name + " " + msgOrInner.message;
            this.inner = msgOrInner;
        }
    }
    $50dd583e1e079a0c$var$derive(DexieError).from($50dd583e1e079a0c$var$BaseException);
    obj[name] = DexieError;
    return obj;
}, {});
$50dd583e1e079a0c$var$exceptions.Syntax = SyntaxError;
$50dd583e1e079a0c$var$exceptions.Type = TypeError;
$50dd583e1e079a0c$var$exceptions.Range = RangeError;
var $50dd583e1e079a0c$var$exceptionMap = $50dd583e1e079a0c$var$idbDomErrorNames.reduce(function(obj, name) {
    obj[name + "Error"] = $50dd583e1e079a0c$var$exceptions[name];
    return obj;
}, {});
function $50dd583e1e079a0c$var$mapError(domError, message) {
    if (!domError || domError instanceof $50dd583e1e079a0c$var$DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !$50dd583e1e079a0c$var$exceptionMap[domError.name]) return domError;
    var rv = new $50dd583e1e079a0c$var$exceptionMap[domError.name](message || domError.message, domError);
    if ("stack" in domError) $50dd583e1e079a0c$var$setProp(rv, "stack", {
        get: function() {
            return this.inner.stack;
        }
    });
    return rv;
}
var $50dd583e1e079a0c$var$fullNameExceptions = $50dd583e1e079a0c$var$errorList.reduce(function(obj, name) {
    if ([
        "Syntax",
        "Type",
        "Range"
    ].indexOf(name) === -1) obj[name + "Error"] = $50dd583e1e079a0c$var$exceptions[name];
    return obj;
}, {});
$50dd583e1e079a0c$var$fullNameExceptions.ModifyError = $50dd583e1e079a0c$var$ModifyError;
$50dd583e1e079a0c$var$fullNameExceptions.DexieError = $50dd583e1e079a0c$var$DexieError;
$50dd583e1e079a0c$var$fullNameExceptions.BulkError = $50dd583e1e079a0c$var$BulkError;
function $50dd583e1e079a0c$var$nop() {}
function $50dd583e1e079a0c$var$mirror(val) {
    return val;
}
function $50dd583e1e079a0c$var$pureFunctionChain(f1, f2) {
    if (f1 == null || f1 === $50dd583e1e079a0c$var$mirror) return f2;
    return function(val) {
        return f2(f1(val));
    };
}
function $50dd583e1e079a0c$var$callBoth(on1, on2) {
    return function() {
        on1.apply(this, arguments);
        on2.apply(this, arguments);
    };
}
function $50dd583e1e079a0c$var$hookCreatingChain(f1, f2) {
    if (f1 === $50dd583e1e079a0c$var$nop) return f2;
    return function() {
        var res = f1.apply(this, arguments);
        if (res !== undefined) arguments[0] = res;
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $50dd583e1e079a0c$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $50dd583e1e079a0c$var$callBoth(onerror, this.onerror) : onerror;
        return res2 !== undefined ? res2 : res;
    };
}
function $50dd583e1e079a0c$var$hookDeletingChain(f1, f2) {
    if (f1 === $50dd583e1e079a0c$var$nop) return f2;
    return function() {
        f1.apply(this, arguments);
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = this.onerror = null;
        f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $50dd583e1e079a0c$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $50dd583e1e079a0c$var$callBoth(onerror, this.onerror) : onerror;
    };
}
function $50dd583e1e079a0c$var$hookUpdatingChain(f1, f2) {
    if (f1 === $50dd583e1e079a0c$var$nop) return f2;
    return function(modifications) {
        var res = f1.apply(this, arguments);
        $50dd583e1e079a0c$var$extend(modifications, res);
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $50dd583e1e079a0c$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $50dd583e1e079a0c$var$callBoth(onerror, this.onerror) : onerror;
        return res === undefined ? res2 === undefined ? undefined : res2 : $50dd583e1e079a0c$var$extend(res, res2);
    };
}
function $50dd583e1e079a0c$var$reverseStoppableEventChain(f1, f2) {
    if (f1 === $50dd583e1e079a0c$var$nop) return f2;
    return function() {
        if (f2.apply(this, arguments) === false) return false;
        return f1.apply(this, arguments);
    };
}
function $50dd583e1e079a0c$var$promisableChain(f1, f2) {
    if (f1 === $50dd583e1e079a0c$var$nop) return f2;
    return function() {
        var res = f1.apply(this, arguments);
        if (res && typeof res.then === "function") {
            var thiz = this, i = arguments.length, args = new Array(i);
            while(i--)args[i] = arguments[i];
            return res.then(function() {
                return f2.apply(thiz, args);
            });
        }
        return f2.apply(this, arguments);
    };
}
var $50dd583e1e079a0c$var$INTERNAL = {};
var $50dd583e1e079a0c$var$LONG_STACKS_CLIP_LIMIT = 100, $50dd583e1e079a0c$var$MAX_LONG_STACKS = 20, $50dd583e1e079a0c$var$ZONE_ECHO_LIMIT = 100, $50dd583e1e079a0c$var$_a$1 = typeof Promise === "undefined" ? [] : function() {
    var globalP = Promise.resolve();
    if (typeof crypto === "undefined" || !crypto.subtle) return [
        globalP,
        $50dd583e1e079a0c$var$getProto(globalP),
        globalP
    ];
    var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([
        0
    ]));
    return [
        nativeP,
        $50dd583e1e079a0c$var$getProto(nativeP),
        globalP
    ];
}(), $50dd583e1e079a0c$var$resolvedNativePromise = $50dd583e1e079a0c$var$_a$1[0], $50dd583e1e079a0c$var$nativePromiseProto = $50dd583e1e079a0c$var$_a$1[1], $50dd583e1e079a0c$var$resolvedGlobalPromise = $50dd583e1e079a0c$var$_a$1[2], $50dd583e1e079a0c$var$nativePromiseThen = $50dd583e1e079a0c$var$nativePromiseProto && $50dd583e1e079a0c$var$nativePromiseProto.then;
var $50dd583e1e079a0c$var$NativePromise = $50dd583e1e079a0c$var$resolvedNativePromise && $50dd583e1e079a0c$var$resolvedNativePromise.constructor;
var $50dd583e1e079a0c$var$patchGlobalPromise = !!$50dd583e1e079a0c$var$resolvedGlobalPromise;
var $50dd583e1e079a0c$var$stack_being_generated = false;
var $50dd583e1e079a0c$var$schedulePhysicalTick = $50dd583e1e079a0c$var$resolvedGlobalPromise ? function() {
    $50dd583e1e079a0c$var$resolvedGlobalPromise.then($50dd583e1e079a0c$var$physicalTick);
} : $50dd583e1e079a0c$var$_global.setImmediate ? setImmediate.bind(null, $50dd583e1e079a0c$var$physicalTick) : $50dd583e1e079a0c$var$_global.MutationObserver ? function() {
    var hiddenDiv = document.createElement("div");
    new MutationObserver(function() {
        $50dd583e1e079a0c$var$physicalTick();
        hiddenDiv = null;
    }).observe(hiddenDiv, {
        attributes: true
    });
    hiddenDiv.setAttribute("i", "1");
} : function() {
    setTimeout($50dd583e1e079a0c$var$physicalTick, 0);
};
var $50dd583e1e079a0c$var$asap = function(callback, args) {
    $50dd583e1e079a0c$var$microtickQueue.push([
        callback,
        args
    ]);
    if ($50dd583e1e079a0c$var$needsNewPhysicalTick) {
        $50dd583e1e079a0c$var$schedulePhysicalTick();
        $50dd583e1e079a0c$var$needsNewPhysicalTick = false;
    }
};
var $50dd583e1e079a0c$var$isOutsideMicroTick = true, $50dd583e1e079a0c$var$needsNewPhysicalTick = true, $50dd583e1e079a0c$var$unhandledErrors = [], $50dd583e1e079a0c$var$rejectingErrors = [], $50dd583e1e079a0c$var$currentFulfiller = null, $50dd583e1e079a0c$var$rejectionMapper = $50dd583e1e079a0c$var$mirror;
var $50dd583e1e079a0c$var$globalPSD = {
    id: "global",
    global: true,
    ref: 0,
    unhandleds: [],
    onunhandled: $50dd583e1e079a0c$var$globalError,
    pgp: false,
    env: {},
    finalize: function() {
        this.unhandleds.forEach(function(uh) {
            try {
                $50dd583e1e079a0c$var$globalError(uh[0], uh[1]);
            } catch (e) {}
        });
    }
};
var $50dd583e1e079a0c$var$PSD = $50dd583e1e079a0c$var$globalPSD;
var $50dd583e1e079a0c$var$microtickQueue = [];
var $50dd583e1e079a0c$var$numScheduledCalls = 0;
var $50dd583e1e079a0c$var$tickFinalizers = [];
function $50dd583e1e079a0c$var$DexiePromise(fn) {
    if (typeof this !== "object") throw new TypeError("Promises must be constructed via new");
    this._listeners = [];
    this.onuncatched = $50dd583e1e079a0c$var$nop;
    this._lib = false;
    var psd = this._PSD = $50dd583e1e079a0c$var$PSD;
    if ($50dd583e1e079a0c$var$debug) {
        this._stackHolder = $50dd583e1e079a0c$var$getErrorWithStack();
        this._prev = null;
        this._numPrev = 0;
    }
    if (typeof fn !== "function") {
        if (fn !== $50dd583e1e079a0c$var$INTERNAL) throw new TypeError("Not a function");
        this._state = arguments[1];
        this._value = arguments[2];
        if (this._state === false) $50dd583e1e079a0c$var$handleRejection(this, this._value);
        return;
    }
    this._state = null;
    this._value = null;
    ++psd.ref;
    $50dd583e1e079a0c$var$executePromiseTask(this, fn);
}
var $50dd583e1e079a0c$var$thenProp = {
    get: function() {
        var psd = $50dd583e1e079a0c$var$PSD, microTaskId = $50dd583e1e079a0c$var$totalEchoes;
        function then(onFulfilled, onRejected) {
            var _this = this;
            var possibleAwait = !psd.global && (psd !== $50dd583e1e079a0c$var$PSD || microTaskId !== $50dd583e1e079a0c$var$totalEchoes);
            var cleanup = possibleAwait && !$50dd583e1e079a0c$var$decrementExpectedAwaits();
            var rv = new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
                $50dd583e1e079a0c$var$propagateToListener(_this, new $50dd583e1e079a0c$var$Listener($50dd583e1e079a0c$var$nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), $50dd583e1e079a0c$var$nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
            });
            $50dd583e1e079a0c$var$debug && $50dd583e1e079a0c$var$linkToPreviousPromise(rv, this);
            return rv;
        }
        then.prototype = $50dd583e1e079a0c$var$INTERNAL;
        return then;
    },
    set: function(value) {
        $50dd583e1e079a0c$var$setProp(this, "then", value && value.prototype === $50dd583e1e079a0c$var$INTERNAL ? $50dd583e1e079a0c$var$thenProp : {
            get: function() {
                return value;
            },
            set: $50dd583e1e079a0c$var$thenProp.set
        });
    }
};
$50dd583e1e079a0c$var$props($50dd583e1e079a0c$var$DexiePromise.prototype, {
    then: $50dd583e1e079a0c$var$thenProp,
    _then: function(onFulfilled, onRejected) {
        $50dd583e1e079a0c$var$propagateToListener(this, new $50dd583e1e079a0c$var$Listener(null, null, onFulfilled, onRejected, $50dd583e1e079a0c$var$PSD));
    },
    catch: function(onRejected) {
        if (arguments.length === 1) return this.then(null, onRejected);
        var type = arguments[0], handler = arguments[1];
        return typeof type === "function" ? this.then(null, function(err) {
            return err instanceof type ? handler(err) : $50dd583e1e079a0c$var$PromiseReject(err);
        }) : this.then(null, function(err) {
            return err && err.name === type ? handler(err) : $50dd583e1e079a0c$var$PromiseReject(err);
        });
    },
    finally: function(onFinally) {
        return this.then(function(value) {
            onFinally();
            return value;
        }, function(err) {
            onFinally();
            return $50dd583e1e079a0c$var$PromiseReject(err);
        });
    },
    stack: {
        get: function() {
            if (this._stack) return this._stack;
            try {
                $50dd583e1e079a0c$var$stack_being_generated = true;
                var stacks = $50dd583e1e079a0c$var$getStack(this, [], $50dd583e1e079a0c$var$MAX_LONG_STACKS);
                var stack = stacks.join("\nFrom previous: ");
                if (this._state !== null) this._stack = stack;
                return stack;
            } finally{
                $50dd583e1e079a0c$var$stack_being_generated = false;
            }
        }
    },
    timeout: function(ms, msg) {
        var _this = this;
        return ms < Infinity ? new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            var handle = setTimeout(function() {
                return reject(new $50dd583e1e079a0c$var$exceptions.Timeout(msg));
            }, ms);
            _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
        }) : this;
    }
});
if (typeof Symbol !== "undefined" && Symbol.toStringTag) $50dd583e1e079a0c$var$setProp($50dd583e1e079a0c$var$DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
$50dd583e1e079a0c$var$globalPSD.env = $50dd583e1e079a0c$var$snapShot();
function $50dd583e1e079a0c$var$Listener(onFulfilled, onRejected, resolve, reject, zone) {
    this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
    this.onRejected = typeof onRejected === "function" ? onRejected : null;
    this.resolve = resolve;
    this.reject = reject;
    this.psd = zone;
}
$50dd583e1e079a0c$var$props($50dd583e1e079a0c$var$DexiePromise, {
    all: function() {
        var values = $50dd583e1e079a0c$var$getArrayOf.apply(null, arguments).map($50dd583e1e079a0c$var$onPossibleParallellAsync);
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            if (values.length === 0) resolve([]);
            var remaining = values.length;
            values.forEach(function(a, i) {
                return $50dd583e1e079a0c$var$DexiePromise.resolve(a).then(function(x) {
                    values[i] = x;
                    if (!--remaining) resolve(values);
                }, reject);
            });
        });
    },
    resolve: function(value) {
        if (value instanceof $50dd583e1e079a0c$var$DexiePromise) return value;
        if (value && typeof value.then === "function") return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            value.then(resolve, reject);
        });
        var rv = new $50dd583e1e079a0c$var$DexiePromise($50dd583e1e079a0c$var$INTERNAL, true, value);
        $50dd583e1e079a0c$var$linkToPreviousPromise(rv, $50dd583e1e079a0c$var$currentFulfiller);
        return rv;
    },
    reject: $50dd583e1e079a0c$var$PromiseReject,
    race: function() {
        var values = $50dd583e1e079a0c$var$getArrayOf.apply(null, arguments).map($50dd583e1e079a0c$var$onPossibleParallellAsync);
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            values.map(function(value) {
                return $50dd583e1e079a0c$var$DexiePromise.resolve(value).then(resolve, reject);
            });
        });
    },
    PSD: {
        get: function() {
            return $50dd583e1e079a0c$var$PSD;
        },
        set: function(value) {
            return $50dd583e1e079a0c$var$PSD = value;
        }
    },
    totalEchoes: {
        get: function() {
            return $50dd583e1e079a0c$var$totalEchoes;
        }
    },
    newPSD: $50dd583e1e079a0c$var$newScope,
    usePSD: $50dd583e1e079a0c$var$usePSD,
    scheduler: {
        get: function() {
            return $50dd583e1e079a0c$var$asap;
        },
        set: function(value) {
            $50dd583e1e079a0c$var$asap = value;
        }
    },
    rejectionMapper: {
        get: function() {
            return $50dd583e1e079a0c$var$rejectionMapper;
        },
        set: function(value) {
            $50dd583e1e079a0c$var$rejectionMapper = value;
        }
    },
    follow: function(fn, zoneProps) {
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            return $50dd583e1e079a0c$var$newScope(function(resolve, reject) {
                var psd = $50dd583e1e079a0c$var$PSD;
                psd.unhandleds = [];
                psd.onunhandled = reject;
                psd.finalize = $50dd583e1e079a0c$var$callBoth(function() {
                    var _this = this;
                    $50dd583e1e079a0c$var$run_at_end_of_this_or_next_physical_tick(function() {
                        _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                    });
                }, psd.finalize);
                fn();
            }, zoneProps, resolve, reject);
        });
    }
});
if ($50dd583e1e079a0c$var$NativePromise) {
    if ($50dd583e1e079a0c$var$NativePromise.allSettled) $50dd583e1e079a0c$var$setProp($50dd583e1e079a0c$var$DexiePromise, "allSettled", function() {
        var possiblePromises = $50dd583e1e079a0c$var$getArrayOf.apply(null, arguments).map($50dd583e1e079a0c$var$onPossibleParallellAsync);
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve) {
            if (possiblePromises.length === 0) resolve([]);
            var remaining = possiblePromises.length;
            var results = new Array(remaining);
            possiblePromises.forEach(function(p, i) {
                return $50dd583e1e079a0c$var$DexiePromise.resolve(p).then(function(value) {
                    return results[i] = {
                        status: "fulfilled",
                        value: value
                    };
                }, function(reason) {
                    return results[i] = {
                        status: "rejected",
                        reason: reason
                    };
                }).then(function() {
                    return --remaining || resolve(results);
                });
            });
        });
    });
    if ($50dd583e1e079a0c$var$NativePromise.any && typeof AggregateError !== "undefined") $50dd583e1e079a0c$var$setProp($50dd583e1e079a0c$var$DexiePromise, "any", function() {
        var possiblePromises = $50dd583e1e079a0c$var$getArrayOf.apply(null, arguments).map($50dd583e1e079a0c$var$onPossibleParallellAsync);
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            if (possiblePromises.length === 0) reject(new AggregateError([]));
            var remaining = possiblePromises.length;
            var failures = new Array(remaining);
            possiblePromises.forEach(function(p, i) {
                return $50dd583e1e079a0c$var$DexiePromise.resolve(p).then(function(value) {
                    return resolve(value);
                }, function(failure) {
                    failures[i] = failure;
                    if (!--remaining) reject(new AggregateError(failures));
                });
            });
        });
    });
}
function $50dd583e1e079a0c$var$executePromiseTask(promise, fn) {
    try {
        fn(function(value) {
            if (promise._state !== null) return;
            if (value === promise) throw new TypeError("A promise cannot be resolved with itself.");
            var shouldExecuteTick = promise._lib && $50dd583e1e079a0c$var$beginMicroTickScope();
            if (value && typeof value.then === "function") $50dd583e1e079a0c$var$executePromiseTask(promise, function(resolve, reject) {
                value instanceof $50dd583e1e079a0c$var$DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
            });
            else {
                promise._state = true;
                promise._value = value;
                $50dd583e1e079a0c$var$propagateAllListeners(promise);
            }
            if (shouldExecuteTick) $50dd583e1e079a0c$var$endMicroTickScope();
        }, $50dd583e1e079a0c$var$handleRejection.bind(null, promise));
    } catch (ex) {
        $50dd583e1e079a0c$var$handleRejection(promise, ex);
    }
}
function $50dd583e1e079a0c$var$handleRejection(promise, reason) {
    $50dd583e1e079a0c$var$rejectingErrors.push(reason);
    if (promise._state !== null) return;
    var shouldExecuteTick = promise._lib && $50dd583e1e079a0c$var$beginMicroTickScope();
    reason = $50dd583e1e079a0c$var$rejectionMapper(reason);
    promise._state = false;
    promise._value = reason;
    $50dd583e1e079a0c$var$debug && reason !== null && typeof reason === "object" && !reason._promise && $50dd583e1e079a0c$var$tryCatch(function() {
        var origProp = $50dd583e1e079a0c$var$getPropertyDescriptor(reason, "stack");
        reason._promise = promise;
        $50dd583e1e079a0c$var$setProp(reason, "stack", {
            get: function() {
                return $50dd583e1e079a0c$var$stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
            }
        });
    });
    $50dd583e1e079a0c$var$addPossiblyUnhandledError(promise);
    $50dd583e1e079a0c$var$propagateAllListeners(promise);
    if (shouldExecuteTick) $50dd583e1e079a0c$var$endMicroTickScope();
}
function $50dd583e1e079a0c$var$propagateAllListeners(promise) {
    var listeners = promise._listeners;
    promise._listeners = [];
    for(var i = 0, len = listeners.length; i < len; ++i)$50dd583e1e079a0c$var$propagateToListener(promise, listeners[i]);
    var psd = promise._PSD;
    --psd.ref || psd.finalize();
    if ($50dd583e1e079a0c$var$numScheduledCalls === 0) {
        ++$50dd583e1e079a0c$var$numScheduledCalls;
        $50dd583e1e079a0c$var$asap(function() {
            if (--$50dd583e1e079a0c$var$numScheduledCalls === 0) $50dd583e1e079a0c$var$finalizePhysicalTick();
        }, []);
    }
}
function $50dd583e1e079a0c$var$propagateToListener(promise, listener) {
    if (promise._state === null) {
        promise._listeners.push(listener);
        return;
    }
    var cb = promise._state ? listener.onFulfilled : listener.onRejected;
    if (cb === null) return (promise._state ? listener.resolve : listener.reject)(promise._value);
    ++listener.psd.ref;
    ++$50dd583e1e079a0c$var$numScheduledCalls;
    $50dd583e1e079a0c$var$asap($50dd583e1e079a0c$var$callListener, [
        cb,
        promise,
        listener
    ]);
}
function $50dd583e1e079a0c$var$callListener(cb, promise, listener) {
    try {
        $50dd583e1e079a0c$var$currentFulfiller = promise;
        var ret, value = promise._value;
        if (promise._state) ret = cb(value);
        else {
            if ($50dd583e1e079a0c$var$rejectingErrors.length) $50dd583e1e079a0c$var$rejectingErrors = [];
            ret = cb(value);
            if ($50dd583e1e079a0c$var$rejectingErrors.indexOf(value) === -1) $50dd583e1e079a0c$var$markErrorAsHandled(promise);
        }
        listener.resolve(ret);
    } catch (e) {
        listener.reject(e);
    } finally{
        $50dd583e1e079a0c$var$currentFulfiller = null;
        if (--$50dd583e1e079a0c$var$numScheduledCalls === 0) $50dd583e1e079a0c$var$finalizePhysicalTick();
        --listener.psd.ref || listener.psd.finalize();
    }
}
function $50dd583e1e079a0c$var$getStack(promise, stacks, limit) {
    if (stacks.length === limit) return stacks;
    var stack = "";
    if (promise._state === false) {
        var failure = promise._value, errorName, message;
        if (failure != null) {
            errorName = failure.name || "Error";
            message = failure.message || failure;
            stack = $50dd583e1e079a0c$var$prettyStack(failure, 0);
        } else {
            errorName = failure;
            message = "";
        }
        stacks.push(errorName + (message ? ": " + message : "") + stack);
    }
    if ($50dd583e1e079a0c$var$debug) {
        stack = $50dd583e1e079a0c$var$prettyStack(promise._stackHolder, 2);
        if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);
        if (promise._prev) $50dd583e1e079a0c$var$getStack(promise._prev, stacks, limit);
    }
    return stacks;
}
function $50dd583e1e079a0c$var$linkToPreviousPromise(promise, prev) {
    var numPrev = prev ? prev._numPrev + 1 : 0;
    if (numPrev < $50dd583e1e079a0c$var$LONG_STACKS_CLIP_LIMIT) {
        promise._prev = prev;
        promise._numPrev = numPrev;
    }
}
function $50dd583e1e079a0c$var$physicalTick() {
    $50dd583e1e079a0c$var$beginMicroTickScope() && $50dd583e1e079a0c$var$endMicroTickScope();
}
function $50dd583e1e079a0c$var$beginMicroTickScope() {
    var wasRootExec = $50dd583e1e079a0c$var$isOutsideMicroTick;
    $50dd583e1e079a0c$var$isOutsideMicroTick = false;
    $50dd583e1e079a0c$var$needsNewPhysicalTick = false;
    return wasRootExec;
}
function $50dd583e1e079a0c$var$endMicroTickScope() {
    var callbacks, i, l;
    do while($50dd583e1e079a0c$var$microtickQueue.length > 0){
        callbacks = $50dd583e1e079a0c$var$microtickQueue;
        $50dd583e1e079a0c$var$microtickQueue = [];
        l = callbacks.length;
        for(i = 0; i < l; ++i){
            var item = callbacks[i];
            item[0].apply(null, item[1]);
        }
    }
    while ($50dd583e1e079a0c$var$microtickQueue.length > 0);
    $50dd583e1e079a0c$var$isOutsideMicroTick = true;
    $50dd583e1e079a0c$var$needsNewPhysicalTick = true;
}
function $50dd583e1e079a0c$var$finalizePhysicalTick() {
    var unhandledErrs = $50dd583e1e079a0c$var$unhandledErrors;
    $50dd583e1e079a0c$var$unhandledErrors = [];
    unhandledErrs.forEach(function(p) {
        p._PSD.onunhandled.call(null, p._value, p);
    });
    var finalizers = $50dd583e1e079a0c$var$tickFinalizers.slice(0);
    var i = finalizers.length;
    while(i)finalizers[--i]();
}
function $50dd583e1e079a0c$var$run_at_end_of_this_or_next_physical_tick(fn) {
    function finalizer() {
        fn();
        $50dd583e1e079a0c$var$tickFinalizers.splice($50dd583e1e079a0c$var$tickFinalizers.indexOf(finalizer), 1);
    }
    $50dd583e1e079a0c$var$tickFinalizers.push(finalizer);
    ++$50dd583e1e079a0c$var$numScheduledCalls;
    $50dd583e1e079a0c$var$asap(function() {
        if (--$50dd583e1e079a0c$var$numScheduledCalls === 0) $50dd583e1e079a0c$var$finalizePhysicalTick();
    }, []);
}
function $50dd583e1e079a0c$var$addPossiblyUnhandledError(promise) {
    if (!$50dd583e1e079a0c$var$unhandledErrors.some(function(p) {
        return p._value === promise._value;
    })) $50dd583e1e079a0c$var$unhandledErrors.push(promise);
}
function $50dd583e1e079a0c$var$markErrorAsHandled(promise) {
    var i = $50dd583e1e079a0c$var$unhandledErrors.length;
    while(i)if ($50dd583e1e079a0c$var$unhandledErrors[--i]._value === promise._value) {
        $50dd583e1e079a0c$var$unhandledErrors.splice(i, 1);
        return;
    }
}
function $50dd583e1e079a0c$var$PromiseReject(reason) {
    return new $50dd583e1e079a0c$var$DexiePromise($50dd583e1e079a0c$var$INTERNAL, false, reason);
}
function $50dd583e1e079a0c$var$wrap(fn, errorCatcher) {
    var psd = $50dd583e1e079a0c$var$PSD;
    return function() {
        var wasRootExec = $50dd583e1e079a0c$var$beginMicroTickScope(), outerScope = $50dd583e1e079a0c$var$PSD;
        try {
            $50dd583e1e079a0c$var$switchToZone(psd, true);
            return fn.apply(this, arguments);
        } catch (e) {
            errorCatcher && errorCatcher(e);
        } finally{
            $50dd583e1e079a0c$var$switchToZone(outerScope, false);
            if (wasRootExec) $50dd583e1e079a0c$var$endMicroTickScope();
        }
    };
}
var $50dd583e1e079a0c$var$task = {
    awaits: 0,
    echoes: 0,
    id: 0
};
var $50dd583e1e079a0c$var$taskCounter = 0;
var $50dd583e1e079a0c$var$zoneStack = [];
var $50dd583e1e079a0c$var$zoneEchoes = 0;
var $50dd583e1e079a0c$var$totalEchoes = 0;
var $50dd583e1e079a0c$var$zone_id_counter = 0;
function $50dd583e1e079a0c$var$newScope(fn, props, a1, a2) {
    var parent = $50dd583e1e079a0c$var$PSD, psd = Object.create(parent);
    psd.parent = parent;
    psd.ref = 0;
    psd.global = false;
    psd.id = ++$50dd583e1e079a0c$var$zone_id_counter;
    var globalEnv = $50dd583e1e079a0c$var$globalPSD.env;
    psd.env = $50dd583e1e079a0c$var$patchGlobalPromise ? {
        Promise: $50dd583e1e079a0c$var$DexiePromise,
        PromiseProp: {
            value: $50dd583e1e079a0c$var$DexiePromise,
            configurable: true,
            writable: true
        },
        all: $50dd583e1e079a0c$var$DexiePromise.all,
        race: $50dd583e1e079a0c$var$DexiePromise.race,
        allSettled: $50dd583e1e079a0c$var$DexiePromise.allSettled,
        any: $50dd583e1e079a0c$var$DexiePromise.any,
        resolve: $50dd583e1e079a0c$var$DexiePromise.resolve,
        reject: $50dd583e1e079a0c$var$DexiePromise.reject,
        nthen: $50dd583e1e079a0c$var$getPatchedPromiseThen(globalEnv.nthen, psd),
        gthen: $50dd583e1e079a0c$var$getPatchedPromiseThen(globalEnv.gthen, psd)
    } : {};
    if (props) $50dd583e1e079a0c$var$extend(psd, props);
    ++parent.ref;
    psd.finalize = function() {
        --this.parent.ref || this.parent.finalize();
    };
    var rv = $50dd583e1e079a0c$var$usePSD(psd, fn, a1, a2);
    if (psd.ref === 0) psd.finalize();
    return rv;
}
function $50dd583e1e079a0c$var$incrementExpectedAwaits() {
    if (!$50dd583e1e079a0c$var$task.id) $50dd583e1e079a0c$var$task.id = ++$50dd583e1e079a0c$var$taskCounter;
    ++$50dd583e1e079a0c$var$task.awaits;
    $50dd583e1e079a0c$var$task.echoes += $50dd583e1e079a0c$var$ZONE_ECHO_LIMIT;
    return $50dd583e1e079a0c$var$task.id;
}
function $50dd583e1e079a0c$var$decrementExpectedAwaits() {
    if (!$50dd583e1e079a0c$var$task.awaits) return false;
    if (--$50dd583e1e079a0c$var$task.awaits === 0) $50dd583e1e079a0c$var$task.id = 0;
    $50dd583e1e079a0c$var$task.echoes = $50dd583e1e079a0c$var$task.awaits * $50dd583e1e079a0c$var$ZONE_ECHO_LIMIT;
    return true;
}
if (("" + $50dd583e1e079a0c$var$nativePromiseThen).indexOf("[native code]") === -1) $50dd583e1e079a0c$var$incrementExpectedAwaits = $50dd583e1e079a0c$var$decrementExpectedAwaits = $50dd583e1e079a0c$var$nop;
function $50dd583e1e079a0c$var$onPossibleParallellAsync(possiblePromise) {
    if ($50dd583e1e079a0c$var$task.echoes && possiblePromise && possiblePromise.constructor === $50dd583e1e079a0c$var$NativePromise) {
        $50dd583e1e079a0c$var$incrementExpectedAwaits();
        return possiblePromise.then(function(x) {
            $50dd583e1e079a0c$var$decrementExpectedAwaits();
            return x;
        }, function(e) {
            $50dd583e1e079a0c$var$decrementExpectedAwaits();
            return $50dd583e1e079a0c$var$rejection(e);
        });
    }
    return possiblePromise;
}
function $50dd583e1e079a0c$var$zoneEnterEcho(targetZone) {
    ++$50dd583e1e079a0c$var$totalEchoes;
    if (!$50dd583e1e079a0c$var$task.echoes || --$50dd583e1e079a0c$var$task.echoes === 0) $50dd583e1e079a0c$var$task.echoes = $50dd583e1e079a0c$var$task.id = 0;
    $50dd583e1e079a0c$var$zoneStack.push($50dd583e1e079a0c$var$PSD);
    $50dd583e1e079a0c$var$switchToZone(targetZone, true);
}
function $50dd583e1e079a0c$var$zoneLeaveEcho() {
    var zone = $50dd583e1e079a0c$var$zoneStack[$50dd583e1e079a0c$var$zoneStack.length - 1];
    $50dd583e1e079a0c$var$zoneStack.pop();
    $50dd583e1e079a0c$var$switchToZone(zone, false);
}
function $50dd583e1e079a0c$var$switchToZone(targetZone, bEnteringZone) {
    var currentZone = $50dd583e1e079a0c$var$PSD;
    if (bEnteringZone ? $50dd583e1e079a0c$var$task.echoes && (!$50dd583e1e079a0c$var$zoneEchoes++ || targetZone !== $50dd583e1e079a0c$var$PSD) : $50dd583e1e079a0c$var$zoneEchoes && (!--$50dd583e1e079a0c$var$zoneEchoes || targetZone !== $50dd583e1e079a0c$var$PSD)) $50dd583e1e079a0c$var$enqueueNativeMicroTask(bEnteringZone ? $50dd583e1e079a0c$var$zoneEnterEcho.bind(null, targetZone) : $50dd583e1e079a0c$var$zoneLeaveEcho);
    if (targetZone === $50dd583e1e079a0c$var$PSD) return;
    $50dd583e1e079a0c$var$PSD = targetZone;
    if (currentZone === $50dd583e1e079a0c$var$globalPSD) $50dd583e1e079a0c$var$globalPSD.env = $50dd583e1e079a0c$var$snapShot();
    if ($50dd583e1e079a0c$var$patchGlobalPromise) {
        var GlobalPromise_1 = $50dd583e1e079a0c$var$globalPSD.env.Promise;
        var targetEnv = targetZone.env;
        $50dd583e1e079a0c$var$nativePromiseProto.then = targetEnv.nthen;
        GlobalPromise_1.prototype.then = targetEnv.gthen;
        if (currentZone.global || targetZone.global) {
            Object.defineProperty($50dd583e1e079a0c$var$_global, "Promise", targetEnv.PromiseProp);
            GlobalPromise_1.all = targetEnv.all;
            GlobalPromise_1.race = targetEnv.race;
            GlobalPromise_1.resolve = targetEnv.resolve;
            GlobalPromise_1.reject = targetEnv.reject;
            if (targetEnv.allSettled) GlobalPromise_1.allSettled = targetEnv.allSettled;
            if (targetEnv.any) GlobalPromise_1.any = targetEnv.any;
        }
    }
}
function $50dd583e1e079a0c$var$snapShot() {
    var GlobalPromise = $50dd583e1e079a0c$var$_global.Promise;
    return $50dd583e1e079a0c$var$patchGlobalPromise ? {
        Promise: GlobalPromise,
        PromiseProp: Object.getOwnPropertyDescriptor($50dd583e1e079a0c$var$_global, "Promise"),
        all: GlobalPromise.all,
        race: GlobalPromise.race,
        allSettled: GlobalPromise.allSettled,
        any: GlobalPromise.any,
        resolve: GlobalPromise.resolve,
        reject: GlobalPromise.reject,
        nthen: $50dd583e1e079a0c$var$nativePromiseProto.then,
        gthen: GlobalPromise.prototype.then
    } : {};
}
function $50dd583e1e079a0c$var$usePSD(psd, fn, a1, a2, a3) {
    var outerScope = $50dd583e1e079a0c$var$PSD;
    try {
        $50dd583e1e079a0c$var$switchToZone(psd, true);
        return fn(a1, a2, a3);
    } finally{
        $50dd583e1e079a0c$var$switchToZone(outerScope, false);
    }
}
function $50dd583e1e079a0c$var$enqueueNativeMicroTask(job) {
    $50dd583e1e079a0c$var$nativePromiseThen.call($50dd583e1e079a0c$var$resolvedNativePromise, job);
}
function $50dd583e1e079a0c$var$nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
    return typeof fn !== "function" ? fn : function() {
        var outerZone = $50dd583e1e079a0c$var$PSD;
        if (possibleAwait) $50dd583e1e079a0c$var$incrementExpectedAwaits();
        $50dd583e1e079a0c$var$switchToZone(zone, true);
        try {
            return fn.apply(this, arguments);
        } finally{
            $50dd583e1e079a0c$var$switchToZone(outerZone, false);
            if (cleanup) $50dd583e1e079a0c$var$enqueueNativeMicroTask($50dd583e1e079a0c$var$decrementExpectedAwaits);
        }
    };
}
function $50dd583e1e079a0c$var$getPatchedPromiseThen(origThen, zone) {
    return function(onResolved, onRejected) {
        return origThen.call(this, $50dd583e1e079a0c$var$nativeAwaitCompatibleWrap(onResolved, zone), $50dd583e1e079a0c$var$nativeAwaitCompatibleWrap(onRejected, zone));
    };
}
var $50dd583e1e079a0c$var$UNHANDLEDREJECTION = "unhandledrejection";
function $50dd583e1e079a0c$var$globalError(err, promise) {
    var rv;
    try {
        rv = promise.onuncatched(err);
    } catch (e) {}
    if (rv !== false) try {
        var event, eventData = {
            promise: promise,
            reason: err
        };
        if ($50dd583e1e079a0c$var$_global.document && document.createEvent) {
            event = document.createEvent("Event");
            event.initEvent($50dd583e1e079a0c$var$UNHANDLEDREJECTION, true, true);
            $50dd583e1e079a0c$var$extend(event, eventData);
        } else if ($50dd583e1e079a0c$var$_global.CustomEvent) {
            event = new CustomEvent($50dd583e1e079a0c$var$UNHANDLEDREJECTION, {
                detail: eventData
            });
            $50dd583e1e079a0c$var$extend(event, eventData);
        }
        if (event && $50dd583e1e079a0c$var$_global.dispatchEvent) {
            dispatchEvent(event);
            if (!$50dd583e1e079a0c$var$_global.PromiseRejectionEvent && $50dd583e1e079a0c$var$_global.onunhandledrejection) try {
                $50dd583e1e079a0c$var$_global.onunhandledrejection(event);
            } catch (_) {}
        }
        if ($50dd583e1e079a0c$var$debug && event && !event.defaultPrevented) console.warn("Unhandled rejection: " + (err.stack || err));
    } catch (e) {}
}
var $50dd583e1e079a0c$var$rejection = $50dd583e1e079a0c$var$DexiePromise.reject;
function $50dd583e1e079a0c$var$tempTransaction(db, mode, storeNames, fn) {
    if (!db.idbdb || !db._state.openComplete && !$50dd583e1e079a0c$var$PSD.letThrough && !db._vip) {
        if (db._state.openComplete) return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.DatabaseClosed(db._state.dbOpenError));
        if (!db._state.isBeingOpened) {
            if (!db._options.autoOpen) return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.DatabaseClosed());
            db.open().catch($50dd583e1e079a0c$var$nop);
        }
        return db._state.dbReadyPromise.then(function() {
            return $50dd583e1e079a0c$var$tempTransaction(db, mode, storeNames, fn);
        });
    } else {
        var trans = db._createTransaction(mode, storeNames, db._dbSchema);
        try {
            trans.create();
            db._state.PR1398_maxLoop = 3;
        } catch (ex) {
            if (ex.name === $50dd583e1e079a0c$var$errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                console.warn("Dexie: Need to reopen db");
                db._close();
                return db.open().then(function() {
                    return $50dd583e1e079a0c$var$tempTransaction(db, mode, storeNames, fn);
                });
            }
            return $50dd583e1e079a0c$var$rejection(ex);
        }
        return trans._promise(mode, function(resolve, reject) {
            return $50dd583e1e079a0c$var$newScope(function() {
                $50dd583e1e079a0c$var$PSD.trans = trans;
                return fn(resolve, reject, trans);
            });
        }).then(function(result) {
            return trans._completion.then(function() {
                return result;
            });
        });
    }
}
var $50dd583e1e079a0c$var$DEXIE_VERSION = "3.2.4";
var $50dd583e1e079a0c$var$maxString = String.fromCharCode(65535);
var $50dd583e1e079a0c$var$minKey = -Infinity;
var $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
var $50dd583e1e079a0c$var$STRING_EXPECTED = "String expected.";
var $50dd583e1e079a0c$var$connections = [];
var $50dd583e1e079a0c$var$isIEOrEdge = typeof navigator !== "undefined" && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
var $50dd583e1e079a0c$var$hasIEDeleteObjectStoreBug = $50dd583e1e079a0c$var$isIEOrEdge;
var $50dd583e1e079a0c$var$hangsOnDeleteLargeKeyRange = $50dd583e1e079a0c$var$isIEOrEdge;
var $50dd583e1e079a0c$var$dexieStackFrameFilter = function(frame) {
    return !/(dexie\.js|dexie\.min\.js)/.test(frame);
};
var $50dd583e1e079a0c$var$DBNAMES_DB = "__dbnames";
var $50dd583e1e079a0c$var$READONLY = "readonly";
var $50dd583e1e079a0c$var$READWRITE = "readwrite";
function $50dd583e1e079a0c$var$combine(filter1, filter2) {
    return filter1 ? filter2 ? function() {
        return filter1.apply(this, arguments) && filter2.apply(this, arguments);
    } : filter1 : filter2;
}
var $50dd583e1e079a0c$var$AnyRange = {
    type: 3,
    lower: -Infinity,
    lowerOpen: false,
    upper: [
        []
    ],
    upperOpen: false
};
function $50dd583e1e079a0c$var$workaroundForUndefinedPrimKey(keyPath) {
    return typeof keyPath === "string" && !/\./.test(keyPath) ? function(obj) {
        if (obj[keyPath] === undefined && keyPath in obj) {
            obj = $50dd583e1e079a0c$var$deepClone(obj);
            delete obj[keyPath];
        }
        return obj;
    } : function(obj) {
        return obj;
    };
}
var $50dd583e1e079a0c$var$Table = function() {
    function Table() {}
    Table.prototype._trans = function(mode, fn, writeLocked) {
        var trans = this._tx || $50dd583e1e079a0c$var$PSD.trans;
        var tableName = this.name;
        function checkTableInTransaction(resolve, reject, trans) {
            if (!trans.schema[tableName]) throw new $50dd583e1e079a0c$var$exceptions.NotFound("Table " + tableName + " not part of transaction");
            return fn(trans.idbtrans, trans);
        }
        var wasRootExec = $50dd583e1e079a0c$var$beginMicroTickScope();
        try {
            return trans && trans.db === this.db ? trans === $50dd583e1e079a0c$var$PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : $50dd583e1e079a0c$var$newScope(function() {
                return trans._promise(mode, checkTableInTransaction, writeLocked);
            }, {
                trans: trans,
                transless: $50dd583e1e079a0c$var$PSD.transless || $50dd583e1e079a0c$var$PSD
            }) : $50dd583e1e079a0c$var$tempTransaction(this.db, mode, [
                this.name
            ], checkTableInTransaction);
        } finally{
            if (wasRootExec) $50dd583e1e079a0c$var$endMicroTickScope();
        }
    };
    Table.prototype.get = function(keyOrCrit, cb) {
        var _this = this;
        if (keyOrCrit && keyOrCrit.constructor === Object) return this.where(keyOrCrit).first(cb);
        return this._trans("readonly", function(trans) {
            return _this.core.get({
                trans: trans,
                key: keyOrCrit
            }).then(function(res) {
                return _this.hook.reading.fire(res);
            });
        }).then(cb);
    };
    Table.prototype.where = function(indexOrCrit) {
        if (typeof indexOrCrit === "string") return new this.db.WhereClause(this, indexOrCrit);
        if ($50dd583e1e079a0c$var$isArray(indexOrCrit)) return new this.db.WhereClause(this, "[" + indexOrCrit.join("+") + "]");
        var keyPaths = $50dd583e1e079a0c$var$keys(indexOrCrit);
        if (keyPaths.length === 1) return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
        var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function(ix) {
            return ix.compound && keyPaths.every(function(keyPath) {
                return ix.keyPath.indexOf(keyPath) >= 0;
            }) && ix.keyPath.every(function(keyPath) {
                return keyPaths.indexOf(keyPath) >= 0;
            });
        })[0];
        if (compoundIndex && this.db._maxKey !== $50dd583e1e079a0c$var$maxString) return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function(kp) {
            return indexOrCrit[kp];
        }));
        if (!compoundIndex && $50dd583e1e079a0c$var$debug) console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join("+") + "]"));
        var idxByName = this.schema.idxByName;
        var idb = this.db._deps.indexedDB;
        function equals(a, b) {
            try {
                return idb.cmp(a, b) === 0;
            } catch (e) {
                return false;
            }
        }
        var _a = keyPaths.reduce(function(_a, keyPath) {
            var prevIndex = _a[0], prevFilterFn = _a[1];
            var index = idxByName[keyPath];
            var value = indexOrCrit[keyPath];
            return [
                prevIndex || index,
                prevIndex || !index ? $50dd583e1e079a0c$var$combine(prevFilterFn, index && index.multi ? function(x) {
                    var prop = $50dd583e1e079a0c$var$getByKeyPath(x, keyPath);
                    return $50dd583e1e079a0c$var$isArray(prop) && prop.some(function(item) {
                        return equals(value, item);
                    });
                } : function(x) {
                    return equals(value, $50dd583e1e079a0c$var$getByKeyPath(x, keyPath));
                }) : prevFilterFn
            ];
        }, [
            null,
            null
        ]), idx = _a[0], filterFunction = _a[1];
        return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
    };
    Table.prototype.filter = function(filterFunction) {
        return this.toCollection().and(filterFunction);
    };
    Table.prototype.count = function(thenShortcut) {
        return this.toCollection().count(thenShortcut);
    };
    Table.prototype.offset = function(offset) {
        return this.toCollection().offset(offset);
    };
    Table.prototype.limit = function(numRows) {
        return this.toCollection().limit(numRows);
    };
    Table.prototype.each = function(callback) {
        return this.toCollection().each(callback);
    };
    Table.prototype.toArray = function(thenShortcut) {
        return this.toCollection().toArray(thenShortcut);
    };
    Table.prototype.toCollection = function() {
        return new this.db.Collection(new this.db.WhereClause(this));
    };
    Table.prototype.orderBy = function(index) {
        return new this.db.Collection(new this.db.WhereClause(this, $50dd583e1e079a0c$var$isArray(index) ? "[" + index.join("+") + "]" : index));
    };
    Table.prototype.reverse = function() {
        return this.toCollection().reverse();
    };
    Table.prototype.mapToClass = function(constructor) {
        this.schema.mappedClass = constructor;
        var readHook = function(obj) {
            if (!obj) return obj;
            var res = Object.create(constructor.prototype);
            for(var m in obj)if ($50dd583e1e079a0c$var$hasOwn(obj, m)) try {
                res[m] = obj[m];
            } catch (_) {}
            return res;
        };
        if (this.schema.readHook) this.hook.reading.unsubscribe(this.schema.readHook);
        this.schema.readHook = readHook;
        this.hook("reading", readHook);
        return constructor;
    };
    Table.prototype.defineClass = function() {
        function Class(content) {
            $50dd583e1e079a0c$var$extend(this, content);
        }
        return this.mapToClass(Class);
    };
    Table.prototype.add = function(obj, key) {
        var _this = this;
        var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
        var objToAdd = obj;
        if (keyPath && auto) objToAdd = $50dd583e1e079a0c$var$workaroundForUndefinedPrimKey(keyPath)(obj);
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "add",
                keys: key != null ? [
                    key
                ] : null,
                values: [
                    objToAdd
                ]
            });
        }).then(function(res) {
            return res.numFailures ? $50dd583e1e079a0c$var$DexiePromise.reject(res.failures[0]) : res.lastResult;
        }).then(function(lastResult) {
            if (keyPath) try {
                $50dd583e1e079a0c$var$setByKeyPath(obj, keyPath, lastResult);
            } catch (_) {}
            return lastResult;
        });
    };
    Table.prototype.update = function(keyOrObject, modifications) {
        if (typeof keyOrObject === "object" && !$50dd583e1e079a0c$var$isArray(keyOrObject)) {
            var key = $50dd583e1e079a0c$var$getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
            if (key === undefined) return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Given object does not contain its primary key"));
            try {
                if (typeof modifications !== "function") $50dd583e1e079a0c$var$keys(modifications).forEach(function(keyPath) {
                    $50dd583e1e079a0c$var$setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                });
                else modifications(keyOrObject, {
                    value: keyOrObject,
                    primKey: key
                });
            } catch (_a) {}
            return this.where(":id").equals(key).modify(modifications);
        } else return this.where(":id").equals(keyOrObject).modify(modifications);
    };
    Table.prototype.put = function(obj, key) {
        var _this = this;
        var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
        var objToAdd = obj;
        if (keyPath && auto) objToAdd = $50dd583e1e079a0c$var$workaroundForUndefinedPrimKey(keyPath)(obj);
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "put",
                values: [
                    objToAdd
                ],
                keys: key != null ? [
                    key
                ] : null
            });
        }).then(function(res) {
            return res.numFailures ? $50dd583e1e079a0c$var$DexiePromise.reject(res.failures[0]) : res.lastResult;
        }).then(function(lastResult) {
            if (keyPath) try {
                $50dd583e1e079a0c$var$setByKeyPath(obj, keyPath, lastResult);
            } catch (_) {}
            return lastResult;
        });
    };
    Table.prototype.delete = function(key) {
        var _this = this;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "delete",
                keys: [
                    key
                ]
            });
        }).then(function(res) {
            return res.numFailures ? $50dd583e1e079a0c$var$DexiePromise.reject(res.failures[0]) : undefined;
        });
    };
    Table.prototype.clear = function() {
        var _this = this;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "deleteRange",
                range: $50dd583e1e079a0c$var$AnyRange
            });
        }).then(function(res) {
            return res.numFailures ? $50dd583e1e079a0c$var$DexiePromise.reject(res.failures[0]) : undefined;
        });
    };
    Table.prototype.bulkGet = function(keys) {
        var _this = this;
        return this._trans("readonly", function(trans) {
            return _this.core.getMany({
                keys: keys,
                trans: trans
            }).then(function(result) {
                return result.map(function(res) {
                    return _this.hook.reading.fire(res);
                });
            });
        });
    };
    Table.prototype.bulkAdd = function(objects, keysOrOptions, options) {
        var _this = this;
        var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
        options = options || (keys ? undefined : keysOrOptions);
        var wantResults = options ? options.allKeys : undefined;
        return this._trans("readwrite", function(trans) {
            var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            if (keyPath && keys) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
            if (keys && keys.length !== objects.length) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            var numObjects = objects.length;
            var objectsToAdd = keyPath && auto ? objects.map($50dd583e1e079a0c$var$workaroundForUndefinedPrimKey(keyPath)) : objects;
            return _this.core.mutate({
                trans: trans,
                type: "add",
                keys: keys,
                values: objectsToAdd,
                wantResults: wantResults
            }).then(function(_a) {
                var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0) return result;
                throw new $50dd583e1e079a0c$var$BulkError(_this.name + ".bulkAdd(): " + numFailures + " of " + numObjects + " operations failed", failures);
            });
        });
    };
    Table.prototype.bulkPut = function(objects, keysOrOptions, options) {
        var _this = this;
        var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
        options = options || (keys ? undefined : keysOrOptions);
        var wantResults = options ? options.allKeys : undefined;
        return this._trans("readwrite", function(trans) {
            var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            if (keyPath && keys) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
            if (keys && keys.length !== objects.length) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            var numObjects = objects.length;
            var objectsToPut = keyPath && auto ? objects.map($50dd583e1e079a0c$var$workaroundForUndefinedPrimKey(keyPath)) : objects;
            return _this.core.mutate({
                trans: trans,
                type: "put",
                keys: keys,
                values: objectsToPut,
                wantResults: wantResults
            }).then(function(_a) {
                var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0) return result;
                throw new $50dd583e1e079a0c$var$BulkError(_this.name + ".bulkPut(): " + numFailures + " of " + numObjects + " operations failed", failures);
            });
        });
    };
    Table.prototype.bulkDelete = function(keys) {
        var _this = this;
        var numKeys = keys.length;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "delete",
                keys: keys
            });
        }).then(function(_a) {
            var numFailures = _a.numFailures, lastResult = _a.lastResult, failures = _a.failures;
            if (numFailures === 0) return lastResult;
            throw new $50dd583e1e079a0c$var$BulkError(_this.name + ".bulkDelete(): " + numFailures + " of " + numKeys + " operations failed", failures);
        });
    };
    return Table;
}();
function $50dd583e1e079a0c$var$Events(ctx) {
    var evs = {};
    var rv = function(eventName, subscriber) {
        if (subscriber) {
            var i = arguments.length, args = new Array(i - 1);
            while(--i)args[i - 1] = arguments[i];
            evs[eventName].subscribe.apply(null, args);
            return ctx;
        } else if (typeof eventName === "string") return evs[eventName];
    };
    rv.addEventType = add;
    for(var i = 1, l = arguments.length; i < l; ++i)add(arguments[i]);
    return rv;
    function add(eventName, chainFunction, defaultFunction) {
        if (typeof eventName === "object") return addConfiguredEvents(eventName);
        if (!chainFunction) chainFunction = $50dd583e1e079a0c$var$reverseStoppableEventChain;
        if (!defaultFunction) defaultFunction = $50dd583e1e079a0c$var$nop;
        var context = {
            subscribers: [],
            fire: defaultFunction,
            subscribe: function(cb) {
                if (context.subscribers.indexOf(cb) === -1) {
                    context.subscribers.push(cb);
                    context.fire = chainFunction(context.fire, cb);
                }
            },
            unsubscribe: function(cb) {
                context.subscribers = context.subscribers.filter(function(fn) {
                    return fn !== cb;
                });
                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
            }
        };
        evs[eventName] = rv[eventName] = context;
        return context;
    }
    function addConfiguredEvents(cfg) {
        $50dd583e1e079a0c$var$keys(cfg).forEach(function(eventName) {
            var args = cfg[eventName];
            if ($50dd583e1e079a0c$var$isArray(args)) add(eventName, cfg[eventName][0], cfg[eventName][1]);
            else if (args === "asap") var context = add(eventName, $50dd583e1e079a0c$var$mirror, function fire() {
                var i = arguments.length, args = new Array(i);
                while(i--)args[i] = arguments[i];
                context.subscribers.forEach(function(fn) {
                    $50dd583e1e079a0c$var$asap$1(function fireEvent() {
                        fn.apply(null, args);
                    });
                });
            });
            else throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Invalid event config");
        });
    }
}
function $50dd583e1e079a0c$var$makeClassConstructor(prototype, constructor) {
    $50dd583e1e079a0c$var$derive(constructor).from({
        prototype: prototype
    });
    return constructor;
}
function $50dd583e1e079a0c$var$createTableConstructor(db) {
    return $50dd583e1e079a0c$var$makeClassConstructor($50dd583e1e079a0c$var$Table.prototype, function Table(name, tableSchema, trans) {
        this.db = db;
        this._tx = trans;
        this.name = name;
        this.schema = tableSchema;
        this.hook = db._allTables[name] ? db._allTables[name].hook : $50dd583e1e079a0c$var$Events(null, {
            "creating": [
                $50dd583e1e079a0c$var$hookCreatingChain,
                $50dd583e1e079a0c$var$nop
            ],
            "reading": [
                $50dd583e1e079a0c$var$pureFunctionChain,
                $50dd583e1e079a0c$var$mirror
            ],
            "updating": [
                $50dd583e1e079a0c$var$hookUpdatingChain,
                $50dd583e1e079a0c$var$nop
            ],
            "deleting": [
                $50dd583e1e079a0c$var$hookDeletingChain,
                $50dd583e1e079a0c$var$nop
            ]
        });
    });
}
function $50dd583e1e079a0c$var$isPlainKeyRange(ctx, ignoreLimitFilter) {
    return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
}
function $50dd583e1e079a0c$var$addFilter(ctx, fn) {
    ctx.filter = $50dd583e1e079a0c$var$combine(ctx.filter, fn);
}
function $50dd583e1e079a0c$var$addReplayFilter(ctx, factory, isLimitFilter) {
    var curr = ctx.replayFilter;
    ctx.replayFilter = curr ? function() {
        return $50dd583e1e079a0c$var$combine(curr(), factory());
    } : factory;
    ctx.justLimit = isLimitFilter && !curr;
}
function $50dd583e1e079a0c$var$addMatchFilter(ctx, fn) {
    ctx.isMatch = $50dd583e1e079a0c$var$combine(ctx.isMatch, fn);
}
function $50dd583e1e079a0c$var$getIndexOrStore(ctx, coreSchema) {
    if (ctx.isPrimKey) return coreSchema.primaryKey;
    var index = coreSchema.getIndexByKeyPath(ctx.index);
    if (!index) throw new $50dd583e1e079a0c$var$exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
    return index;
}
function $50dd583e1e079a0c$var$openCursor(ctx, coreTable, trans) {
    var index = $50dd583e1e079a0c$var$getIndexOrStore(ctx, coreTable.schema);
    return coreTable.openCursor({
        trans: trans,
        values: !ctx.keysOnly,
        reverse: ctx.dir === "prev",
        unique: !!ctx.unique,
        query: {
            index: index,
            range: ctx.range
        }
    });
}
function $50dd583e1e079a0c$var$iter(ctx, fn, coreTrans, coreTable) {
    var filter = ctx.replayFilter ? $50dd583e1e079a0c$var$combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
    if (!ctx.or) return $50dd583e1e079a0c$var$iterate($50dd583e1e079a0c$var$openCursor(ctx, coreTable, coreTrans), $50dd583e1e079a0c$var$combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
    else {
        var set_1 = {};
        var union = function(item, cursor, advance) {
            if (!filter || filter(cursor, advance, function(result) {
                return cursor.stop(result);
            }, function(err) {
                return cursor.fail(err);
            })) {
                var primaryKey = cursor.primaryKey;
                var key = "" + primaryKey;
                if (key === "[object ArrayBuffer]") key = "" + new Uint8Array(primaryKey);
                if (!$50dd583e1e079a0c$var$hasOwn(set_1, key)) {
                    set_1[key] = true;
                    fn(item, cursor, advance);
                }
            }
        };
        return Promise.all([
            ctx.or._iterate(union, coreTrans),
            $50dd583e1e079a0c$var$iterate($50dd583e1e079a0c$var$openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
        ]);
    }
}
function $50dd583e1e079a0c$var$iterate(cursorPromise, filter, fn, valueMapper) {
    var mappedFn = valueMapper ? function(x, c, a) {
        return fn(valueMapper(x), c, a);
    } : fn;
    var wrappedFn = $50dd583e1e079a0c$var$wrap(mappedFn);
    return cursorPromise.then(function(cursor) {
        if (cursor) return cursor.start(function() {
            var c = function() {
                return cursor.continue();
            };
            if (!filter || filter(cursor, function(advancer) {
                return c = advancer;
            }, function(val) {
                cursor.stop(val);
                c = $50dd583e1e079a0c$var$nop;
            }, function(e) {
                cursor.fail(e);
                c = $50dd583e1e079a0c$var$nop;
            })) wrappedFn(cursor.value, cursor, function(advancer) {
                return c = advancer;
            });
            c();
        });
    });
}
function $50dd583e1e079a0c$var$cmp(a, b) {
    try {
        var ta = $50dd583e1e079a0c$var$type(a);
        var tb = $50dd583e1e079a0c$var$type(b);
        if (ta !== tb) {
            if (ta === "Array") return 1;
            if (tb === "Array") return -1;
            if (ta === "binary") return 1;
            if (tb === "binary") return -1;
            if (ta === "string") return 1;
            if (tb === "string") return -1;
            if (ta === "Date") return 1;
            if (tb !== "Date") return NaN;
            return -1;
        }
        switch(ta){
            case "number":
            case "Date":
            case "string":
                return a > b ? 1 : a < b ? -1 : 0;
            case "binary":
                return $50dd583e1e079a0c$var$compareUint8Arrays($50dd583e1e079a0c$var$getUint8Array(a), $50dd583e1e079a0c$var$getUint8Array(b));
            case "Array":
                return $50dd583e1e079a0c$var$compareArrays(a, b);
        }
    } catch (_a) {}
    return NaN;
}
function $50dd583e1e079a0c$var$compareArrays(a, b) {
    var al = a.length;
    var bl = b.length;
    var l = al < bl ? al : bl;
    for(var i = 0; i < l; ++i){
        var res = $50dd583e1e079a0c$var$cmp(a[i], b[i]);
        if (res !== 0) return res;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
}
function $50dd583e1e079a0c$var$compareUint8Arrays(a, b) {
    var al = a.length;
    var bl = b.length;
    var l = al < bl ? al : bl;
    for(var i = 0; i < l; ++i){
        if (a[i] !== b[i]) return a[i] < b[i] ? -1 : 1;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
}
function $50dd583e1e079a0c$var$type(x) {
    var t = typeof x;
    if (t !== "object") return t;
    if (ArrayBuffer.isView(x)) return "binary";
    var tsTag = $50dd583e1e079a0c$var$toStringTag(x);
    return tsTag === "ArrayBuffer" ? "binary" : tsTag;
}
function $50dd583e1e079a0c$var$getUint8Array(a) {
    if (a instanceof Uint8Array) return a;
    if (ArrayBuffer.isView(a)) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
    return new Uint8Array(a);
}
var $50dd583e1e079a0c$var$Collection = function() {
    function Collection() {}
    Collection.prototype._read = function(fn, cb) {
        var ctx = this._ctx;
        return ctx.error ? ctx.table._trans(null, $50dd583e1e079a0c$var$rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn).then(cb);
    };
    Collection.prototype._write = function(fn) {
        var ctx = this._ctx;
        return ctx.error ? ctx.table._trans(null, $50dd583e1e079a0c$var$rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn, "locked");
    };
    Collection.prototype._addAlgorithm = function(fn) {
        var ctx = this._ctx;
        ctx.algorithm = $50dd583e1e079a0c$var$combine(ctx.algorithm, fn);
    };
    Collection.prototype._iterate = function(fn, coreTrans) {
        return $50dd583e1e079a0c$var$iter(this._ctx, fn, coreTrans, this._ctx.table.core);
    };
    Collection.prototype.clone = function(props) {
        var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
        if (props) $50dd583e1e079a0c$var$extend(ctx, props);
        rv._ctx = ctx;
        return rv;
    };
    Collection.prototype.raw = function() {
        this._ctx.valueMapper = null;
        return this;
    };
    Collection.prototype.each = function(fn) {
        var ctx = this._ctx;
        return this._read(function(trans) {
            return $50dd583e1e079a0c$var$iter(ctx, fn, trans, ctx.table.core);
        });
    };
    Collection.prototype.count = function(cb) {
        var _this = this;
        return this._read(function(trans) {
            var ctx = _this._ctx;
            var coreTable = ctx.table.core;
            if ($50dd583e1e079a0c$var$isPlainKeyRange(ctx, true)) return coreTable.count({
                trans: trans,
                query: {
                    index: $50dd583e1e079a0c$var$getIndexOrStore(ctx, coreTable.schema),
                    range: ctx.range
                }
            }).then(function(count) {
                return Math.min(count, ctx.limit);
            });
            else {
                var count = 0;
                return $50dd583e1e079a0c$var$iter(ctx, function() {
                    ++count;
                    return false;
                }, trans, coreTable).then(function() {
                    return count;
                });
            }
        }).then(cb);
    };
    Collection.prototype.sortBy = function(keyPath, cb) {
        var parts = keyPath.split(".").reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
        function getval(obj, i) {
            if (i) return getval(obj[parts[i]], i - 1);
            return obj[lastPart];
        }
        var order = this._ctx.dir === "next" ? 1 : -1;
        function sorter(a, b) {
            var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
            return aVal < bVal ? -order : aVal > bVal ? order : 0;
        }
        return this.toArray(function(a) {
            return a.sort(sorter);
        }).then(cb);
    };
    Collection.prototype.toArray = function(cb) {
        var _this = this;
        return this._read(function(trans) {
            var ctx = _this._ctx;
            if (ctx.dir === "next" && $50dd583e1e079a0c$var$isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                var valueMapper_1 = ctx.valueMapper;
                var index = $50dd583e1e079a0c$var$getIndexOrStore(ctx, ctx.table.core.schema);
                return ctx.table.core.query({
                    trans: trans,
                    limit: ctx.limit,
                    values: true,
                    query: {
                        index: index,
                        range: ctx.range
                    }
                }).then(function(_a) {
                    var result = _a.result;
                    return valueMapper_1 ? result.map(valueMapper_1) : result;
                });
            } else {
                var a_1 = [];
                return $50dd583e1e079a0c$var$iter(ctx, function(item) {
                    return a_1.push(item);
                }, trans, ctx.table.core).then(function() {
                    return a_1;
                });
            }
        }, cb);
    };
    Collection.prototype.offset = function(offset) {
        var ctx = this._ctx;
        if (offset <= 0) return this;
        ctx.offset += offset;
        if ($50dd583e1e079a0c$var$isPlainKeyRange(ctx)) $50dd583e1e079a0c$var$addReplayFilter(ctx, function() {
            var offsetLeft = offset;
            return function(cursor, advance) {
                if (offsetLeft === 0) return true;
                if (offsetLeft === 1) {
                    --offsetLeft;
                    return false;
                }
                advance(function() {
                    cursor.advance(offsetLeft);
                    offsetLeft = 0;
                });
                return false;
            };
        });
        else $50dd583e1e079a0c$var$addReplayFilter(ctx, function() {
            var offsetLeft = offset;
            return function() {
                return --offsetLeft < 0;
            };
        });
        return this;
    };
    Collection.prototype.limit = function(numRows) {
        this._ctx.limit = Math.min(this._ctx.limit, numRows);
        $50dd583e1e079a0c$var$addReplayFilter(this._ctx, function() {
            var rowsLeft = numRows;
            return function(cursor, advance, resolve) {
                if (--rowsLeft <= 0) advance(resolve);
                return rowsLeft >= 0;
            };
        }, true);
        return this;
    };
    Collection.prototype.until = function(filterFunction, bIncludeStopEntry) {
        $50dd583e1e079a0c$var$addFilter(this._ctx, function(cursor, advance, resolve) {
            if (filterFunction(cursor.value)) {
                advance(resolve);
                return bIncludeStopEntry;
            } else return true;
        });
        return this;
    };
    Collection.prototype.first = function(cb) {
        return this.limit(1).toArray(function(a) {
            return a[0];
        }).then(cb);
    };
    Collection.prototype.last = function(cb) {
        return this.reverse().first(cb);
    };
    Collection.prototype.filter = function(filterFunction) {
        $50dd583e1e079a0c$var$addFilter(this._ctx, function(cursor) {
            return filterFunction(cursor.value);
        });
        $50dd583e1e079a0c$var$addMatchFilter(this._ctx, filterFunction);
        return this;
    };
    Collection.prototype.and = function(filter) {
        return this.filter(filter);
    };
    Collection.prototype.or = function(indexName) {
        return new this.db.WhereClause(this._ctx.table, indexName, this);
    };
    Collection.prototype.reverse = function() {
        this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
        if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);
        return this;
    };
    Collection.prototype.desc = function() {
        return this.reverse();
    };
    Collection.prototype.eachKey = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        return this.each(function(val, cursor) {
            cb(cursor.key, cursor);
        });
    };
    Collection.prototype.eachUniqueKey = function(cb) {
        this._ctx.unique = "unique";
        return this.eachKey(cb);
    };
    Collection.prototype.eachPrimaryKey = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        return this.each(function(val, cursor) {
            cb(cursor.primaryKey, cursor);
        });
    };
    Collection.prototype.keys = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        var a = [];
        return this.each(function(item, cursor) {
            a.push(cursor.key);
        }).then(function() {
            return a;
        }).then(cb);
    };
    Collection.prototype.primaryKeys = function(cb) {
        var ctx = this._ctx;
        if (ctx.dir === "next" && $50dd583e1e079a0c$var$isPlainKeyRange(ctx, true) && ctx.limit > 0) return this._read(function(trans) {
            var index = $50dd583e1e079a0c$var$getIndexOrStore(ctx, ctx.table.core.schema);
            return ctx.table.core.query({
                trans: trans,
                values: false,
                limit: ctx.limit,
                query: {
                    index: index,
                    range: ctx.range
                }
            });
        }).then(function(_a) {
            var result = _a.result;
            return result;
        }).then(cb);
        ctx.keysOnly = !ctx.isMatch;
        var a = [];
        return this.each(function(item, cursor) {
            a.push(cursor.primaryKey);
        }).then(function() {
            return a;
        }).then(cb);
    };
    Collection.prototype.uniqueKeys = function(cb) {
        this._ctx.unique = "unique";
        return this.keys(cb);
    };
    Collection.prototype.firstKey = function(cb) {
        return this.limit(1).keys(function(a) {
            return a[0];
        }).then(cb);
    };
    Collection.prototype.lastKey = function(cb) {
        return this.reverse().firstKey(cb);
    };
    Collection.prototype.distinct = function() {
        var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
        if (!idx || !idx.multi) return this;
        var set = {};
        $50dd583e1e079a0c$var$addFilter(this._ctx, function(cursor) {
            var strKey = cursor.primaryKey.toString();
            var found = $50dd583e1e079a0c$var$hasOwn(set, strKey);
            set[strKey] = true;
            return !found;
        });
        return this;
    };
    Collection.prototype.modify = function(changes) {
        var _this = this;
        var ctx = this._ctx;
        return this._write(function(trans) {
            var modifyer;
            if (typeof changes === "function") modifyer = changes;
            else {
                var keyPaths = $50dd583e1e079a0c$var$keys(changes);
                var numKeys = keyPaths.length;
                modifyer = function(item) {
                    var anythingModified = false;
                    for(var i = 0; i < numKeys; ++i){
                        var keyPath = keyPaths[i], val = changes[keyPath];
                        if ($50dd583e1e079a0c$var$getByKeyPath(item, keyPath) !== val) {
                            $50dd583e1e079a0c$var$setByKeyPath(item, keyPath, val);
                            anythingModified = true;
                        }
                    }
                    return anythingModified;
                };
            }
            var coreTable = ctx.table.core;
            var _a = coreTable.schema.primaryKey, outbound = _a.outbound, extractKey = _a.extractKey;
            var limit = _this.db._options.modifyChunkSize || 200;
            var totalFailures = [];
            var successCount = 0;
            var failedKeys = [];
            var applyMutateResult = function(expectedCount, res) {
                var failures = res.failures, numFailures = res.numFailures;
                successCount += expectedCount - numFailures;
                for(var _i = 0, _a = $50dd583e1e079a0c$var$keys(failures); _i < _a.length; _i++){
                    var pos = _a[_i];
                    totalFailures.push(failures[pos]);
                }
            };
            return _this.clone().primaryKeys().then(function(keys) {
                var nextChunk = function(offset) {
                    var count = Math.min(limit, keys.length - offset);
                    return coreTable.getMany({
                        trans: trans,
                        keys: keys.slice(offset, offset + count),
                        cache: "immutable"
                    }).then(function(values) {
                        var addValues = [];
                        var putValues = [];
                        var putKeys = outbound ? [] : null;
                        var deleteKeys = [];
                        for(var i = 0; i < count; ++i){
                            var origValue = values[i];
                            var ctx_1 = {
                                value: $50dd583e1e079a0c$var$deepClone(origValue),
                                primKey: keys[offset + i]
                            };
                            if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                                if (ctx_1.value == null) deleteKeys.push(keys[offset + i]);
                                else if (!outbound && $50dd583e1e079a0c$var$cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                                    deleteKeys.push(keys[offset + i]);
                                    addValues.push(ctx_1.value);
                                } else {
                                    putValues.push(ctx_1.value);
                                    if (outbound) putKeys.push(keys[offset + i]);
                                }
                            }
                        }
                        var criteria = $50dd583e1e079a0c$var$isPlainKeyRange(ctx) && ctx.limit === Infinity && (typeof changes !== "function" || changes === $50dd583e1e079a0c$var$deleteCallback) && {
                            index: ctx.index,
                            range: ctx.range
                        };
                        return Promise.resolve(addValues.length > 0 && coreTable.mutate({
                            trans: trans,
                            type: "add",
                            values: addValues
                        }).then(function(res) {
                            for(var pos in res.failures)deleteKeys.splice(parseInt(pos), 1);
                            applyMutateResult(addValues.length, res);
                        })).then(function() {
                            return (putValues.length > 0 || criteria && typeof changes === "object") && coreTable.mutate({
                                trans: trans,
                                type: "put",
                                keys: putKeys,
                                values: putValues,
                                criteria: criteria,
                                changeSpec: typeof changes !== "function" && changes
                            }).then(function(res) {
                                return applyMutateResult(putValues.length, res);
                            });
                        }).then(function() {
                            return (deleteKeys.length > 0 || criteria && changes === $50dd583e1e079a0c$var$deleteCallback) && coreTable.mutate({
                                trans: trans,
                                type: "delete",
                                keys: deleteKeys,
                                criteria: criteria
                            }).then(function(res) {
                                return applyMutateResult(deleteKeys.length, res);
                            });
                        }).then(function() {
                            return keys.length > offset + count && nextChunk(offset + limit);
                        });
                    });
                };
                return nextChunk(0).then(function() {
                    if (totalFailures.length > 0) throw new $50dd583e1e079a0c$var$ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                    return keys.length;
                });
            });
        });
    };
    Collection.prototype.delete = function() {
        var ctx = this._ctx, range = ctx.range;
        if ($50dd583e1e079a0c$var$isPlainKeyRange(ctx) && (ctx.isPrimKey && !$50dd583e1e079a0c$var$hangsOnDeleteLargeKeyRange || range.type === 3)) return this._write(function(trans) {
            var primaryKey = ctx.table.core.schema.primaryKey;
            var coreRange = range;
            return ctx.table.core.count({
                trans: trans,
                query: {
                    index: primaryKey,
                    range: coreRange
                }
            }).then(function(count) {
                return ctx.table.core.mutate({
                    trans: trans,
                    type: "deleteRange",
                    range: coreRange
                }).then(function(_a) {
                    var failures = _a.failures;
                    _a.lastResult;
                    _a.results;
                    var numFailures = _a.numFailures;
                    if (numFailures) throw new $50dd583e1e079a0c$var$ModifyError("Could not delete some values", Object.keys(failures).map(function(pos) {
                        return failures[pos];
                    }), count - numFailures);
                    return count - numFailures;
                });
            });
        });
        return this.modify($50dd583e1e079a0c$var$deleteCallback);
    };
    return Collection;
}();
var $50dd583e1e079a0c$var$deleteCallback = function(value, ctx) {
    return ctx.value = null;
};
function $50dd583e1e079a0c$var$createCollectionConstructor(db) {
    return $50dd583e1e079a0c$var$makeClassConstructor($50dd583e1e079a0c$var$Collection.prototype, function Collection(whereClause, keyRangeGenerator) {
        this.db = db;
        var keyRange = $50dd583e1e079a0c$var$AnyRange, error = null;
        if (keyRangeGenerator) try {
            keyRange = keyRangeGenerator();
        } catch (ex) {
            error = ex;
        }
        var whereCtx = whereClause._ctx;
        var table = whereCtx.table;
        var readingHook = table.hook.reading.fire;
        this._ctx = {
            table: table,
            index: whereCtx.index,
            isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
            range: keyRange,
            keysOnly: false,
            dir: "next",
            unique: "",
            algorithm: null,
            filter: null,
            replayFilter: null,
            justLimit: true,
            isMatch: null,
            offset: 0,
            limit: Infinity,
            error: error,
            or: whereCtx.or,
            valueMapper: readingHook !== $50dd583e1e079a0c$var$mirror ? readingHook : null
        };
    });
}
function $50dd583e1e079a0c$var$simpleCompare(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
}
function $50dd583e1e079a0c$var$simpleCompareReverse(a, b) {
    return a > b ? -1 : a === b ? 0 : 1;
}
function $50dd583e1e079a0c$var$fail(collectionOrWhereClause, err, T) {
    var collection = collectionOrWhereClause instanceof $50dd583e1e079a0c$var$WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
    collection._ctx.error = T ? new T(err) : new TypeError(err);
    return collection;
}
function $50dd583e1e079a0c$var$emptyCollection(whereClause) {
    return new whereClause.Collection(whereClause, function() {
        return $50dd583e1e079a0c$var$rangeEqual("");
    }).limit(0);
}
function $50dd583e1e079a0c$var$upperFactory(dir) {
    return dir === "next" ? function(s) {
        return s.toUpperCase();
    } : function(s) {
        return s.toLowerCase();
    };
}
function $50dd583e1e079a0c$var$lowerFactory(dir) {
    return dir === "next" ? function(s) {
        return s.toLowerCase();
    } : function(s) {
        return s.toUpperCase();
    };
}
function $50dd583e1e079a0c$var$nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
    var length = Math.min(key.length, lowerNeedle.length);
    var llp = -1;
    for(var i = 0; i < length; ++i){
        var lwrKeyChar = lowerKey[i];
        if (lwrKeyChar !== lowerNeedle[i]) {
            if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
            if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
            if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
            return null;
        }
        if (cmp(key[i], lwrKeyChar) < 0) llp = i;
    }
    if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);
    if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);
    return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
}
function $50dd583e1e079a0c$var$addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
    var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
    if (!needles.every(function(s) {
        return typeof s === "string";
    })) return $50dd583e1e079a0c$var$fail(whereClause, $50dd583e1e079a0c$var$STRING_EXPECTED);
    function initDirection(dir) {
        upper = $50dd583e1e079a0c$var$upperFactory(dir);
        lower = $50dd583e1e079a0c$var$lowerFactory(dir);
        compare = dir === "next" ? $50dd583e1e079a0c$var$simpleCompare : $50dd583e1e079a0c$var$simpleCompareReverse;
        var needleBounds = needles.map(function(needle) {
            return {
                lower: lower(needle),
                upper: upper(needle)
            };
        }).sort(function(a, b) {
            return compare(a.lower, b.lower);
        });
        upperNeedles = needleBounds.map(function(nb) {
            return nb.upper;
        });
        lowerNeedles = needleBounds.map(function(nb) {
            return nb.lower;
        });
        direction = dir;
        nextKeySuffix = dir === "next" ? "" : suffix;
    }
    initDirection("next");
    var c = new whereClause.Collection(whereClause, function() {
        return $50dd583e1e079a0c$var$createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
    });
    c._ondirectionchange = function(direction) {
        initDirection(direction);
    };
    var firstPossibleNeedle = 0;
    c._addAlgorithm(function(cursor, advance, resolve) {
        var key = cursor.key;
        if (typeof key !== "string") return false;
        var lowerKey = lower(key);
        if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) return true;
        else {
            var lowestPossibleCasing = null;
            for(var i = firstPossibleNeedle; i < needlesLen; ++i){
                var casing = $50dd583e1e079a0c$var$nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;
                else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) lowestPossibleCasing = casing;
            }
            if (lowestPossibleCasing !== null) advance(function() {
                cursor.continue(lowestPossibleCasing + nextKeySuffix);
            });
            else advance(resolve);
            return false;
        }
    });
    return c;
}
function $50dd583e1e079a0c$var$createRange(lower, upper, lowerOpen, upperOpen) {
    return {
        type: 2,
        lower: lower,
        upper: upper,
        lowerOpen: lowerOpen,
        upperOpen: upperOpen
    };
}
function $50dd583e1e079a0c$var$rangeEqual(value) {
    return {
        type: 1,
        lower: value,
        upper: value
    };
}
var $50dd583e1e079a0c$var$WhereClause = function() {
    function WhereClause() {}
    Object.defineProperty(WhereClause.prototype, "Collection", {
        get: function() {
            return this._ctx.table.db.Collection;
        },
        enumerable: false,
        configurable: true
    });
    WhereClause.prototype.between = function(lower, upper, includeLower, includeUpper) {
        includeLower = includeLower !== false;
        includeUpper = includeUpper === true;
        try {
            if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return $50dd583e1e079a0c$var$emptyCollection(this);
            return new this.Collection(this, function() {
                return $50dd583e1e079a0c$var$createRange(lower, upper, !includeLower, !includeUpper);
            });
        } catch (e) {
            return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        }
    };
    WhereClause.prototype.equals = function(value) {
        if (value == null) return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$rangeEqual(value);
        });
    };
    WhereClause.prototype.above = function(value) {
        if (value == null) return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(value, undefined, true);
        });
    };
    WhereClause.prototype.aboveOrEqual = function(value) {
        if (value == null) return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(value, undefined, false);
        });
    };
    WhereClause.prototype.below = function(value) {
        if (value == null) return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(undefined, value, false, true);
        });
    };
    WhereClause.prototype.belowOrEqual = function(value) {
        if (value == null) return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(undefined, value);
        });
    };
    WhereClause.prototype.startsWith = function(str) {
        if (typeof str !== "string") return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$STRING_EXPECTED);
        return this.between(str, str + $50dd583e1e079a0c$var$maxString, true, true);
    };
    WhereClause.prototype.startsWithIgnoreCase = function(str) {
        if (str === "") return this.startsWith(str);
        return $50dd583e1e079a0c$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return x.indexOf(a[0]) === 0;
        }, [
            str
        ], $50dd583e1e079a0c$var$maxString);
    };
    WhereClause.prototype.equalsIgnoreCase = function(str) {
        return $50dd583e1e079a0c$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return x === a[0];
        }, [
            str
        ], "");
    };
    WhereClause.prototype.anyOfIgnoreCase = function() {
        var set = $50dd583e1e079a0c$var$getArrayOf.apply($50dd583e1e079a0c$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return $50dd583e1e079a0c$var$emptyCollection(this);
        return $50dd583e1e079a0c$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return a.indexOf(x) !== -1;
        }, set, "");
    };
    WhereClause.prototype.startsWithAnyOfIgnoreCase = function() {
        var set = $50dd583e1e079a0c$var$getArrayOf.apply($50dd583e1e079a0c$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return $50dd583e1e079a0c$var$emptyCollection(this);
        return $50dd583e1e079a0c$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return a.some(function(n) {
                return x.indexOf(n) === 0;
            });
        }, set, $50dd583e1e079a0c$var$maxString);
    };
    WhereClause.prototype.anyOf = function() {
        var _this = this;
        var set = $50dd583e1e079a0c$var$getArrayOf.apply($50dd583e1e079a0c$var$NO_CHAR_ARRAY, arguments);
        var compare = this._cmp;
        try {
            set.sort(compare);
        } catch (e) {
            return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        }
        if (set.length === 0) return $50dd583e1e079a0c$var$emptyCollection(this);
        var c = new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(set[0], set[set.length - 1]);
        });
        c._ondirectionchange = function(direction) {
            compare = direction === "next" ? _this._ascending : _this._descending;
            set.sort(compare);
        };
        var i = 0;
        c._addAlgorithm(function(cursor, advance, resolve) {
            var key = cursor.key;
            while(compare(key, set[i]) > 0){
                ++i;
                if (i === set.length) {
                    advance(resolve);
                    return false;
                }
            }
            if (compare(key, set[i]) === 0) return true;
            else {
                advance(function() {
                    cursor.continue(set[i]);
                });
                return false;
            }
        });
        return c;
    };
    WhereClause.prototype.notEqual = function(value) {
        return this.inAnyRange([
            [
                $50dd583e1e079a0c$var$minKey,
                value
            ],
            [
                value,
                this.db._maxKey
            ]
        ], {
            includeLowers: false,
            includeUppers: false
        });
    };
    WhereClause.prototype.noneOf = function() {
        var set = $50dd583e1e079a0c$var$getArrayOf.apply($50dd583e1e079a0c$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return new this.Collection(this);
        try {
            set.sort(this._ascending);
        } catch (e) {
            return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        }
        var ranges = set.reduce(function(res, val) {
            return res ? res.concat([
                [
                    res[res.length - 1][1],
                    val
                ]
            ]) : [
                [
                    $50dd583e1e079a0c$var$minKey,
                    val
                ]
            ];
        }, null);
        ranges.push([
            set[set.length - 1],
            this.db._maxKey
        ]);
        return this.inAnyRange(ranges, {
            includeLowers: false,
            includeUppers: false
        });
    };
    WhereClause.prototype.inAnyRange = function(ranges, options) {
        var _this = this;
        var cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
        if (ranges.length === 0) return $50dd583e1e079a0c$var$emptyCollection(this);
        if (!ranges.every(function(range) {
            return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;
        })) return $50dd583e1e079a0c$var$fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", $50dd583e1e079a0c$var$exceptions.InvalidArgument);
        var includeLowers = !options || options.includeLowers !== false;
        var includeUppers = options && options.includeUppers === true;
        function addRange(ranges, newRange) {
            var i = 0, l = ranges.length;
            for(; i < l; ++i){
                var range = ranges[i];
                if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                    range[0] = min(range[0], newRange[0]);
                    range[1] = max(range[1], newRange[1]);
                    break;
                }
            }
            if (i === l) ranges.push(newRange);
            return ranges;
        }
        var sortDirection = ascending;
        function rangeSorter(a, b) {
            return sortDirection(a[0], b[0]);
        }
        var set;
        try {
            set = ranges.reduce(addRange, []);
            set.sort(rangeSorter);
        } catch (ex) {
            return $50dd583e1e079a0c$var$fail(this, $50dd583e1e079a0c$var$INVALID_KEY_ARGUMENT);
        }
        var rangePos = 0;
        var keyIsBeyondCurrentEntry = includeUppers ? function(key) {
            return ascending(key, set[rangePos][1]) > 0;
        } : function(key) {
            return ascending(key, set[rangePos][1]) >= 0;
        };
        var keyIsBeforeCurrentEntry = includeLowers ? function(key) {
            return descending(key, set[rangePos][0]) > 0;
        } : function(key) {
            return descending(key, set[rangePos][0]) >= 0;
        };
        function keyWithinCurrentRange(key) {
            return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
        }
        var checkKey = keyIsBeyondCurrentEntry;
        var c = new this.Collection(this, function() {
            return $50dd583e1e079a0c$var$createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
        });
        c._ondirectionchange = function(direction) {
            if (direction === "next") {
                checkKey = keyIsBeyondCurrentEntry;
                sortDirection = ascending;
            } else {
                checkKey = keyIsBeforeCurrentEntry;
                sortDirection = descending;
            }
            set.sort(rangeSorter);
        };
        c._addAlgorithm(function(cursor, advance, resolve) {
            var key = cursor.key;
            while(checkKey(key)){
                ++rangePos;
                if (rangePos === set.length) {
                    advance(resolve);
                    return false;
                }
            }
            if (keyWithinCurrentRange(key)) return true;
            else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) return false;
            else {
                advance(function() {
                    if (sortDirection === ascending) cursor.continue(set[rangePos][0]);
                    else cursor.continue(set[rangePos][1]);
                });
                return false;
            }
        });
        return c;
    };
    WhereClause.prototype.startsWithAnyOf = function() {
        var set = $50dd583e1e079a0c$var$getArrayOf.apply($50dd583e1e079a0c$var$NO_CHAR_ARRAY, arguments);
        if (!set.every(function(s) {
            return typeof s === "string";
        })) return $50dd583e1e079a0c$var$fail(this, "startsWithAnyOf() only works with strings");
        if (set.length === 0) return $50dd583e1e079a0c$var$emptyCollection(this);
        return this.inAnyRange(set.map(function(str) {
            return [
                str,
                str + $50dd583e1e079a0c$var$maxString
            ];
        }));
    };
    return WhereClause;
}();
function $50dd583e1e079a0c$var$createWhereClauseConstructor(db) {
    return $50dd583e1e079a0c$var$makeClassConstructor($50dd583e1e079a0c$var$WhereClause.prototype, function WhereClause(table, index, orCollection) {
        this.db = db;
        this._ctx = {
            table: table,
            index: index === ":id" ? null : index,
            or: orCollection
        };
        var indexedDB1 = db._deps.indexedDB;
        if (!indexedDB1) throw new $50dd583e1e079a0c$var$exceptions.MissingAPI();
        this._cmp = this._ascending = indexedDB1.cmp.bind(indexedDB1);
        this._descending = function(a, b) {
            return indexedDB1.cmp(b, a);
        };
        this._max = function(a, b) {
            return indexedDB1.cmp(a, b) > 0 ? a : b;
        };
        this._min = function(a, b) {
            return indexedDB1.cmp(a, b) < 0 ? a : b;
        };
        this._IDBKeyRange = db._deps.IDBKeyRange;
    });
}
function $50dd583e1e079a0c$var$eventRejectHandler(reject) {
    return $50dd583e1e079a0c$var$wrap(function(event) {
        $50dd583e1e079a0c$var$preventDefault(event);
        reject(event.target.error);
        return false;
    });
}
function $50dd583e1e079a0c$var$preventDefault(event) {
    if (event.stopPropagation) event.stopPropagation();
    if (event.preventDefault) event.preventDefault();
}
var $50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME = "storagemutated";
var $50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME = "x-storagemutated-1";
var $50dd583e1e079a0c$var$globalEvents = $50dd583e1e079a0c$var$Events(null, $50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME);
var $50dd583e1e079a0c$var$Transaction = function() {
    function Transaction() {}
    Transaction.prototype._lock = function() {
        $50dd583e1e079a0c$var$assert(!$50dd583e1e079a0c$var$PSD.global);
        ++this._reculock;
        if (this._reculock === 1 && !$50dd583e1e079a0c$var$PSD.global) $50dd583e1e079a0c$var$PSD.lockOwnerFor = this;
        return this;
    };
    Transaction.prototype._unlock = function() {
        $50dd583e1e079a0c$var$assert(!$50dd583e1e079a0c$var$PSD.global);
        if (--this._reculock === 0) {
            if (!$50dd583e1e079a0c$var$PSD.global) $50dd583e1e079a0c$var$PSD.lockOwnerFor = null;
            while(this._blockedFuncs.length > 0 && !this._locked()){
                var fnAndPSD = this._blockedFuncs.shift();
                try {
                    $50dd583e1e079a0c$var$usePSD(fnAndPSD[1], fnAndPSD[0]);
                } catch (e) {}
            }
        }
        return this;
    };
    Transaction.prototype._locked = function() {
        return this._reculock && $50dd583e1e079a0c$var$PSD.lockOwnerFor !== this;
    };
    Transaction.prototype.create = function(idbtrans) {
        var _this = this;
        if (!this.mode) return this;
        var idbdb = this.db.idbdb;
        var dbOpenError = this.db._state.dbOpenError;
        $50dd583e1e079a0c$var$assert(!this.idbtrans);
        if (!idbtrans && !idbdb) switch(dbOpenError && dbOpenError.name){
            case "DatabaseClosedError":
                throw new $50dd583e1e079a0c$var$exceptions.DatabaseClosed(dbOpenError);
            case "MissingAPIError":
                throw new $50dd583e1e079a0c$var$exceptions.MissingAPI(dbOpenError.message, dbOpenError);
            default:
                throw new $50dd583e1e079a0c$var$exceptions.OpenFailed(dbOpenError);
        }
        if (!this.active) throw new $50dd583e1e079a0c$var$exceptions.TransactionInactive();
        $50dd583e1e079a0c$var$assert(this._completion._state === null);
        idbtrans = this.idbtrans = idbtrans || (this.db.core ? this.db.core.transaction(this.storeNames, this.mode, {
            durability: this.chromeTransactionDurability
        }) : idbdb.transaction(this.storeNames, this.mode, {
            durability: this.chromeTransactionDurability
        }));
        idbtrans.onerror = $50dd583e1e079a0c$var$wrap(function(ev) {
            $50dd583e1e079a0c$var$preventDefault(ev);
            _this._reject(idbtrans.error);
        });
        idbtrans.onabort = $50dd583e1e079a0c$var$wrap(function(ev) {
            $50dd583e1e079a0c$var$preventDefault(ev);
            _this.active && _this._reject(new $50dd583e1e079a0c$var$exceptions.Abort(idbtrans.error));
            _this.active = false;
            _this.on("abort").fire(ev);
        });
        idbtrans.oncomplete = $50dd583e1e079a0c$var$wrap(function() {
            _this.active = false;
            _this._resolve();
            if ("mutatedParts" in idbtrans) $50dd583e1e079a0c$var$globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
        });
        return this;
    };
    Transaction.prototype._promise = function(mode, fn, bWriteLock) {
        var _this = this;
        if (mode === "readwrite" && this.mode !== "readwrite") return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.ReadOnly("Transaction is readonly"));
        if (!this.active) return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.TransactionInactive());
        if (this._locked()) return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            _this._blockedFuncs.push([
                function() {
                    _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                },
                $50dd583e1e079a0c$var$PSD
            ]);
        });
        else if (bWriteLock) return $50dd583e1e079a0c$var$newScope(function() {
            var p = new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
                _this._lock();
                var rv = fn(resolve, reject, _this);
                if (rv && rv.then) rv.then(resolve, reject);
            });
            p.finally(function() {
                return _this._unlock();
            });
            p._lib = true;
            return p;
        });
        else {
            var p = new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
                var rv = fn(resolve, reject, _this);
                if (rv && rv.then) rv.then(resolve, reject);
            });
            p._lib = true;
            return p;
        }
    };
    Transaction.prototype._root = function() {
        return this.parent ? this.parent._root() : this;
    };
    Transaction.prototype.waitFor = function(promiseLike) {
        var root = this._root();
        var promise = $50dd583e1e079a0c$var$DexiePromise.resolve(promiseLike);
        if (root._waitingFor) root._waitingFor = root._waitingFor.then(function() {
            return promise;
        });
        else {
            root._waitingFor = promise;
            root._waitingQueue = [];
            var store = root.idbtrans.objectStore(root.storeNames[0]);
            (function spin() {
                ++root._spinCount;
                while(root._waitingQueue.length)root._waitingQueue.shift()();
                if (root._waitingFor) store.get(-Infinity).onsuccess = spin;
            })();
        }
        var currentWaitPromise = root._waitingFor;
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            promise.then(function(res) {
                return root._waitingQueue.push($50dd583e1e079a0c$var$wrap(resolve.bind(null, res)));
            }, function(err) {
                return root._waitingQueue.push($50dd583e1e079a0c$var$wrap(reject.bind(null, err)));
            }).finally(function() {
                if (root._waitingFor === currentWaitPromise) root._waitingFor = null;
            });
        });
    };
    Transaction.prototype.abort = function() {
        if (this.active) {
            this.active = false;
            if (this.idbtrans) this.idbtrans.abort();
            this._reject(new $50dd583e1e079a0c$var$exceptions.Abort());
        }
    };
    Transaction.prototype.table = function(tableName) {
        var memoizedTables = this._memoizedTables || (this._memoizedTables = {});
        if ($50dd583e1e079a0c$var$hasOwn(memoizedTables, tableName)) return memoizedTables[tableName];
        var tableSchema = this.schema[tableName];
        if (!tableSchema) throw new $50dd583e1e079a0c$var$exceptions.NotFound("Table " + tableName + " not part of transaction");
        var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
        transactionBoundTable.core = this.db.core.table(tableName);
        memoizedTables[tableName] = transactionBoundTable;
        return transactionBoundTable;
    };
    return Transaction;
}();
function $50dd583e1e079a0c$var$createTransactionConstructor(db) {
    return $50dd583e1e079a0c$var$makeClassConstructor($50dd583e1e079a0c$var$Transaction.prototype, function Transaction(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
        var _this = this;
        this.db = db;
        this.mode = mode;
        this.storeNames = storeNames;
        this.schema = dbschema;
        this.chromeTransactionDurability = chromeTransactionDurability;
        this.idbtrans = null;
        this.on = $50dd583e1e079a0c$var$Events(this, "complete", "error", "abort");
        this.parent = parent || null;
        this.active = true;
        this._reculock = 0;
        this._blockedFuncs = [];
        this._resolve = null;
        this._reject = null;
        this._waitingFor = null;
        this._waitingQueue = null;
        this._spinCount = 0;
        this._completion = new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
        this._completion.then(function() {
            _this.active = false;
            _this.on.complete.fire();
        }, function(e) {
            var wasActive = _this.active;
            _this.active = false;
            _this.on.error.fire(e);
            _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
            return $50dd583e1e079a0c$var$rejection(e);
        });
    });
}
function $50dd583e1e079a0c$var$createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
    return {
        name: name,
        keyPath: keyPath,
        unique: unique,
        multi: multi,
        auto: auto,
        compound: compound,
        src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + $50dd583e1e079a0c$var$nameFromKeyPath(keyPath)
    };
}
function $50dd583e1e079a0c$var$nameFromKeyPath(keyPath) {
    return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
}
function $50dd583e1e079a0c$var$createTableSchema(name, primKey, indexes) {
    return {
        name: name,
        primKey: primKey,
        indexes: indexes,
        mappedClass: null,
        idxByName: $50dd583e1e079a0c$var$arrayToObject(indexes, function(index) {
            return [
                index.name,
                index
            ];
        })
    };
}
function $50dd583e1e079a0c$var$safariMultiStoreFix(storeNames) {
    return storeNames.length === 1 ? storeNames[0] : storeNames;
}
var $50dd583e1e079a0c$var$getMaxKey = function(IdbKeyRange) {
    try {
        IdbKeyRange.only([
            []
        ]);
        $50dd583e1e079a0c$var$getMaxKey = function() {
            return [
                []
            ];
        };
        return [
            []
        ];
    } catch (e) {
        $50dd583e1e079a0c$var$getMaxKey = function() {
            return $50dd583e1e079a0c$var$maxString;
        };
        return $50dd583e1e079a0c$var$maxString;
    }
};
function $50dd583e1e079a0c$var$getKeyExtractor(keyPath) {
    if (keyPath == null) return function() {
        return undefined;
    };
    else if (typeof keyPath === "string") return $50dd583e1e079a0c$var$getSinglePathKeyExtractor(keyPath);
    else return function(obj) {
        return $50dd583e1e079a0c$var$getByKeyPath(obj, keyPath);
    };
}
function $50dd583e1e079a0c$var$getSinglePathKeyExtractor(keyPath) {
    var split = keyPath.split(".");
    if (split.length === 1) return function(obj) {
        return obj[keyPath];
    };
    else return function(obj) {
        return $50dd583e1e079a0c$var$getByKeyPath(obj, keyPath);
    };
}
function $50dd583e1e079a0c$var$arrayify(arrayLike) {
    return [].slice.call(arrayLike);
}
var $50dd583e1e079a0c$var$_id_counter = 0;
function $50dd583e1e079a0c$var$getKeyPathAlias(keyPath) {
    return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : "[" + keyPath.join("+") + "]";
}
function $50dd583e1e079a0c$var$createDBCore(db, IdbKeyRange, tmpTrans) {
    function extractSchema(db, trans) {
        var tables = $50dd583e1e079a0c$var$arrayify(db.objectStoreNames);
        return {
            schema: {
                name: db.name,
                tables: tables.map(function(table) {
                    return trans.objectStore(table);
                }).map(function(store) {
                    var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
                    var compound = $50dd583e1e079a0c$var$isArray(keyPath);
                    var outbound = keyPath == null;
                    var indexByKeyPath = {};
                    var result = {
                        name: store.name,
                        primaryKey: {
                            name: null,
                            isPrimaryKey: true,
                            outbound: outbound,
                            compound: compound,
                            keyPath: keyPath,
                            autoIncrement: autoIncrement,
                            unique: true,
                            extractKey: $50dd583e1e079a0c$var$getKeyExtractor(keyPath)
                        },
                        indexes: $50dd583e1e079a0c$var$arrayify(store.indexNames).map(function(indexName) {
                            return store.index(indexName);
                        }).map(function(index) {
                            var name = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath = index.keyPath;
                            var compound = $50dd583e1e079a0c$var$isArray(keyPath);
                            var result = {
                                name: name,
                                compound: compound,
                                keyPath: keyPath,
                                unique: unique,
                                multiEntry: multiEntry,
                                extractKey: $50dd583e1e079a0c$var$getKeyExtractor(keyPath)
                            };
                            indexByKeyPath[$50dd583e1e079a0c$var$getKeyPathAlias(keyPath)] = result;
                            return result;
                        }),
                        getIndexByKeyPath: function(keyPath) {
                            return indexByKeyPath[$50dd583e1e079a0c$var$getKeyPathAlias(keyPath)];
                        }
                    };
                    indexByKeyPath[":id"] = result.primaryKey;
                    if (keyPath != null) indexByKeyPath[$50dd583e1e079a0c$var$getKeyPathAlias(keyPath)] = result.primaryKey;
                    return result;
                })
            },
            hasGetAll: tables.length > 0 && "getAll" in trans.objectStore(tables[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
        };
    }
    function makeIDBKeyRange(range) {
        if (range.type === 3) return null;
        if (range.type === 4) throw new Error("Cannot convert never type to IDBKeyRange");
        var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
        var idbRange = lower === undefined ? upper === undefined ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === undefined ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
        return idbRange;
    }
    function createDbCoreTable(tableSchema) {
        var tableName = tableSchema.name;
        function mutate(_a) {
            var trans = _a.trans, type = _a.type, keys = _a.keys, values = _a.values, range = _a.range;
            return new Promise(function(resolve, reject) {
                resolve = $50dd583e1e079a0c$var$wrap(resolve);
                var store = trans.objectStore(tableName);
                var outbound = store.keyPath == null;
                var isAddOrPut = type === "put" || type === "add";
                if (!isAddOrPut && type !== "delete" && type !== "deleteRange") throw new Error("Invalid operation type: " + type);
                var length = (keys || values || {
                    length: 1
                }).length;
                if (keys && values && keys.length !== values.length) throw new Error("Given keys array must have same length as given values array.");
                if (length === 0) return resolve({
                    numFailures: 0,
                    failures: {},
                    results: [],
                    lastResult: undefined
                });
                var req;
                var reqs = [];
                var failures = [];
                var numFailures = 0;
                var errorHandler = function(event) {
                    ++numFailures;
                    $50dd583e1e079a0c$var$preventDefault(event);
                };
                if (type === "deleteRange") {
                    if (range.type === 4) return resolve({
                        numFailures: numFailures,
                        failures: failures,
                        results: [],
                        lastResult: undefined
                    });
                    if (range.type === 3) reqs.push(req = store.clear());
                    else reqs.push(req = store.delete(makeIDBKeyRange(range)));
                } else {
                    var _a = isAddOrPut ? outbound ? [
                        values,
                        keys
                    ] : [
                        values,
                        null
                    ] : [
                        keys,
                        null
                    ], args1 = _a[0], args2 = _a[1];
                    if (isAddOrPut) for(var i = 0; i < length; ++i){
                        reqs.push(req = args2 && args2[i] !== undefined ? store[type](args1[i], args2[i]) : store[type](args1[i]));
                        req.onerror = errorHandler;
                    }
                    else for(var i = 0; i < length; ++i){
                        reqs.push(req = store[type](args1[i]));
                        req.onerror = errorHandler;
                    }
                }
                var done = function(event) {
                    var lastResult = event.target.result;
                    reqs.forEach(function(req, i) {
                        return req.error != null && (failures[i] = req.error);
                    });
                    resolve({
                        numFailures: numFailures,
                        failures: failures,
                        results: type === "delete" ? keys : reqs.map(function(req) {
                            return req.result;
                        }),
                        lastResult: lastResult
                    });
                };
                req.onerror = function(event) {
                    errorHandler(event);
                    done(event);
                };
                req.onsuccess = done;
            });
        }
        function openCursor(_a) {
            var trans = _a.trans, values = _a.values, query = _a.query, reverse = _a.reverse, unique = _a.unique;
            return new Promise(function(resolve, reject) {
                resolve = $50dd583e1e079a0c$var$wrap(resolve);
                var index = query.index, range = query.range;
                var store = trans.objectStore(tableName);
                var source = index.isPrimaryKey ? store : store.index(index.name);
                var direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
                var req = values || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
                req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                req.onsuccess = $50dd583e1e079a0c$var$wrap(function(ev) {
                    var cursor = req.result;
                    if (!cursor) {
                        resolve(null);
                        return;
                    }
                    cursor.___id = ++$50dd583e1e079a0c$var$_id_counter;
                    cursor.done = false;
                    var _cursorContinue = cursor.continue.bind(cursor);
                    var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
                    if (_cursorContinuePrimaryKey) _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
                    var _cursorAdvance = cursor.advance.bind(cursor);
                    var doThrowCursorIsNotStarted = function() {
                        throw new Error("Cursor not started");
                    };
                    var doThrowCursorIsStopped = function() {
                        throw new Error("Cursor not stopped");
                    };
                    cursor.trans = trans;
                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
                    cursor.fail = $50dd583e1e079a0c$var$wrap(reject);
                    cursor.next = function() {
                        var _this = this;
                        var gotOne = 1;
                        return this.start(function() {
                            return gotOne-- ? _this.continue() : _this.stop();
                        }).then(function() {
                            return _this;
                        });
                    };
                    cursor.start = function(callback) {
                        var iterationPromise = new Promise(function(resolveIteration, rejectIteration) {
                            resolveIteration = $50dd583e1e079a0c$var$wrap(resolveIteration);
                            req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(rejectIteration);
                            cursor.fail = rejectIteration;
                            cursor.stop = function(value) {
                                cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                                resolveIteration(value);
                            };
                        });
                        var guardedCallback = function() {
                            if (req.result) try {
                                callback();
                            } catch (err) {
                                cursor.fail(err);
                            }
                            else {
                                cursor.done = true;
                                cursor.start = function() {
                                    throw new Error("Cursor behind last entry");
                                };
                                cursor.stop();
                            }
                        };
                        req.onsuccess = $50dd583e1e079a0c$var$wrap(function(ev) {
                            req.onsuccess = guardedCallback;
                            guardedCallback();
                        });
                        cursor.continue = _cursorContinue;
                        cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
                        cursor.advance = _cursorAdvance;
                        guardedCallback();
                        return iterationPromise;
                    };
                    resolve(cursor);
                }, reject);
            });
        }
        function query(hasGetAll) {
            return function(request) {
                return new Promise(function(resolve, reject) {
                    resolve = $50dd583e1e079a0c$var$wrap(resolve);
                    var trans = request.trans, values = request.values, limit = request.limit, query = request.query;
                    var nonInfinitLimit = limit === Infinity ? undefined : limit;
                    var index = query.index, range = query.range;
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ? store : store.index(index.name);
                    var idbKeyRange = makeIDBKeyRange(range);
                    if (limit === 0) return resolve({
                        result: []
                    });
                    if (hasGetAll) {
                        var req = values ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
                        req.onsuccess = function(event) {
                            return resolve({
                                result: event.target.result
                            });
                        };
                        req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                    } else {
                        var count_1 = 0;
                        var req_1 = values || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
                        var result_1 = [];
                        req_1.onsuccess = function(event) {
                            var cursor = req_1.result;
                            if (!cursor) return resolve({
                                result: result_1
                            });
                            result_1.push(values ? cursor.value : cursor.primaryKey);
                            if (++count_1 === limit) return resolve({
                                result: result_1
                            });
                            cursor.continue();
                        };
                        req_1.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                    }
                });
            };
        }
        return {
            name: tableName,
            schema: tableSchema,
            mutate: mutate,
            getMany: function(_a) {
                var trans = _a.trans, keys = _a.keys;
                return new Promise(function(resolve, reject) {
                    resolve = $50dd583e1e079a0c$var$wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var length = keys.length;
                    var result = new Array(length);
                    var keyCount = 0;
                    var callbackCount = 0;
                    var req;
                    var successHandler = function(event) {
                        var req = event.target;
                        result[req._pos] = req.result;
                        if (++callbackCount === keyCount) resolve(result);
                    };
                    var errorHandler = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                    for(var i = 0; i < length; ++i){
                        var key = keys[i];
                        if (key != null) {
                            req = store.get(keys[i]);
                            req._pos = i;
                            req.onsuccess = successHandler;
                            req.onerror = errorHandler;
                            ++keyCount;
                        }
                    }
                    if (keyCount === 0) resolve(result);
                });
            },
            get: function(_a) {
                var trans = _a.trans, key = _a.key;
                return new Promise(function(resolve, reject) {
                    resolve = $50dd583e1e079a0c$var$wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var req = store.get(key);
                    req.onsuccess = function(event) {
                        return resolve(event.target.result);
                    };
                    req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                });
            },
            query: query(hasGetAll),
            openCursor: openCursor,
            count: function(_a) {
                var query = _a.query, trans = _a.trans;
                var index = query.index, range = query.range;
                return new Promise(function(resolve, reject) {
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ? store : store.index(index.name);
                    var idbKeyRange = makeIDBKeyRange(range);
                    var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                    req.onsuccess = $50dd583e1e079a0c$var$wrap(function(ev) {
                        return resolve(ev.target.result);
                    });
                    req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                });
            }
        };
    }
    var _a = extractSchema(db, tmpTrans), schema = _a.schema, hasGetAll = _a.hasGetAll;
    var tables = schema.tables.map(function(tableSchema) {
        return createDbCoreTable(tableSchema);
    });
    var tableMap = {};
    tables.forEach(function(table) {
        return tableMap[table.name] = table;
    });
    return {
        stack: "dbcore",
        transaction: db.transaction.bind(db),
        table: function(name) {
            var result = tableMap[name];
            if (!result) throw new Error("Table '" + name + "' not found");
            return tableMap[name];
        },
        MIN_KEY: -Infinity,
        MAX_KEY: $50dd583e1e079a0c$var$getMaxKey(IdbKeyRange),
        schema: schema
    };
}
function $50dd583e1e079a0c$var$createMiddlewareStack(stackImpl, middlewares) {
    return middlewares.reduce(function(down, _a) {
        var create = _a.create;
        return $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, down), create(down));
    }, stackImpl);
}
function $50dd583e1e079a0c$var$createMiddlewareStacks(middlewares, idbdb, _a, tmpTrans) {
    var IDBKeyRange = _a.IDBKeyRange;
    _a.indexedDB;
    var dbcore = $50dd583e1e079a0c$var$createMiddlewareStack($50dd583e1e079a0c$var$createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
    return {
        dbcore: dbcore
    };
}
function $50dd583e1e079a0c$var$generateMiddlewareStacks(_a, tmpTrans) {
    var db = _a._novip;
    var idbdb = tmpTrans.db;
    var stacks = $50dd583e1e079a0c$var$createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
    db.core = stacks.dbcore;
    db.tables.forEach(function(table) {
        var tableName = table.name;
        if (db.core.schema.tables.some(function(tbl) {
            return tbl.name === tableName;
        })) {
            table.core = db.core.table(tableName);
            if (db[tableName] instanceof db.Table) db[tableName].core = table.core;
        }
    });
}
function $50dd583e1e079a0c$var$setApiOnPlace(_a, objs, tableNames, dbschema) {
    var db = _a._novip;
    tableNames.forEach(function(tableName) {
        var schema = dbschema[tableName];
        objs.forEach(function(obj) {
            var propDesc = $50dd583e1e079a0c$var$getPropertyDescriptor(obj, tableName);
            if (!propDesc || "value" in propDesc && propDesc.value === undefined) {
                if (obj === db.Transaction.prototype || obj instanceof db.Transaction) $50dd583e1e079a0c$var$setProp(obj, tableName, {
                    get: function() {
                        return this.table(tableName);
                    },
                    set: function(value) {
                        $50dd583e1e079a0c$var$defineProperty(this, tableName, {
                            value: value,
                            writable: true,
                            configurable: true,
                            enumerable: true
                        });
                    }
                });
                else obj[tableName] = new db.Table(tableName, schema);
            }
        });
    });
}
function $50dd583e1e079a0c$var$removeTablesApi(_a, objs) {
    var db = _a._novip;
    objs.forEach(function(obj) {
        for(var key in obj)if (obj[key] instanceof db.Table) delete obj[key];
    });
}
function $50dd583e1e079a0c$var$lowerVersionFirst(a, b) {
    return a._cfg.version - b._cfg.version;
}
function $50dd583e1e079a0c$var$runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
    var globalSchema = db._dbSchema;
    var trans = db._createTransaction("readwrite", db._storeNames, globalSchema);
    trans.create(idbUpgradeTrans);
    trans._completion.catch(reject);
    var rejectTransaction = trans._reject.bind(trans);
    var transless = $50dd583e1e079a0c$var$PSD.transless || $50dd583e1e079a0c$var$PSD;
    $50dd583e1e079a0c$var$newScope(function() {
        $50dd583e1e079a0c$var$PSD.trans = trans;
        $50dd583e1e079a0c$var$PSD.transless = transless;
        if (oldVersion === 0) {
            $50dd583e1e079a0c$var$keys(globalSchema).forEach(function(tableName) {
                $50dd583e1e079a0c$var$createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
            });
            $50dd583e1e079a0c$var$generateMiddlewareStacks(db, idbUpgradeTrans);
            $50dd583e1e079a0c$var$DexiePromise.follow(function() {
                return db.on.populate.fire(trans);
            }).catch(rejectTransaction);
        } else $50dd583e1e079a0c$var$updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
    });
}
function $50dd583e1e079a0c$var$updateTablesAndIndexes(_a, oldVersion, trans, idbUpgradeTrans) {
    var db = _a._novip;
    var queue = [];
    var versions = db._versions;
    var globalSchema = db._dbSchema = $50dd583e1e079a0c$var$buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
    var anyContentUpgraderHasRun = false;
    var versToRun = versions.filter(function(v) {
        return v._cfg.version >= oldVersion;
    });
    versToRun.forEach(function(version) {
        queue.push(function() {
            var oldSchema = globalSchema;
            var newSchema = version._cfg.dbschema;
            $50dd583e1e079a0c$var$adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
            $50dd583e1e079a0c$var$adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
            globalSchema = db._dbSchema = newSchema;
            var diff = $50dd583e1e079a0c$var$getSchemaDiff(oldSchema, newSchema);
            diff.add.forEach(function(tuple) {
                $50dd583e1e079a0c$var$createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
            });
            diff.change.forEach(function(change) {
                if (change.recreate) throw new $50dd583e1e079a0c$var$exceptions.Upgrade("Not yet support for changing primary key");
                else {
                    var store_1 = idbUpgradeTrans.objectStore(change.name);
                    change.add.forEach(function(idx) {
                        return $50dd583e1e079a0c$var$addIndex(store_1, idx);
                    });
                    change.change.forEach(function(idx) {
                        store_1.deleteIndex(idx.name);
                        $50dd583e1e079a0c$var$addIndex(store_1, idx);
                    });
                    change.del.forEach(function(idxName) {
                        return store_1.deleteIndex(idxName);
                    });
                }
            });
            var contentUpgrade = version._cfg.contentUpgrade;
            if (contentUpgrade && version._cfg.version > oldVersion) {
                $50dd583e1e079a0c$var$generateMiddlewareStacks(db, idbUpgradeTrans);
                trans._memoizedTables = {};
                anyContentUpgraderHasRun = true;
                var upgradeSchema_1 = $50dd583e1e079a0c$var$shallowClone(newSchema);
                diff.del.forEach(function(table) {
                    upgradeSchema_1[table] = oldSchema[table];
                });
                $50dd583e1e079a0c$var$removeTablesApi(db, [
                    db.Transaction.prototype
                ]);
                $50dd583e1e079a0c$var$setApiOnPlace(db, [
                    db.Transaction.prototype
                ], $50dd583e1e079a0c$var$keys(upgradeSchema_1), upgradeSchema_1);
                trans.schema = upgradeSchema_1;
                var contentUpgradeIsAsync_1 = $50dd583e1e079a0c$var$isAsyncFunction(contentUpgrade);
                if (contentUpgradeIsAsync_1) $50dd583e1e079a0c$var$incrementExpectedAwaits();
                var returnValue_1;
                var promiseFollowed = $50dd583e1e079a0c$var$DexiePromise.follow(function() {
                    returnValue_1 = contentUpgrade(trans);
                    if (returnValue_1) {
                        if (contentUpgradeIsAsync_1) {
                            var decrementor = $50dd583e1e079a0c$var$decrementExpectedAwaits.bind(null, null);
                            returnValue_1.then(decrementor, decrementor);
                        }
                    }
                });
                return returnValue_1 && typeof returnValue_1.then === "function" ? $50dd583e1e079a0c$var$DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function() {
                    return returnValue_1;
                });
            }
        });
        queue.push(function(idbtrans) {
            if (!anyContentUpgraderHasRun || !$50dd583e1e079a0c$var$hasIEDeleteObjectStoreBug) {
                var newSchema = version._cfg.dbschema;
                $50dd583e1e079a0c$var$deleteRemovedTables(newSchema, idbtrans);
            }
            $50dd583e1e079a0c$var$removeTablesApi(db, [
                db.Transaction.prototype
            ]);
            $50dd583e1e079a0c$var$setApiOnPlace(db, [
                db.Transaction.prototype
            ], db._storeNames, db._dbSchema);
            trans.schema = db._dbSchema;
        });
    });
    function runQueue() {
        return queue.length ? $50dd583e1e079a0c$var$DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : $50dd583e1e079a0c$var$DexiePromise.resolve();
    }
    return runQueue().then(function() {
        $50dd583e1e079a0c$var$createMissingTables(globalSchema, idbUpgradeTrans);
    });
}
function $50dd583e1e079a0c$var$getSchemaDiff(oldSchema, newSchema) {
    var diff = {
        del: [],
        add: [],
        change: []
    };
    var table;
    for(table in oldSchema)if (!newSchema[table]) diff.del.push(table);
    for(table in newSchema){
        var oldDef = oldSchema[table], newDef = newSchema[table];
        if (!oldDef) diff.add.push([
            table,
            newDef
        ]);
        else {
            var change = {
                name: table,
                def: newDef,
                recreate: false,
                del: [],
                add: [],
                change: []
            };
            if ("" + (oldDef.primKey.keyPath || "") !== "" + (newDef.primKey.keyPath || "") || oldDef.primKey.auto !== newDef.primKey.auto && !$50dd583e1e079a0c$var$isIEOrEdge) {
                change.recreate = true;
                diff.change.push(change);
            } else {
                var oldIndexes = oldDef.idxByName;
                var newIndexes = newDef.idxByName;
                var idxName = void 0;
                for(idxName in oldIndexes)if (!newIndexes[idxName]) change.del.push(idxName);
                for(idxName in newIndexes){
                    var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                    if (!oldIdx) change.add.push(newIdx);
                    else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);
                }
                if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) diff.change.push(change);
            }
        }
    }
    return diff;
}
function $50dd583e1e079a0c$var$createTable(idbtrans, tableName, primKey, indexes) {
    var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? {
        keyPath: primKey.keyPath,
        autoIncrement: primKey.auto
    } : {
        autoIncrement: primKey.auto
    });
    indexes.forEach(function(idx) {
        return $50dd583e1e079a0c$var$addIndex(store, idx);
    });
    return store;
}
function $50dd583e1e079a0c$var$createMissingTables(newSchema, idbtrans) {
    $50dd583e1e079a0c$var$keys(newSchema).forEach(function(tableName) {
        if (!idbtrans.db.objectStoreNames.contains(tableName)) $50dd583e1e079a0c$var$createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
    });
}
function $50dd583e1e079a0c$var$deleteRemovedTables(newSchema, idbtrans) {
    [].slice.call(idbtrans.db.objectStoreNames).forEach(function(storeName) {
        return newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName);
    });
}
function $50dd583e1e079a0c$var$addIndex(store, idx) {
    store.createIndex(idx.name, idx.keyPath, {
        unique: idx.unique,
        multiEntry: idx.multi
    });
}
function $50dd583e1e079a0c$var$buildGlobalSchema(db, idbdb, tmpTrans) {
    var globalSchema = {};
    var dbStoreNames = $50dd583e1e079a0c$var$slice(idbdb.objectStoreNames, 0);
    dbStoreNames.forEach(function(storeName) {
        var store = tmpTrans.objectStore(storeName);
        var keyPath = store.keyPath;
        var primKey = $50dd583e1e079a0c$var$createIndexSpec($50dd583e1e079a0c$var$nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
        var indexes = [];
        for(var j = 0; j < store.indexNames.length; ++j){
            var idbindex = store.index(store.indexNames[j]);
            keyPath = idbindex.keyPath;
            var index = $50dd583e1e079a0c$var$createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
            indexes.push(index);
        }
        globalSchema[storeName] = $50dd583e1e079a0c$var$createTableSchema(storeName, primKey, indexes);
    });
    return globalSchema;
}
function $50dd583e1e079a0c$var$readGlobalSchema(_a, idbdb, tmpTrans) {
    var db = _a._novip;
    db.verno = idbdb.version / 10;
    var globalSchema = db._dbSchema = $50dd583e1e079a0c$var$buildGlobalSchema(db, idbdb, tmpTrans);
    db._storeNames = $50dd583e1e079a0c$var$slice(idbdb.objectStoreNames, 0);
    $50dd583e1e079a0c$var$setApiOnPlace(db, [
        db._allTables
    ], $50dd583e1e079a0c$var$keys(globalSchema), globalSchema);
}
function $50dd583e1e079a0c$var$verifyInstalledSchema(db, tmpTrans) {
    var installedSchema = $50dd583e1e079a0c$var$buildGlobalSchema(db, db.idbdb, tmpTrans);
    var diff = $50dd583e1e079a0c$var$getSchemaDiff(installedSchema, db._dbSchema);
    return !(diff.add.length || diff.change.some(function(ch) {
        return ch.add.length || ch.change.length;
    }));
}
function $50dd583e1e079a0c$var$adjustToExistingIndexNames(_a, schema, idbtrans) {
    var db = _a._novip;
    var storeNames = idbtrans.db.objectStoreNames;
    for(var i = 0; i < storeNames.length; ++i){
        var storeName = storeNames[i];
        var store = idbtrans.objectStore(storeName);
        db._hasGetAll = "getAll" in store;
        for(var j = 0; j < store.indexNames.length; ++j){
            var indexName = store.indexNames[j];
            var keyPath = store.index(indexName).keyPath;
            var dexieName = typeof keyPath === "string" ? keyPath : "[" + $50dd583e1e079a0c$var$slice(keyPath).join("+") + "]";
            if (schema[storeName]) {
                var indexSpec = schema[storeName].idxByName[dexieName];
                if (indexSpec) {
                    indexSpec.name = indexName;
                    delete schema[storeName].idxByName[dexieName];
                    schema[storeName].idxByName[indexName] = indexSpec;
                }
            }
        }
    }
    if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && $50dd583e1e079a0c$var$_global.WorkerGlobalScope && $50dd583e1e079a0c$var$_global instanceof $50dd583e1e079a0c$var$_global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) db._hasGetAll = false;
}
function $50dd583e1e079a0c$var$parseIndexSyntax(primKeyAndIndexes) {
    return primKeyAndIndexes.split(",").map(function(index, indexNum) {
        index = index.trim();
        var name = index.replace(/([&*]|\+\+)/g, "");
        var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split("+") : name;
        return $50dd583e1e079a0c$var$createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), $50dd583e1e079a0c$var$isArray(keyPath), indexNum === 0);
    });
}
var $50dd583e1e079a0c$var$Version = function() {
    function Version() {}
    Version.prototype._parseStoresSpec = function(stores, outSchema) {
        $50dd583e1e079a0c$var$keys(stores).forEach(function(tableName) {
            if (stores[tableName] !== null) {
                var indexes = $50dd583e1e079a0c$var$parseIndexSyntax(stores[tableName]);
                var primKey = indexes.shift();
                if (primKey.multi) throw new $50dd583e1e079a0c$var$exceptions.Schema("Primary key cannot be multi-valued");
                indexes.forEach(function(idx) {
                    if (idx.auto) throw new $50dd583e1e079a0c$var$exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                    if (!idx.keyPath) throw new $50dd583e1e079a0c$var$exceptions.Schema("Index must have a name and cannot be an empty string");
                });
                outSchema[tableName] = $50dd583e1e079a0c$var$createTableSchema(tableName, primKey, indexes);
            }
        });
    };
    Version.prototype.stores = function(stores) {
        var db = this.db;
        this._cfg.storesSource = this._cfg.storesSource ? $50dd583e1e079a0c$var$extend(this._cfg.storesSource, stores) : stores;
        var versions = db._versions;
        var storesSpec = {};
        var dbschema = {};
        versions.forEach(function(version) {
            $50dd583e1e079a0c$var$extend(storesSpec, version._cfg.storesSource);
            dbschema = version._cfg.dbschema = {};
            version._parseStoresSpec(storesSpec, dbschema);
        });
        db._dbSchema = dbschema;
        $50dd583e1e079a0c$var$removeTablesApi(db, [
            db._allTables,
            db,
            db.Transaction.prototype
        ]);
        $50dd583e1e079a0c$var$setApiOnPlace(db, [
            db._allTables,
            db,
            db.Transaction.prototype,
            this._cfg.tables
        ], $50dd583e1e079a0c$var$keys(dbschema), dbschema);
        db._storeNames = $50dd583e1e079a0c$var$keys(dbschema);
        return this;
    };
    Version.prototype.upgrade = function(upgradeFunction) {
        this._cfg.contentUpgrade = $50dd583e1e079a0c$var$promisableChain(this._cfg.contentUpgrade || $50dd583e1e079a0c$var$nop, upgradeFunction);
        return this;
    };
    return Version;
}();
function $50dd583e1e079a0c$var$createVersionConstructor(db) {
    return $50dd583e1e079a0c$var$makeClassConstructor($50dd583e1e079a0c$var$Version.prototype, function Version(versionNumber) {
        this.db = db;
        this._cfg = {
            version: versionNumber,
            storesSource: null,
            dbschema: {},
            tables: {},
            contentUpgrade: null
        };
    });
}
function $50dd583e1e079a0c$var$getDbNamesTable(indexedDB1, IDBKeyRange) {
    var dbNamesDB = indexedDB1["_dbNamesDB"];
    if (!dbNamesDB) {
        dbNamesDB = indexedDB1["_dbNamesDB"] = new $50dd583e1e079a0c$export$4ece27d405df7279($50dd583e1e079a0c$var$DBNAMES_DB, {
            addons: [],
            indexedDB: indexedDB1,
            IDBKeyRange: IDBKeyRange
        });
        dbNamesDB.version(1).stores({
            dbnames: "name"
        });
    }
    return dbNamesDB.table("dbnames");
}
function $50dd583e1e079a0c$var$hasDatabasesNative(indexedDB1) {
    return indexedDB1 && typeof indexedDB1.databases === "function";
}
function $50dd583e1e079a0c$var$getDatabaseNames(_a) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    return $50dd583e1e079a0c$var$hasDatabasesNative(indexedDB1) ? Promise.resolve(indexedDB1.databases()).then(function(infos) {
        return infos.map(function(info) {
            return info.name;
        }).filter(function(name) {
            return name !== $50dd583e1e079a0c$var$DBNAMES_DB;
        });
    }) : $50dd583e1e079a0c$var$getDbNamesTable(indexedDB1, IDBKeyRange).toCollection().primaryKeys();
}
function $50dd583e1e079a0c$var$_onDatabaseCreated(_a, name) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    !$50dd583e1e079a0c$var$hasDatabasesNative(indexedDB1) && name !== $50dd583e1e079a0c$var$DBNAMES_DB && $50dd583e1e079a0c$var$getDbNamesTable(indexedDB1, IDBKeyRange).put({
        name: name
    }).catch($50dd583e1e079a0c$var$nop);
}
function $50dd583e1e079a0c$var$_onDatabaseDeleted(_a, name) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    !$50dd583e1e079a0c$var$hasDatabasesNative(indexedDB1) && name !== $50dd583e1e079a0c$var$DBNAMES_DB && $50dd583e1e079a0c$var$getDbNamesTable(indexedDB1, IDBKeyRange).delete(name).catch($50dd583e1e079a0c$var$nop);
}
function $50dd583e1e079a0c$var$vip(fn) {
    return $50dd583e1e079a0c$var$newScope(function() {
        $50dd583e1e079a0c$var$PSD.letThrough = true;
        return fn();
    });
}
function $50dd583e1e079a0c$var$idbReady() {
    var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
    if (!isSafari || !indexedDB.databases) return Promise.resolve();
    var intervalId;
    return new Promise(function(resolve) {
        var tryIdb = function() {
            return indexedDB.databases().finally(resolve);
        };
        intervalId = setInterval(tryIdb, 100);
        tryIdb();
    }).finally(function() {
        return clearInterval(intervalId);
    });
}
function $50dd583e1e079a0c$var$dexieOpen(db) {
    var state = db._state;
    var indexedDB1 = db._deps.indexedDB;
    if (state.isBeingOpened || db.idbdb) return state.dbReadyPromise.then(function() {
        return state.dbOpenError ? $50dd583e1e079a0c$var$rejection(state.dbOpenError) : db;
    });
    $50dd583e1e079a0c$var$debug && (state.openCanceller._stackHolder = $50dd583e1e079a0c$var$getErrorWithStack());
    state.isBeingOpened = true;
    state.dbOpenError = null;
    state.openComplete = false;
    var openCanceller = state.openCanceller;
    function throwIfCancelled() {
        if (state.openCanceller !== openCanceller) throw new $50dd583e1e079a0c$var$exceptions.DatabaseClosed("db.open() was cancelled");
    }
    var resolveDbReady = state.dbReadyResolve, upgradeTransaction = null, wasCreated = false;
    return $50dd583e1e079a0c$var$DexiePromise.race([
        openCanceller,
        (typeof navigator === "undefined" ? $50dd583e1e079a0c$var$DexiePromise.resolve() : $50dd583e1e079a0c$var$idbReady()).then(function() {
            return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
                throwIfCancelled();
                if (!indexedDB1) throw new $50dd583e1e079a0c$var$exceptions.MissingAPI();
                var dbName = db.name;
                var req = state.autoSchema ? indexedDB1.open(dbName) : indexedDB1.open(dbName, Math.round(db.verno * 10));
                if (!req) throw new $50dd583e1e079a0c$var$exceptions.MissingAPI();
                req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                req.onblocked = $50dd583e1e079a0c$var$wrap(db._fireOnBlocked);
                req.onupgradeneeded = $50dd583e1e079a0c$var$wrap(function(e) {
                    upgradeTransaction = req.transaction;
                    if (state.autoSchema && !db._options.allowEmptyDB) {
                        req.onerror = $50dd583e1e079a0c$var$preventDefault;
                        upgradeTransaction.abort();
                        req.result.close();
                        var delreq = indexedDB1.deleteDatabase(dbName);
                        delreq.onsuccess = delreq.onerror = $50dd583e1e079a0c$var$wrap(function() {
                            reject(new $50dd583e1e079a0c$var$exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                        });
                    } else {
                        upgradeTransaction.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                        wasCreated = oldVer < 1;
                        db._novip.idbdb = req.result;
                        $50dd583e1e079a0c$var$runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
                    }
                }, reject);
                req.onsuccess = $50dd583e1e079a0c$var$wrap(function() {
                    upgradeTransaction = null;
                    var idbdb = db._novip.idbdb = req.result;
                    var objectStoreNames = $50dd583e1e079a0c$var$slice(idbdb.objectStoreNames);
                    if (objectStoreNames.length > 0) try {
                        var tmpTrans = idbdb.transaction($50dd583e1e079a0c$var$safariMultiStoreFix(objectStoreNames), "readonly");
                        if (state.autoSchema) $50dd583e1e079a0c$var$readGlobalSchema(db, idbdb, tmpTrans);
                        else {
                            $50dd583e1e079a0c$var$adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
                            if (!$50dd583e1e079a0c$var$verifyInstalledSchema(db, tmpTrans)) console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.");
                        }
                        $50dd583e1e079a0c$var$generateMiddlewareStacks(db, tmpTrans);
                    } catch (e) {}
                    $50dd583e1e079a0c$var$connections.push(db);
                    idbdb.onversionchange = $50dd583e1e079a0c$var$wrap(function(ev) {
                        state.vcFired = true;
                        db.on("versionchange").fire(ev);
                    });
                    idbdb.onclose = $50dd583e1e079a0c$var$wrap(function(ev) {
                        db.on("close").fire(ev);
                    });
                    if (wasCreated) $50dd583e1e079a0c$var$_onDatabaseCreated(db._deps, dbName);
                    resolve();
                }, reject);
            });
        })
    ]).then(function() {
        throwIfCancelled();
        state.onReadyBeingFired = [];
        return $50dd583e1e079a0c$var$DexiePromise.resolve($50dd583e1e079a0c$var$vip(function() {
            return db.on.ready.fire(db.vip);
        })).then(function fireRemainders() {
            if (state.onReadyBeingFired.length > 0) {
                var remainders_1 = state.onReadyBeingFired.reduce($50dd583e1e079a0c$var$promisableChain, $50dd583e1e079a0c$var$nop);
                state.onReadyBeingFired = [];
                return $50dd583e1e079a0c$var$DexiePromise.resolve($50dd583e1e079a0c$var$vip(function() {
                    return remainders_1(db.vip);
                })).then(fireRemainders);
            }
        });
    }).finally(function() {
        state.onReadyBeingFired = null;
        state.isBeingOpened = false;
    }).then(function() {
        return db;
    }).catch(function(err) {
        state.dbOpenError = err;
        try {
            upgradeTransaction && upgradeTransaction.abort();
        } catch (_a) {}
        if (openCanceller === state.openCanceller) db._close();
        return $50dd583e1e079a0c$var$rejection(err);
    }).finally(function() {
        state.openComplete = true;
        resolveDbReady();
    });
}
function $50dd583e1e079a0c$var$awaitIterator(iterator) {
    var callNext = function(result) {
        return iterator.next(result);
    }, doThrow = function(error) {
        return iterator.throw(error);
    }, onSuccess = step(callNext), onError = step(doThrow);
    function step(getNext) {
        return function(val) {
            var next = getNext(val), value = next.value;
            return next.done ? value : !value || typeof value.then !== "function" ? $50dd583e1e079a0c$var$isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
        };
    }
    return step(callNext)();
}
function $50dd583e1e079a0c$var$extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
    var i = arguments.length;
    if (i < 2) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Too few arguments");
    var args = new Array(i - 1);
    while(--i)args[i - 1] = arguments[i];
    scopeFunc = args.pop();
    var tables = $50dd583e1e079a0c$var$flatten(args);
    return [
        mode,
        tables,
        scopeFunc
    ];
}
function $50dd583e1e079a0c$var$enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
    return $50dd583e1e079a0c$var$DexiePromise.resolve().then(function() {
        var transless = $50dd583e1e079a0c$var$PSD.transless || $50dd583e1e079a0c$var$PSD;
        var trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
        var zoneProps = {
            trans: trans,
            transless: transless
        };
        if (parentTransaction) trans.idbtrans = parentTransaction.idbtrans;
        else try {
            trans.create();
            db._state.PR1398_maxLoop = 3;
        } catch (ex) {
            if (ex.name === $50dd583e1e079a0c$var$errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                console.warn("Dexie: Need to reopen db");
                db._close();
                return db.open().then(function() {
                    return $50dd583e1e079a0c$var$enterTransactionScope(db, mode, storeNames, null, scopeFunc);
                });
            }
            return $50dd583e1e079a0c$var$rejection(ex);
        }
        var scopeFuncIsAsync = $50dd583e1e079a0c$var$isAsyncFunction(scopeFunc);
        if (scopeFuncIsAsync) $50dd583e1e079a0c$var$incrementExpectedAwaits();
        var returnValue;
        var promiseFollowed = $50dd583e1e079a0c$var$DexiePromise.follow(function() {
            returnValue = scopeFunc.call(trans, trans);
            if (returnValue) {
                if (scopeFuncIsAsync) {
                    var decrementor = $50dd583e1e079a0c$var$decrementExpectedAwaits.bind(null, null);
                    returnValue.then(decrementor, decrementor);
                } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") returnValue = $50dd583e1e079a0c$var$awaitIterator(returnValue);
            }
        }, zoneProps);
        return (returnValue && typeof returnValue.then === "function" ? $50dd583e1e079a0c$var$DexiePromise.resolve(returnValue).then(function(x) {
            return trans.active ? x : $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
        }) : promiseFollowed.then(function() {
            return returnValue;
        })).then(function(x) {
            if (parentTransaction) trans._resolve();
            return trans._completion.then(function() {
                return x;
            });
        }).catch(function(e) {
            trans._reject(e);
            return $50dd583e1e079a0c$var$rejection(e);
        });
    });
}
function $50dd583e1e079a0c$var$pad(a, value, count) {
    var result = $50dd583e1e079a0c$var$isArray(a) ? a.slice() : [
        a
    ];
    for(var i = 0; i < count; ++i)result.push(value);
    return result;
}
function $50dd583e1e079a0c$var$createVirtualIndexMiddleware(down) {
    return $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, down), {
        table: function(tableName) {
            var table = down.table(tableName);
            var schema = table.schema;
            var indexLookup = {};
            var allVirtualIndexes = [];
            function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
                var keyPathAlias = $50dd583e1e079a0c$var$getKeyPathAlias(keyPath);
                var indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
                var keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
                var isVirtual = keyTail > 0;
                var virtualIndex = $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, lowLevelIndex), {
                    isVirtual: isVirtual,
                    keyTail: keyTail,
                    keyLength: keyLength,
                    extractKey: $50dd583e1e079a0c$var$getKeyExtractor(keyPath),
                    unique: !isVirtual && lowLevelIndex.unique
                });
                indexList.push(virtualIndex);
                if (!virtualIndex.isPrimaryKey) allVirtualIndexes.push(virtualIndex);
                if (keyLength > 1) {
                    var virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
                    addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
                }
                indexList.sort(function(a, b) {
                    return a.keyTail - b.keyTail;
                });
                return virtualIndex;
            }
            var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
            indexLookup[":id"] = [
                primaryKey
            ];
            for(var _i = 0, _a = schema.indexes; _i < _a.length; _i++){
                var index = _a[_i];
                addVirtualIndexes(index.keyPath, 0, index);
            }
            function findBestIndex(keyPath) {
                var result = indexLookup[$50dd583e1e079a0c$var$getKeyPathAlias(keyPath)];
                return result && result[0];
            }
            function translateRange(range, keyTail) {
                return {
                    type: range.type === 1 ? 2 : range.type,
                    lower: $50dd583e1e079a0c$var$pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                    lowerOpen: true,
                    upper: $50dd583e1e079a0c$var$pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                    upperOpen: true
                };
            }
            function translateRequest(req) {
                var index = req.query.index;
                return index.isVirtual ? $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, req), {
                    query: {
                        index: index,
                        range: translateRange(req.query.range, index.keyTail)
                    }
                }) : req;
            }
            var result = $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, table), {
                schema: $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, schema), {
                    primaryKey: primaryKey,
                    indexes: allVirtualIndexes,
                    getIndexByKeyPath: findBestIndex
                }),
                count: function(req) {
                    return table.count(translateRequest(req));
                },
                query: function(req) {
                    return table.query(translateRequest(req));
                },
                openCursor: function(req) {
                    var _a = req.query.index, keyTail = _a.keyTail, isVirtual = _a.isVirtual, keyLength = _a.keyLength;
                    if (!isVirtual) return table.openCursor(req);
                    function createVirtualCursor(cursor) {
                        function _continue(key) {
                            key != null ? cursor.continue($50dd583e1e079a0c$var$pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor.continue(cursor.key.slice(0, keyLength).concat(req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor.continue();
                        }
                        var virtualCursor = Object.create(cursor, {
                            continue: {
                                value: _continue
                            },
                            continuePrimaryKey: {
                                value: function(key, primaryKey) {
                                    cursor.continuePrimaryKey($50dd583e1e079a0c$var$pad(key, down.MAX_KEY, keyTail), primaryKey);
                                }
                            },
                            primaryKey: {
                                get: function() {
                                    return cursor.primaryKey;
                                }
                            },
                            key: {
                                get: function() {
                                    var key = cursor.key;
                                    return keyLength === 1 ? key[0] : key.slice(0, keyLength);
                                }
                            },
                            value: {
                                get: function() {
                                    return cursor.value;
                                }
                            }
                        });
                        return virtualCursor;
                    }
                    return table.openCursor(translateRequest(req)).then(function(cursor) {
                        return cursor && createVirtualCursor(cursor);
                    });
                }
            });
            return result;
        }
    });
}
var $50dd583e1e079a0c$var$virtualIndexMiddleware = {
    stack: "dbcore",
    name: "VirtualIndexMiddleware",
    level: 1,
    create: $50dd583e1e079a0c$var$createVirtualIndexMiddleware
};
function $50dd583e1e079a0c$var$getObjectDiff(a, b, rv, prfx) {
    rv = rv || {};
    prfx = prfx || "";
    $50dd583e1e079a0c$var$keys(a).forEach(function(prop) {
        if (!$50dd583e1e079a0c$var$hasOwn(b, prop)) rv[prfx + prop] = undefined;
        else {
            var ap = a[prop], bp = b[prop];
            if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
                var apTypeName = $50dd583e1e079a0c$var$toStringTag(ap);
                var bpTypeName = $50dd583e1e079a0c$var$toStringTag(bp);
                if (apTypeName !== bpTypeName) rv[prfx + prop] = b[prop];
                else if (apTypeName === "Object") $50dd583e1e079a0c$var$getObjectDiff(ap, bp, rv, prfx + prop + ".");
                else if (ap !== bp) rv[prfx + prop] = b[prop];
            } else if (ap !== bp) rv[prfx + prop] = b[prop];
        }
    });
    $50dd583e1e079a0c$var$keys(b).forEach(function(prop) {
        if (!$50dd583e1e079a0c$var$hasOwn(a, prop)) rv[prfx + prop] = b[prop];
    });
    return rv;
}
function $50dd583e1e079a0c$var$getEffectiveKeys(primaryKey, req) {
    if (req.type === "delete") return req.keys;
    return req.keys || req.values.map(primaryKey.extractKey);
}
var $50dd583e1e079a0c$var$hooksMiddleware = {
    stack: "dbcore",
    name: "HooksMiddleware",
    level: 2,
    create: function(downCore) {
        return $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, downCore), {
            table: function(tableName) {
                var downTable = downCore.table(tableName);
                var primaryKey = downTable.schema.primaryKey;
                var tableMiddleware = $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, downTable), {
                    mutate: function(req) {
                        var dxTrans = $50dd583e1e079a0c$var$PSD.trans;
                        var _a = dxTrans.table(tableName).hook, deleting = _a.deleting, creating = _a.creating, updating = _a.updating;
                        switch(req.type){
                            case "add":
                                if (creating.fire === $50dd583e1e079a0c$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "put":
                                if (creating.fire === $50dd583e1e079a0c$var$nop && updating.fire === $50dd583e1e079a0c$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "delete":
                                if (deleting.fire === $50dd583e1e079a0c$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "deleteRange":
                                if (deleting.fire === $50dd583e1e079a0c$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return deleteRange(req);
                                }, true);
                        }
                        return downTable.mutate(req);
                        function addPutOrDelete(req) {
                            var dxTrans = $50dd583e1e079a0c$var$PSD.trans;
                            var keys = req.keys || $50dd583e1e079a0c$var$getEffectiveKeys(primaryKey, req);
                            if (!keys) throw new Error("Keys missing");
                            req = req.type === "add" || req.type === "put" ? $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, req), {
                                keys: keys
                            }) : $50dd583e1e079a0c$var$__assign({}, req);
                            if (req.type !== "delete") req.values = $50dd583e1e079a0c$var$__spreadArray([], req.values, true);
                            if (req.keys) req.keys = $50dd583e1e079a0c$var$__spreadArray([], req.keys, true);
                            return $50dd583e1e079a0c$var$getExistingValues(downTable, req, keys).then(function(existingValues) {
                                var contexts = keys.map(function(key, i) {
                                    var existingValue = existingValues[i];
                                    var ctx = {
                                        onerror: null,
                                        onsuccess: null
                                    };
                                    if (req.type === "delete") deleting.fire.call(ctx, key, existingValue, dxTrans);
                                    else if (req.type === "add" || existingValue === undefined) {
                                        var generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);
                                        if (key == null && generatedPrimaryKey != null) {
                                            key = generatedPrimaryKey;
                                            req.keys[i] = key;
                                            if (!primaryKey.outbound) $50dd583e1e079a0c$var$setByKeyPath(req.values[i], primaryKey.keyPath, key);
                                        }
                                    } else {
                                        var objectDiff = $50dd583e1e079a0c$var$getObjectDiff(existingValue, req.values[i]);
                                        var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);
                                        if (additionalChanges_1) {
                                            var requestedValue_1 = req.values[i];
                                            Object.keys(additionalChanges_1).forEach(function(keyPath) {
                                                if ($50dd583e1e079a0c$var$hasOwn(requestedValue_1, keyPath)) requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                                                else $50dd583e1e079a0c$var$setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                                            });
                                        }
                                    }
                                    return ctx;
                                });
                                return downTable.mutate(req).then(function(_a) {
                                    var failures = _a.failures, results = _a.results, numFailures = _a.numFailures, lastResult = _a.lastResult;
                                    for(var i = 0; i < keys.length; ++i){
                                        var primKey = results ? results[i] : keys[i];
                                        var ctx = contexts[i];
                                        if (primKey == null) ctx.onerror && ctx.onerror(failures[i]);
                                        else ctx.onsuccess && ctx.onsuccess(req.type === "put" && existingValues[i] ? req.values[i] : primKey);
                                    }
                                    return {
                                        failures: failures,
                                        results: results,
                                        numFailures: numFailures,
                                        lastResult: lastResult
                                    };
                                }).catch(function(error) {
                                    contexts.forEach(function(ctx) {
                                        return ctx.onerror && ctx.onerror(error);
                                    });
                                    return Promise.reject(error);
                                });
                            });
                        }
                        function deleteRange(req) {
                            return deleteNextChunk(req.trans, req.range, 10000);
                        }
                        function deleteNextChunk(trans, range, limit) {
                            return downTable.query({
                                trans: trans,
                                values: false,
                                query: {
                                    index: primaryKey,
                                    range: range
                                },
                                limit: limit
                            }).then(function(_a) {
                                var result = _a.result;
                                return addPutOrDelete({
                                    type: "delete",
                                    keys: result,
                                    trans: trans
                                }).then(function(res) {
                                    if (res.numFailures > 0) return Promise.reject(res.failures[0]);
                                    if (result.length < limit) return {
                                        failures: [],
                                        numFailures: 0,
                                        lastResult: undefined
                                    };
                                    else return deleteNextChunk(trans, $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, range), {
                                        lower: result[result.length - 1],
                                        lowerOpen: true
                                    }), limit);
                                });
                            });
                        }
                    }
                });
                return tableMiddleware;
            }
        });
    }
};
function $50dd583e1e079a0c$var$getExistingValues(table, req, effectiveKeys) {
    return req.type === "add" ? Promise.resolve([]) : table.getMany({
        trans: req.trans,
        keys: effectiveKeys,
        cache: "immutable"
    });
}
function $50dd583e1e079a0c$var$getFromTransactionCache(keys, cache, clone) {
    try {
        if (!cache) return null;
        if (cache.keys.length < keys.length) return null;
        var result = [];
        for(var i = 0, j = 0; i < cache.keys.length && j < keys.length; ++i){
            if ($50dd583e1e079a0c$var$cmp(cache.keys[i], keys[j]) !== 0) continue;
            result.push(clone ? $50dd583e1e079a0c$var$deepClone(cache.values[i]) : cache.values[i]);
            ++j;
        }
        return result.length === keys.length ? result : null;
    } catch (_a) {
        return null;
    }
}
var $50dd583e1e079a0c$var$cacheExistingValuesMiddleware = {
    stack: "dbcore",
    level: -1,
    create: function(core) {
        return {
            table: function(tableName) {
                var table = core.table(tableName);
                return $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, table), {
                    getMany: function(req) {
                        if (!req.cache) return table.getMany(req);
                        var cachedResult = $50dd583e1e079a0c$var$getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                        if (cachedResult) return $50dd583e1e079a0c$var$DexiePromise.resolve(cachedResult);
                        return table.getMany(req).then(function(res) {
                            req.trans["_cache"] = {
                                keys: req.keys,
                                values: req.cache === "clone" ? $50dd583e1e079a0c$var$deepClone(res) : res
                            };
                            return res;
                        });
                    },
                    mutate: function(req) {
                        if (req.type !== "add") req.trans["_cache"] = null;
                        return table.mutate(req);
                    }
                });
            }
        };
    }
};
var $50dd583e1e079a0c$var$_a;
function $50dd583e1e079a0c$var$isEmptyRange(node) {
    return !("from" in node);
}
var $50dd583e1e079a0c$export$34cb5241245008dd = function(fromOrTree, to) {
    if (this) $50dd583e1e079a0c$var$extend(this, arguments.length ? {
        d: 1,
        from: fromOrTree,
        to: arguments.length > 1 ? to : fromOrTree
    } : {
        d: 0
    });
    else {
        var rv = new $50dd583e1e079a0c$export$34cb5241245008dd();
        if (fromOrTree && "d" in fromOrTree) $50dd583e1e079a0c$var$extend(rv, fromOrTree);
        return rv;
    }
};
$50dd583e1e079a0c$var$props($50dd583e1e079a0c$export$34cb5241245008dd.prototype, ($50dd583e1e079a0c$var$_a = {
    add: function(rangeSet) {
        $50dd583e1e079a0c$export$4876cc3130d3f820(this, rangeSet);
        return this;
    },
    addKey: function(key) {
        $50dd583e1e079a0c$var$addRange(this, key, key);
        return this;
    },
    addKeys: function(keys) {
        var _this = this;
        keys.forEach(function(key) {
            return $50dd583e1e079a0c$var$addRange(_this, key, key);
        });
        return this;
    }
}, $50dd583e1e079a0c$var$_a[$50dd583e1e079a0c$var$iteratorSymbol] = function() {
    return $50dd583e1e079a0c$var$getRangeSetIterator(this);
}, $50dd583e1e079a0c$var$_a));
function $50dd583e1e079a0c$var$addRange(target, from, to) {
    var diff = $50dd583e1e079a0c$var$cmp(from, to);
    if (isNaN(diff)) return;
    if (diff > 0) throw RangeError();
    if ($50dd583e1e079a0c$var$isEmptyRange(target)) return $50dd583e1e079a0c$var$extend(target, {
        from: from,
        to: to,
        d: 1
    });
    var left = target.l;
    var right = target.r;
    if ($50dd583e1e079a0c$var$cmp(to, target.from) < 0) {
        left ? $50dd583e1e079a0c$var$addRange(left, from, to) : target.l = {
            from: from,
            to: to,
            d: 1,
            l: null,
            r: null
        };
        return $50dd583e1e079a0c$var$rebalance(target);
    }
    if ($50dd583e1e079a0c$var$cmp(from, target.to) > 0) {
        right ? $50dd583e1e079a0c$var$addRange(right, from, to) : target.r = {
            from: from,
            to: to,
            d: 1,
            l: null,
            r: null
        };
        return $50dd583e1e079a0c$var$rebalance(target);
    }
    if ($50dd583e1e079a0c$var$cmp(from, target.from) < 0) {
        target.from = from;
        target.l = null;
        target.d = right ? right.d + 1 : 1;
    }
    if ($50dd583e1e079a0c$var$cmp(to, target.to) > 0) {
        target.to = to;
        target.r = null;
        target.d = target.l ? target.l.d + 1 : 1;
    }
    var rightWasCutOff = !target.r;
    if (left && !target.l) $50dd583e1e079a0c$export$4876cc3130d3f820(target, left);
    if (right && rightWasCutOff) $50dd583e1e079a0c$export$4876cc3130d3f820(target, right);
}
function $50dd583e1e079a0c$export$4876cc3130d3f820(target, newSet) {
    function _addRangeSet(target, _a) {
        var from = _a.from, to = _a.to, l = _a.l, r = _a.r;
        $50dd583e1e079a0c$var$addRange(target, from, to);
        if (l) _addRangeSet(target, l);
        if (r) _addRangeSet(target, r);
    }
    if (!$50dd583e1e079a0c$var$isEmptyRange(newSet)) _addRangeSet(target, newSet);
}
function $50dd583e1e079a0c$export$8f43b23b5d8de905(rangeSet1, rangeSet2) {
    var i1 = $50dd583e1e079a0c$var$getRangeSetIterator(rangeSet2);
    var nextResult1 = i1.next();
    if (nextResult1.done) return false;
    var a = nextResult1.value;
    var i2 = $50dd583e1e079a0c$var$getRangeSetIterator(rangeSet1);
    var nextResult2 = i2.next(a.from);
    var b = nextResult2.value;
    while(!nextResult1.done && !nextResult2.done){
        if ($50dd583e1e079a0c$var$cmp(b.from, a.to) <= 0 && $50dd583e1e079a0c$var$cmp(b.to, a.from) >= 0) return true;
        $50dd583e1e079a0c$var$cmp(a.from, b.from) < 0 ? a = (nextResult1 = i1.next(b.from)).value : b = (nextResult2 = i2.next(a.from)).value;
    }
    return false;
}
function $50dd583e1e079a0c$var$getRangeSetIterator(node) {
    var state = $50dd583e1e079a0c$var$isEmptyRange(node) ? null : {
        s: 0,
        n: node
    };
    return {
        next: function(key) {
            var keyProvided = arguments.length > 0;
            while(state)switch(state.s){
                case 0:
                    state.s = 1;
                    if (keyProvided) while(state.n.l && $50dd583e1e079a0c$var$cmp(key, state.n.from) < 0)state = {
                        up: state,
                        n: state.n.l,
                        s: 1
                    };
                    else while(state.n.l)state = {
                        up: state,
                        n: state.n.l,
                        s: 1
                    };
                case 1:
                    state.s = 2;
                    if (!keyProvided || $50dd583e1e079a0c$var$cmp(key, state.n.to) <= 0) return {
                        value: state.n,
                        done: false
                    };
                case 2:
                    if (state.n.r) {
                        state.s = 3;
                        state = {
                            up: state,
                            n: state.n.r,
                            s: 0
                        };
                        continue;
                    }
                case 3:
                    state = state.up;
            }
            return {
                done: true
            };
        }
    };
}
function $50dd583e1e079a0c$var$rebalance(target) {
    var _a, _b;
    var diff = (((_a = target.r) === null || _a === void 0 ? void 0 : _a.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
    var r = diff > 1 ? "r" : diff < -1 ? "l" : "";
    if (r) {
        var l = r === "r" ? "l" : "r";
        var rootClone = $50dd583e1e079a0c$var$__assign({}, target);
        var oldRootRight = target[r];
        target.from = oldRootRight.from;
        target.to = oldRootRight.to;
        target[r] = oldRootRight[r];
        rootClone[r] = oldRootRight[l];
        target[l] = rootClone;
        rootClone.d = $50dd583e1e079a0c$var$computeDepth(rootClone);
    }
    target.d = $50dd583e1e079a0c$var$computeDepth(target);
}
function $50dd583e1e079a0c$var$computeDepth(_a) {
    var r = _a.r, l = _a.l;
    return (r ? l ? Math.max(r.d, l.d) : r.d : l ? l.d : 0) + 1;
}
var $50dd583e1e079a0c$var$observabilityMiddleware = {
    stack: "dbcore",
    level: 0,
    create: function(core) {
        var dbName = core.schema.name;
        var FULL_RANGE = new $50dd583e1e079a0c$export$34cb5241245008dd(core.MIN_KEY, core.MAX_KEY);
        return $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, core), {
            table: function(tableName) {
                var table = core.table(tableName);
                var schema = table.schema;
                var primaryKey = schema.primaryKey;
                var extractKey = primaryKey.extractKey, outbound = primaryKey.outbound;
                var tableClone = $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, table), {
                    mutate: function(req) {
                        var trans = req.trans;
                        var mutatedParts = trans.mutatedParts || (trans.mutatedParts = {});
                        var getRangeSet = function(indexName) {
                            var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
                            return mutatedParts[part] || (mutatedParts[part] = new $50dd583e1e079a0c$export$34cb5241245008dd());
                        };
                        var pkRangeSet = getRangeSet("");
                        var delsRangeSet = getRangeSet(":dels");
                        var type = req.type;
                        var _a = req.type === "deleteRange" ? [
                            req.range
                        ] : req.type === "delete" ? [
                            req.keys
                        ] : req.values.length < 50 ? [
                            [],
                            req.values
                        ] : [], keys = _a[0], newObjs = _a[1];
                        var oldCache = req.trans["_cache"];
                        return table.mutate(req).then(function(res) {
                            if ($50dd583e1e079a0c$var$isArray(keys)) {
                                if (type !== "delete") keys = res.results;
                                pkRangeSet.addKeys(keys);
                                var oldObjs = $50dd583e1e079a0c$var$getFromTransactionCache(keys, oldCache);
                                if (!oldObjs && type !== "add") delsRangeSet.addKeys(keys);
                                if (oldObjs || newObjs) $50dd583e1e079a0c$var$trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                            } else if (keys) {
                                var range = {
                                    from: keys.lower,
                                    to: keys.upper
                                };
                                delsRangeSet.add(range);
                                pkRangeSet.add(range);
                            } else {
                                pkRangeSet.add(FULL_RANGE);
                                delsRangeSet.add(FULL_RANGE);
                                schema.indexes.forEach(function(idx) {
                                    return getRangeSet(idx.name).add(FULL_RANGE);
                                });
                            }
                            return res;
                        });
                    }
                });
                var getRange = function(_a) {
                    var _b, _c;
                    var _d = _a.query, index = _d.index, range = _d.range;
                    return [
                        index,
                        new $50dd583e1e079a0c$export$34cb5241245008dd((_b = range.lower) !== null && _b !== void 0 ? _b : core.MIN_KEY, (_c = range.upper) !== null && _c !== void 0 ? _c : core.MAX_KEY)
                    ];
                };
                var readSubscribers = {
                    get: function(req) {
                        return [
                            primaryKey,
                            new $50dd583e1e079a0c$export$34cb5241245008dd(req.key)
                        ];
                    },
                    getMany: function(req) {
                        return [
                            primaryKey,
                            new $50dd583e1e079a0c$export$34cb5241245008dd().addKeys(req.keys)
                        ];
                    },
                    count: getRange,
                    query: getRange,
                    openCursor: getRange
                };
                $50dd583e1e079a0c$var$keys(readSubscribers).forEach(function(method) {
                    tableClone[method] = function(req) {
                        var subscr = $50dd583e1e079a0c$var$PSD.subscr;
                        if (subscr) {
                            var getRangeSet = function(indexName) {
                                var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
                                return subscr[part] || (subscr[part] = new $50dd583e1e079a0c$export$34cb5241245008dd());
                            };
                            var pkRangeSet_1 = getRangeSet("");
                            var delsRangeSet_1 = getRangeSet(":dels");
                            var _a = readSubscribers[method](req), queriedIndex = _a[0], queriedRanges = _a[1];
                            getRangeSet(queriedIndex.name || "").add(queriedRanges);
                            if (!queriedIndex.isPrimaryKey) {
                                if (method === "count") delsRangeSet_1.add(FULL_RANGE);
                                else {
                                    var keysPromise_1 = method === "query" && outbound && req.values && table.query($50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, req), {
                                        values: false
                                    }));
                                    return table[method].apply(this, arguments).then(function(res) {
                                        if (method === "query") {
                                            if (outbound && req.values) return keysPromise_1.then(function(_a) {
                                                var resultingKeys = _a.result;
                                                pkRangeSet_1.addKeys(resultingKeys);
                                                return res;
                                            });
                                            var pKeys = req.values ? res.result.map(extractKey) : res.result;
                                            if (req.values) pkRangeSet_1.addKeys(pKeys);
                                            else delsRangeSet_1.addKeys(pKeys);
                                        } else if (method === "openCursor") {
                                            var cursor_1 = res;
                                            var wantValues_1 = req.values;
                                            return cursor_1 && Object.create(cursor_1, {
                                                key: {
                                                    get: function() {
                                                        delsRangeSet_1.addKey(cursor_1.primaryKey);
                                                        return cursor_1.key;
                                                    }
                                                },
                                                primaryKey: {
                                                    get: function() {
                                                        var pkey = cursor_1.primaryKey;
                                                        delsRangeSet_1.addKey(pkey);
                                                        return pkey;
                                                    }
                                                },
                                                value: {
                                                    get: function() {
                                                        wantValues_1 && pkRangeSet_1.addKey(cursor_1.primaryKey);
                                                        return cursor_1.value;
                                                    }
                                                }
                                            });
                                        }
                                        return res;
                                    });
                                }
                            }
                        }
                        return table[method].apply(this, arguments);
                    };
                });
                return tableClone;
            }
        });
    }
};
function $50dd583e1e079a0c$var$trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
    function addAffectedIndex(ix) {
        var rangeSet = getRangeSet(ix.name || "");
        function extractKey(obj) {
            return obj != null ? ix.extractKey(obj) : null;
        }
        var addKeyOrKeys = function(key) {
            return ix.multiEntry && $50dd583e1e079a0c$var$isArray(key) ? key.forEach(function(key) {
                return rangeSet.addKey(key);
            }) : rangeSet.addKey(key);
        };
        (oldObjs || newObjs).forEach(function(_, i) {
            var oldKey = oldObjs && extractKey(oldObjs[i]);
            var newKey = newObjs && extractKey(newObjs[i]);
            if ($50dd583e1e079a0c$var$cmp(oldKey, newKey) !== 0) {
                if (oldKey != null) addKeyOrKeys(oldKey);
                if (newKey != null) addKeyOrKeys(newKey);
            }
        });
    }
    schema.indexes.forEach(addAffectedIndex);
}
var $50dd583e1e079a0c$export$4ece27d405df7279 = function() {
    function Dexie(name, options) {
        var _this = this;
        this._middlewares = {};
        this.verno = 0;
        var deps = Dexie.dependencies;
        this._options = options = $50dd583e1e079a0c$var$__assign({
            addons: Dexie.addons,
            autoOpen: true,
            indexedDB: deps.indexedDB,
            IDBKeyRange: deps.IDBKeyRange
        }, options);
        this._deps = {
            indexedDB: options.indexedDB,
            IDBKeyRange: options.IDBKeyRange
        };
        var addons = options.addons;
        this._dbSchema = {};
        this._versions = [];
        this._storeNames = [];
        this._allTables = {};
        this.idbdb = null;
        this._novip = this;
        var state = {
            dbOpenError: null,
            isBeingOpened: false,
            onReadyBeingFired: null,
            openComplete: false,
            dbReadyResolve: $50dd583e1e079a0c$var$nop,
            dbReadyPromise: null,
            cancelOpen: $50dd583e1e079a0c$var$nop,
            openCanceller: null,
            autoSchema: true,
            PR1398_maxLoop: 3
        };
        state.dbReadyPromise = new $50dd583e1e079a0c$var$DexiePromise(function(resolve) {
            state.dbReadyResolve = resolve;
        });
        state.openCanceller = new $50dd583e1e079a0c$var$DexiePromise(function(_, reject) {
            state.cancelOpen = reject;
        });
        this._state = state;
        this.name = name;
        this.on = $50dd583e1e079a0c$var$Events(this, "populate", "blocked", "versionchange", "close", {
            ready: [
                $50dd583e1e079a0c$var$promisableChain,
                $50dd583e1e079a0c$var$nop
            ]
        });
        this.on.ready.subscribe = $50dd583e1e079a0c$var$override(this.on.ready.subscribe, function(subscribe) {
            return function(subscriber, bSticky) {
                Dexie.vip(function() {
                    var state = _this._state;
                    if (state.openComplete) {
                        if (!state.dbOpenError) $50dd583e1e079a0c$var$DexiePromise.resolve().then(subscriber);
                        if (bSticky) subscribe(subscriber);
                    } else if (state.onReadyBeingFired) {
                        state.onReadyBeingFired.push(subscriber);
                        if (bSticky) subscribe(subscriber);
                    } else {
                        subscribe(subscriber);
                        var db_1 = _this;
                        if (!bSticky) subscribe(function unsubscribe() {
                            db_1.on.ready.unsubscribe(subscriber);
                            db_1.on.ready.unsubscribe(unsubscribe);
                        });
                    }
                });
            };
        });
        this.Collection = $50dd583e1e079a0c$var$createCollectionConstructor(this);
        this.Table = $50dd583e1e079a0c$var$createTableConstructor(this);
        this.Transaction = $50dd583e1e079a0c$var$createTransactionConstructor(this);
        this.Version = $50dd583e1e079a0c$var$createVersionConstructor(this);
        this.WhereClause = $50dd583e1e079a0c$var$createWhereClauseConstructor(this);
        this.on("versionchange", function(ev) {
            if (ev.newVersion > 0) console.warn("Another connection wants to upgrade database '" + _this.name + "'. Closing db now to resume the upgrade.");
            else console.warn("Another connection wants to delete database '" + _this.name + "'. Closing db now to resume the delete request.");
            _this.close();
        });
        this.on("blocked", function(ev) {
            if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn("Dexie.delete('" + _this.name + "') was blocked");
            else console.warn("Upgrade '" + _this.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
        });
        this._maxKey = $50dd583e1e079a0c$var$getMaxKey(options.IDBKeyRange);
        this._createTransaction = function(mode, storeNames, dbschema, parentTransaction) {
            return new _this.Transaction(mode, storeNames, dbschema, _this._options.chromeTransactionDurability, parentTransaction);
        };
        this._fireOnBlocked = function(ev) {
            _this.on("blocked").fire(ev);
            $50dd583e1e079a0c$var$connections.filter(function(c) {
                return c.name === _this.name && c !== _this && !c._state.vcFired;
            }).map(function(c) {
                return c.on("versionchange").fire(ev);
            });
        };
        this.use($50dd583e1e079a0c$var$virtualIndexMiddleware);
        this.use($50dd583e1e079a0c$var$hooksMiddleware);
        this.use($50dd583e1e079a0c$var$observabilityMiddleware);
        this.use($50dd583e1e079a0c$var$cacheExistingValuesMiddleware);
        this.vip = Object.create(this, {
            _vip: {
                value: true
            }
        });
        addons.forEach(function(addon) {
            return addon(_this);
        });
    }
    Dexie.prototype.version = function(versionNumber) {
        if (isNaN(versionNumber) || versionNumber < 0.1) throw new $50dd583e1e079a0c$var$exceptions.Type("Given version is not a positive number");
        versionNumber = Math.round(versionNumber * 10) / 10;
        if (this.idbdb || this._state.isBeingOpened) throw new $50dd583e1e079a0c$var$exceptions.Schema("Cannot add version when database is open");
        this.verno = Math.max(this.verno, versionNumber);
        var versions = this._versions;
        var versionInstance = versions.filter(function(v) {
            return v._cfg.version === versionNumber;
        })[0];
        if (versionInstance) return versionInstance;
        versionInstance = new this.Version(versionNumber);
        versions.push(versionInstance);
        versions.sort($50dd583e1e079a0c$var$lowerVersionFirst);
        versionInstance.stores({});
        this._state.autoSchema = false;
        return versionInstance;
    };
    Dexie.prototype._whenReady = function(fn) {
        var _this = this;
        return this.idbdb && (this._state.openComplete || $50dd583e1e079a0c$var$PSD.letThrough || this._vip) ? fn() : new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            if (_this._state.openComplete) return reject(new $50dd583e1e079a0c$var$exceptions.DatabaseClosed(_this._state.dbOpenError));
            if (!_this._state.isBeingOpened) {
                if (!_this._options.autoOpen) {
                    reject(new $50dd583e1e079a0c$var$exceptions.DatabaseClosed());
                    return;
                }
                _this.open().catch($50dd583e1e079a0c$var$nop);
            }
            _this._state.dbReadyPromise.then(resolve, reject);
        }).then(fn);
    };
    Dexie.prototype.use = function(_a) {
        var stack = _a.stack, create = _a.create, level = _a.level, name = _a.name;
        if (name) this.unuse({
            stack: stack,
            name: name
        });
        var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
        middlewares.push({
            stack: stack,
            create: create,
            level: level == null ? 10 : level,
            name: name
        });
        middlewares.sort(function(a, b) {
            return a.level - b.level;
        });
        return this;
    };
    Dexie.prototype.unuse = function(_a) {
        var stack = _a.stack, name = _a.name, create = _a.create;
        if (stack && this._middlewares[stack]) this._middlewares[stack] = this._middlewares[stack].filter(function(mw) {
            return create ? mw.create !== create : name ? mw.name !== name : false;
        });
        return this;
    };
    Dexie.prototype.open = function() {
        return $50dd583e1e079a0c$var$dexieOpen(this);
    };
    Dexie.prototype._close = function() {
        var state = this._state;
        var idx = $50dd583e1e079a0c$var$connections.indexOf(this);
        if (idx >= 0) $50dd583e1e079a0c$var$connections.splice(idx, 1);
        if (this.idbdb) {
            try {
                this.idbdb.close();
            } catch (e) {}
            this._novip.idbdb = null;
        }
        state.dbReadyPromise = new $50dd583e1e079a0c$var$DexiePromise(function(resolve) {
            state.dbReadyResolve = resolve;
        });
        state.openCanceller = new $50dd583e1e079a0c$var$DexiePromise(function(_, reject) {
            state.cancelOpen = reject;
        });
    };
    Dexie.prototype.close = function() {
        this._close();
        var state = this._state;
        this._options.autoOpen = false;
        state.dbOpenError = new $50dd583e1e079a0c$var$exceptions.DatabaseClosed();
        if (state.isBeingOpened) state.cancelOpen(state.dbOpenError);
    };
    Dexie.prototype.delete = function() {
        var _this = this;
        var hasArguments = arguments.length > 0;
        var state = this._state;
        return new $50dd583e1e079a0c$var$DexiePromise(function(resolve, reject) {
            var doDelete = function() {
                _this.close();
                var req = _this._deps.indexedDB.deleteDatabase(_this.name);
                req.onsuccess = $50dd583e1e079a0c$var$wrap(function() {
                    $50dd583e1e079a0c$var$_onDatabaseDeleted(_this._deps, _this.name);
                    resolve();
                });
                req.onerror = $50dd583e1e079a0c$var$eventRejectHandler(reject);
                req.onblocked = _this._fireOnBlocked;
            };
            if (hasArguments) throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Arguments not allowed in db.delete()");
            if (state.isBeingOpened) state.dbReadyPromise.then(doDelete);
            else doDelete();
        });
    };
    Dexie.prototype.backendDB = function() {
        return this.idbdb;
    };
    Dexie.prototype.isOpen = function() {
        return this.idbdb !== null;
    };
    Dexie.prototype.hasBeenClosed = function() {
        var dbOpenError = this._state.dbOpenError;
        return dbOpenError && dbOpenError.name === "DatabaseClosed";
    };
    Dexie.prototype.hasFailed = function() {
        return this._state.dbOpenError !== null;
    };
    Dexie.prototype.dynamicallyOpened = function() {
        return this._state.autoSchema;
    };
    Object.defineProperty(Dexie.prototype, "tables", {
        get: function() {
            var _this = this;
            return $50dd583e1e079a0c$var$keys(this._allTables).map(function(name) {
                return _this._allTables[name];
            });
        },
        enumerable: false,
        configurable: true
    });
    Dexie.prototype.transaction = function() {
        var args = $50dd583e1e079a0c$var$extractTransactionArgs.apply(this, arguments);
        return this._transaction.apply(this, args);
    };
    Dexie.prototype._transaction = function(mode, tables, scopeFunc) {
        var _this = this;
        var parentTransaction = $50dd583e1e079a0c$var$PSD.trans;
        if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1) parentTransaction = null;
        var onlyIfCompatible = mode.indexOf("?") !== -1;
        mode = mode.replace("!", "").replace("?", "");
        var idbMode, storeNames;
        try {
            storeNames = tables.map(function(table) {
                var storeName = table instanceof _this.Table ? table.name : table;
                if (typeof storeName !== "string") throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                return storeName;
            });
            if (mode == "r" || mode === $50dd583e1e079a0c$var$READONLY) idbMode = $50dd583e1e079a0c$var$READONLY;
            else if (mode == "rw" || mode == $50dd583e1e079a0c$var$READWRITE) idbMode = $50dd583e1e079a0c$var$READWRITE;
            else throw new $50dd583e1e079a0c$var$exceptions.InvalidArgument("Invalid transaction mode: " + mode);
            if (parentTransaction) {
                if (parentTransaction.mode === $50dd583e1e079a0c$var$READONLY && idbMode === $50dd583e1e079a0c$var$READWRITE) {
                    if (onlyIfCompatible) parentTransaction = null;
                    else throw new $50dd583e1e079a0c$var$exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                }
                if (parentTransaction) storeNames.forEach(function(storeName) {
                    if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                        if (onlyIfCompatible) parentTransaction = null;
                        else throw new $50dd583e1e079a0c$var$exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                    }
                });
                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) parentTransaction = null;
            }
        } catch (e) {
            return parentTransaction ? parentTransaction._promise(null, function(_, reject) {
                reject(e);
            }) : $50dd583e1e079a0c$var$rejection(e);
        }
        var enterTransaction = $50dd583e1e079a0c$var$enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
        return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : $50dd583e1e079a0c$var$PSD.trans ? $50dd583e1e079a0c$var$usePSD($50dd583e1e079a0c$var$PSD.transless, function() {
            return _this._whenReady(enterTransaction);
        }) : this._whenReady(enterTransaction);
    };
    Dexie.prototype.table = function(tableName) {
        if (!$50dd583e1e079a0c$var$hasOwn(this._allTables, tableName)) throw new $50dd583e1e079a0c$var$exceptions.InvalidTable("Table " + tableName + " does not exist");
        return this._allTables[tableName];
    };
    return Dexie;
}();
var $50dd583e1e079a0c$var$symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol ? Symbol.observable : "@@observable";
var $50dd583e1e079a0c$var$Observable = function() {
    function Observable(subscribe) {
        this._subscribe = subscribe;
    }
    Observable.prototype.subscribe = function(x, error, complete) {
        return this._subscribe(!x || typeof x === "function" ? {
            next: x,
            error: error,
            complete: complete
        } : x);
    };
    Observable.prototype[$50dd583e1e079a0c$var$symbolObservable] = function() {
        return this;
    };
    return Observable;
}();
function $50dd583e1e079a0c$var$extendObservabilitySet(target, newSet) {
    $50dd583e1e079a0c$var$keys(newSet).forEach(function(part) {
        var rangeSet = target[part] || (target[part] = new $50dd583e1e079a0c$export$34cb5241245008dd());
        $50dd583e1e079a0c$export$4876cc3130d3f820(rangeSet, newSet[part]);
    });
    return target;
}
function $50dd583e1e079a0c$export$6a9705d8f6f38796(querier) {
    var hasValue = false;
    var currentValue = undefined;
    var observable = new $50dd583e1e079a0c$var$Observable(function(observer) {
        var scopeFuncIsAsync = $50dd583e1e079a0c$var$isAsyncFunction(querier);
        function execute(subscr) {
            if (scopeFuncIsAsync) $50dd583e1e079a0c$var$incrementExpectedAwaits();
            var exec = function() {
                return $50dd583e1e079a0c$var$newScope(querier, {
                    subscr: subscr,
                    trans: null
                });
            };
            var rv = $50dd583e1e079a0c$var$PSD.trans ? $50dd583e1e079a0c$var$usePSD($50dd583e1e079a0c$var$PSD.transless, exec) : exec();
            if (scopeFuncIsAsync) rv.then($50dd583e1e079a0c$var$decrementExpectedAwaits, $50dd583e1e079a0c$var$decrementExpectedAwaits);
            return rv;
        }
        var closed = false;
        var accumMuts = {};
        var currentObs = {};
        var subscription = {
            get closed () {
                return closed;
            },
            unsubscribe: function() {
                closed = true;
                $50dd583e1e079a0c$var$globalEvents.storagemutated.unsubscribe(mutationListener);
            }
        };
        observer.start && observer.start(subscription);
        var querying = false, startedListening = false;
        function shouldNotify() {
            return $50dd583e1e079a0c$var$keys(currentObs).some(function(key) {
                return accumMuts[key] && $50dd583e1e079a0c$export$8f43b23b5d8de905(accumMuts[key], currentObs[key]);
            });
        }
        var mutationListener = function(parts) {
            $50dd583e1e079a0c$var$extendObservabilitySet(accumMuts, parts);
            if (shouldNotify()) doQuery();
        };
        var doQuery = function() {
            if (querying || closed) return;
            accumMuts = {};
            var subscr = {};
            var ret = execute(subscr);
            if (!startedListening) {
                $50dd583e1e079a0c$var$globalEvents($50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
                startedListening = true;
            }
            querying = true;
            Promise.resolve(ret).then(function(result) {
                hasValue = true;
                currentValue = result;
                querying = false;
                if (closed) return;
                if (shouldNotify()) doQuery();
                else {
                    accumMuts = {};
                    currentObs = subscr;
                    observer.next && observer.next(result);
                }
            }, function(err) {
                querying = false;
                hasValue = false;
                observer.error && observer.error(err);
                subscription.unsubscribe();
            });
        };
        doQuery();
        return subscription;
    });
    observable.hasValue = function() {
        return hasValue;
    };
    observable.getValue = function() {
        return currentValue;
    };
    return observable;
}
var $50dd583e1e079a0c$var$domDeps;
try {
    $50dd583e1e079a0c$var$domDeps = {
        indexedDB: $50dd583e1e079a0c$var$_global.indexedDB || $50dd583e1e079a0c$var$_global.mozIndexedDB || $50dd583e1e079a0c$var$_global.webkitIndexedDB || $50dd583e1e079a0c$var$_global.msIndexedDB,
        IDBKeyRange: $50dd583e1e079a0c$var$_global.IDBKeyRange || $50dd583e1e079a0c$var$_global.webkitIDBKeyRange
    };
} catch (e) {
    $50dd583e1e079a0c$var$domDeps = {
        indexedDB: null,
        IDBKeyRange: null
    };
}
var $50dd583e1e079a0c$var$Dexie = $50dd583e1e079a0c$export$4ece27d405df7279;
$50dd583e1e079a0c$var$props($50dd583e1e079a0c$var$Dexie, $50dd583e1e079a0c$var$__assign($50dd583e1e079a0c$var$__assign({}, $50dd583e1e079a0c$var$fullNameExceptions), {
    delete: function(databaseName) {
        var db = new $50dd583e1e079a0c$var$Dexie(databaseName, {
            addons: []
        });
        return db.delete();
    },
    exists: function(name) {
        return new $50dd583e1e079a0c$var$Dexie(name, {
            addons: []
        }).open().then(function(db) {
            db.close();
            return true;
        }).catch("NoSuchDatabaseError", function() {
            return false;
        });
    },
    getDatabaseNames: function(cb) {
        try {
            return $50dd583e1e079a0c$var$getDatabaseNames($50dd583e1e079a0c$var$Dexie.dependencies).then(cb);
        } catch (_a) {
            return $50dd583e1e079a0c$var$rejection(new $50dd583e1e079a0c$var$exceptions.MissingAPI());
        }
    },
    defineClass: function() {
        function Class(content) {
            $50dd583e1e079a0c$var$extend(this, content);
        }
        return Class;
    },
    ignoreTransaction: function(scopeFunc) {
        return $50dd583e1e079a0c$var$PSD.trans ? $50dd583e1e079a0c$var$usePSD($50dd583e1e079a0c$var$PSD.transless, scopeFunc) : scopeFunc();
    },
    vip: $50dd583e1e079a0c$var$vip,
    async: function(generatorFn) {
        return function() {
            try {
                var rv = $50dd583e1e079a0c$var$awaitIterator(generatorFn.apply(this, arguments));
                if (!rv || typeof rv.then !== "function") return $50dd583e1e079a0c$var$DexiePromise.resolve(rv);
                return rv;
            } catch (e) {
                return $50dd583e1e079a0c$var$rejection(e);
            }
        };
    },
    spawn: function(generatorFn, args, thiz) {
        try {
            var rv = $50dd583e1e079a0c$var$awaitIterator(generatorFn.apply(thiz, args || []));
            if (!rv || typeof rv.then !== "function") return $50dd583e1e079a0c$var$DexiePromise.resolve(rv);
            return rv;
        } catch (e) {
            return $50dd583e1e079a0c$var$rejection(e);
        }
    },
    currentTransaction: {
        get: function() {
            return $50dd583e1e079a0c$var$PSD.trans || null;
        }
    },
    waitFor: function(promiseOrFunction, optionalTimeout) {
        var promise = $50dd583e1e079a0c$var$DexiePromise.resolve(typeof promiseOrFunction === "function" ? $50dd583e1e079a0c$var$Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 60000);
        return $50dd583e1e079a0c$var$PSD.trans ? $50dd583e1e079a0c$var$PSD.trans.waitFor(promise) : promise;
    },
    Promise: $50dd583e1e079a0c$var$DexiePromise,
    debug: {
        get: function() {
            return $50dd583e1e079a0c$var$debug;
        },
        set: function(value) {
            $50dd583e1e079a0c$var$setDebug(value, value === "dexie" ? function() {
                return true;
            } : $50dd583e1e079a0c$var$dexieStackFrameFilter);
        }
    },
    derive: $50dd583e1e079a0c$var$derive,
    extend: $50dd583e1e079a0c$var$extend,
    props: $50dd583e1e079a0c$var$props,
    override: $50dd583e1e079a0c$var$override,
    Events: $50dd583e1e079a0c$var$Events,
    on: $50dd583e1e079a0c$var$globalEvents,
    liveQuery: $50dd583e1e079a0c$export$6a9705d8f6f38796,
    extendObservabilitySet: $50dd583e1e079a0c$var$extendObservabilitySet,
    getByKeyPath: $50dd583e1e079a0c$var$getByKeyPath,
    setByKeyPath: $50dd583e1e079a0c$var$setByKeyPath,
    delByKeyPath: $50dd583e1e079a0c$var$delByKeyPath,
    shallowClone: $50dd583e1e079a0c$var$shallowClone,
    deepClone: $50dd583e1e079a0c$var$deepClone,
    getObjectDiff: $50dd583e1e079a0c$var$getObjectDiff,
    cmp: $50dd583e1e079a0c$var$cmp,
    asap: $50dd583e1e079a0c$var$asap$1,
    minKey: $50dd583e1e079a0c$var$minKey,
    addons: [],
    connections: $50dd583e1e079a0c$var$connections,
    errnames: $50dd583e1e079a0c$var$errnames,
    dependencies: $50dd583e1e079a0c$var$domDeps,
    semVer: $50dd583e1e079a0c$var$DEXIE_VERSION,
    version: $50dd583e1e079a0c$var$DEXIE_VERSION.split(".").map(function(n) {
        return parseInt(n);
    }).reduce(function(p, c, i) {
        return p + c / Math.pow(10, i * 2);
    })
}));
$50dd583e1e079a0c$var$Dexie.maxKey = $50dd583e1e079a0c$var$getMaxKey($50dd583e1e079a0c$var$Dexie.dependencies.IDBKeyRange);
if (typeof dispatchEvent !== "undefined" && typeof addEventListener !== "undefined") {
    $50dd583e1e079a0c$var$globalEvents($50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(updatedParts) {
        if (!$50dd583e1e079a0c$var$propagatingLocally) {
            var event_1;
            if ($50dd583e1e079a0c$var$isIEOrEdge) {
                event_1 = document.createEvent("CustomEvent");
                event_1.initCustomEvent($50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME, true, true, updatedParts);
            } else event_1 = new CustomEvent($50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME, {
                detail: updatedParts
            });
            $50dd583e1e079a0c$var$propagatingLocally = true;
            dispatchEvent(event_1);
            $50dd583e1e079a0c$var$propagatingLocally = false;
        }
    });
    addEventListener($50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME, function(_a) {
        var detail = _a.detail;
        if (!$50dd583e1e079a0c$var$propagatingLocally) $50dd583e1e079a0c$var$propagateLocally(detail);
    });
}
function $50dd583e1e079a0c$var$propagateLocally(updateParts) {
    var wasMe = $50dd583e1e079a0c$var$propagatingLocally;
    try {
        $50dd583e1e079a0c$var$propagatingLocally = true;
        $50dd583e1e079a0c$var$globalEvents.storagemutated.fire(updateParts);
    } finally{
        $50dd583e1e079a0c$var$propagatingLocally = wasMe;
    }
}
var $50dd583e1e079a0c$var$propagatingLocally = false;
if (typeof BroadcastChannel !== "undefined") {
    var $50dd583e1e079a0c$var$bc_1 = new BroadcastChannel($50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME);
    if (typeof $50dd583e1e079a0c$var$bc_1.unref === "function") $50dd583e1e079a0c$var$bc_1.unref();
    $50dd583e1e079a0c$var$globalEvents($50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
        if (!$50dd583e1e079a0c$var$propagatingLocally) $50dd583e1e079a0c$var$bc_1.postMessage(changedParts);
    });
    $50dd583e1e079a0c$var$bc_1.onmessage = function(ev) {
        if (ev.data) $50dd583e1e079a0c$var$propagateLocally(ev.data);
    };
} else if (typeof self !== "undefined" && typeof navigator !== "undefined") {
    $50dd583e1e079a0c$var$globalEvents($50dd583e1e079a0c$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
        try {
            if (!$50dd583e1e079a0c$var$propagatingLocally) {
                if (typeof localStorage !== "undefined") localStorage.setItem($50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME, JSON.stringify({
                    trig: Math.random(),
                    changedParts: changedParts
                }));
                if (typeof self["clients"] === "object") $50dd583e1e079a0c$var$__spreadArray([], self["clients"].matchAll({
                    includeUncontrolled: true
                }), true).forEach(function(client) {
                    return client.postMessage({
                        type: $50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME,
                        changedParts: changedParts
                    });
                });
            }
        } catch (_a) {}
    });
    if (typeof addEventListener !== "undefined") addEventListener("storage", function(ev) {
        if (ev.key === $50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME) {
            var data = JSON.parse(ev.newValue);
            if (data) $50dd583e1e079a0c$var$propagateLocally(data.changedParts);
        }
    });
    var $50dd583e1e079a0c$var$swContainer = self.document && navigator.serviceWorker;
    if ($50dd583e1e079a0c$var$swContainer) $50dd583e1e079a0c$var$swContainer.addEventListener("message", $50dd583e1e079a0c$var$propagateMessageLocally);
}
function $50dd583e1e079a0c$var$propagateMessageLocally(_a) {
    var data = _a.data;
    if (data && data.type === $50dd583e1e079a0c$var$STORAGE_MUTATED_DOM_EVENT_NAME) $50dd583e1e079a0c$var$propagateLocally(data.changedParts);
}
$50dd583e1e079a0c$var$DexiePromise.rejectionMapper = $50dd583e1e079a0c$var$mapError;
$50dd583e1e079a0c$var$setDebug($50dd583e1e079a0c$var$debug, $50dd583e1e079a0c$var$dexieStackFrameFilter);


window.THREE = $04ce9c8dcd7d39f0$exports;
window.aptproto_api = $d76f6d4dfc9a3307$exports;
window.dexie = $50dd583e1e079a0c$exports;
if (typeof bsky !== "undefined" && bsky && typeof bsky.libLoaded === "function") bsky.libLoaded();

})();
//# sourceMappingURL=lib.js.map
